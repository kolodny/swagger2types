import { generateApi } from 'swagger-typescript-api';
import type { Spec } from 'swagger-schema-official';

type Params = Parameters<typeof generateApi>[0];

const zeroWidthSpace = '\u200B';

// @ts-ignore
const esmDirname = () => import('./dirname.mjs').then((m): string => m.default);
const dirname = typeof __dirname === 'string' ? __dirname : esmDirname();

export const generate = async (spec: Spec, params?: Params) => {
  const dir = await dirname;
  const extraPath = `${dir}/../template/extra.ejs`;

  const fixer = (key: string, value: any) => {
    const fix = key === 'description' || key === 'summary';
    const isString = typeof value === 'string';

    return fix && isString ? value.replace('*/', `*${zeroWidthSpace}/`) : value;
  };

  const fixedSpec = JSON.parse(JSON.stringify(spec, fixer));

  const generated = await generateApi({
    spec: fixedSpec,
    generateClient: false,
    extraTemplates: [{ name: 'extra', path: extraPath }],
    patch: true,
    output: false,
    silent: true,
    hooks: {
      onInit(configuration, genProcess) {
        const getInfoTypes = genProcess.schemaRoutes.getRequestInfoTypes;
        genProcess.schemaRoutes.getRequestInfoTypes = (types: any) => {
          const responses = Object.keys(types.requestInfos);

          const result = getInfoTypes.call(genProcess.schemaRoutes, types);
          const isSuccess = responses.join(',') === 'default';
          for (const r of result ?? []) r.isSuccess ||= isSuccess;

          return result;
        };
        return params?.hooks?.onInit?.(configuration, genProcess);
      },
    },
    ...params,
  });

  const allContent = generated.files.map((f) => f.fileContent).join('\n');

  const noExports = allContent.replace(/^export\s/gm, '');
  const ignores = `/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n// prettier-ignore-file\n// @flow-ignore-file\n\n`;
  const prefix = `// GENERATED FILE - DO NOT EDIT\n// Generated by swagger2types\n\n`;
  const exportingRoutes = `${ignores}${prefix}${noExports}\nexport type { Routes };\n`;
  return exportingRoutes;
};
