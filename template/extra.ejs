<%
const { apiConfig, utils, routes, config } = it;

const processRoute = (route) => {
  const { path, method, payload, query, pathParams, headers, parameters } = route.request;

  const requestLines = [];

  const add = (enabled, name, type) => {
    if (enabled) {
      requestLines.push(`${name}: ${type}`);
    } else {
      requestLines.push(`${name}?: never`);
    }
  }

  add(pathParams, 'params', pathParams?.type);
  add(headers, 'headers', headers?.type);
  add(query, 'query', query?.type);
  add(payload, 'body', payload?.type);

  const key = `${method.toUpperCase()} ${path}`;

  const blurb = route.raw.description ?? route.raw.summary;

  const description = blurb ? `/** ${utils.formatDescription(blurb)} */\n` : ''

  return `${description}['${key}']: {Request: { ${requestLines.join(', ')} }, Response: ${route.response.type}};\n\n`;
}

const allRoutes = [...routes.outOfModule, ...(routes.combined).flatMap(item => item.routes)].filter(Boolean);

%>

type $_Routes = {
  <% for (const route of allRoutes) { %>
    <%~ processRoute(route) %>
  <% } %>
}
