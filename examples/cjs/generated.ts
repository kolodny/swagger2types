/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// prettier-ignore-file
// @flow-ignore-file

// GENERATED FILE - DO NOT EDIT
// Generated by swagger2types

interface Root {
  /** @format uri-template */
  current_user_url: string;
  /** @format uri-template */
  current_user_authorizations_html_url: string;
  /** @format uri-template */
  authorizations_url: string;
  /** @format uri-template */
  code_search_url: string;
  /** @format uri-template */
  commit_search_url: string;
  /** @format uri-template */
  emails_url: string;
  /** @format uri-template */
  emojis_url: string;
  /** @format uri-template */
  events_url: string;
  /** @format uri-template */
  feeds_url: string;
  /** @format uri-template */
  followers_url: string;
  /** @format uri-template */
  following_url: string;
  /** @format uri-template */
  gists_url: string;
  /**
   * @deprecated
   * @format uri-template
   */
  hub_url?: string;
  /** @format uri-template */
  issue_search_url: string;
  /** @format uri-template */
  issues_url: string;
  /** @format uri-template */
  keys_url: string;
  /** @format uri-template */
  label_search_url: string;
  /** @format uri-template */
  notifications_url: string;
  /** @format uri-template */
  organization_url: string;
  /** @format uri-template */
  organization_repositories_url: string;
  /** @format uri-template */
  organization_teams_url: string;
  /** @format uri-template */
  public_gists_url: string;
  /** @format uri-template */
  rate_limit_url: string;
  /** @format uri-template */
  repository_url: string;
  /** @format uri-template */
  repository_search_url: string;
  /** @format uri-template */
  current_user_repositories_url: string;
  /** @format uri-template */
  starred_url: string;
  /** @format uri-template */
  starred_gists_url: string;
  /** @format uri-template */
  topic_search_url?: string;
  /** @format uri-template */
  user_url: string;
  /** @format uri-template */
  user_organizations_url: string;
  /** @format uri-template */
  user_repositories_url: string;
  /** @format uri-template */
  user_search_url: string;
}

/** The package's language or package management ecosystem. */
enum SecurityAdvisoryEcosystems {
  Rubygems = "rubygems",
  Npm = "npm",
  Pip = "pip",
  Maven = "maven",
  Nuget = "nuget",
  Composer = "composer",
  Go = "go",
  Rust = "rust",
  Erlang = "erlang",
  Actions = "actions",
  Pub = "pub",
  Other = "other",
  Swift = "swift",
}

/** A vulnerability describing the product and its affected versions within a GitHub Security Advisory. */
interface Vulnerability {
  /** The name of the package affected by the vulnerability. */
  package: {
    /** The package's language or package management ecosystem. */
    ecosystem: SecurityAdvisoryEcosystems;
    /** The unique package name within its ecosystem. */
    name: string | null;
  };
  /** The range of the package versions affected by the vulnerability. */
  vulnerable_version_range: string | null;
  /** The package version that resolves the vulnerability. */
  first_patched_version: string | null;
  /** The functions in the package that are affected by the vulnerability. */
  vulnerable_functions: string[] | null;
}

type CvssSeverities = {
  cvss_v3?: {
    /** The CVSS 3 vector string. */
    vector_string: string | null;
    /**
     * The CVSS 3 score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
  cvss_v4?: {
    /** The CVSS 4 vector string. */
    vector_string: string | null;
    /**
     * The CVSS 4 score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
};

/** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
type SecurityAdvisoryEpss = {
  /**
   * @min 0
   * @max 100
   */
  percentage?: number;
  /**
   * @min 0
   * @max 100
   */
  percentile?: number;
} | null;

/**
 * Simple User
 * A GitHub user.
 */
interface SimpleUser {
  name?: string | null;
  email?: string | null;
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "public" */
  user_view_type?: string;
}

/** The type of credit the user is receiving. */
enum SecurityAdvisoryCreditTypes {
  Analyst = "analyst",
  Finder = "finder",
  Reporter = "reporter",
  Coordinator = "coordinator",
  RemediationDeveloper = "remediation_developer",
  RemediationReviewer = "remediation_reviewer",
  RemediationVerifier = "remediation_verifier",
  Tool = "tool",
  Sponsor = "sponsor",
  Other = "other",
}

/** A GitHub Security Advisory. */
interface GlobalAdvisory {
  /** The GitHub Security Advisory ID. */
  ghsa_id: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id: string | null;
  /** The API URL for the advisory. */
  url: string;
  /**
   * The URL for the advisory.
   * @format uri
   */
  html_url: string;
  /**
   * The API URL for the repository advisory.
   * @format uri
   */
  repository_advisory_url: string | null;
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory entails.
   * @maxLength 65535
   */
  description: string | null;
  /** The type of advisory. */
  type: "reviewed" | "unreviewed" | "malware";
  /** The severity of the advisory. */
  severity: "critical" | "high" | "medium" | "low" | "unknown";
  /**
   * The URL of the advisory's source code.
   * @format uri
   */
  source_code_location: string | null;
  identifiers:
    | {
        /** The type of identifier. */
        type: "CVE" | "GHSA";
        /** The identifier value. */
        value: string;
      }[]
    | null;
  references: string[] | null;
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   * @format date-time
   */
  published_at: string;
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   * @format date-time
   */
  updated_at: string;
  /**
   * The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
   * @format date-time
   */
  github_reviewed_at: string | null;
  /**
   * The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
   * This field is only populated when the advisory is imported from the National Vulnerability Database.
   * @format date-time
   */
  nvd_published_at: string | null;
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @format date-time
   */
  withdrawn_at: string | null;
  /** The products and respective version ranges affected by the advisory. */
  vulnerabilities: Vulnerability[] | null;
  cvss: {
    /** The CVSS vector. */
    vector_string: string | null;
    /**
     * The CVSS score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
  cvss_severities?: CvssSeverities;
  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
  epss?: SecurityAdvisoryEpss;
  cwes:
    | {
        /** The Common Weakness Enumeration (CWE) identifier. */
        cwe_id: string;
        /** The name of the CWE. */
        name: string;
      }[]
    | null;
  /** The users who contributed to the advisory. */
  credits:
    | {
        /** A GitHub user. */
        user: SimpleUser;
        /** The type of credit the user is receiving. */
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
}

/**
 * Basic Error
 * Basic Error
 */
interface BasicError {
  message?: string;
  documentation_url?: string;
  url?: string;
  status?: string;
}

/**
 * Validation Error Simple
 * Validation Error Simple
 */
interface ValidationErrorSimple {
  message: string;
  documentation_url: string;
  errors?: string[];
}

/**
 * Enterprise
 * An enterprise on GitHub.
 */
interface Enterprise {
  /** A short description of the enterprise. */
  description?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   * @format uri
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @format date-time
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /** @format uri */
  avatar_url: string;
}

/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
type Integration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id: string;
  /** @example ""Iv1.25b5d1e65ffc4022"" */
  client_id?: string;
  owner: SimpleUser | Enterprise;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /** @example "The description of the app." */
  description: string | null;
  /**
   * @format uri
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @format uri
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   * @example {"issues":"read","deployments":"write"}
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [key: string]: any;
  };
  /**
   * The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
   * @example ["label","deployment"]
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
   * @example 5
   */
  installations_count?: number;
};

/**
 * The URL to which the payloads will be delivered.
 * @format uri
 * @example "https://example.com/webhook"
 */
type WebhookConfigUrl = string;

/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 * @example ""json""
 */
type WebhookConfigContentType = string;

/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 * @example ""********""
 */
type WebhookConfigSecret = string;

/** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
type WebhookConfigInsecureSsl = string | number;

/**
 * Webhook Configuration
 * Configuration object of the webhook
 */
interface WebhookConfig {
  /** The URL to which the payloads will be delivered. */
  url?: WebhookConfigUrl;
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
  content_type?: WebhookConfigContentType;
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
  secret?: WebhookConfigSecret;
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
  insecure_ssl?: WebhookConfigInsecureSsl;
}

/**
 * Simple webhook delivery
 * Delivery made by a webhook, without request and response information.
 */
interface HookDeliveryItem {
  /**
   * Unique identifier of the webhook delivery.
   * @format int64
   * @example 42
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   */
  guid: string;
  /**
   * Time when the webhook delivery occurred.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  delivered_at: string;
  /**
   * Whether the webhook delivery is a redelivery.
   * @example false
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   */
  duration: number;
  /**
   * Describes the response returned after attempting the delivery.
   * @example "failed to connect"
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @format int64
   * @example 123
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @format int64
   * @example 123
   */
  repository_id: number | null;
  /**
   * Time when the webhook delivery was throttled.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  throttled_at?: string | null;
}

/**
 * Scim Error
 * Scim Error
 */
interface ScimError {
  message?: string | null;
  documentation_url?: string | null;
  detail?: string | null;
  status?: number;
  scimType?: string | null;
  schemas?: string[];
}

/**
 * Validation Error
 * Validation Error
 */
interface ValidationError {
  message: string;
  documentation_url: string;
  errors?: {
    resource?: string;
    field?: string;
    message?: string;
    code: string;
    index?: number;
    value?: string | null | number | null | string[] | null;
  }[];
}

/**
 * Webhook delivery
 * Delivery made by a webhook.
 */
interface HookDelivery {
  /**
   * Unique identifier of the delivery.
   * @example 42
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   */
  guid: string;
  /**
   * Time when the delivery was delivered.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  delivered_at: string;
  /**
   * Whether the delivery is a redelivery.
   * @example false
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   */
  duration: number;
  /**
   * Description of the status of the attempted delivery
   * @example "failed to connect"
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @example 123
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @example 123
   */
  repository_id: number | null;
  /**
   * Time when the webhook delivery was throttled.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  throttled_at?: string | null;
  /**
   * The URL target of the delivery.
   * @example "https://www.example.com"
   */
  url?: string;
  request: {
    /** The request headers sent with the webhook delivery. */
    headers: Record<string, any>;
    /** The webhook payload. */
    payload: Record<string, any>;
  };
  response: {
    /** The response headers received when the delivery was made. */
    headers: Record<string, any>;
    /** The response payload received. */
    payload: string | null;
  };
}

/**
 * Integration Installation Request
 * Request to install an integration on a target
 */
interface IntegrationInstallationRequest {
  /**
   * Unique identifier of the request installation.
   * @example 42
   */
  id: number;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id?: string;
  account: SimpleUser | Enterprise;
  /** A GitHub user. */
  requester: SimpleUser;
  /**
   * @format date-time
   * @example "2022-07-08T16:18:44-04:00"
   */
  created_at: string;
}

/**
 * App Permissions
 * The permissions granted to the user access token.
 * @example {"contents":"read","issues":"read","deployments":"write","single_file":"read"}
 */
interface AppPermissions {
  /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. */
  actions?: "read" | "write";
  /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. */
  administration?: "read" | "write";
  /** The level of permission to grant the access token for checks on code. */
  checks?: "read" | "write";
  /** The level of permission to grant the access token to create, edit, delete, and list Codespaces. */
  codespaces?: "read" | "write";
  /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. */
  contents?: "read" | "write";
  /** The level of permission to grant the access token to manage Dependabot secrets. */
  dependabot_secrets?: "read" | "write";
  /** The level of permission to grant the access token for deployments and deployment statuses. */
  deployments?: "read" | "write";
  /** The level of permission to grant the access token for managing repository environments. */
  environments?: "read" | "write";
  /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. */
  issues?: "read" | "write";
  /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. */
  metadata?: "read" | "write";
  /** The level of permission to grant the access token for packages published to GitHub Packages. */
  packages?: "read" | "write";
  /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. */
  pages?: "read" | "write";
  /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. */
  pull_requests?: "read" | "write";
  /** The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property. */
  repository_custom_properties?: "read" | "write";
  /** The level of permission to grant the access token to manage the post-receive hooks for a repository. */
  repository_hooks?: "read" | "write";
  /** The level of permission to grant the access token to manage repository projects, columns, and cards. */
  repository_projects?: "read" | "write" | "admin";
  /** The level of permission to grant the access token to view and manage secret scanning alerts. */
  secret_scanning_alerts?: "read" | "write";
  /** The level of permission to grant the access token to manage repository secrets. */
  secrets?: "read" | "write";
  /** The level of permission to grant the access token to view and manage security events like code scanning alerts. */
  security_events?: "read" | "write";
  /** The level of permission to grant the access token to manage just a single file. */
  single_file?: "read" | "write";
  /** The level of permission to grant the access token for commit statuses. */
  statuses?: "read" | "write";
  /** The level of permission to grant the access token to manage Dependabot alerts. */
  vulnerability_alerts?: "read" | "write";
  /** The level of permission to grant the access token to update GitHub Actions workflow files. */
  workflows?: "write";
  /** The level of permission to grant the access token for organization teams and members. */
  members?: "read" | "write";
  /** The level of permission to grant the access token to manage access to an organization. */
  organization_administration?: "read" | "write";
  /** The level of permission to grant the access token for custom repository roles management. */
  organization_custom_roles?: "read" | "write";
  /** The level of permission to grant the access token for custom organization roles management. */
  organization_custom_org_roles?: "read" | "write";
  /** The level of permission to grant the access token for custom property management. */
  organization_custom_properties?: "read" | "write" | "admin";
  /** The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change. */
  organization_copilot_seat_management?: "write";
  /** The level of permission to grant the access token to view and manage announcement banners for an organization. */
  organization_announcement_banners?: "read" | "write";
  /** The level of permission to grant the access token to view events triggered by an activity in an organization. */
  organization_events?: "read";
  /** The level of permission to grant the access token to manage the post-receive hooks for an organization. */
  organization_hooks?: "read" | "write";
  /** The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization. */
  organization_personal_access_tokens?: "read" | "write";
  /** The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization. */
  organization_personal_access_token_requests?: "read" | "write";
  /** The level of permission to grant the access token for viewing an organization's plan. */
  organization_plan?: "read";
  /** The level of permission to grant the access token to manage organization projects and projects public preview (where available). */
  organization_projects?: "read" | "write" | "admin";
  /** The level of permission to grant the access token for organization packages published to GitHub Packages. */
  organization_packages?: "read" | "write";
  /** The level of permission to grant the access token to manage organization secrets. */
  organization_secrets?: "read" | "write";
  /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. */
  organization_self_hosted_runners?: "read" | "write";
  /** The level of permission to grant the access token to view and manage users blocked by the organization. */
  organization_user_blocking?: "read" | "write";
  /** The level of permission to grant the access token to manage team discussions and related comments. */
  team_discussions?: "read" | "write";
  /** The level of permission to grant the access token to manage the email addresses belonging to a user. */
  email_addresses?: "read" | "write";
  /** The level of permission to grant the access token to manage the followers belonging to a user. */
  followers?: "read" | "write";
  /** The level of permission to grant the access token to manage git SSH keys. */
  git_ssh_keys?: "read" | "write";
  /** The level of permission to grant the access token to view and manage GPG keys belonging to a user. */
  gpg_keys?: "read" | "write";
  /** The level of permission to grant the access token to view and manage interaction limits on a repository. */
  interaction_limits?: "read" | "write";
  /** The level of permission to grant the access token to manage the profile settings belonging to a user. */
  profile?: "write";
  /** The level of permission to grant the access token to list and manage repositories a user is starring. */
  starring?: "read" | "write";
}

/**
 * Simple User
 * A GitHub user.
 */
type NullableSimpleUser = {
  name?: string | null;
  email?: string | null;
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "public" */
  user_view_type?: string;
};

/**
 * Installation
 * Installation
 */
interface Installation {
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  account: SimpleUser | Enterprise | null;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: "all" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/app/installations/1/access_tokens"
   */
  access_tokens_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/installation/repositories"
   */
  repositories_url: string;
  /**
   * @format uri
   * @example "https://github.com/organizations/github/settings/installations/1"
   */
  html_url: string;
  /** @example 1 */
  app_id: number;
  /** The ID of the user or organization this token is being scoped to. */
  target_id: number;
  /** @example "Organization" */
  target_type: string;
  /** The permissions granted to the user access token. */
  permissions: AppPermissions;
  events: string[];
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @example "config.yaml" */
  single_file_name: string | null;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
  /** @example "github-actions" */
  app_slug: string;
  /** A GitHub user. */
  suspended_by: NullableSimpleUser;
  /** @format date-time */
  suspended_at: string | null;
  /** @example ""test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"" */
  contact_email?: string | null;
}

/**
 * License Simple
 * License Simple
 */
type NullableLicenseSimple = {
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /** @example "MIT" */
  spdx_id: string | null;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /** @format uri */
  html_url?: string;
};

/**
 * Repository
 * A repository on GitHub.
 */
interface Repository {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @deprecated
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
  /** The status of the code search index for this repository */
  code_search_index_status?: {
    lexical_search_ok?: boolean;
    lexical_commit_sha?: string;
  };
}

/**
 * Installation Token
 * Authentication token for a GitHub App installed on a user or org.
 */
interface InstallationToken {
  token: string;
  expires_at: string;
  /** The permissions granted to the user access token. */
  permissions?: AppPermissions;
  repository_selection?: "all" | "selected";
  repositories?: Repository[];
  /** @example "README.md" */
  single_file?: string;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
}

/** Scoped Installation */
type NullableScopedInstallation = {
  /** The permissions granted to the user access token. */
  permissions: AppPermissions;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: "all" | "selected";
  /** @example "config.yaml" */
  single_file_name: string | null;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repositories_url: string;
  /** A GitHub user. */
  account: SimpleUser;
};

/**
 * Authorization
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
interface Authorization {
  /** @format int64 */
  id: number;
  /** @format uri */
  url: string;
  /** A list of scopes that this authorization is in. */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  hashed_token: string | null;
  app: {
    client_id: string;
    name: string;
    /** @format uri */
    url: string;
  };
  note: string | null;
  /** @format uri */
  note_url: string | null;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  created_at: string;
  fingerprint: string | null;
  /** A GitHub user. */
  user?: NullableSimpleUser;
  installation?: NullableScopedInstallation;
  /** @format date-time */
  expires_at: string | null;
}

/**
 * Simple Classroom Repository
 * A GitHub repository view for Classroom
 */
interface SimpleClassroomRepository {
  /**
   * A unique identifier of the repository.
   * @example 1296269
   */
  id: number;
  /**
   * The full, globally unique name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /** Whether the repository is private. */
  private: boolean;
  /**
   * The default branch for the repository.
   * @example "main"
   */
  default_branch: string;
}

/**
 * Organization Simple for Classroom
 * A GitHub organization.
 */
interface SimpleClassroomOrganization {
  /** @example 1 */
  id: number;
  /** @example "github" */
  login: string;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/github"
   */
  html_url: string;
  /** @example "Github - Code thigns happen here" */
  name: string | null;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
}

/**
 * Classroom
 * A GitHub Classroom classroom
 */
interface Classroom {
  /**
   * Unique identifier of the classroom.
   * @example 42
   */
  id: number;
  /**
   * The name of the classroom.
   * @example "Programming Elixir"
   */
  name: string;
  /**
   * Whether classroom is archived.
   * @example false
   */
  archived: boolean;
  /** A GitHub organization. */
  organization: SimpleClassroomOrganization;
  /**
   * The URL of the classroom on GitHub Classroom.
   * @example "https://classroom.github.com/classrooms/1-programming-elixir"
   */
  url: string;
}

/**
 * Classroom Assignment
 * A GitHub Classroom assignment
 */
interface ClassroomAssignment {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;
  /**
   * Assignment title.
   * @example "Intro to Binaries"
   */
  title: string;
  /**
   * Whether it's a group assignment or individual assignment.
   * @example "individual"
   */
  type: "individual" | "group";
  /**
   * The link that a student can use to accept the assignment.
   * @example "https://classroom.github.com/a/Lx7jiUgx"
   */
  invite_link: string;
  /**
   * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;
  /**
   * Sluggified name of the assignment.
   * @example "intro-to-binaries"
   */
  slug: string;
  /**
   * Whether students are admins on created repository when a student accepts the assignment.
   * @example true
   */
  students_are_repo_admins: boolean;
  /**
   * Whether feedback pull request will be created when a student accepts the assignment.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;
  /**
   * The maximum allowable teams for the assignment.
   * @example 0
   */
  max_teams: number | null;
  /**
   * The maximum allowable members per team.
   * @example 0
   */
  max_members: number | null;
  /**
   * The selected editor for the assignment.
   * @example "codespaces"
   */
  editor: string;
  /**
   * The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;
  /**
   * The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;
  /**
   * The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;
  /**
   * The programming language used in the assignment.
   * @example "elixir"
   */
  language: string;
  /**
   * The time at which the assignment is due.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  deadline: string | null;
  /** A GitHub repository view for Classroom */
  starter_code_repository: SimpleClassroomRepository;
  /** A GitHub Classroom classroom */
  classroom: Classroom;
}

/**
 * Simple Classroom User
 * A GitHub user simplified for Classroom.
 */
interface SimpleClassroomUser {
  /** @example 1 */
  id: number;
  /** @example "octocat" */
  login: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
}

/**
 * Simple Classroom
 * A GitHub Classroom classroom
 */
interface SimpleClassroom {
  /**
   * Unique identifier of the classroom.
   * @example 42
   */
  id: number;
  /**
   * The name of the classroom.
   * @example "Programming Elixir"
   */
  name: string;
  /**
   * Returns whether classroom is archived or not.
   * @example false
   */
  archived: boolean;
  /**
   * The url of the classroom on GitHub Classroom.
   * @example "https://classroom.github.com/classrooms/1-programming-elixir"
   */
  url: string;
}

/**
 * Simple Classroom Assignment
 * A GitHub Classroom assignment
 */
interface SimpleClassroomAssignment {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;
  /**
   * Assignment title.
   * @example "Intro to Binaries"
   */
  title: string;
  /**
   * Whether it's a Group Assignment or Individual Assignment.
   * @example "individual"
   */
  type: "individual" | "group";
  /**
   * The link that a student can use to accept the assignment.
   * @example "https://classroom.github.com/a/Lx7jiUgx"
   */
  invite_link: string;
  /**
   * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;
  /**
   * Sluggified name of the assignment.
   * @example "intro-to-binaries"
   */
  slug: string;
  /**
   * Whether students are admins on created repository on accepted assignment.
   * @example true
   */
  students_are_repo_admins: boolean;
  /**
   * Whether feedback pull request will be created on assignment acceptance.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;
  /**
   * The maximum allowable teams for the assignment.
   * @example 0
   */
  max_teams?: number | null;
  /**
   * The maximum allowable members per team.
   * @example 0
   */
  max_members?: number | null;
  /**
   * The selected editor for the assignment.
   * @example "codespaces"
   */
  editor: string;
  /**
   * The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;
  /**
   * The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;
  /**
   * The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;
  /**
   * The programming language used in the assignment.
   * @example "elixir"
   */
  language: string;
  /**
   * The time at which the assignment is due.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  deadline: string | null;
  /** A GitHub Classroom classroom */
  classroom: SimpleClassroom;
}

/**
 * Classroom Accepted Assignment
 * A GitHub Classroom accepted assignment
 */
interface ClassroomAcceptedAssignment {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment has been submitted.
   * @example true
   */
  submitted: boolean;
  /**
   * Whether a submission passed.
   * @example true
   */
  passing: boolean;
  /**
   * Count of student commits.
   * @example 5
   */
  commit_count: number;
  /**
   * Most recent grade.
   * @example "10/10"
   */
  grade: string;
  students: SimpleClassroomUser[];
  /** A GitHub repository view for Classroom */
  repository: SimpleClassroomRepository;
  /** A GitHub Classroom assignment */
  assignment: SimpleClassroomAssignment;
}

/**
 * Classroom Assignment Grade
 * Grade for a student or groups GitHub Classroom assignment
 */
interface ClassroomAssignmentGrade {
  /** Name of the assignment */
  assignment_name: string;
  /** URL of the assignment */
  assignment_url: string;
  /** URL of the starter code for the assignment */
  starter_code_url: string;
  /** GitHub username of the student */
  github_username: string;
  /** Roster identifier of the student */
  roster_identifier: string;
  /** Name of the student's assignment repository */
  student_repository_name: string;
  /** URL of the student's assignment repository */
  student_repository_url: string;
  /** Timestamp of the student's assignment submission */
  submission_timestamp: string;
  /** Number of points awarded to the student */
  points_awarded: number;
  /** Number of points available for the assignment */
  points_available: number;
  /** If a group assignment, name of the group the student is in */
  group_name?: string;
}

/**
 * Code Of Conduct
 * Code Of Conduct
 */
interface CodeOfConduct {
  /** @example "contributor_covenant" */
  key: string;
  /** @example "Contributor Covenant" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/codes_of_conduct/contributor_covenant"
   */
  url: string;
  /**
   * @example "# Contributor Covenant Code of Conduct
   *
   * ## Our Pledge
   *
   * In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
   *
   * ## Our Standards
   *
   * Examples of behavior that contributes to creating a positive environment include:
   *
   * * Using welcoming and inclusive language
   * * Being respectful of differing viewpoints and experiences
   * * Gracefully accepting constructive criticism
   * * Focusing on what is best for the community
   * * Showing empathy towards other community members
   *
   * Examples of unacceptable behavior by participants include:
   *
   * * The use of sexualized language or imagery and unwelcome sexual attention or advances
   * * Trolling, insulting/derogatory comments, and personal or political attacks
   * * Public or private harassment
   * * Publishing others' private information, such as a physical or electronic address, without explicit permission
   * * Other conduct which could reasonably be considered inappropriate in a professional setting
   *
   * ## Our Responsibilities
   *
   * Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
   *                   to any instances of unacceptable behavior.
   *
   * Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
   *
   * ## Scope
   *
   * This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
   *                   posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
   *
   * ## Enforcement
   *
   * Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
   *
   * Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
   *
   * ## Attribution
   *
   * This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).
   * "
   */
  body?: string;
  /** @format uri */
  html_url: string | null;
}

/** A code security configuration */
interface CodeSecurityConfiguration {
  /** The ID of the code security configuration */
  id?: number;
  /** The name of the code security configuration. Must be unique within the organization. */
  name?: string;
  /** The type of the code security configuration. */
  target_type?: "global" | "organization" | "enterprise";
  /** A description of the code security configuration */
  description?: string;
  /** The enablement status of GitHub Advanced Security */
  advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
  /** The enablement status of Dependency Graph */
  dependency_graph?: "enabled" | "disabled" | "not_set";
  /** The enablement status of Automatic dependency submission */
  dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
  /** Feature options for Automatic dependency submission */
  dependency_graph_autosubmit_action_options?: {
    /** Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
    labeled_runners?: boolean;
  };
  /** The enablement status of Dependabot alerts */
  dependabot_alerts?: "enabled" | "disabled" | "not_set";
  /** The enablement status of Dependabot security updates */
  dependabot_security_updates?: "enabled" | "disabled" | "not_set";
  /** Feature options for code scanning */
  code_scanning_options?: object | null;
  /** The enablement status of code scanning default setup */
  code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
  /** Feature options for code scanning default setup */
  code_scanning_default_setup_options?: {
    /** Whether to use labeled runners or standard GitHub runners. */
    runner_type?: "standard" | "labeled" | "not_set" | null;
    /** The label of the runner to use for code scanning when runner_type is 'labeled'. */
    runner_label?: string | null;
  };
  /** The enablement status of code scanning delegated alert dismissal */
  code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning */
  secret_scanning?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning push protection */
  secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning delegated bypass */
  secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
  /** Feature options for secret scanning delegated bypass */
  secret_scanning_delegated_bypass_options?: {
    /** The bypass reviewers for secret scanning delegated bypass */
    reviewers?: {
      /** The ID of the team or role selected as a bypass reviewer */
      reviewer_id: number;
      /** The type of the bypass reviewer */
      reviewer_type: "TEAM" | "ROLE";
    }[];
  };
  /** The enablement status of secret scanning validity checks */
  secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning non-provider patterns */
  secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
  /** The enablement status of Copilot secret scanning */
  secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning delegated alert dismissal */
  secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
  /** The enablement status of private vulnerability reporting */
  private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
  /** The enforcement status for a security configuration */
  enforcement?: "enforced" | "unenforced";
  /**
   * The URL of the configuration
   * @format uri
   */
  url?: string;
  /**
   * The URL of the configuration
   * @format uri
   */
  html_url?: string;
  /** @format date-time */
  created_at?: string;
  /** @format date-time */
  updated_at?: string;
}

/** Feature options for code scanning default setup */
type CodeScanningDefaultSetupOptions = {
  /** Whether to use labeled runners or standard GitHub runners. */
  runner_type?: "standard" | "labeled" | "not_set";
  /** The label of the runner to use for code scanning default setup when runner_type is 'labeled'. */
  runner_label?: string | null;
};

/** A list of default code security configurations */
type CodeSecurityDefaultConfigurations = {
  /** The visibility of newly created repositories for which the code security configuration will be applied to by default */
  default_for_new_repos?: "public" | "private_and_internal" | "all";
  /** A code security configuration */
  configuration?: CodeSecurityConfiguration;
}[];

/**
 * Simple Repository
 * A GitHub repository.
 */
interface SimpleRepository {
  /**
   * A unique identifier of the repository.
   * @format int64
   * @example 1296269
   */
  id: number;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Whether the repository is private. */
  private: boolean;
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The repository description.
   * @example "This your first repo!"
   */
  description: string | null;
  /** Whether the repository is a fork. */
  fork: boolean;
  /**
   * The URL to get more information about the repository from the GitHub API.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * A template for the API URL to download the repository as an archive.
   * @example "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * The API URL to list the downloads on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * The API URL to list the forks of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * The API URL to list the hooks on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
}

/** Repositories associated with a code security configuration and attachment status */
interface CodeSecurityConfigurationRepositories {
  /** The attachment status of the code security configuration on the repository. */
  status?:
    | "attached"
    | "attaching"
    | "detached"
    | "removed"
    | "enforced"
    | "failed"
    | "updating"
    | "removed_by_enterprise";
  /** A GitHub repository. */
  repository?: SimpleRepository;
}

/** The security alert number. */
type AlertNumber = number;

/** Details for the vulnerable package. */
interface DependabotAlertPackage {
  /** The package's language or package management ecosystem. */
  ecosystem: string;
  /** The unique package name within its ecosystem. */
  name: string;
}

/** Details pertaining to one vulnerable version range for the advisory. */
interface DependabotAlertSecurityVulnerability {
  /** Details for the vulnerable package. */
  package: DependabotAlertPackage;
  /** The severity of the vulnerability. */
  severity: "low" | "medium" | "high" | "critical";
  /** Conditions that identify vulnerable versions of this vulnerability's package. */
  vulnerable_version_range: string;
  /** Details pertaining to the package version that patches this vulnerability. */
  first_patched_version: {
    /** The package version that patches this vulnerability. */
    identifier: string;
  } | null;
}

/** Details for the GitHub Security Advisory. */
interface DependabotAlertSecurityAdvisory {
  /** The unique GitHub Security Advisory ID assigned to the advisory. */
  ghsa_id: string;
  /** The unique CVE ID assigned to the advisory. */
  cve_id: string | null;
  /**
   * A short, plain text summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /** A long-form Markdown-supported description of the advisory. */
  description: string;
  /** Vulnerable version range information for the advisory. */
  vulnerabilities: DependabotAlertSecurityVulnerability[];
  /** The severity of the advisory. */
  severity: "low" | "medium" | "high" | "critical";
  /** Details for the advisory pertaining to the Common Vulnerability Scoring System. */
  cvss: {
    /**
     * The overall CVSS score of the advisory.
     * @min 0
     * @max 10
     */
    score: number;
    /** The full CVSS vector string for the advisory. */
    vector_string: string | null;
  };
  cvss_severities?: CvssSeverities;
  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
  epss?: SecurityAdvisoryEpss;
  /** Details for the advisory pertaining to Common Weakness Enumeration. */
  cwes: {
    /** The unique CWE ID. */
    cwe_id: string;
    /** The short, plain text name of the CWE. */
    name: string;
  }[];
  /** Values that identify this advisory among security information sources. */
  identifiers: {
    /** The type of advisory identifier. */
    type: "CVE" | "GHSA";
    /** The value of the advisory identifer. */
    value: string;
  }[];
  /** Links to additional advisory information. */
  references: {
    /**
     * The URL of the reference.
     * @format uri
     */
    url: string;
  }[];
  /**
   * The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  published_at: string;
  /**
   * The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  updated_at: string;
  /**
   * The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  withdrawn_at: string | null;
}

/**
 * The REST API URL of the alert resource.
 * @format uri
 */
type AlertUrl = string;

/**
 * The GitHub URL of the alert resource.
 * @format uri
 */
type AlertHtmlUrl = string;

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type AlertCreatedAt = string;

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type AlertUpdatedAt = string;

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type AlertDismissedAt = string | null;

/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type AlertFixedAt = string | null;

/**
 * The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type AlertAutoDismissedAt = string | null;

/** A Dependabot alert. */
interface DependabotAlertWithRepository {
  /** The security alert number. */
  number: AlertNumber;
  /** The state of the Dependabot alert. */
  state: "auto_dismissed" | "dismissed" | "fixed" | "open";
  /** Details for the vulnerable dependency. */
  dependency: {
    /** Details for the vulnerable package. */
    package?: DependabotAlertPackage;
    /** The full path to the dependency manifest file, relative to the root of the repository. */
    manifest_path?: string;
    /** The execution scope of the vulnerable dependency. */
    scope?: "development" | "runtime" | null;
    /**
     * The vulnerable dependency's relationship to your project.
     *
     * > [!NOTE]
     * > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
     */
    relationship?: "unknown" | "direct" | "transitive" | null;
  };
  /** Details for the GitHub Security Advisory. */
  security_advisory: DependabotAlertSecurityAdvisory;
  /** Details pertaining to one vulnerable version range for the advisory. */
  security_vulnerability: DependabotAlertSecurityVulnerability;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at: AlertUpdatedAt;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The reason that the alert was dismissed. */
  dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | null;
  /**
   * An optional comment associated with the alert's dismissal.
   * @maxLength 280
   */
  dismissed_comment: string | null;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at: AlertFixedAt;
  /** The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  auto_dismissed_at?: AlertAutoDismissedAt;
  /** A GitHub repository. */
  repository: SimpleRepository;
}

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type NullableAlertUpdatedAt = string | null;

/** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
enum SecretScanningAlertState {
  Open = "open",
  Resolved = "resolved",
}

/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
enum SecretScanningAlertResolution {
  FalsePositive = "false_positive",
  WontFix = "wont_fix",
  Revoked = "revoked",
  UsedInTests = "used_in_tests",
}

/** Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
interface SecretScanningLocationCommit {
  /**
   * The file path in the repository
   * @example "/example/secrets.txt"
   */
  path: string;
  /** Line number at which the secret starts in the file */
  start_line: number;
  /** Line number at which the secret ends in the file */
  end_line: number;
  /** The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
  start_column: number;
  /** The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
  end_column: number;
  /**
   * SHA-1 hash ID of the associated blob
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  blob_sha: string;
  /** The API URL to get the associated blob resource */
  blob_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  commit_sha: string;
  /** The API URL to get the associated commit resource */
  commit_url: string;
}

/** Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki. */
interface SecretScanningLocationWikiCommit {
  /**
   * The file path of the wiki page
   * @example "/example/Home.md"
   */
  path: string;
  /** Line number at which the secret starts in the file */
  start_line: number;
  /** Line number at which the secret ends in the file */
  end_line: number;
  /** The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII. */
  start_column: number;
  /** The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII. */
  end_column: number;
  /**
   * SHA-1 hash ID of the associated blob
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  blob_sha: string;
  /**
   * The GitHub URL to get the associated wiki page
   * @example "https://github.com/octocat/Hello-World/wiki/Home/302c0b7e200761c9dd9b57e57db540ee0b4293a5"
   */
  page_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   * @example "302c0b7e200761c9dd9b57e57db540ee0b4293a5"
   */
  commit_sha: string;
  /**
   * The GitHub URL to get the associated wiki commit
   * @example "https://github.com/octocat/Hello-World/wiki/_compare/302c0b7e200761c9dd9b57e57db540ee0b4293a5"
   */
  commit_url: string;
}

/** Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue. */
interface SecretScanningLocationIssueTitle {
  /**
   * The API URL to get the issue where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_title_url: string;
}

/** Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue. */
interface SecretScanningLocationIssueBody {
  /**
   * The API URL to get the issue where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_body_url: string;
}

/** Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue. */
interface SecretScanningLocationIssueComment {
  /**
   * The API URL to get the issue comment where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"
   */
  issue_comment_url: string;
}

/** Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion. */
interface SecretScanningLocationDiscussionTitle {
  /**
   * The URL to the discussion where the secret was detected.
   * @format uri
   * @example "https://github.com/community/community/discussions/39082"
   */
  discussion_title_url: string;
}

/** Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion. */
interface SecretScanningLocationDiscussionBody {
  /**
   * The URL to the discussion where the secret was detected.
   * @format uri
   * @example "https://github.com/community/community/discussions/39082#discussion-4566270"
   */
  discussion_body_url: string;
}

/** Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion. */
interface SecretScanningLocationDiscussionComment {
  /**
   * The API URL to get the discussion comment where the secret was detected.
   * @format uri
   * @example "https://github.com/community/community/discussions/39082#discussioncomment-4158232"
   */
  discussion_comment_url: string;
}

/** Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request. */
interface SecretScanningLocationPullRequestTitle {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846"
   */
  pull_request_title_url: string;
}

/** Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request. */
interface SecretScanningLocationPullRequestBody {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846"
   */
  pull_request_body_url: string;
}

/** Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request. */
interface SecretScanningLocationPullRequestComment {
  /**
   * The API URL to get the pull request comment where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"
   */
  pull_request_comment_url: string;
}

/** Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request. */
interface SecretScanningLocationPullRequestReview {
  /**
   * The API URL to get the pull request review where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846/reviews/80"
   */
  pull_request_review_url: string;
}

/** Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request. */
interface SecretScanningLocationPullRequestReviewComment {
  /**
   * The API URL to get the pull request review comment where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/12"
   */
  pull_request_review_comment_url: string;
}

/** Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request. */
type NullableSecretScanningFirstDetectedLocation =
  | SecretScanningLocationCommit
  | SecretScanningLocationWikiCommit
  | SecretScanningLocationIssueTitle
  | SecretScanningLocationIssueBody
  | SecretScanningLocationIssueComment
  | SecretScanningLocationDiscussionTitle
  | SecretScanningLocationDiscussionBody
  | SecretScanningLocationDiscussionComment
  | SecretScanningLocationPullRequestTitle
  | SecretScanningLocationPullRequestBody
  | SecretScanningLocationPullRequestComment
  | SecretScanningLocationPullRequestReview
  | SecretScanningLocationPullRequestReviewComment
  | null;

interface OrganizationSecretScanningAlert {
  /** The security alert number. */
  number?: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at?: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: NullableAlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
  locations_url?: string;
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
  state?: SecretScanningAlertState;
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** A GitHub user. */
  resolved_by?: NullableSimpleUser;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /** The secret that was detected. */
  secret?: string;
  /** A GitHub repository. */
  repository?: SimpleRepository;
  /** Whether push protection was bypassed for the detected secret. */
  push_protection_bypassed?: boolean | null;
  /** A GitHub user. */
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  /** A GitHub user. */
  push_protection_bypass_request_reviewer?: NullableSimpleUser;
  /** An optional comment when reviewing a push protection bypass. */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /** An optional comment when requesting a push protection bypass. */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
  push_protection_bypass_request_html_url?: string | null;
  /** The comment that was optionally added when this alert was closed */
  resolution_comment?: string | null;
  /** The token status as of the latest validity check. */
  validity?: "active" | "inactive" | "unknown";
  /** Whether the secret was publicly leaked. */
  publicly_leaked?: boolean | null;
  /** Whether the detected secret was found in multiple repositories in the same organization or enterprise. */
  multi_repo?: boolean | null;
  /** A boolean value representing whether or not alert is base64 encoded */
  is_base64_encoded?: boolean | null;
  /** Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request. */
  first_location_detected?: NullableSecretScanningFirstDetectedLocation;
  /** A boolean value representing whether or not the token in the alert was detected in more than one location. */
  has_more_locations?: boolean;
}

/**
 * Actor
 * Actor
 */
interface Actor {
  id: number;
  login: string;
  display_login?: string;
  gravatar_id: string | null;
  /** @format uri */
  url: string;
  /** @format uri */
  avatar_url: string;
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
type NullableMilestone = {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /** @example 1002604 */
  id: number;
  /** @example "MDk6TWlsZXN0b25lMTAwMjYwNA==" */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /**
   * The state of the milestone.
   * @default "open"
   * @example "open"
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /** @example "Tracking milestone for version 1.0" */
  description: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /** @example 4 */
  open_issues: number;
  /** @example 8 */
  closed_issues: number;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: string | null;
};

/**
 * Issue Type
 * The type of issue.
 */
type IssueType = {
  /** The unique identifier of the issue type. */
  id: number;
  /** The node identifier of the issue type. */
  node_id: string;
  /** The name of the issue type. */
  name: string;
  /** The description of the issue type. */
  description: string | null;
  /** The color of the issue type. */
  color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
  /**
   * The time the issue type created.
   * @format date-time
   */
  created_at?: string;
  /**
   * The time the issue type last updated.
   * @format date-time
   */
  updated_at?: string;
  /** The enabled state of the issue type. */
  is_enabled?: boolean;
};

/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
type NullableIntegration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id: string;
  /** @example ""Iv1.25b5d1e65ffc4022"" */
  client_id?: string;
  owner: SimpleUser | Enterprise;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /** @example "The description of the app." */
  description: string | null;
  /**
   * @format uri
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @format uri
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   * @example {"issues":"read","deployments":"write"}
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [key: string]: any;
  };
  /**
   * The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
   * @example ["label","deployment"]
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
   * @example 5
   */
  installations_count?: number;
};

/**
 * author_association
 * How the author is associated with the repository.
 * @example "OWNER"
 */
enum AuthorAssociation {
  COLLABORATOR = "COLLABORATOR",
  CONTRIBUTOR = "CONTRIBUTOR",
  FIRST_TIMER = "FIRST_TIMER",
  FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR",
  MANNEQUIN = "MANNEQUIN",
  MEMBER = "MEMBER",
  NONE = "NONE",
  OWNER = "OWNER",
}

/** Reaction Rollup */
interface ReactionRollup {
  /** @format uri */
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/** Sub-issues Summary */
interface SubIssuesSummary {
  total: number;
  completed: number;
  percent_completed: number;
}

/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
interface Issue {
  /** @format int64 */
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  /** @format uri */
  repository_url: string;
  labels_url: string;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * The reason for the current state
   * @example "not_planned"
   */
  state_reason?: "completed" | "reopened" | "not_planned" | null;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string | null;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example ["bug","registration"]
   */
  labels: (
    | string
    | {
        /** @format int64 */
        id?: number;
        node_id?: string;
        /** @format uri */
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  /** @format date-time */
  closed_at: string | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  draft?: boolean;
  /** A GitHub user. */
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  /** @format uri */
  timeline_url?: string;
  /** The type of issue. */
  type?: IssueType;
  /** A repository on GitHub. */
  repository?: Repository;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
  sub_issues_summary?: SubIssuesSummary;
}

/**
 * Issue Comment
 * Comments provide a way for people to collaborate on an issue.
 */
interface IssueComment {
  /**
   * Unique identifier of the issue comment
   * @format int64
   * @example 42
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  /** @format uri */
  html_url: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /** @format uri */
  issue_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
}

/**
 * Event
 * Event
 */
interface Event {
  id: string;
  type: string | null;
  /** Actor */
  actor: Actor;
  repo: {
    id: number;
    name: string;
    /** @format uri */
    url: string;
  };
  /** Actor */
  org?: Actor;
  payload: {
    action?: string;
    /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    issue?: Issue;
    /** Comments provide a way for people to collaborate on an issue. */
    comment?: IssueComment;
    pages?: {
      page_name?: string;
      title?: string;
      summary?: string | null;
      action?: string;
      sha?: string;
      html_url?: string;
    }[];
  };
  public: boolean;
  /** @format date-time */
  created_at: string | null;
}

/**
 * Link With Type
 * Hypermedia Link with Type
 */
interface LinkWithType {
  href: string;
  type: string;
}

/**
 * Feed
 * Feed
 */
interface Feed {
  /** @example "https://github.com/timeline" */
  timeline_url: string;
  /** @example "https://github.com/{user}" */
  user_url: string;
  /** @example "https://github.com/octocat" */
  current_user_public_url?: string;
  /** @example "https://github.com/octocat.private?token=abc123" */
  current_user_url?: string;
  /** @example "https://github.com/octocat.private.actor?token=abc123" */
  current_user_actor_url?: string;
  /** @example "https://github.com/octocat-org" */
  current_user_organization_url?: string;
  /** @example ["https://github.com/organizations/github/octocat.private.atom?token=abc123"] */
  current_user_organization_urls?: string[];
  /** @example "https://github.com/security-advisories" */
  security_advisories_url?: string;
  /**
   * A feed of discussions for a given repository.
   * @example "https://github.com/{user}/{repo}/discussions"
   */
  repository_discussions_url?: string;
  /**
   * A feed of discussions for a given repository and category.
   * @example "https://github.com/{user}/{repo}/discussions/categories/{category}"
   */
  repository_discussions_category_url?: string;
  _links: {
    /** Hypermedia Link with Type */
    timeline: LinkWithType;
    /** Hypermedia Link with Type */
    user: LinkWithType;
    /** Hypermedia Link with Type */
    security_advisories?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_public?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_actor?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    /** Hypermedia Link with Type */
    repository_discussions?: LinkWithType;
    /** Hypermedia Link with Type */
    repository_discussions_category?: LinkWithType;
  };
}

/**
 * Base Gist
 * Base Gist
 */
interface BaseGist {
  /** @format uri */
  url: string;
  /** @format uri */
  forks_url: string;
  /** @format uri */
  commits_url: string;
  id: string;
  node_id: string;
  /** @format uri */
  git_pull_url: string;
  /** @format uri */
  git_push_url: string;
  /** @format uri */
  html_url: string;
  files: Record<
    string,
    {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      /**
       * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @default "utf-8"
       */
      encoding?: string;
    }
  >;
  public: boolean;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  description: string | null;
  comments: number;
  comments_enabled?: boolean;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @format uri */
  comments_url: string;
  /** A GitHub user. */
  owner?: SimpleUser;
  truncated?: boolean;
  forks?: any[];
  history?: any[];
}

/**
 * Public User
 * Public User
 */
interface PublicUser {
  login: string;
  /** @format int64 */
  id: number;
  user_view_type?: string;
  node_id: string;
  /** @format uri */
  avatar_url: string;
  gravatar_id: string | null;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  /** @format uri */
  subscriptions_url: string;
  /** @format uri */
  organizations_url: string;
  /** @format uri */
  repos_url: string;
  events_url: string;
  /** @format uri */
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  /** @format email */
  email: string | null;
  /** @format email */
  notification_email?: string | null;
  hireable: boolean | null;
  bio: string | null;
  twitter_username?: string | null;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  /** @example 1 */
  private_gists?: number;
  /** @example 2 */
  total_private_repos?: number;
  /** @example 2 */
  owned_private_repos?: number;
  /** @example 1 */
  disk_usage?: number;
  /** @example 3 */
  collaborators?: number;
}

/**
 * Gist History
 * Gist History
 */
interface GistHistory {
  /** A GitHub user. */
  user?: NullableSimpleUser;
  version?: string;
  /** @format date-time */
  committed_at?: string;
  change_status?: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  /** @format uri */
  url?: string;
}

/**
 * Gist Simple
 * Gist Simple
 */
interface GistSimple {
  /** @deprecated */
  forks?:
    | {
        id?: string;
        /** @format uri */
        url?: string;
        /** Public User */
        user?: PublicUser;
        /** @format date-time */
        created_at?: string;
        /** @format date-time */
        updated_at?: string;
      }[]
    | null;
  /** @deprecated */
  history?: GistHistory[] | null;
  /**
   * Gist
   * Gist
   */
  fork_of?: {
    /** @format uri */
    url: string;
    /** @format uri */
    forks_url: string;
    /** @format uri */
    commits_url: string;
    id: string;
    node_id: string;
    /** @format uri */
    git_pull_url: string;
    /** @format uri */
    git_push_url: string;
    /** @format uri */
    html_url: string;
    files: Record<
      string,
      {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
      }
    >;
    public: boolean;
    /** @format date-time */
    created_at: string;
    /** @format date-time */
    updated_at: string;
    description: string | null;
    comments: number;
    comments_enabled?: boolean;
    /** A GitHub user. */
    user: NullableSimpleUser;
    /** @format uri */
    comments_url: string;
    /** A GitHub user. */
    owner?: NullableSimpleUser;
    truncated?: boolean;
    forks?: any[];
    history?: any[];
  };
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: Record<
    string,
    {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      /**
       * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @default "utf-8"
       */
      encoding?: string;
    } | null
  >;
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string | null;
  comments?: number;
  comments_enabled?: boolean;
  user?: string | null;
  comments_url?: string;
  /** A GitHub user. */
  owner?: SimpleUser;
  truncated?: boolean;
}

/**
 * Gist Comment
 * A comment made to a gist.
 */
interface GistComment {
  /** @example 1 */
  id: number;
  /** @example "MDExOkdpc3RDb21tZW50MQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"
   */
  url: string;
  /**
   * The comment text.
   * @maxLength 65535
   * @example "Body of the attachment"
   */
  body: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2011-04-18T23:23:56Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-18T23:23:56Z"
   */
  updated_at: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
}

/**
 * Gist Commit
 * Gist Commit
 */
interface GistCommit {
  /**
   * @format uri
   * @example "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
   */
  url: string;
  /** @example "57a7f021a713b1c5a6a199b54cc514735d2d462f" */
  version: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  change_status: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  /**
   * @format date-time
   * @example "2010-04-14T02:15:15Z"
   */
  committed_at: string;
}

/**
 * Gitignore Template
 * Gitignore Template
 */
interface GitignoreTemplate {
  /** @example "C" */
  name: string;
  /**
   * @example "# Object files
   * *.o
   *
   * # Libraries
   * *.lib
   * *.a
   *
   * # Shared objects (inc. Windows DLLs)
   * *.dll
   * *.so
   * *.so.*
   * *.dylib
   *
   * # Executables
   * *.exe
   * *.out
   * *.app
   * "
   */
  source: string;
}

/**
 * License Simple
 * License Simple
 */
interface LicenseSimple {
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /** @example "MIT" */
  spdx_id: string | null;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /** @format uri */
  html_url?: string;
}

/**
 * License
 * License
 */
interface License {
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /** @example "MIT" */
  spdx_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /**
   * @format uri
   * @example "http://choosealicense.com/licenses/mit/"
   */
  html_url: string;
  /** @example "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty." */
  description: string;
  /** @example "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders." */
  implementation: string;
  /** @example ["commercial-use","modifications","distribution","sublicense","private-use"] */
  permissions: string[];
  /** @example ["include-copyright"] */
  conditions: string[];
  /** @example ["no-liability"] */
  limitations: string[];
  /**
   * @example "
   *
   * The MIT License (MIT)
   *
   * Copyright (c) [year] [fullname]
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   * "
   */
  body: string;
  /** @example true */
  featured: boolean;
}

/**
 * Marketplace Listing Plan
 * Marketplace Listing Plan
 */
interface MarketplaceListingPlan {
  /**
   * @format uri
   * @example "https://api.github.com/marketplace_listing/plans/1313"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/marketplace_listing/plans/1313/accounts"
   */
  accounts_url: string;
  /** @example 1313 */
  id: number;
  /** @example 3 */
  number: number;
  /** @example "Pro" */
  name: string;
  /** @example "A professional-grade CI solution" */
  description: string;
  /** @example 1099 */
  monthly_price_in_cents: number;
  /** @example 11870 */
  yearly_price_in_cents: number;
  /** @example "FLAT_RATE" */
  price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
  /** @example true */
  has_free_trial: boolean;
  unit_name: string | null;
  /** @example "published" */
  state: string;
  /** @example ["Up to 25 private repositories","11 concurrent builds"] */
  bullets: string[];
}

/**
 * Marketplace Purchase
 * Marketplace Purchase
 */
interface MarketplacePurchase {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email?: string;
  email?: string | null;
  marketplace_pending_change?: {
    is_installed?: boolean;
    effective_date?: string;
    unit_count?: number | null;
    id?: number;
    /** Marketplace Listing Plan */
    plan?: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle?: string;
    next_billing_date?: string | null;
    is_installed?: boolean;
    unit_count?: number | null;
    on_free_trial?: boolean;
    free_trial_ends_on?: string | null;
    updated_at?: string;
    /** Marketplace Listing Plan */
    plan?: MarketplaceListingPlan;
  };
}

/**
 * Api Overview
 * Api Overview
 */
interface ApiOverview {
  /** @example true */
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints?: {
    SHA256_RSA?: string;
    SHA256_DSA?: string;
    SHA256_ECDSA?: string;
    SHA256_ED25519?: string;
  };
  /** @example ["ssh-ed25519 ABCDEFGHIJKLMNOPQRSTUVWXYZ"] */
  ssh_keys?: string[];
  /** @example ["192.0.2.1"] */
  hooks?: string[];
  /** @example ["192.0.2.1"] */
  github_enterprise_importer?: string[];
  /** @example ["192.0.2.1"] */
  web?: string[];
  /** @example ["192.0.2.1"] */
  api?: string[];
  /** @example ["192.0.2.1"] */
  git?: string[];
  /** @example ["192.0.2.1"] */
  packages?: string[];
  /** @example ["192.0.2.1"] */
  pages?: string[];
  /** @example ["192.0.2.1"] */
  importer?: string[];
  /** @example ["192.0.2.1"] */
  actions?: string[];
  /** @example ["192.0.2.1"] */
  actions_macos?: string[];
  /** @example ["192.0.2.1"] */
  codespaces?: string[];
  /** @example ["192.0.2.1"] */
  dependabot?: string[];
  /** @example ["192.0.2.1"] */
  copilot?: string[];
  domains?: {
    website?: string[];
    codespaces?: string[];
    copilot?: string[];
    packages?: string[];
    actions?: string[];
    actions_inbound?: {
      full_domains?: string[];
      wildcard_domains?: string[];
    };
    artifact_attestations?: {
      /** @example ["example"] */
      trust_domain?: string;
      services?: string[];
    };
  };
}

type SecurityAndAnalysis = {
  advanced_security?: {
    status?: "enabled" | "disabled";
  };
  code_security?: {
    status?: "enabled" | "disabled";
  };
  /** Enable or disable Dependabot security updates for the repository. */
  dependabot_security_updates?: {
    /** The enablement status of Dependabot security updates for the repository. */
    status?: "enabled" | "disabled";
  };
  secret_scanning?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_push_protection?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_non_provider_patterns?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_ai_detection?: {
    status?: "enabled" | "disabled";
  };
} | null;

/**
 * Minimal Repository
 * Minimal Repository
 */
interface MinimalRepository {
  /**
   * @format int64
   * @example 1296269
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "Hello-World" */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  git_url?: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  ssh_url?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: string | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };
  /** @example "admin" */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  /** Code Of Conduct */
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  /** @example 0 */
  forks?: number;
  /** @example 0 */
  open_issues?: number;
  /** @example 0 */
  watchers?: number;
  allow_forking?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysis;
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
}

/**
 * Thread
 * Thread
 */
interface Thread {
  id: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string | null;
  url: string;
  /** @example "https://api.github.com/notifications/threads/2/subscription" */
  subscription_url: string;
}

/**
 * Thread Subscription
 * Thread Subscription
 */
interface ThreadSubscription {
  /** @example true */
  subscribed: boolean;
  ignored: boolean;
  reason: string | null;
  /**
   * @format date-time
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/notifications/threads/1/subscription"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/notifications/threads/1"
   */
  thread_url?: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/1"
   */
  repository_url?: string;
}

/**
 * Organization Simple
 * A GitHub organization.
 */
interface OrganizationSimple {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
}

/**
 * Simple Repository
 * A GitHub repository.
 */
type NullableSimpleRepository = {
  /**
   * A unique identifier of the repository.
   * @format int64
   * @example 1296269
   */
  id: number;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Whether the repository is private. */
  private: boolean;
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The repository description.
   * @example "This your first repo!"
   */
  description: string | null;
  /** Whether the repository is a fork. */
  fork: boolean;
  /**
   * The URL to get more information about the repository from the GitHub API.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * A template for the API URL to download the repository as an archive.
   * @example "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * The API URL to list the downloads on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * The API URL to list the forks of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * The API URL to list the hooks on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
};

/**
 * Dependabot Repository Access Details
 * Information about repositories that Dependabot is able to access in an organization
 */
interface DependabotRepositoryAccessDetails {
  /**
   * The default repository access level for Dependabot updates.
   * @example "internal"
   */
  default_level?: "public" | "internal" | null;
  accessible_repositories?: NullableSimpleRepository[];
}

interface BillingUsageReport {
  usageItems?: {
    /** Date of the usage line item. */
    date: string;
    /** Product name. */
    product: string;
    /** SKU name. */
    sku: string;
    /** Quantity of the usage line item. */
    quantity: number;
    /** Unit type of the usage line item. */
    unitType: string;
    /** Price per unit of the usage line item. */
    pricePerUnit: number;
    /** Gross amount of the usage line item. */
    grossAmount: number;
    /** Discount amount of the usage line item. */
    discountAmount: number;
    /** Net amount of the usage line item. */
    netAmount: number;
    /** Name of the organization. */
    organizationName: string;
    /** Name of the repository. */
    repositoryName?: string;
  }[];
}

/**
 * Organization Full
 * Organization Full
 */
interface OrganizationFull {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
  /** @example "github" */
  name?: string;
  /** @example "GitHub" */
  company?: string;
  /**
   * @format uri
   * @example "https://github.com/blog"
   */
  blog?: string;
  /** @example "San Francisco" */
  location?: string;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email?: string;
  /** @example "github" */
  twitter_username?: string | null;
  /** @example true */
  is_verified?: boolean;
  /** @example true */
  has_organization_projects: boolean;
  /** @example true */
  has_repository_projects: boolean;
  /** @example 2 */
  public_repos: number;
  /** @example 1 */
  public_gists: number;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /** @example "Organization" */
  type: string;
  /** @example 100 */
  total_private_repos?: number;
  /** @example 100 */
  owned_private_repos?: number;
  /** @example 81 */
  private_gists?: number | null;
  /** @example 10000 */
  disk_usage?: number | null;
  /**
   * The number of collaborators on private repositories.
   *
   * This field may be null if the number of private repositories is over 50,000.
   * @example 8
   */
  collaborators?: number | null;
  /**
   * @format email
   * @example "org@example.com"
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /**
   * The default branch for repositories created in this organization.
   * @example "main"
   */
  default_repository_branch?: string | null;
  /** @example true */
  members_can_create_repositories?: boolean | null;
  /** @example true */
  two_factor_requirement_enabled?: boolean | null;
  /** @example "all" */
  members_allowed_repository_creation_type?: string;
  /** @example true */
  members_can_create_public_repositories?: boolean;
  /** @example true */
  members_can_create_private_repositories?: boolean;
  /** @example true */
  members_can_create_internal_repositories?: boolean;
  /** @example true */
  members_can_create_pages?: boolean;
  /** @example true */
  members_can_create_public_pages?: boolean;
  /** @example true */
  members_can_create_private_pages?: boolean;
  /** @example true */
  members_can_delete_repositories?: boolean;
  /** @example true */
  members_can_change_repo_visibility?: boolean;
  /** @example true */
  members_can_invite_outside_collaborators?: boolean;
  /** @example true */
  members_can_delete_issues?: boolean;
  /** @example true */
  display_commenter_full_name_setting_enabled?: boolean;
  /** @example true */
  readers_can_create_discussions?: boolean;
  /** @example true */
  members_can_create_teams?: boolean;
  /** @example true */
  members_can_view_dependency_insights?: boolean;
  /** @example false */
  members_can_fork_private_repositories?: boolean | null;
  /** @example false */
  web_commit_signoff_required?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  advanced_security_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  dependency_graph_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  secret_scanning_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
  /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   * @example false
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;
  /**
   * An optional URL string to display to contributors who are blocked from pushing a secret.
   * @example "https://github.com/test-org/test-repo/blob/main/README.md"
   */
  secret_scanning_push_protection_custom_link?: string | null;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  archived_at: string | null;
  /**
   * Controls whether or not deploy keys may be added and used for repositories in the organization.
   * @example false
   */
  deploy_keys_enabled_for_repositories?: boolean;
}

interface ActionsCacheUsageOrgEnterprise {
  /** The count of active caches across all repositories of an enterprise or an organization. */
  total_active_caches_count: number;
  /** The total size in bytes of all active cache items across all repositories of an enterprise or an organization. */
  total_active_caches_size_in_bytes: number;
}

/**
 * Actions Cache Usage by repository
 * GitHub Actions Cache Usage by repository.
 */
interface ActionsCacheUsageByRepository {
  /**
   * The repository owner and name for the cache usage being shown.
   * @example "octo-org/Hello-World"
   */
  full_name: string;
  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   * @example 2322142
   */
  active_caches_size_in_bytes: number;
  /**
   * The number of active caches in the repository.
   * @example 3
   */
  active_caches_count: number;
}

/**
 * GitHub-hosted runner image details.
 * Provides details of a hosted runner image
 */
type NullableActionsHostedRunnerPoolImage = {
  /**
   * The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
   * @example "ubuntu-20.04"
   */
  id: string;
  /**
   * Image size in GB.
   * @example 86
   */
  size_gb: number;
  /**
   * Display name for this image.
   * @example 20.04
   */
  display_name: string;
  /** The image provider. */
  source: "github" | "partner" | "custom";
} | null;

/**
 * Github-owned VM details.
 * Provides details of a particular machine spec.
 */
interface ActionsHostedRunnerMachineSpec {
  /**
   * The ID used for the `size` parameter when creating a new runner.
   * @example "8-core"
   */
  id: string;
  /**
   * The number of cores.
   * @example 8
   */
  cpu_cores: number;
  /**
   * The available RAM for the machine spec.
   * @example 32
   */
  memory_gb: number;
  /**
   * The available SSD storage for the machine spec.
   * @example 300
   */
  storage_gb: number;
}

/**
 * Public IP for a GitHub-hosted larger runners.
 * Provides details of Public IP for a GitHub-hosted larger runners
 */
interface PublicIp {
  /**
   * Whether public IP is enabled.
   * @example true
   */
  enabled?: boolean;
  /**
   * The prefix for the public IP.
   * @example "20.80.208.150"
   */
  prefix?: string;
  /**
   * The length of the IP prefix.
   * @example 28
   */
  length?: number;
}

/**
 * GitHub-hosted hosted runner
 * A Github-hosted hosted runner.
 */
interface ActionsHostedRunner {
  /**
   * The unique identifier of the hosted runner.
   * @example 5
   */
  id: number;
  /**
   * The name of the hosted runner.
   * @example "my-github-hosted-runner"
   */
  name: string;
  /**
   * The unique identifier of the group that the hosted runner belongs to.
   * @example 2
   */
  runner_group_id?: number;
  /** Provides details of a hosted runner image */
  image_details: NullableActionsHostedRunnerPoolImage;
  /** Provides details of a particular machine spec. */
  machine_size_details: ActionsHostedRunnerMachineSpec;
  /**
   * The status of the runner.
   * @example "Ready"
   */
  status: "Ready" | "Provisioning" | "Shutdown" | "Deleting" | "Stuck";
  /**
   * The operating system of the image.
   * @example "linux-x64"
   */
  platform: string;
  /**
   * The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
   * @default 10
   * @example 5
   */
  maximum_runners?: number;
  /**
   * Whether public IP is enabled for the hosted runners.
   * @example true
   */
  public_ip_enabled: boolean;
  /** The public IP ranges when public IP is enabled for the hosted runners. */
  public_ips?: PublicIp[];
  /**
   * The time at which the runner was last used, in ISO 8601 format.
   * @format date-time
   * @example "2022-10-09T23:39:01Z"
   */
  last_active_on?: string | null;
}

/**
 * GitHub-hosted runner image details.
 * Provides details of a hosted runner image
 */
interface ActionsHostedRunnerImage {
  /**
   * The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
   * @example "ubuntu-20.04"
   */
  id: string;
  /**
   * The operating system of the image.
   * @example "linux-x64"
   */
  platform: string;
  /**
   * Image size in GB.
   * @example 86
   */
  size_gb: number;
  /**
   * Display name for this image.
   * @example 20.04
   */
  display_name: string;
  /** The image provider. */
  source: "github" | "partner" | "custom";
}

interface ActionsHostedRunnerLimits {
  /**
   * Static public IP Limits for GitHub-hosted Hosted Runners.
   * Provides details of static public IP limits for GitHub-hosted Hosted Runners
   */
  public_ips: {
    /**
     * The maximum number of static public IP addresses that can be used for Hosted Runners.
     * @example 50
     */
    maximum: number;
    /**
     * The current number of static public IP addresses in use by Hosted Runners.
     * @example 17
     */
    current_usage: number;
  };
}

/**
 * Actions OIDC Subject customization
 * Actions OIDC Subject customization
 */
interface OidcCustomSub {
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
  include_claim_keys: string[];
}

/**
 * Empty Object
 * An object without any properties.
 */
type EmptyObject = object;

/** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
enum EnabledRepositories {
  All = "all",
  None = "none",
  Selected = "selected",
}

/** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
enum AllowedActions {
  All = "all",
  LocalOnly = "local_only",
  Selected = "selected",
}

/** The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
type SelectedActionsUrl = string;

interface ActionsOrganizationPermissions {
  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
  enabled_repositories: EnabledRepositories;
  /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
  selected_repositories_url?: string;
  /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
  allowed_actions?: AllowedActions;
  /** The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
  selected_actions_url?: SelectedActionsUrl;
}

interface SelectedActions {
  /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
  github_owned_allowed?: boolean;
  /** Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators. */
  verified_allowed?: boolean;
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
   *
   * > [!NOTE]
   * > The `patterns_allowed` setting only applies to public repositories.
   */
  patterns_allowed?: string[];
}

/** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
enum ActionsDefaultWorkflowPermissions {
  Read = "read",
  Write = "write",
}

/** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
type ActionsCanApprovePullRequestReviews = boolean;

interface ActionsGetDefaultWorkflowPermissions {
  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
  default_workflow_permissions: ActionsDefaultWorkflowPermissions;
  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews;
}

interface ActionsSetDefaultWorkflowPermissions {
  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
  default_workflow_permissions?: ActionsDefaultWorkflowPermissions;
  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
  can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews;
}

interface RunnerGroupsOrg {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
  selected_repositories_url?: string;
  runners_url: string;
  hosted_runners_url?: string;
  /** The identifier of a hosted compute network configuration. */
  network_configuration_id?: string;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  allows_public_repositories: boolean;
  /**
   * If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
   * @default false
   */
  workflow_restrictions_read_only?: boolean;
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
  restricted_to_workflows?: boolean;
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
  selected_workflows?: string[];
}

/**
 * Self hosted runner label
 * A label for a self hosted runner
 */
interface RunnerLabel {
  /** Unique identifier of the label. */
  id?: number;
  /** Name of the label. */
  name: string;
  /** The type of label. Read-only labels are applied automatically when the runner is configured. */
  type?: "read-only" | "custom";
}

/**
 * Self hosted runners
 * A self hosted runner
 */
interface Runner {
  /**
   * The ID of the runner.
   * @example 5
   */
  id: number;
  /**
   * The ID of the runner group.
   * @example 1
   */
  runner_group_id?: number;
  /**
   * The name of the runner.
   * @example "iMac"
   */
  name: string;
  /**
   * The Operating System of the runner.
   * @example "macos"
   */
  os: string;
  /**
   * The status of the runner.
   * @example "online"
   */
  status: string;
  busy: boolean;
  labels: RunnerLabel[];
  ephemeral?: boolean;
}

/**
 * Runner Application
 * Runner Application
 */
interface RunnerApplication {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
  /** A short lived bearer token used to download the runner, if needed. */
  temp_download_token?: string;
  sha256_checksum?: string;
}

/**
 * Authentication Token
 * Authentication Token
 */
interface AuthenticationToken {
  /**
   * The token used for authentication
   * @example "v1.1f699f1069f60xxx"
   */
  token: string;
  /**
   * The time this token expires
   * @format date-time
   * @example "2016-07-11T22:14:10Z"
   */
  expires_at: string;
  /** @example {"issues":"read","deployments":"write"} */
  permissions?: object;
  /** The repositories this token has access to */
  repositories?: Repository[];
  /** @example "config.yaml" */
  single_file?: string | null;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection?: "all" | "selected";
}

/**
 * Actions Secret for an Organization
 * Secrets for GitHub Actions for an organization.
 */
interface OrganizationActionsSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** Visibility of a secret */
  visibility: "all" | "private" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * ActionsPublicKey
 * The public key used for setting Actions Secrets.
 */
interface ActionsPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /** @example 2 */
  id?: number;
  /** @example "https://api.github.com/user/keys/2" */
  url?: string;
  /** @example "ssh-rsa AAAAB3NzaC1yc2EAAA" */
  title?: string;
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
}

/**
 * Actions Variable for an Organization
 * Organization variable for GitHub Actions.
 */
interface OrganizationActionsVariable {
  /**
   * The name of the variable.
   * @example "USERNAME"
   */
  name: string;
  /**
   * The value of the variable.
   * @example "octocat"
   */
  value: string;
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  created_at: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  updated_at: string;
  /** Visibility of a variable */
  visibility: "all" | "private" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/variables/USERNAME/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * Campaign state
 * Indicates whether a campaign is open or closed
 */
enum CampaignState {
  Open = "open",
  Closed = "closed",
}

/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
type NullableTeamSimple = {
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** @example "justice-league" */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
};

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  /** @format uri */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  members_url: string;
  /** @format uri */
  repositories_url: string;
  /** Groups of organization members that gives permissions on specified repositories. */
  parent: NullableTeamSimple;
}

/**
 * Campaign summary
 * The campaign metadata and alert stats.
 */
interface CampaignSummary {
  /** The number of the newly created campaign */
  number: number;
  /**
   * The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /** The campaign name */
  name?: string;
  /** The campaign description */
  description: string;
  /** The campaign managers */
  managers: SimpleUser[];
  /** The campaign team managers */
  team_managers?: Team[];
  /**
   * The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  published_at?: string;
  /**
   * The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  ends_at: string;
  /**
   * The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
   * @format date-time
   */
  closed_at?: string | null;
  /** Indicates whether a campaign is open or closed */
  state: CampaignState;
  /**
   * The contact link of the campaign.
   * @format uri
   */
  contact_link: string | null;
  alert_stats?: {
    /** The number of open alerts */
    open_count: number;
    /** The number of closed alerts */
    closed_count: number;
    /** The number of in-progress alerts */
    in_progress_count: number;
  };
}

/** The name of the tool used to generate the code scanning analysis. */
type CodeScanningAnalysisToolName = string;

/** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
type CodeScanningAnalysisToolGuid = string | null;

/** State of a code scanning alert. */
enum CodeScanningAlertStateQuery {
  Open = "open",
  Closed = "closed",
  Dismissed = "dismissed",
  Fixed = "fixed",
}

/** Severity of a code scanning alert. */
enum CodeScanningAlertSeverity {
  Critical = "critical",
  High = "high",
  Medium = "medium",
  Low = "low",
  Warning = "warning",
  Note = "note",
  Error = "error",
}

/**
 * The REST API URL for fetching the list of instances for an alert.
 * @format uri
 */
type AlertInstancesUrl = string;

/** State of a code scanning alert. */
enum CodeScanningAlertState {
  Open = "open",
  Dismissed = "dismissed",
  Fixed = "fixed",
}

/** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
enum CodeScanningAlertDismissedReason {
  FalsePositive = "false positive",
  WontFix = "won't fix",
  UsedInTests = "used in tests",
}

/**
 * The dismissal comment associated with the dismissal of the alert.
 * @maxLength 280
 */
type CodeScanningAlertDismissedComment = string | null;

interface CodeScanningAlertRuleSummary {
  /** A unique identifier for the rule used to detect the alert. */
  id?: string | null;
  /** The name of the rule used to detect the alert. */
  name?: string;
  /** The severity of the alert. */
  severity?: "none" | "note" | "warning" | "error" | null;
  /** The security severity of the alert. */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;
  /** A short description of the rule used to detect the alert. */
  description?: string;
  /** A description of the rule used to detect the alert. */
  full_description?: string;
  /** A set of tags applicable for the rule. */
  tags?: string[] | null;
  /** Detailed documentation for the rule as GitHub Flavored Markdown. */
  help?: string | null;
  /** A link to the documentation for the rule used to detect the alert. */
  help_uri?: string | null;
}

/** The version of the tool used to generate the code scanning analysis. */
type CodeScanningAnalysisToolVersion = string | null;

interface CodeScanningAnalysisTool {
  /** The name of the tool used to generate the code scanning analysis. */
  name?: CodeScanningAnalysisToolName;
  /** The version of the tool used to generate the code scanning analysis. */
  version?: CodeScanningAnalysisToolVersion;
  /** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
  guid?: CodeScanningAnalysisToolGuid;
}

/**
 * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
 * `refs/heads/<branch name>` or simply `<branch name>`.
 */
type CodeScanningRef = string;

/** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
type CodeScanningAnalysisAnalysisKey = string;

/** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
type CodeScanningAlertEnvironment = string;

/** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
type CodeScanningAnalysisCategory = string;

/** Describe a region within a file for the alert. */
interface CodeScanningAlertLocation {
  path?: string;
  start_line?: number;
  end_line?: number;
  start_column?: number;
  end_column?: number;
}

/** A classification of the file. For example to identify it as generated. */
enum CodeScanningAlertClassification {
  Source = "source",
  Generated = "generated",
  Test = "test",
  Library = "library",
}

interface CodeScanningAlertInstance {
  /**
   * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
   * `refs/heads/<branch name>` or simply `<branch name>`.
   */
  ref?: CodeScanningRef;
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
  environment?: CodeScanningAlertEnvironment;
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
  category?: CodeScanningAnalysisCategory;
  /** State of a code scanning alert. */
  state?: CodeScanningAlertState;
  commit_sha?: string;
  message?: {
    text?: string;
  };
  /** Describe a region within a file for the alert. */
  location?: CodeScanningAlertLocation;
  html_url?: string;
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassification[];
}

interface CodeScanningOrganizationAlertItems {
  /** The security alert number. */
  number: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: AlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The REST API URL for fetching the list of instances for an alert. */
  instances_url: AlertInstancesUrl;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at?: AlertFixedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The dismissal comment associated with the dismissal of the alert. */
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  /** A GitHub repository. */
  repository: SimpleRepository;
  /** A GitHub user. */
  dismissal_approved_by?: NullableSimpleUser;
}

/**
 * Codespace machine
 * A description of the machine powering a codespace.
 */
type NullableCodespaceMachine = {
  /**
   * The name of the machine.
   * @example "standardLinux"
   */
  name: string;
  /**
   * The display name of the machine includes cores, memory, and storage.
   * @example "4 cores, 16 GB RAM, 64 GB storage"
   */
  display_name: string;
  /**
   * The operating system of the machine.
   * @example "linux"
   */
  operating_system: string;
  /**
   * How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;
  /**
   * How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;
  /**
   * How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example "ready"
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
};

/**
 * Codespace
 * A codespace.
 */
interface Codespace {
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /**
   * Automatically generated name of this codespace.
   * @example "monalisa-octocat-hello-world-g4wpq6h95q"
   */
  name: string;
  /**
   * Display name for this codespace.
   * @example "bookish space pancake"
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   * @example "26a7c758-7299-4a73-b978-5a92a7ae98a0"
   */
  environment_id: string | null;
  /** A GitHub user. */
  owner: SimpleUser;
  /** A GitHub user. */
  billable_owner: SimpleUser;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** A description of the machine powering a codespace. */
  machine: NullableCodespaceMachine;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   * @example ".devcontainer/example/devcontainer.json"
   */
  devcontainer_path?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   * @example false
   */
  prebuild: boolean | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * Last known time this codespace was started.
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  last_used_at: string;
  /**
   * State of this codespace.
   * @example "Available"
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";
  /**
   * API URL for this codespace.
   * @format uri
   */
  url: string;
  /** Details about the codespace's git repository. */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     * @example 0
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     * @example 0
     */
    behind?: number;
    /** Whether the local repository has unpushed changes. */
    has_unpushed_changes?: boolean;
    /** Whether the local repository has uncommitted changes. */
    has_uncommitted_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example "main"
     */
    ref?: string;
  };
  /**
   * The initally assigned location of a new codespace.
   * @example "WestUs2"
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * URL to access this codespace on the web.
   * @format uri
   */
  web_url: string;
  /**
   * API URL to access available alternate machine types for this codespace.
   * @format uri
   */
  machines_url: string;
  /**
   * API URL to start this codespace.
   * @format uri
   */
  start_url: string;
  /**
   * API URL to stop this codespace.
   * @format uri
   */
  stop_url: string;
  /**
   * API URL to publish this codespace to a new repository.
   * @format uri
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   * @format uri
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /** The privacy settings a user can select from when forwarding a port. */
    allowed_port_privacy_settings?: string[] | null;
  };
  /** Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
  pending_operation?: boolean | null;
  /** Text to show user when codespace is disabled by a pending operation */
  pending_operation_disabled_reason?: string | null;
  /** Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
  idle_timeout_notice?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @format date-time
   * @example "2011-01-26T20:01:12Z"
   */
  retention_expires_at?: string | null;
  /**
   * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   * @example "you've used 100% of your spending limit for Codespaces"
   */
  last_known_stop_notice?: string | null;
}

/**
 * Codespaces Secret
 * Secrets for a GitHub Codespace.
 */
interface CodespacesOrgSecret {
  /**
   * The name of the secret
   * @example "SECRET_NAME"
   */
  name: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /** The type of repositories in the organization that the secret is visible to */
  visibility: "all" | "private" | "selected";
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   * @format uri
   * @example "https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * CodespacesPublicKey
 * The public key used for setting Codespaces secrets.
 */
interface CodespacesPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /** @example 2 */
  id?: number;
  /** @example "https://api.github.com/user/keys/2" */
  url?: string;
  /** @example "ssh-rsa AAAAB3NzaC1yc2EAAA" */
  title?: string;
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
}

/**
 * Copilot Seat Breakdown
 * The breakdown of Copilot Business seats for the organization.
 */
interface CopilotOrganizationSeatBreakdown {
  /** The total number of seats being billed for the organization as of the current billing cycle. */
  total?: number;
  /** Seats added during the current billing cycle. */
  added_this_cycle?: number;
  /** The number of seats that are pending cancellation at the end of the current billing cycle. */
  pending_cancellation?: number;
  /** The number of users who have been invited to receive a Copilot seat through this organization. */
  pending_invitation?: number;
  /** The number of seats that have used Copilot during the current billing cycle. */
  active_this_cycle?: number;
  /** The number of seats that have not used Copilot during the current billing cycle. */
  inactive_this_cycle?: number;
}

/**
 * Copilot Organization Details
 * Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
 */
interface CopilotOrganizationDetails {
  /** The breakdown of Copilot Business seats for the organization. */
  seat_breakdown: CopilotOrganizationSeatBreakdown;
  /** The organization policy for allowing or blocking suggestions matching public code (duplication detection filter). */
  public_code_suggestions: "allow" | "block" | "unconfigured";
  /** The organization policy for allowing or disallowing Copilot Chat in the IDE. */
  ide_chat?: "enabled" | "disabled" | "unconfigured";
  /** The organization policy for allowing or disallowing Copilot features on GitHub.com. */
  platform_chat?: "enabled" | "disabled" | "unconfigured";
  /** The organization policy for allowing or disallowing Copilot in the CLI. */
  cli?: "enabled" | "disabled" | "unconfigured";
  /** The mode of assigning new seats. */
  seat_management_setting: "assign_all" | "assign_selected" | "disabled" | "unconfigured";
  /** The Copilot plan of the organization, or the parent enterprise, when applicable. */
  plan_type?: "business" | "enterprise";
  [key: string]: any;
}

/**
 * Organization Simple
 * A GitHub organization.
 */
type NullableOrganizationSimple = {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
};

/**
 * Enterprise Team
 * Group of enterprise owners and/or members
 */
interface EnterpriseTeam {
  /** @format int64 */
  id: number;
  name: string;
  description?: string;
  slug: string;
  /** @format uri */
  url: string;
  /** @example "disabled | all" */
  sync_to_organizations?: string;
  /** @example "disabled | all" */
  organization_selection_type?: string;
  /** @example "62ab9291-fae2-468e-974b-7e45096d5021" */
  group_id?: string | null;
  /** @example "Justice League" */
  group_name?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/dc/teams/justice-league"
   */
  html_url: string;
  members_url: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Copilot Business Seat Detail
 * Information about a Copilot Business seat assignment for a user, team, or organization.
 */
interface CopilotSeatDetails {
  /** A GitHub user. */
  assignee?: NullableSimpleUser;
  /** A GitHub organization. */
  organization?: NullableOrganizationSimple;
  /** The team through which the assignee is granted access to GitHub Copilot, if applicable. */
  assigning_team?: Team | EnterpriseTeam | null;
  /**
   * The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
   * @format date
   */
  pending_cancellation_date?: string | null;
  /**
   * Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
   * @format date-time
   */
  last_activity_at?: string | null;
  /** Last editor that was used by the user for a GitHub Copilot completion. */
  last_activity_editor?: string | null;
  /**
   * Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
   * @format date-time
   */
  created_at: string;
  /**
   * **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
   * @deprecated
   * @format date-time
   */
  updated_at?: string;
  /** The Copilot plan of the organization, or the parent enterprise, when applicable. */
  plan_type?: "business" | "enterprise" | "unknown";
}

/** Usage metrics for Copilot editor code completions in the IDE. */
type CopilotIdeCodeCompletions = {
  /** Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances. */
  total_engaged_users?: number;
  /** Code completion metrics for active languages. */
  languages?: {
    /** Name of the language used for Copilot code completion suggestions. */
    name?: string;
    /** Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances. */
    total_engaged_users?: number;
  }[];
  editors?: {
    /** Name of the given editor. */
    name?: string;
    /** Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances. */
    total_engaged_users?: number;
    /** List of model metrics for custom models and the default model. */
    models?: {
      /** Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'. */
      name?: string;
      /** Indicates whether a model is custom or default. */
      is_custom_model?: boolean;
      /** The training date for the custom model. */
      custom_model_training_date?: string | null;
      /** Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances. */
      total_engaged_users?: number;
      /** Code completion metrics for active languages, for the given editor. */
      languages?: {
        /** Name of the language used for Copilot code completion suggestions, for the given editor. */
        name?: string;
        /** Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances. */
        total_engaged_users?: number;
        /** The number of Copilot code suggestions generated for the given editor, for the given language. */
        total_code_suggestions?: number;
        /** The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances. */
        total_code_acceptances?: number;
        /** The number of lines of code suggested by Copilot code completions for the given editor, for the given language. */
        total_code_lines_suggested?: number;
        /** The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language. */
        total_code_lines_accepted?: number;
      }[];
    }[];
    [key: string]: any;
  }[];
  [key: string]: any;
};

/** Usage metrics for Copilot Chat in the IDE. */
type CopilotIdeChat = {
  /** Total number of users who prompted Copilot Chat in the IDE. */
  total_engaged_users?: number;
  editors?: {
    /** Name of the given editor. */
    name?: string;
    /** The number of users who prompted Copilot Chat in the specified editor. */
    total_engaged_users?: number;
    /** List of model metrics for custom models and the default model. */
    models?: {
      /** Name of the model used for Copilot Chat. If the default model is used will appear as 'default'. */
      name?: string;
      /** Indicates whether a model is custom or default. */
      is_custom_model?: boolean;
      /** The training date for the custom model. */
      custom_model_training_date?: string | null;
      /** The number of users who prompted Copilot Chat in the given editor and model. */
      total_engaged_users?: number;
      /** The total number of chats initiated by users in the given editor and model. */
      total_chats?: number;
      /** The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor. */
      total_chat_insertion_events?: number;
      /** The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor. */
      total_chat_copy_events?: number;
    }[];
  }[];
  [key: string]: any;
};

/** Usage metrics for Copilot Chat in GitHub.com */
type CopilotDotcomChat = {
  /** Total number of users who prompted Copilot Chat on github.com at least once. */
  total_engaged_users?: number;
  /** List of model metrics for a custom models and the default model. */
  models?: {
    /** Name of the model used for Copilot Chat. If the default model is used will appear as 'default'. */
    name?: string;
    /** Indicates whether a model is custom or default. */
    is_custom_model?: boolean;
    /** The training date for the custom model (if applicable). */
    custom_model_training_date?: string | null;
    /** Total number of users who prompted Copilot Chat on github.com at least once for each model. */
    total_engaged_users?: number;
    /** Total number of chats initiated by users on github.com. */
    total_chats?: number;
  }[];
  [key: string]: any;
};

/** Usage metrics for Copilot for pull requests. */
type CopilotDotcomPullRequests = {
  /** The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once. */
  total_engaged_users?: number;
  /** Repositories in which users used Copilot for Pull Requests to generate pull request summaries */
  repositories?: {
    /** Repository name */
    name?: string;
    /** The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository. */
    total_engaged_users?: number;
    /** List of model metrics for custom models and the default model. */
    models?: {
      /** Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'. */
      name?: string;
      /** Indicates whether a model is custom or default. */
      is_custom_model?: boolean;
      /** The training date for the custom model. */
      custom_model_training_date?: string | null;
      /** The number of pull request summaries generated using Copilot for Pull Requests in the given repository. */
      total_pr_summaries_created?: number;
      /** The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model. */
      total_engaged_users?: number;
    }[];
  }[];
  [key: string]: any;
};

/**
 * Copilot Usage Metrics
 * Copilot usage metrics for a given day.
 */
interface CopilotUsageMetricsDay {
  /**
   * The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
   * @format date
   */
  date: string;
  /** The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint. */
  total_active_users?: number;
  /** The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint. */
  total_engaged_users?: number;
  /** Usage metrics for Copilot editor code completions in the IDE. */
  copilot_ide_code_completions?: CopilotIdeCodeCompletions;
  /** Usage metrics for Copilot Chat in the IDE. */
  copilot_ide_chat?: CopilotIdeChat;
  /** Usage metrics for Copilot Chat in GitHub.com */
  copilot_dotcom_chat?: CopilotDotcomChat;
  /** Usage metrics for Copilot for pull requests. */
  copilot_dotcom_pull_requests?: CopilotDotcomPullRequests;
  [key: string]: any;
}

/**
 * Dependabot Secret for an Organization
 * Secrets for GitHub Dependabot for an organization.
 */
interface OrganizationDependabotSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** Visibility of a secret */
  visibility: "all" | "private" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * DependabotPublicKey
 * The public key used for setting Dependabot Secrets.
 */
interface DependabotPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
}

/**
 * Minimal Repository
 * Minimal Repository
 */
type NullableMinimalRepository = {
  /**
   * @format int64
   * @example 1296269
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "Hello-World" */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  git_url?: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  ssh_url?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: string | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };
  /** @example "admin" */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  /** Code Of Conduct */
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  /** @example 0 */
  forks?: number;
  /** @example 0 */
  open_issues?: number;
  /** @example 0 */
  watchers?: number;
  allow_forking?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysis;
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
};

/**
 * Package
 * A software package
 */
interface Package {
  /**
   * Unique identifier of the package.
   * @example 1
   */
  id: number;
  /**
   * The name of the package.
   * @example "super-linter"
   */
  name: string;
  /** @example "docker" */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /** @example "https://api.github.com/orgs/github/packages/container/super-linter" */
  url: string;
  /** @example "https://github.com/orgs/github/packages/container/package/super-linter" */
  html_url: string;
  /**
   * The number of versions of the package.
   * @example 1
   */
  version_count: number;
  /** @example "private" */
  visibility: "private" | "public";
  /** A GitHub user. */
  owner?: NullableSimpleUser;
  /** Minimal Repository */
  repository?: NullableMinimalRepository;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Organization Invitation
 * Organization Invitation
 */
interface OrganizationInvitation {
  /** @format int64 */
  id: number;
  login: string | null;
  email: string | null;
  role: string;
  created_at: string;
  failed_at?: string | null;
  failed_reason?: string | null;
  /** A GitHub user. */
  inviter: SimpleUser;
  team_count: number;
  /** @example ""MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"" */
  node_id: string;
  /** @example ""https://api.github.com/organizations/16/invitations/1/teams"" */
  invitation_teams_url: string;
  /** @example ""member"" */
  invitation_source?: string;
}

/**
 * Org Hook
 * Org Hook
 */
interface OrgHook {
  /** @example 1 */
  id: number;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1/deliveries"
   */
  deliveries_url?: string;
  /** @example "web" */
  name: string;
  /** @example ["push","pull_request"] */
  events: string[];
  /** @example true */
  active: boolean;
  config: {
    /** @example ""http://example.com/2"" */
    url?: string;
    /** @example ""0"" */
    insecure_ssl?: string;
    /** @example ""form"" */
    content_type?: string;
    /** @example ""********"" */
    secret?: string;
  };
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  type: string;
}

/**
 * Route Stats
 * API Insights usage route stats for an actor
 */
type ApiInsightsRouteStats = {
  /** The HTTP method */
  http_method?: string;
  /** The API path's route template */
  api_route?: string;
  /**
   * The total number of requests within the queried time period
   * @format int64
   */
  total_request_count?: number;
  /**
   * The total number of requests that were rate limited within the queried time period
   * @format int64
   */
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];

/**
 * Subject Stats
 * API Insights usage subject stats for an organization
 */
type ApiInsightsSubjectStats = {
  subject_type?: string;
  subject_name?: string;
  /** @format int64 */
  subject_id?: number;
  total_request_count?: number;
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];

/**
 * Summary Stats
 * API Insights usage summary stats for an organization
 */
interface ApiInsightsSummaryStats {
  /**
   * The total number of requests within the queried time period
   * @format int64
   */
  total_request_count?: number;
  /**
   * The total number of requests that were rate limited within the queried time period
   * @format int64
   */
  rate_limited_request_count?: number;
}

/**
 * Time Stats
 * API Insights usage time stats for an organization
 */
type ApiInsightsTimeStats = {
  timestamp?: string;
  /** @format int64 */
  total_request_count?: number;
  /** @format int64 */
  rate_limited_request_count?: number;
}[];

/**
 * User Stats
 * API Insights usage stats for a user
 */
type ApiInsightsUserStats = {
  actor_type?: string;
  actor_name?: string;
  /** @format int64 */
  actor_id?: number;
  /** @format int64 */
  integration_id?: number | null;
  /** @format int64 */
  oauth_application_id?: number | null;
  total_request_count?: number;
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 * @example "collaborators_only"
 */
enum InteractionGroup {
  ExistingUsers = "existing_users",
  ContributorsOnly = "contributors_only",
  CollaboratorsOnly = "collaborators_only",
}

/**
 * Interaction Limits
 * Interaction limit settings.
 */
interface InteractionLimitResponse {
  /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. */
  limit: InteractionGroup;
  /** @example "repository" */
  origin: string;
  /**
   * @format date-time
   * @example "2018-08-17T04:18:39Z"
   */
  expires_at: string;
}

/**
 * The duration of the interaction restriction. Default: `one_day`.
 * @example "one_month"
 */
enum InteractionExpiry {
  OneDay = "one_day",
  ThreeDays = "three_days",
  OneWeek = "one_week",
  OneMonth = "one_month",
  SixMonths = "six_months",
}

/**
 * Interaction Restrictions
 * Limit interactions to a specific type of user for a specified duration
 */
interface InteractionLimit {
  /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. */
  limit: InteractionGroup;
  /** The duration of the interaction restriction. Default: `one_day`. */
  expiry?: InteractionExpiry;
}

interface OrganizationCreateIssueType {
  /** Name of the issue type. */
  name: string;
  /** Whether or not the issue type is enabled at the organization level. */
  is_enabled: boolean;
  /** Description of the issue type. */
  description?: string | null;
  /** Color for the issue type. */
  color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
}

interface OrganizationUpdateIssueType {
  /** Name of the issue type. */
  name: string;
  /** Whether or not the issue type is enabled at the organization level. */
  is_enabled: boolean;
  /** Description of the issue type. */
  description?: string | null;
  /** Color for the issue type. */
  color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
}

/**
 * Org Membership
 * Org Membership
 */
interface OrgMembership {
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/memberships/defunkt"
   */
  url: string;
  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   * @example "active"
   */
  state: "active" | "pending";
  /**
   * The user's membership type in the organization.
   * @example "admin"
   */
  role: "admin" | "member" | "billing_manager";
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat"
   */
  organization_url: string;
  /** A GitHub organization. */
  organization: OrganizationSimple;
  /** A GitHub user. */
  user: NullableSimpleUser;
  permissions?: {
    can_create_repository: boolean;
  };
}

/**
 * Migration
 * A migration.
 */
interface Migration {
  /**
   * @format int64
   * @example 79
   */
  id: number;
  /** A GitHub user. */
  owner: NullableSimpleUser;
  /** @example "0b989ba4-242f-11e5-81e1-c7b6966d2516" */
  guid: string;
  /** @example "pending" */
  state: string;
  /** @example true */
  lock_repositories: boolean;
  exclude_metadata: boolean;
  exclude_git_data: boolean;
  exclude_attachments: boolean;
  exclude_releases: boolean;
  exclude_owner_projects: boolean;
  org_metadata_only: boolean;
  /** The repositories included in the migration. Only returned for export migrations. */
  repositories: Repository[];
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octo-org/migrations/79"
   */
  url: string;
  /**
   * @format date-time
   * @example "2015-07-06T15:33:38-07:00"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2015-07-06T15:33:38-07:00"
   */
  updated_at: string;
  node_id: string;
  /** @format uri */
  archive_url?: string;
  /** Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
  exclude?: string[];
}

/**
 * Organization Role
 * Organization roles
 */
interface OrganizationRole {
  /**
   * The unique identifier of the role.
   * @format int64
   */
  id: number;
  /** The name of the role. */
  name: string;
  /** A short description about who this role is for or what permissions it grants. */
  description?: string | null;
  /** The system role from which this role inherits permissions. */
  base_role?: "read" | "triage" | "write" | "maintain" | "admin" | null;
  /** Source answers the question, "where did this role come from?" */
  source?: "Organization" | "Enterprise" | "Predefined" | null;
  /** A list of permissions included in this role. */
  permissions: string[];
  /** A GitHub user. */
  organization: NullableSimpleUser;
  /**
   * The date and time the role was created.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time the role was last updated.
   * @format date-time
   */
  updated_at: string;
}

/**
 * A Role Assignment for a Team
 * The Relationship a Team has with a role.
 */
interface TeamRoleAssignment {
  /**
   * Determines if the team has a direct, indirect, or mixed relationship to a role
   * @example "direct"
   */
  assignment?: "direct" | "indirect" | "mixed";
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  /** @format uri */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  members_url: string;
  /** @format uri */
  repositories_url: string;
  /** Groups of organization members that gives permissions on specified repositories. */
  parent: NullableTeamSimple;
}

/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
interface TeamSimple {
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** @example "justice-league" */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
}

/**
 * A Role Assignment for a User
 * The Relationship a User has with a role.
 */
interface UserRoleAssignment {
  /**
   * Determines if the user has a direct, indirect, or mixed relationship to a role
   * @example "direct"
   */
  assignment?: "direct" | "indirect" | "mixed";
  /** Team the user has gotten the role through */
  inherited_from?: TeamSimple[];
  name?: string | null;
  email?: string | null;
  /** @example "octocat" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "public" */
  user_view_type?: string;
}

/**
 * Package Version
 * A version of a software package
 */
interface PackageVersion {
  /**
   * Unique identifier of the package version.
   * @example 1
   */
  id: number;
  /**
   * The name of the package version.
   * @example "latest"
   */
  name: string;
  /** @example "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068" */
  url: string;
  /** @example "https://github.com/orgs/github/packages/container/package/super-linter" */
  package_html_url: string;
  /** @example "https://github.com/orgs/github/packages/container/super-linter/786068" */
  html_url?: string;
  /** @example "MIT" */
  license?: string;
  description?: string;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  deleted_at?: string;
  /** Package Version Metadata */
  metadata?: {
    /** @example "docker" */
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
    /** Container Metadata */
    container?: {
      tags: string[];
    };
    /** Docker Metadata */
    docker?: {
      tag?: string[];
    };
  };
}

/**
 * Simple Organization Programmatic Access Grant Request
 * Minimal representation of an organization programmatic access grant request for enumerations
 */
interface OrganizationProgrammaticAccessGrantRequest {
  /** Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests. */
  id: number;
  /** Reason for requesting access. */
  reason: string | null;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Type of repository selection requested. */
  repository_selection: "none" | "all" | "subset";
  /** URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`. */
  repositories_url: string;
  /** Permissions requested, categorized by type of permission. */
  permissions: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Date and time when the request for access was created. */
  created_at: string;
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
  token_id: number;
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
  token_name: string;
  /** Whether the associated fine-grained personal access token has expired. */
  token_expired: boolean;
  /** Date and time when the associated fine-grained personal access token expires. */
  token_expires_at: string | null;
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
  token_last_used_at: string | null;
}

/**
 * Organization Programmatic Access Grant
 * Minimal representation of an organization programmatic access grant for enumerations
 */
interface OrganizationProgrammaticAccessGrant {
  /** Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token. */
  id: number;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Type of repository selection requested. */
  repository_selection: "none" | "all" | "subset";
  /** URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`. */
  repositories_url: string;
  /** Permissions requested, categorized by type of permission. */
  permissions: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Date and time when the fine-grained personal access token was approved to access the organization. */
  access_granted_at: string;
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
  token_id: number;
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
  token_name: string;
  /** Whether the associated fine-grained personal access token has expired. */
  token_expired: boolean;
  /** Date and time when the associated fine-grained personal access token expires. */
  token_expires_at: string | null;
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
  token_last_used_at: string | null;
}

/**
 * Organization private registry
 * Private registry configuration for an organization
 */
interface OrgPrivateRegistryConfiguration {
  /**
   * The name of the private registry configuration.
   * @example "MAVEN_REPOSITORY_SECRET"
   */
  name: string;
  /** The registry type. */
  registry_type: "maven_repository" | "nuget_feed" | "goproxy_server";
  /**
   * The username to use when authenticating with the private registry.
   * @example "monalisa"
   */
  username?: string | null;
  /** Which type of organization repositories have access to the private registry. */
  visibility: "all" | "private" | "selected";
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Organization private registry
 * Private registry configuration for an organization
 */
interface OrgPrivateRegistryConfigurationWithSelectedRepositories {
  /**
   * The name of the private registry configuration.
   * @example "MAVEN_REPOSITORY_SECRET"
   */
  name: string;
  /** The registry type. */
  registry_type: "maven_repository" | "nuget_feed" | "goproxy_server";
  /**
   * The username to use when authenticating with the private registry.
   * @example "monalisa"
   */
  username?: string;
  /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
  visibility: "all" | "private" | "selected";
  /** An array of repository IDs that can access the organization private registry when `visibility` is set to `selected`. */
  selected_repository_ids?: number[];
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Project
 * Projects are a way to organize columns and cards of work.
 */
interface Project {
  /**
   * @format uri
   * @example "https://api.github.com/repos/api-playground/projects-test"
   */
  owner_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/1002604"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/api-playground/projects-test/projects/12"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/1002604/columns"
   */
  columns_url: string;
  /** @example 1002604 */
  id: number;
  /** @example "MDc6UHJvamVjdDEwMDI2MDQ=" */
  node_id: string;
  /**
   * Name of the project
   * @example "Week One Sprint"
   */
  name: string;
  /**
   * Body of the project
   * @example "This project represents the sprint of the first week in January"
   */
  body: string | null;
  /** @example 1 */
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
  organization_permission?: "read" | "write" | "admin" | "none";
  /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
  private?: boolean;
}

/**
 * Organization Custom Property
 * Custom property defined on an organization
 */
interface CustomProperty {
  /** The name of the property */
  property_name: string;
  /**
   * The URL that can be used to fetch, update, or delete info about this property via the API.
   * @format uri
   */
  url?: string;
  /**
   * The source type of the property
   * @example "organization"
   */
  source_type?: "organization" | "enterprise";
  /**
   * The type of the value for the property
   * @example "single_select"
   */
  value_type: "string" | "single_select" | "multi_select" | "true_false";
  /** Whether the property is required. */
  required?: boolean;
  /** Default value of the property */
  default_value?: string | string[] | null;
  /** Short description of the property */
  description?: string | null;
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   * @maxItems 200
   */
  allowed_values?: string[] | null;
  /**
   * Who can edit the values of the property
   * @example "org_actors"
   */
  values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
}

/**
 * Custom Property Set Payload
 * Custom property set payload
 */
interface CustomPropertySetPayload {
  /**
   * The type of the value for the property
   * @example "single_select"
   */
  value_type: "string" | "single_select" | "multi_select" | "true_false";
  /** Whether the property is required. */
  required?: boolean;
  /** Default value of the property */
  default_value?: string | string[] | null;
  /** Short description of the property */
  description?: string | null;
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   * @maxItems 200
   */
  allowed_values?: string[] | null;
  /**
   * Who can edit the values of the property
   * @example "org_actors"
   */
  values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
}

/**
 * Custom Property Value
 * Custom property name and associated value
 */
interface CustomPropertyValue {
  /** The name of the property */
  property_name: string;
  /** The value assigned to the property */
  value: string | string[] | null;
}

/**
 * Organization Repository Custom Property Values
 * List of custom property values for a repository
 */
interface OrgRepoCustomPropertyValues {
  /** @example 1296269 */
  repository_id: number;
  /** @example "Hello-World" */
  repository_name: string;
  /** @example "octocat/Hello-World" */
  repository_full_name: string;
  /** List of custom property names and associated values */
  properties: CustomPropertyValue[];
}

/**
 * Repository
 * A repository on GitHub.
 */
type NullableRepository = {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @deprecated
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
  /** The status of the code search index for this repository */
  code_search_index_status?: {
    lexical_search_ok?: boolean;
    lexical_commit_sha?: string;
  };
};

/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
interface CodeOfConductSimple {
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   */
  url: string;
  /** @example "citizen_code_of_conduct" */
  key: string;
  /** @example "Citizen Code of Conduct" */
  name: string;
  /**
   * @format uri
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   */
  html_url: string | null;
}

/**
 * Full Repository
 * Full Repository
 */
interface FullRepository {
  /**
   * @format int64
   * @example 1296269
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "Hello-World" */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /** @example "master" */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /** @example true */
  is_template?: boolean;
  /** @example ["octocat","atom","electron","API"] */
  topics?: string[];
  /** @example true */
  has_issues: boolean;
  /** @example true */
  has_projects: boolean;
  /** @example true */
  has_wiki: boolean;
  has_pages: boolean;
  /** @example true */
  has_downloads?: boolean;
  /** @example true */
  has_discussions: boolean;
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @example "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  /** @example true */
  allow_rebase_merge?: boolean;
  /** A repository on GitHub. */
  template_repository?: NullableRepository;
  temp_clone_token?: string | null;
  /** @example true */
  allow_squash_merge?: boolean;
  /** @example false */
  allow_auto_merge?: boolean;
  /** @example false */
  delete_branch_on_merge?: boolean;
  /** @example true */
  allow_merge_commit?: boolean;
  /** @example true */
  allow_update_branch?: boolean;
  /** @example false */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   * @example "PR_TITLE"
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   * @example "PR_BODY"
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @example "PR_TITLE"
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   * @example "PR_BODY"
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /** @example true */
  allow_forking?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
  /** @example 42 */
  subscribers_count: number;
  /** @example 0 */
  network_count: number;
  /** License Simple */
  license: NullableLicenseSimple;
  /** A GitHub user. */
  organization?: NullableSimpleUser;
  /** A repository on GitHub. */
  parent?: Repository;
  /** A repository on GitHub. */
  source?: Repository;
  forks: number;
  master_branch?: string;
  open_issues: number;
  watchers: number;
  /**
   * Whether anonymous git access is allowed.
   * @default true
   */
  anonymous_access_enabled?: boolean;
  /** Code of Conduct Simple */
  code_of_conduct?: CodeOfConductSimple;
  security_and_analysis?: SecurityAndAnalysis;
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
}

/** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
enum RepositoryRuleEnforcement {
  Disabled = "disabled",
  Active = "active",
  Evaluate = "evaluate",
}

/**
 * Repository Ruleset Bypass Actor
 * An actor that can bypass rules in a ruleset
 */
interface RepositoryRulesetBypassActor {
  /** The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories. */
  actor_id?: number | null;
  /** The type of actor that can bypass a ruleset. */
  actor_type: "Integration" | "OrganizationAdmin" | "RepositoryRole" | "Team" | "DeployKey";
  /**
   * When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
   * @default "always"
   */
  bypass_mode?: "always" | "pull_request";
}

/**
 * Repository ruleset conditions for ref names
 * Parameters for a repository ruleset ref name condition
 */
interface RepositoryRulesetConditions {
  ref_name?: {
    /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
    include?: string[];
    /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
    exclude?: string[];
  };
}

/**
 * Repository ruleset conditions for repository names
 * Parameters for a repository name condition
 */
interface RepositoryRulesetConditionsRepositoryNameTarget {
  repository_name: {
    /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
    include?: string[];
    /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
    exclude?: string[];
    /** Whether renaming of target repositories is prevented. */
    protected?: boolean;
  };
}

/**
 * Repository ruleset conditions for repository IDs
 * Parameters for a repository ID condition
 */
interface RepositoryRulesetConditionsRepositoryIdTarget {
  repository_id: {
    /** The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. */
    repository_ids?: number[];
  };
}

/**
 * Repository ruleset property targeting definition
 * Parameters for a targeting a repository property
 */
interface RepositoryRulesetConditionsRepositoryPropertySpec {
  /** The name of the repository property to target */
  name: string;
  /** The values to match for the repository property */
  property_values: string[];
  /** The source of the repository property. Defaults to 'custom' if not specified. */
  source?: "custom" | "system";
}

/**
 * Repository ruleset conditions for repository properties
 * Parameters for a repository property condition
 */
interface RepositoryRulesetConditionsRepositoryPropertyTarget {
  repository_property: {
    /** The repository properties and values to include. All of these properties must match for the condition to pass. */
    include?: RepositoryRulesetConditionsRepositoryPropertySpec[];
    /** The repository properties and values to exclude. The condition will not pass if any of these properties match. */
    exclude?: RepositoryRulesetConditionsRepositoryPropertySpec[];
  };
}

/**
 * Organization ruleset conditions
 * Conditions for an organization ruleset.
 * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
 * The push rulesets conditions object does not require the `ref_name` property.
 * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
 */
type OrgRulesetConditions =
  | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryNameTarget)
  | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryIdTarget)
  | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryPropertyTarget);

/**
 * creation
 * Only allow users with bypass permission to create matching refs.
 */
interface RepositoryRuleCreation {
  type: "creation";
}

/**
 * update
 * Only allow users with bypass permission to update matching refs.
 */
interface RepositoryRuleUpdate {
  type: "update";
  parameters?: {
    /** Branch can pull changes from its upstream repository */
    update_allows_fetch_and_merge: boolean;
  };
}

/**
 * deletion
 * Only allow users with bypass permissions to delete matching refs.
 */
interface RepositoryRuleDeletion {
  type: "deletion";
}

/**
 * required_linear_history
 * Prevent merge commits from being pushed to matching refs.
 */
interface RepositoryRuleRequiredLinearHistory {
  type: "required_linear_history";
}

/**
 * merge_queue
 * Merges must be performed via a merge queue.
 */
interface RepositoryRuleMergeQueue {
  type: "merge_queue";
  parameters?: {
    /**
     * Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
     * @min 1
     * @max 360
     */
    check_response_timeout_minutes: number;
    /** When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. */
    grouping_strategy: "ALLGREEN" | "HEADGREEN";
    /**
     * Limit the number of queued pull requests requesting checks and workflow runs at the same time.
     * @min 0
     * @max 100
     */
    max_entries_to_build: number;
    /**
     * The maximum number of PRs that will be merged together in a group.
     * @min 0
     * @max 100
     */
    max_entries_to_merge: number;
    /** Method to use when merging changes from queued pull requests. */
    merge_method: "MERGE" | "SQUASH" | "REBASE";
    /**
     * The minimum number of PRs that will be merged together in a group.
     * @min 0
     * @max 100
     */
    min_entries_to_merge: number;
    /**
     * The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
     * @min 0
     * @max 360
     */
    min_entries_to_merge_wait_minutes: number;
  };
}

/**
 * required_deployments
 * Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 */
interface RepositoryRuleRequiredDeployments {
  type: "required_deployments";
  parameters?: {
    /** The environments that must be successfully deployed to before branches can be merged. */
    required_deployment_environments: string[];
  };
}

/**
 * required_signatures
 * Commits pushed to matching refs must have verified signatures.
 */
interface RepositoryRuleRequiredSignatures {
  type: "required_signatures";
}

/**
 * Reviewer
 * A required reviewing team
 */
interface RepositoryRuleParamsReviewer {
  /** ID of the reviewer which must review changes to matching files. */
  id: number;
  /** The type of the reviewer */
  type: "Team";
}

/**
 * RequiredReviewerConfiguration
 * A reviewing team, and file patterns describing which files they must approve changes to.
 */
interface RepositoryRuleParamsRequiredReviewerConfiguration {
  /** Array of file patterns. Pull requests which change matching files must be approved by the specified team. File patterns use the same syntax as `.gitignore` files. */
  file_patterns: string[];
  /** Minimum number of approvals required from the specified team. If set to zero, the team will be added to the pull request but approval is optional. */
  minimum_approvals: number;
  /** A required reviewing team */
  reviewer: RepositoryRuleParamsReviewer;
}

/**
 * pull_request
 * Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
 */
interface RepositoryRulePullRequest {
  type: "pull_request";
  parameters?: {
    /** Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled. */
    allowed_merge_methods?: ("merge" | "squash" | "rebase")[];
    /** Automatically request review from Copilot for new pull requests, if the author has access to Copilot code review. */
    automatic_copilot_code_review_enabled?: boolean;
    /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
    dismiss_stale_reviews_on_push: boolean;
    /** Require an approving review in pull requests that modify files that have a designated code owner. */
    require_code_owner_review: boolean;
    /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
    require_last_push_approval: boolean;
    /**
     * The number of approving reviews that are required before a pull request can be merged.
     * @min 0
     * @max 10
     */
    required_approving_review_count: number;
    /** All conversations on code must be resolved before a pull request can be merged. */
    required_review_thread_resolution: boolean;
  };
}

/**
 * StatusCheckConfiguration
 * Required status check
 */
interface RepositoryRuleParamsStatusCheckConfiguration {
  /** The status check context name that must be present on the commit. */
  context: string;
  /** The optional integration ID that this status check must originate from. */
  integration_id?: number;
}

/**
 * required_status_checks
 * Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
 */
interface RepositoryRuleRequiredStatusChecks {
  type: "required_status_checks";
  parameters?: {
    /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
    do_not_enforce_on_create?: boolean;
    /** Status checks that are required. */
    required_status_checks: RepositoryRuleParamsStatusCheckConfiguration[];
    /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
    strict_required_status_checks_policy: boolean;
  };
}

/**
 * non_fast_forward
 * Prevent users with push access from force pushing to refs.
 */
interface RepositoryRuleNonFastForward {
  type: "non_fast_forward";
}

/**
 * commit_message_pattern
 * Parameters to be used for the commit_message_pattern rule
 */
interface RepositoryRuleCommitMessagePattern {
  type: "commit_message_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * commit_author_email_pattern
 * Parameters to be used for the commit_author_email_pattern rule
 */
interface RepositoryRuleCommitAuthorEmailPattern {
  type: "commit_author_email_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * committer_email_pattern
 * Parameters to be used for the committer_email_pattern rule
 */
interface RepositoryRuleCommitterEmailPattern {
  type: "committer_email_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * branch_name_pattern
 * Parameters to be used for the branch_name_pattern rule
 */
interface RepositoryRuleBranchNamePattern {
  type: "branch_name_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * tag_name_pattern
 * Parameters to be used for the tag_name_pattern rule
 */
interface RepositoryRuleTagNamePattern {
  type: "tag_name_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * file_path_restriction
 * Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
 */
interface RepositoryRuleFilePathRestriction {
  type: "file_path_restriction";
  parameters?: {
    /** The file paths that are restricted from being pushed to the commit graph. */
    restricted_file_paths: string[];
  };
}

/**
 * max_file_path_length
 * Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
 */
interface RepositoryRuleMaxFilePathLength {
  type: "max_file_path_length";
  parameters?: {
    /**
     * The maximum amount of characters allowed in file paths.
     * @min 1
     * @max 32767
     */
    max_file_path_length: number;
  };
}

/**
 * file_extension_restriction
 * Prevent commits that include files with specified file extensions from being pushed to the commit graph.
 */
interface RepositoryRuleFileExtensionRestriction {
  type: "file_extension_restriction";
  parameters?: {
    /** The file extensions that are restricted from being pushed to the commit graph. */
    restricted_file_extensions: string[];
  };
}

/**
 * max_file_size
 * Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
 */
interface RepositoryRuleMaxFileSize {
  type: "max_file_size";
  parameters?: {
    /**
     * The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
     * @min 1
     * @max 100
     */
    max_file_size: number;
  };
}

/**
 * RestrictedCommits
 * Restricted commit
 */
interface RepositoryRuleParamsRestrictedCommits {
  /** Full or abbreviated commit hash to reject */
  oid: string;
  /** Reason for restriction */
  reason?: string;
}

/**
 * WorkflowFileReference
 * A workflow that must run for this rule to pass
 */
interface RepositoryRuleParamsWorkflowFileReference {
  /** The path to the workflow file */
  path: string;
  /** The ref (branch or tag) of the workflow file to use */
  ref?: string;
  /** The ID of the repository where the workflow is defined */
  repository_id: number;
  /** The commit SHA of the workflow file to use */
  sha?: string;
}

/**
 * workflows
 * Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 */
interface RepositoryRuleWorkflows {
  type: "workflows";
  parameters?: {
    /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
    do_not_enforce_on_create?: boolean;
    /** Workflows that must pass for this rule to pass. */
    workflows: RepositoryRuleParamsWorkflowFileReference[];
  };
}

/**
 * CodeScanningTool
 * A tool that must provide code scanning results for this rule to pass.
 */
interface RepositoryRuleParamsCodeScanningTool {
  /** The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  alerts_threshold: "none" | "errors" | "errors_and_warnings" | "all";
  /** The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  security_alerts_threshold: "none" | "critical" | "high_or_higher" | "medium_or_higher" | "all";
  /** The name of a code scanning tool */
  tool: string;
}

/**
 * code_scanning
 * Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
 */
interface RepositoryRuleCodeScanning {
  type: "code_scanning";
  parameters?: {
    /** Tools that must provide code scanning results for this rule to pass. */
    code_scanning_tools: RepositoryRuleParamsCodeScanningTool[];
  };
}

/**
 * Repository Rule
 * A repository rule.
 */
type RepositoryRule =
  | RepositoryRuleCreation
  | RepositoryRuleUpdate
  | RepositoryRuleDeletion
  | RepositoryRuleRequiredLinearHistory
  | RepositoryRuleMergeQueue
  | RepositoryRuleRequiredDeployments
  | RepositoryRuleRequiredSignatures
  | RepositoryRulePullRequest
  | RepositoryRuleRequiredStatusChecks
  | RepositoryRuleNonFastForward
  | RepositoryRuleCommitMessagePattern
  | RepositoryRuleCommitAuthorEmailPattern
  | RepositoryRuleCommitterEmailPattern
  | RepositoryRuleBranchNamePattern
  | RepositoryRuleTagNamePattern
  | RepositoryRuleFilePathRestriction
  | RepositoryRuleMaxFilePathLength
  | RepositoryRuleFileExtensionRestriction
  | RepositoryRuleMaxFileSize
  | RepositoryRuleWorkflows
  | RepositoryRuleCodeScanning;

/**
 * Repository ruleset
 * A set of rules to apply when specified conditions are met.
 */
interface RepositoryRuleset {
  /** The ID of the ruleset */
  id: number;
  /** The name of the ruleset */
  name: string;
  /** The target of the ruleset */
  target?: "branch" | "tag" | "push" | "repository";
  /** The type of the source of the ruleset */
  source_type?: "Repository" | "Organization" | "Enterprise";
  /** The name of the source */
  source: string;
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
  enforcement: RepositoryRuleEnforcement;
  /** The actors that can bypass the rules in this ruleset */
  bypass_actors?: RepositoryRulesetBypassActor[];
  /**
   * The bypass type of the user making the API request for this ruleset. This field is only returned when
   * querying the repository-level endpoint.
   */
  current_user_can_bypass?: "always" | "pull_requests_only" | "never";
  node_id?: string;
  _links?: {
    self?: {
      /** The URL of the ruleset */
      href?: string;
    };
    html?: {
      /** The html URL of the ruleset */
      href?: string;
    } | null;
  };
  conditions?: RepositoryRulesetConditions | OrgRulesetConditions | null;
  rules?: RepositoryRule[];
  /** @format date-time */
  created_at?: string;
  /** @format date-time */
  updated_at?: string;
}

/**
 * Rule Suites
 * Response
 */
type RuleSuites = {
  /** The unique identifier of the rule insight. */
  id?: number;
  /** The number that identifies the user. */
  actor_id?: number;
  /** The handle for the GitHub user account. */
  actor_name?: string;
  /** The first commit sha before the push evaluation. */
  before_sha?: string;
  /** The last commit sha in the push evaluation. */
  after_sha?: string;
  /** The ref name that the evaluation ran on. */
  ref?: string;
  /** The ID of the repository associated with the rule evaluation. */
  repository_id?: number;
  /** The name of the repository without the `.git` extension. */
  repository_name?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string;
  /** The result of the rule evaluations for rules with the `active` enforcement status. */
  result?: "pass" | "fail" | "bypass";
  /** The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. */
  evaluation_result?: "pass" | "fail" | "bypass";
}[];

/**
 * Rule Suite
 * Response
 */
interface RuleSuite {
  /** The unique identifier of the rule insight. */
  id?: number;
  /** The number that identifies the user. */
  actor_id?: number | null;
  /** The handle for the GitHub user account. */
  actor_name?: string | null;
  /** The first commit sha before the push evaluation. */
  before_sha?: string;
  /** The last commit sha in the push evaluation. */
  after_sha?: string;
  /** The ref name that the evaluation ran on. */
  ref?: string;
  /** The ID of the repository associated with the rule evaluation. */
  repository_id?: number;
  /** The name of the repository without the `.git` extension. */
  repository_name?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string;
  /** The result of the rule evaluations for rules with the `active` enforcement status. */
  result?: "pass" | "fail" | "bypass";
  /** The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run. */
  evaluation_result?: "pass" | "fail" | "bypass" | null;
  /** Details on the evaluated rules. */
  rule_evaluations?: {
    rule_source?: {
      /** The type of rule source. */
      type?: string;
      /** The ID of the rule source. */
      id?: number | null;
      /** The name of the rule source. */
      name?: string | null;
    };
    /** The enforcement level of this rule source. */
    enforcement?: "active" | "evaluate" | "deleted ruleset";
    /** The result of the evaluation of the individual rule. */
    result?: "pass" | "fail";
    /** The type of rule. */
    rule_type?: string;
    /** The detailed failure message for the rule. Null if the rule passed. */
    details?: string | null;
  }[];
}

/**
 * Ruleset version
 * The historical version of a ruleset
 */
interface RulesetVersion {
  /** The ID of the previous version of the ruleset */
  version_id: number;
  /** The actor who updated the ruleset */
  actor: {
    id?: number;
    type?: string;
  };
  /** @format date-time */
  updated_at: string;
}

type RulesetVersionWithState = RulesetVersion & {
  /** The state of the ruleset version */
  state: object;
};

/** A product affected by the vulnerability detailed in a repository security advisory. */
interface RepositoryAdvisoryVulnerability {
  /** The name of the package affected by the vulnerability. */
  package: {
    /** The package's language or package management ecosystem. */
    ecosystem: SecurityAdvisoryEcosystems;
    /** The unique package name within its ecosystem. */
    name: string | null;
  };
  /** The range of the package versions affected by the vulnerability. */
  vulnerable_version_range: string | null;
  /** The package version(s) that resolve the vulnerability. */
  patched_versions: string | null;
  /** The functions in the package that are affected. */
  vulnerable_functions: string[] | null;
}

/** A credit given to a user for a repository security advisory. */
interface RepositoryAdvisoryCredit {
  /** A GitHub user. */
  user: SimpleUser;
  /** The type of credit the user is receiving. */
  type: SecurityAdvisoryCreditTypes;
  /** The state of the user's acceptance of the credit. */
  state: "accepted" | "declined" | "pending";
}

/** A repository security advisory. */
interface RepositoryAdvisory {
  /** The GitHub Security Advisory ID. */
  ghsa_id: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id: string | null;
  /**
   * The API URL for the advisory.
   * @format uri
   */
  url: string;
  /**
   * The URL for the advisory.
   * @format uri
   */
  html_url: string;
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory entails.
   * @maxLength 65535
   */
  description: string | null;
  /** The severity of the advisory. */
  severity: "critical" | "high" | "medium" | "low" | null;
  /** The author of the advisory. */
  author: SimpleUser | null;
  /** The publisher of the advisory. */
  publisher: SimpleUser | null;
  identifiers: {
    /** The type of identifier. */
    type: "CVE" | "GHSA";
    /** The identifier value. */
    value: string;
  }[];
  /** The state of the advisory. */
  state: "published" | "closed" | "withdrawn" | "draft" | "triage";
  /**
   * The date and time of when the advisory was created, in ISO 8601 format.
   * @format date-time
   */
  created_at: string | null;
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   * @format date-time
   */
  updated_at: string | null;
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   * @format date-time
   */
  published_at: string | null;
  /**
   * The date and time of when the advisory was closed, in ISO 8601 format.
   * @format date-time
   */
  closed_at: string | null;
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @format date-time
   */
  withdrawn_at: string | null;
  submission: {
    /** Whether a private vulnerability report was accepted by the repository's administrators. */
    accepted: boolean;
  } | null;
  vulnerabilities: RepositoryAdvisoryVulnerability[] | null;
  cvss: {
    /** The CVSS vector. */
    vector_string: string | null;
    /**
     * The CVSS score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
  cvss_severities?: CvssSeverities;
  cwes:
    | {
        /** The Common Weakness Enumeration (CWE) identifier. */
        cwe_id: string;
        /** The name of the CWE. */
        name: string;
      }[]
    | null;
  /** A list of only the CWE IDs. */
  cwe_ids: string[] | null;
  credits:
    | {
        /** The username of the user credited. */
        login?: string;
        /** The type of credit the user is receiving. */
        type?: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  credits_detailed: RepositoryAdvisoryCredit[] | null;
  /** A list of users that collaborate on the advisory. */
  collaborating_users: SimpleUser[] | null;
  /** A list of teams that collaborate on the advisory. */
  collaborating_teams: Team[] | null;
  /** A temporary private fork of the advisory's repository for collaborating on a fix. */
  private_fork: SimpleRepository | null;
}

interface ActionsBillingUsage {
  /** The sum of the free and paid GitHub Actions minutes used. */
  total_minutes_used: number;
  /** The total paid GitHub Actions minutes used. */
  total_paid_minutes_used: number;
  /** The amount of free GitHub Actions minutes available. */
  included_minutes: number;
  minutes_used_breakdown: {
    /** Total minutes used on Ubuntu runner machines. */
    UBUNTU?: number;
    /** Total minutes used on macOS runner machines. */
    MACOS?: number;
    /** Total minutes used on Windows runner machines. */
    WINDOWS?: number;
    /** Total minutes used on Ubuntu 4 core runner machines. */
    ubuntu_4_core?: number;
    /** Total minutes used on Ubuntu 8 core runner machines. */
    ubuntu_8_core?: number;
    /** Total minutes used on Ubuntu 16 core runner machines. */
    ubuntu_16_core?: number;
    /** Total minutes used on Ubuntu 32 core runner machines. */
    ubuntu_32_core?: number;
    /** Total minutes used on Ubuntu 64 core runner machines. */
    ubuntu_64_core?: number;
    /** Total minutes used on Windows 4 core runner machines. */
    windows_4_core?: number;
    /** Total minutes used on Windows 8 core runner machines. */
    windows_8_core?: number;
    /** Total minutes used on Windows 16 core runner machines. */
    windows_16_core?: number;
    /** Total minutes used on Windows 32 core runner machines. */
    windows_32_core?: number;
    /** Total minutes used on Windows 64 core runner machines. */
    windows_64_core?: number;
    /** Total minutes used on macOS 12 core runner machines. */
    macos_12_core?: number;
    /** Total minutes used on all runner machines. */
    total?: number;
  };
}

interface PackagesBillingUsage {
  /** Sum of the free and paid storage space (GB) for GitHuub Packages. */
  total_gigabytes_bandwidth_used: number;
  /** Total paid storage space (GB) for GitHuub Packages. */
  total_paid_gigabytes_bandwidth_used: number;
  /** Free storage space (GB) for GitHub Packages. */
  included_gigabytes_bandwidth: number;
}

interface CombinedBillingUsage {
  /** Numbers of days left in billing cycle. */
  days_left_in_billing_cycle: number;
  /** Estimated storage space (GB) used in billing cycle. */
  estimated_paid_storage_for_month: number;
  /** Estimated sum of free and paid storage space (GB) used in billing cycle. */
  estimated_storage_for_month: number;
}

/**
 * Hosted compute network configuration
 * A hosted compute network configuration.
 */
interface NetworkConfiguration {
  /**
   * The unique identifier of the network configuration.
   * @example "123ABC456DEF789"
   */
  id: string;
  /**
   * The name of the network configuration.
   * @example "my-network-configuration"
   */
  name: string;
  /** The hosted compute service the network configuration supports. */
  compute_service?: "none" | "actions" | "codespaces";
  /**
   * The unique identifier of each network settings in the configuration.
   * @example "123ABC456DEF789"
   */
  network_settings_ids?: string[];
  /**
   * The time at which the network configuration was created, in ISO 8601 format.
   * @format date-time
   * @example "2024-04-26T11:31:07Z"
   */
  created_on: string | null;
}

/**
 * Hosted compute network settings resource
 * A hosted compute network settings resource.
 */
interface NetworkSettings {
  /**
   * The unique identifier of the network settings resource.
   * @example "220F78DACB92BBFBC5E6F22DE1CCF52309D"
   */
  id: string;
  /**
   * The identifier of the network configuration that is using this settings resource.
   * @example "934E208B3EE0BD60CF5F752C426BFB53562"
   */
  network_configuration_id?: string;
  /**
   * The name of the network settings resource.
   * @example "my-network-settings"
   */
  name: string;
  /**
   * The subnet this network settings resource is configured for.
   * @example "/subscriptions/14839728-3ad9-43ab-bd2b-fa6ad0f75e2a/resourceGroups/my-rg/providers/Microsoft.Network/virtualNetworks/my-vnet/subnets/my-subnet"
   */
  subnet_id: string;
  /**
   * The location of the subnet this network settings resource is configured for.
   * @example "eastus"
   */
  region: string;
}

/**
 * Team Organization
 * Team Organization
 */
interface TeamOrganization {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
  /** @example "github" */
  name?: string;
  /** @example "GitHub" */
  company?: string;
  /**
   * @format uri
   * @example "https://github.com/blog"
   */
  blog?: string;
  /** @example "San Francisco" */
  location?: string;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email?: string;
  /** @example "github" */
  twitter_username?: string | null;
  /** @example true */
  is_verified?: boolean;
  /** @example true */
  has_organization_projects: boolean;
  /** @example true */
  has_repository_projects: boolean;
  /** @example 2 */
  public_repos: number;
  /** @example 1 */
  public_gists: number;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /** @example "Organization" */
  type: string;
  /** @example 100 */
  total_private_repos?: number;
  /** @example 100 */
  owned_private_repos?: number;
  /** @example 81 */
  private_gists?: number | null;
  /** @example 10000 */
  disk_usage?: number | null;
  /** @example 8 */
  collaborators?: number | null;
  /**
   * @format email
   * @example "org@example.com"
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /** @example true */
  members_can_create_repositories?: boolean | null;
  /** @example true */
  two_factor_requirement_enabled?: boolean | null;
  /** @example "all" */
  members_allowed_repository_creation_type?: string;
  /** @example true */
  members_can_create_public_repositories?: boolean;
  /** @example true */
  members_can_create_private_repositories?: boolean;
  /** @example true */
  members_can_create_internal_repositories?: boolean;
  /** @example true */
  members_can_create_pages?: boolean;
  /** @example true */
  members_can_create_public_pages?: boolean;
  /** @example true */
  members_can_create_private_pages?: boolean;
  /** @example false */
  members_can_fork_private_repositories?: boolean | null;
  /** @example false */
  web_commit_signoff_required?: boolean;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  archived_at: string | null;
}

/**
 * Full Team
 * Groups of organization members that gives permissions on specified repositories.
 */
interface TeamFull {
  /**
   * Unique identifier of the team
   * @example 42
   */
  id: number;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * Name of the team
   * @example "Developers"
   */
  name: string;
  /** @example "justice-league" */
  slug: string;
  /** @example "A great team." */
  description: string | null;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: "closed" | "secret";
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: "notifications_enabled" | "notifications_disabled";
  /**
   * Permission that the team will have for its repositories
   * @example "push"
   */
  permission: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** Groups of organization members that gives permissions on specified repositories. */
  parent?: NullableTeamSimple;
  /** @example 3 */
  members_count: number;
  /** @example 10 */
  repos_count: number;
  /**
   * @format date-time
   * @example "2017-07-14T16:53:42Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2017-08-17T12:37:15Z"
   */
  updated_at: string;
  /** Team Organization */
  organization: TeamOrganization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
}

/**
 * Team Discussion
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
interface TeamDiscussion {
  /** A GitHub user. */
  author: NullableSimpleUser;
  /**
   * The main text of the discussion.
   * @example "Please suggest improvements to our workflow in comments."
   */
  body: string;
  /** @example "<p>Hi! This is an area for us to collaborate as a team</p>" */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /** @example 0 */
  comments_count: number;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1/comments"
   */
  comments_url: string;
  /**
   * @format date-time
   * @example "2018-01-25T18:56:31Z"
   */
  created_at: string;
  /** @format date-time */
  last_edited_at: string | null;
  /**
   * @format uri
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1"
   */
  html_url: string;
  /** @example "MDE0OlRlYW1EaXNjdXNzaW9uMQ==" */
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   * @example 42
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   * @example true
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization owners.
   * @example true
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027"
   */
  team_url: string;
  /**
   * The title of the discussion.
   * @example "How can we improve our workflow?"
   */
  title: string;
  /**
   * @format date-time
   * @example "2018-01-25T18:56:31Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1"
   */
  url: string;
  reactions?: ReactionRollup;
}

/**
 * Team Discussion Comment
 * A reply to a discussion within a team.
 */
interface TeamDiscussionComment {
  /** A GitHub user. */
  author: NullableSimpleUser;
  /**
   * The main text of the comment.
   * @example "I agree with this suggestion."
   */
  body: string;
  /** @example "<p>Do you like apples?</p>" */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /**
   * @format date-time
   * @example "2018-01-15T23:53:58Z"
   */
  created_at: string;
  /** @format date-time */
  last_edited_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1"
   */
  discussion_url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1"
   */
  html_url: string;
  /** @example "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=" */
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   * @example 42
   */
  number: number;
  /**
   * @format date-time
   * @example "2018-01-15T23:53:58Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1"
   */
  url: string;
  reactions?: ReactionRollup;
}

/**
 * Reaction
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
interface Reaction {
  /** @example 1 */
  id: number;
  /** @example "MDg6UmVhY3Rpb24x" */
  node_id: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * The reaction to use
   * @example "heart"
   */
  content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /**
   * @format date-time
   * @example "2016-05-20T20:09:31Z"
   */
  created_at: string;
}

/**
 * Team Membership
 * Team Membership
 */
interface TeamMembership {
  /** @format uri */
  url: string;
  /**
   * The role of the user in the team.
   * @default "member"
   * @example "member"
   */
  role: "member" | "maintainer";
  /** The state of the user's membership in the team. */
  state: "active" | "pending";
}

/**
 * Team Project
 * A team's access to a project.
 */
interface TeamProject {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string | null;
  number: number;
  state: string;
  /** A GitHub user. */
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /** The organization permission for this project. Only present when owner is an organization. */
  organization_permission?: string;
  /** Whether the project is private or not. Only present when owner is an organization. */
  private?: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}

/**
 * Team Repository
 * A team's access to a repository.
 */
interface TeamRepository {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** @example "admin" */
  role_name?: string;
  /** A GitHub user. */
  owner: NullableSimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /** @example 108 */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   * @default false
   * @example false
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   * @example false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
}

/**
 * Project Card
 * Project cards represent a scope of work.
 */
interface ProjectCard {
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/cards/1478"
   */
  url: string;
  /**
   * The project card's ID
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDExOlByb2plY3RDYXJkMTQ3OA==" */
  node_id: string;
  /** @example "Add payload for delete Project column" */
  note: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2016-09-05T14:21:06Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:20:22Z"
   */
  updated_at: string;
  /**
   * Whether or not the card is archived
   * @example false
   */
  archived?: boolean;
  column_name?: string;
  project_id?: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367"
   */
  column_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/api-playground/projects-test/issues/3"
   */
  content_url?: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
}

/**
 * Project Column
 * Project columns contain cards of work.
 */
interface ProjectColumn {
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367/cards"
   */
  cards_url: string;
  /**
   * The unique identifier of the project column
   * @example 42
   */
  id: number;
  /** @example "MDEzOlByb2plY3RDb2x1bW4zNjc=" */
  node_id: string;
  /**
   * Name of the project column
   * @example "Remaining tasks"
   */
  name: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:18:44Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:22:28Z"
   */
  updated_at: string;
}

/**
 * Project Collaborator Permission
 * Project Collaborator Permission
 */
interface ProjectCollaboratorPermission {
  permission: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
}

/** Rate Limit */
interface RateLimit {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
}

/**
 * Rate Limit Overview
 * Rate Limit Overview
 */
interface RateLimitOverview {
  resources: {
    core: RateLimit;
    graphql?: RateLimit;
    search: RateLimit;
    code_search?: RateLimit;
    source_import?: RateLimit;
    integration_manifest?: RateLimit;
    code_scanning_upload?: RateLimit;
    actions_runner_registration?: RateLimit;
    scim?: RateLimit;
    dependency_snapshots?: RateLimit;
    dependency_sbom?: RateLimit;
    code_scanning_autofix?: RateLimit;
  };
  rate: RateLimit;
}

/**
 * Artifact
 * An artifact
 */
interface Artifact {
  /** @example 5 */
  id: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /**
   * The name of the artifact.
   * @example "AdventureWorks.Framework"
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   * @example 12345
   */
  size_in_bytes: number;
  /** @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5" */
  url: string;
  /** @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip" */
  archive_download_url: string;
  /** Whether or not the artifact has expired. */
  expired: boolean;
  /** @format date-time */
  created_at: string | null;
  /** @format date-time */
  expires_at: string | null;
  /** @format date-time */
  updated_at: string | null;
  /**
   * The SHA256 digest of the artifact. This field will only be populated on artifacts uploaded with upload-artifact v4 or newer. For older versions, this field will be null.
   * @example "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c"
   */
  digest?: string | null;
  workflow_run?: {
    /** @example 10 */
    id?: number;
    /** @example 42 */
    repository_id?: number;
    /** @example 42 */
    head_repository_id?: number;
    /** @example "main" */
    head_branch?: string;
    /** @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d" */
    head_sha?: string;
  } | null;
}

/**
 * Repository actions caches
 * Repository actions caches
 */
interface ActionsCacheList {
  /**
   * Total number of caches
   * @example 2
   */
  total_count: number;
  /** Array of caches */
  actions_caches: {
    /** @example 2 */
    id?: number;
    /** @example "refs/heads/main" */
    ref?: string;
    /** @example "Linux-node-958aff96db2d75d67787d1e634ae70b659de937b" */
    key?: string;
    /** @example "73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0" */
    version?: string;
    /**
     * @format date-time
     * @example "2019-01-24T22:45:36.000Z"
     */
    last_accessed_at?: string;
    /**
     * @format date-time
     * @example "2019-01-24T22:45:36.000Z"
     */
    created_at?: string;
    /** @example 1024 */
    size_in_bytes?: number;
  }[];
}

/**
 * Job
 * Information of a job execution in a workflow run
 */
interface Job {
  /**
   * The id of the job.
   * @example 21
   */
  id: number;
  /**
   * The id of the associated workflow run.
   * @example 5
   */
  run_id: number;
  /** @example "https://api.github.com/repos/github/hello-world/actions/runs/5" */
  run_url: string;
  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  /**
   * The SHA of the commit that is being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://api.github.com/repos/github/hello-world/actions/jobs/21" */
  url: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string | null;
  /**
   * The phase of the lifecycle that the job is currently in.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
  /**
   * The outcome of the job.
   * @example "success"
   */
  conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
  /**
   * The time that the job created, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  created_at: string;
  /**
   * The time that the job started, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  started_at: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  completed_at: string | null;
  /**
   * The name of the job.
   * @example "test-coverage"
   */
  name: string;
  /** Steps in this job. */
  steps?: {
    /**
     * The phase of the lifecycle that the job is currently in.
     * @example "queued"
     */
    status: "queued" | "in_progress" | "completed";
    /**
     * The outcome of the job.
     * @example "success"
     */
    conclusion: string | null;
    /**
     * The name of the job.
     * @example "test-coverage"
     */
    name: string;
    /** @example 1 */
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     * @format date-time
     * @example "2019-08-08T08:00:00-07:00"
     */
    started_at?: string | null;
    /**
     * The time that the job finished, in ISO 8601 format.
     * @format date-time
     * @example "2019-08-08T08:00:00-07:00"
     */
    completed_at?: string | null;
  }[];
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  check_run_url: string;
  /**
   * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
   * @example ["self-hosted","foo","bar"]
   */
  labels: string[];
  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 1
   */
  runner_id: number | null;
  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example "my runner"
   */
  runner_name: string | null;
  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 2
   */
  runner_group_id: number | null;
  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example "my runner group"
   */
  runner_group_name: string | null;
  /**
   * The name of the workflow.
   * @example "Build"
   */
  workflow_name: string | null;
  /**
   * The name of the current branch.
   * @example "main"
   */
  head_branch: string | null;
}

/**
 * Actions OIDC subject customization for a repository
 * Actions OIDC subject customization for a repository
 */
interface OidcCustomSubRepo {
  /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
  use_default: boolean;
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
  include_claim_keys?: string[];
}

/**
 * Actions Secret
 * Set secrets for GitHub Actions.
 */
interface ActionsSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/** Actions Variable */
interface ActionsVariable {
  /**
   * The name of the variable.
   * @example "USERNAME"
   */
  name: string;
  /**
   * The value of the variable.
   * @example "octocat"
   */
  value: string;
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  created_at: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  updated_at: string;
}

/** Whether GitHub Actions is enabled on the repository. */
type ActionsEnabled = boolean;

interface ActionsRepositoryPermissions {
  /** Whether GitHub Actions is enabled on the repository. */
  enabled: ActionsEnabled;
  /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
  allowed_actions?: AllowedActions;
  /** The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
  selected_actions_url?: SelectedActionsUrl;
}

interface ActionsWorkflowAccessToRepository {
  /**
   * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   *
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
   */
  access_level: "none" | "user" | "organization";
}

/**
 * Referenced workflow
 * A workflow referenced/reused by the initial caller workflow
 */
interface ReferencedWorkflow {
  path: string;
  sha: string;
  ref?: string;
}

/** Pull Request Minimal */
interface PullRequestMinimal {
  /** @format int64 */
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      /** @format int64 */
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      /** @format int64 */
      id: number;
      url: string;
      name: string;
    };
  };
}

/**
 * Simple Commit
 * A commit.
 */
type NullableSimpleCommit = {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  id: string;
  /** SHA for the commit's tree */
  tree_id: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  /**
   * Timestamp of the commit
   * @format date-time
   * @example "2014-08-09T08:02:04+12:00"
   */
  timestamp: string;
  /** Information about the Git author */
  author: {
    /**
     * Name of the commit's author
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's author
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
  /** Information about the Git committer */
  committer: {
    /**
     * Name of the commit's committer
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's committer
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
};

/**
 * Workflow Run
 * An invocation of a workflow
 */
interface WorkflowRun {
  /**
   * The ID of the workflow run.
   * @example 5
   */
  id: number;
  /**
   * The name of the workflow run.
   * @example "Build"
   */
  name?: string | null;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /**
   * The ID of the associated check suite.
   * @example 42
   */
  check_suite_id?: number;
  /**
   * The node ID of the associated check suite.
   * @example "MDEwOkNoZWNrU3VpdGU0Mg=="
   */
  check_suite_node_id?: string;
  /** @example "master" */
  head_branch: string | null;
  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * The full path of the workflow
   * @example "octocat/octo-repo/.github/workflows/ci.yml@main"
   */
  path: string;
  /**
   * The auto incrementing run number for the workflow run.
   * @example 106
   */
  run_number: number;
  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  referenced_workflows?: ReferencedWorkflow[] | null;
  /** @example "push" */
  event: string;
  /** @example "completed" */
  status: string | null;
  /** @example "neutral" */
  conclusion: string | null;
  /**
   * The ID of the parent workflow.
   * @example 5
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   */
  url: string;
  /** @example "https://github.com/github/hello-world/suites/4" */
  html_url: string;
  /** Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run. */
  pull_requests: PullRequestMinimal[] | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** A GitHub user. */
  actor?: SimpleUser;
  /** A GitHub user. */
  triggering_actor?: SimpleUser;
  /**
   * The start time of the latest run. Resets on re-run.
   * @format date-time
   */
  run_started_at?: string;
  /**
   * The URL to the jobs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   * @example "https://api.github.com/repos/github/hello-world/check-suites/12"
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
   */
  rerun_url: string;
  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"
   */
  previous_attempt_url?: string | null;
  /**
   * The URL to the workflow.
   * @example "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
   */
  workflow_url: string;
  /** A commit. */
  head_commit: NullableSimpleCommit;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** Minimal Repository */
  head_repository: MinimalRepository;
  /** @example 5 */
  head_repository_id?: number;
  /**
   * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
   * @example "Simple Workflow"
   */
  display_title: string;
}

/**
 * Environment Approval
 * An entry in the reviews log for environment deployments
 */
interface EnvironmentApprovals {
  /** The list of environments that were approved or rejected */
  environments: {
    /**
     * The id of the environment.
     * @example 56780428
     */
    id?: number;
    /** @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg=" */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     */
    name?: string;
    /** @example "https://api.github.com/repos/github/hello-world/environments/staging" */
    url?: string;
    /** @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging" */
    html_url?: string;
    /**
     * The time that the environment was created, in ISO 8601 format.
     * @format date-time
     * @example "2020-11-23T22:00:40Z"
     */
    created_at?: string;
    /**
     * The time that the environment was last updated, in ISO 8601 format.
     * @format date-time
     * @example "2020-11-23T22:00:40Z"
     */
    updated_at?: string;
  }[];
  /**
   * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
   * @example "approved"
   */
  state: "approved" | "rejected" | "pending";
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * The comment submitted with the deployment review
   * @example "Ship it!"
   */
  comment: string;
}

interface ReviewCustomGatesCommentRequired {
  /** The name of the environment to approve or reject. */
  environment_name: string;
  /** Comment associated with the pending deployment protection rule. **Required when state is not provided.** */
  comment: string;
}

interface ReviewCustomGatesStateRequired {
  /** The name of the environment to approve or reject. */
  environment_name: string;
  /** Whether to approve or reject deployment to the specified environments. */
  state: "approved" | "rejected";
  /** Optional comment to include with the review. */
  comment?: string;
}

/**
 * The type of reviewer.
 * @example "User"
 */
enum DeploymentReviewerType {
  User = "User",
  Team = "Team",
}

/**
 * Pending Deployment
 * Details of a deployment that is waiting for protection rules to pass
 */
interface PendingDeployment {
  environment: {
    /**
     * The id of the environment.
     * @format int64
     * @example 56780428
     */
    id?: number;
    /** @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg=" */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     */
    name?: string;
    /** @example "https://api.github.com/repos/github/hello-world/environments/staging" */
    url?: string;
    /** @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging" */
    html_url?: string;
  };
  /**
   * The set duration of the wait timer
   * @example 30
   */
  wait_timer: number;
  /**
   * The time that the wait timer began.
   * @format date-time
   * @example "2020-11-23T22:00:40Z"
   */
  wait_timer_started_at: string | null;
  /**
   * Whether the currently authenticated user can approve the deployment
   * @example true
   */
  current_user_can_approve: boolean;
  /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
  reviewers: {
    /** The type of reviewer. */
    type?: DeploymentReviewerType;
    reviewer?: SimpleUser | Team;
  }[];
}

/**
 * Deployment
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
interface Deployment {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOkRlcGxveW1lbnQx" */
  node_id: string;
  /** @example "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d" */
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   * @example "topic-branch"
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  payload: Record<string, any> | string;
  /** @example "staging" */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /** @example "Deploy request from hubot" */
  description: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * Workflow Run Usage
 * Workflow Run Usage
 */
interface WorkflowRunUsage {
  billable: {
    UBUNTU?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    MACOS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    WINDOWS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
  };
  run_duration_ms?: number;
}

/**
 * Workflow
 * A GitHub Actions workflow
 */
interface Workflow {
  /** @example 5 */
  id: number;
  /** @example "MDg6V29ya2Zsb3cxMg==" */
  node_id: string;
  /** @example "CI" */
  name: string;
  /** @example "ruby.yaml" */
  path: string;
  /** @example "active" */
  state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  updated_at: string;
  /** @example "https://api.github.com/repos/actions/setup-ruby/workflows/5" */
  url: string;
  /** @example "https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml" */
  html_url: string;
  /** @example "https://github.com/actions/setup-ruby/workflows/CI/badge.svg" */
  badge_url: string;
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  deleted_at?: string;
}

/**
 * Workflow Usage
 * Workflow Usage
 */
interface WorkflowUsage {
  billable: {
    UBUNTU?: {
      total_ms?: number;
    };
    MACOS?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
}

/**
 * Activity
 * Activity
 */
interface Activity {
  /** @example 1296269 */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The SHA of the commit before the activity.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  before: string;
  /**
   * The SHA of the commit after the activity.
   * @example "827efc6d56897b048c772eb4087f854f46256132"
   */
  after: string;
  /**
   * The full Git reference, formatted as `refs/heads/<branch name>`.
   * @example "refs/heads/main"
   */
  ref: string;
  /**
   * The time when the activity occurred.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  timestamp: string;
  /**
   * The type of the activity that was performed.
   * @example "force_push"
   */
  activity_type: "push" | "force_push" | "branch_deletion" | "branch_creation" | "pr_merge" | "merge_queue_merge";
  /** A GitHub user. */
  actor: NullableSimpleUser;
}

/**
 * Autolink reference
 * An autolink reference.
 */
interface Autolink {
  /** @example 3 */
  id: number;
  /**
   * The prefix of a key that is linkified.
   * @example "TICKET-"
   */
  key_prefix: string;
  /**
   * A template for the target URL that is generated if a key was found.
   * @example "https://example.com/TICKET?query=<num>"
   */
  url_template: string;
  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
   * @example true
   */
  is_alphanumeric: boolean;
}

/**
 * Check Dependabot security updates
 * Check Dependabot security updates
 */
interface CheckAutomatedSecurityFixes {
  /**
   * Whether Dependabot security updates are enabled for the repository.
   * @example true
   */
  enabled: boolean;
  /**
   * Whether Dependabot security updates are paused for the repository.
   * @example false
   */
  paused: boolean;
}

/**
 * Protected Branch Required Status Check
 * Protected Branch Required Status Check
 */
interface ProtectedBranchRequiredStatusCheck {
  url?: string;
  enforcement_level?: string;
  contexts: string[];
  checks: {
    context: string;
    app_id: number | null;
  }[];
  contexts_url?: string;
  strict?: boolean;
}

/**
 * Protected Branch Admin Enforced
 * Protected Branch Admin Enforced
 */
interface ProtectedBranchAdminEnforced {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
   */
  url: string;
  /** @example true */
  enabled: boolean;
}

/**
 * Protected Branch Pull Request Review
 * Protected Branch Pull Request Review
 */
interface ProtectedBranchPullRequestReview {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
   */
  url?: string;
  dismissal_restrictions?: {
    /** The list of users with review dismissal access. */
    users?: SimpleUser[];
    /** The list of teams with review dismissal access. */
    teams?: Team[];
    /** The list of apps with review dismissal access. */
    apps?: Integration[];
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"" */
    url?: string;
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"" */
    users_url?: string;
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"" */
    teams_url?: string;
  };
  /** Allow specific users, teams, or apps to bypass pull request requirements. */
  bypass_pull_request_allowances?: {
    /** The list of users allowed to bypass pull request requirements. */
    users?: SimpleUser[];
    /** The list of teams allowed to bypass pull request requirements. */
    teams?: Team[];
    /** The list of apps allowed to bypass pull request requirements. */
    apps?: Integration[];
  };
  /** @example true */
  dismiss_stale_reviews: boolean;
  /** @example true */
  require_code_owner_reviews: boolean;
  /**
   * @min 0
   * @max 6
   * @example 2
   */
  required_approving_review_count?: number;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   * @default false
   * @example true
   */
  require_last_push_approval?: boolean;
}

/**
 * Branch Restriction Policy
 * Branch Restriction Policy
 */
interface BranchRestrictionPolicy {
  /** @format uri */
  url: string;
  /** @format uri */
  users_url: string;
  /** @format uri */
  teams_url: string;
  /** @format uri */
  apps_url: string;
  users: {
    login?: string;
    /** @format int64 */
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
    user_view_type?: string;
  }[];
  teams: {
    id?: number;
    node_id?: string;
    url?: string;
    html_url?: string;
    name?: string;
    slug?: string;
    description?: string | null;
    privacy?: string;
    notification_setting?: string;
    permission?: string;
    members_url?: string;
    repositories_url?: string;
    parent?: string | null;
  }[];
  apps: {
    id?: number;
    slug?: string;
    node_id?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      url?: string;
      repos_url?: string;
      events_url?: string;
      hooks_url?: string;
      issues_url?: string;
      members_url?: string;
      public_members_url?: string;
      avatar_url?: string;
      description?: string;
      /** @example """" */
      gravatar_id?: string;
      /** @example ""https://github.com/testorg-ea8ec76d71c3af4b"" */
      html_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"" */
      followers_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"" */
      following_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"" */
      gists_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"" */
      starred_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"" */
      subscriptions_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"" */
      organizations_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"" */
      received_events_url?: string;
      /** @example ""Organization"" */
      type?: string;
      /** @example false */
      site_admin?: boolean;
      /** @example "public" */
      user_view_type?: string;
    };
    name?: string;
    client_id?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      metadata?: string;
      contents?: string;
      issues?: string;
      single_file?: string;
    };
    events?: string[];
  }[];
}

/**
 * Branch Protection
 * Branch Protection
 */
interface BranchProtection {
  url?: string;
  enabled?: boolean;
  /** Protected Branch Required Status Check */
  required_status_checks?: ProtectedBranchRequiredStatusCheck;
  /** Protected Branch Admin Enforced */
  enforce_admins?: ProtectedBranchAdminEnforced;
  /** Protected Branch Pull Request Review */
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  /** Branch Restriction Policy */
  restrictions?: BranchRestrictionPolicy;
  required_linear_history?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  allow_deletions?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  /** @example ""branch/with/protection"" */
  name?: string;
  /** @example ""https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"" */
  protection_url?: string;
  required_signatures?: {
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
    /** @example true */
    enabled: boolean;
  };
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lock_branch?: {
    /** @default false */
    enabled?: boolean;
  };
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  allow_fork_syncing?: {
    /** @default false */
    enabled?: boolean;
  };
}

/**
 * Short Branch
 * Short Branch
 */
interface ShortBranch {
  name: string;
  commit: {
    sha: string;
    /** @format uri */
    url: string;
  };
  protected: boolean;
  /** Branch Protection */
  protection?: BranchProtection;
  /** @format uri */
  protection_url?: string;
}

/**
 * Git User
 * Metaproperties for Git author/committer information.
 */
type NullableGitUser = {
  /** @example ""Chris Wanstrath"" */
  name?: string;
  /** @example ""chris@ozmm.org"" */
  email?: string;
  /** @example ""2007-10-29T02:42:39.000-07:00"" */
  date?: string;
} | null;

/** Verification */
interface Verification {
  verified: boolean;
  reason: string;
  payload: string | null;
  signature: string | null;
  verified_at: string | null;
}

/**
 * Diff Entry
 * Diff Entry
 */
interface DiffEntry {
  /** @example "bbcd538c8e72b8c175046e27cc8f907076331401" */
  sha: string;
  /** @example "file1.txt" */
  filename: string;
  /** @example "added" */
  status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
  /** @example 103 */
  additions: number;
  /** @example 21 */
  deletions: number;
  /** @example 124 */
  changes: number;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  blob_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  raw_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  contents_url: string;
  /** @example "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test" */
  patch?: string;
  /** @example "file.txt" */
  previous_filename?: string;
}

/**
 * Commit
 * Commit
 */
interface Commit {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  url: string;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  sha: string;
  /** @example "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
   */
  comments_url: string;
  commit: {
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
     */
    url: string;
    /** Metaproperties for Git author/committer information. */
    author: NullableGitUser;
    /** Metaproperties for Git author/committer information. */
    committer: NullableGitUser;
    /** @example "Fix all the bugs" */
    message: string;
    /** @example 0 */
    comment_count: number;
    tree: {
      /** @example "827efc6d56897b048c772eb4087f854f46256132" */
      sha: string;
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
       */
      url: string;
    };
    verification?: Verification;
  };
  author: SimpleUser | EmptyObject | null;
  committer: SimpleUser | EmptyObject | null;
  parents: {
    /** @example "7638417db6d59f3c431d3e1f261cc637155684cd" */
    sha: string;
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    url: string;
    /**
     * @format uri
     * @example "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    html_url?: string;
  }[];
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  files?: DiffEntry[];
}

/**
 * Branch With Protection
 * Branch With Protection
 */
interface BranchWithProtection {
  name: string;
  /** Commit */
  commit: Commit;
  _links: {
    html: string;
    /** @format uri */
    self: string;
  };
  protected: boolean;
  /** Branch Protection */
  protection: BranchProtection;
  /** @format uri */
  protection_url: string;
  /** @example ""mas*"" */
  pattern?: string;
  /** @example 1 */
  required_approving_review_count?: number;
}

/**
 * Status Check Policy
 * Status Check Policy
 */
interface StatusCheckPolicy {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
   */
  url: string;
  /** @example true */
  strict: boolean;
  /** @example ["continuous-integration/travis-ci"] */
  contexts: string[];
  checks: {
    /** @example "continuous-integration/travis-ci" */
    context: string;
    app_id: number | null;
  }[];
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
   */
  contexts_url: string;
}

/**
 * Protected Branch
 * Branch protections protect branches
 */
interface ProtectedBranch {
  /** @format uri */
  url: string;
  /** Status Check Policy */
  required_status_checks?: StatusCheckPolicy;
  required_pull_request_reviews?: {
    /** @format uri */
    url: string;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it.
     * @default false
     */
    require_last_push_approval?: boolean;
    dismissal_restrictions?: {
      /** @format uri */
      url: string;
      /** @format uri */
      users_url: string;
      /** @format uri */
      teams_url: string;
      users: SimpleUser[];
      teams: Team[];
      apps?: Integration[];
    };
    bypass_pull_request_allowances?: {
      users: SimpleUser[];
      teams: Team[];
      apps?: Integration[];
    };
  };
  required_signatures?: {
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
    /** @example true */
    enabled: boolean;
  };
  enforce_admins?: {
    /** @format uri */
    url: string;
    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  /** Branch Restriction Policy */
  restrictions?: BranchRestrictionPolicy;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lock_branch?: {
    /** @default false */
    enabled?: boolean;
  };
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  allow_fork_syncing?: {
    /** @default false */
    enabled?: boolean;
  };
}

/**
 * Deployment
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
interface DeploymentSimple {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   */
  id: number;
  /** @example "MDEwOkRlcGxveW1lbnQx" */
  node_id: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  /** @example "staging" */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /** @example "Deploy request from hubot" */
  description: string | null;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * CheckRun
 * A check performed on the code of a given code change
 */
interface CheckRun {
  /**
   * The id of the check.
   * @format int64
   * @example 21
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  /** @example "42" */
  external_id: string | null;
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  url: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string | null;
  /** @example "https://example.com" */
  details_url: string | null;
  /**
   * The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
  /** @example "neutral" */
  conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: string | null;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: string | null;
  output: {
    title: string | null;
    summary: string | null;
    text: string | null;
    annotations_count: number;
    /** @format uri */
    annotations_url: string;
  };
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  check_suite: {
    id: number;
  } | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app: NullableIntegration;
  /** Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check. */
  pull_requests: PullRequestMinimal[];
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
  deployment?: DeploymentSimple;
}

/**
 * Check Annotation
 * Check Annotation
 */
interface CheckAnnotation {
  /** @example "README.md" */
  path: string;
  /** @example 2 */
  start_line: number;
  /** @example 2 */
  end_line: number;
  /** @example 5 */
  start_column: number | null;
  /** @example 10 */
  end_column: number | null;
  /** @example "warning" */
  annotation_level: string | null;
  /** @example "Spell Checker" */
  title: string | null;
  /** @example "Check your spelling for 'banaas'." */
  message: string | null;
  /** @example "Do you mean 'bananas' or 'banana'?" */
  raw_details: string | null;
  blob_href: string;
}

/**
 * Simple Commit
 * A commit.
 */
interface SimpleCommit {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  id: string;
  /** SHA for the commit's tree */
  tree_id: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  /**
   * Timestamp of the commit
   * @format date-time
   * @example "2014-08-09T08:02:04+12:00"
   */
  timestamp: string;
  /** Information about the Git author */
  author: {
    /**
     * Name of the commit's author
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's author
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
  /** Information about the Git committer */
  committer: {
    /**
     * Name of the commit's committer
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's committer
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
}

/**
 * CheckSuite
 * A suite of checks performed on the code of a given code change
 */
interface CheckSuite {
  /**
   * @format int64
   * @example 5
   */
  id: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /** @example "master" */
  head_branch: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
   * @example "completed"
   */
  status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending" | null;
  /** @example "neutral" */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "startup_failure"
    | "stale"
    | null;
  /** @example "https://api.github.com/repos/github/hello-world/check-suites/5" */
  url: string | null;
  /** @example "146e867f55c26428e5f9fade55a9bbf5e95a7912" */
  before: string | null;
  /** @example "d6fde92930d4715a2b49857d24b940956b26d2d3" */
  after: string | null;
  pull_requests: PullRequestMinimal[] | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app: NullableIntegration;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** @format date-time */
  created_at: string | null;
  /** @format date-time */
  updated_at: string | null;
  /** A commit. */
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
}

/**
 * Check Suite Preference
 * Check suite configuration preferences for a repository.
 */
interface CheckSuitePreference {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  /** Minimal Repository */
  repository: MinimalRepository;
}

interface CodeScanningAlertItems {
  /** The security alert number. */
  number: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: AlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The REST API URL for fetching the list of instances for an alert. */
  instances_url: AlertInstancesUrl;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at?: AlertFixedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The dismissal comment associated with the dismissal of the alert. */
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  /** A GitHub user. */
  dismissal_approved_by?: NullableSimpleUser;
}

interface CodeScanningAlertRule {
  /** A unique identifier for the rule used to detect the alert. */
  id?: string | null;
  /** The name of the rule used to detect the alert. */
  name?: string;
  /** The severity of the alert. */
  severity?: "none" | "note" | "warning" | "error" | null;
  /** The security severity of the alert. */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;
  /** A short description of the rule used to detect the alert. */
  description?: string;
  /** A description of the rule used to detect the alert. */
  full_description?: string;
  /** A set of tags applicable for the rule. */
  tags?: string[] | null;
  /** Detailed documentation for the rule as GitHub Flavored Markdown. */
  help?: string | null;
  /** A link to the documentation for the rule used to detect the alert. */
  help_uri?: string | null;
}

interface CodeScanningAlert {
  /** The security alert number. */
  number: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: AlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The REST API URL for fetching the list of instances for an alert. */
  instances_url: AlertInstancesUrl;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at?: AlertFixedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The dismissal comment associated with the dismissal of the alert. */
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  /** A GitHub user. */
  dismissal_approved_by?: NullableSimpleUser;
}

/** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
enum CodeScanningAlertSetState {
  Open = "open",
  Dismissed = "dismissed",
}

/** If `true`, attempt to create an alert dismissal request. */
type CodeScanningAlertCreateRequest = boolean;

/** The status of an autofix. */
enum CodeScanningAutofixStatus {
  Pending = "pending",
  Error = "error",
  Success = "success",
  Outdated = "outdated",
}

/** The description of an autofix. */
type CodeScanningAutofixDescription = string | null;

/**
 * The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type CodeScanningAutofixStartedAt = string;

interface CodeScanningAutofix {
  /** The status of an autofix. */
  status: CodeScanningAutofixStatus;
  /** The description of an autofix. */
  description: CodeScanningAutofixDescription;
  /** The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  started_at: CodeScanningAutofixStartedAt;
}

/** Commit an autofix for a code scanning alert */
type CodeScanningAutofixCommits = {
  /** The Git reference of target branch for the commit. Branch needs to already exist.  For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
  target_ref?: string;
  /** Commit message to be used. */
  message?: string;
} | null;

interface CodeScanningAutofixCommitsResponse {
  /** The Git reference of target branch for the commit. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
  target_ref?: string;
  /** SHA of commit with autofix. */
  sha?: string;
}

/**
 * An identifier for the upload.
 * @example "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
 */
type CodeScanningAnalysisSarifId = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 * @minLength 40
 * @maxLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
type CodeScanningAnalysisCommitSha = string;

/** Identifies the variable values associated with the environment in which this analysis was performed. */
type CodeScanningAnalysisEnvironment = string;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
type CodeScanningAnalysisCreatedAt = string;

/**
 * The REST API URL of the analysis resource.
 * @format uri
 */
type CodeScanningAnalysisUrl = string;

interface CodeScanningAnalysis {
  /**
   * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
   * `refs/heads/<branch name>` or simply `<branch name>`.
   */
  ref: CodeScanningRef;
  /** The SHA of the commit to which the analysis you are uploading relates. */
  commit_sha: CodeScanningAnalysisCommitSha;
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  analysis_key: CodeScanningAnalysisAnalysisKey;
  /** Identifies the variable values associated with the environment in which this analysis was performed. */
  environment: CodeScanningAnalysisEnvironment;
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
  category?: CodeScanningAnalysisCategory;
  /** @example "error reading field xyz" */
  error: string;
  /** The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: CodeScanningAnalysisCreatedAt;
  /** The total number of results in the analysis. */
  results_count: number;
  /** The total number of rules used in the analysis. */
  rules_count: number;
  /** Unique identifier for this analysis. */
  id: number;
  /** The REST API URL of the analysis resource. */
  url: CodeScanningAnalysisUrl;
  /** An identifier for the upload. */
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  deletable: boolean;
  /**
   * Warning generated when processing the analysis
   * @example "123 results were ignored"
   */
  warning: string;
}

/**
 * Analysis deletion
 * Successful deletion of a code scanning analysis
 */
interface CodeScanningAnalysisDeletion {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   * @format uri
   */
  next_analysis_url: string | null;
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   * @format uri
   */
  confirm_delete_url: string | null;
}

/**
 * CodeQL Database
 * A CodeQL database.
 */
interface CodeScanningCodeqlDatabase {
  /** The ID of the CodeQL database. */
  id: number;
  /** The name of the CodeQL database. */
  name: string;
  /** The language of the CodeQL database. */
  language: string;
  /** A GitHub user. */
  uploader: SimpleUser;
  /** The MIME type of the CodeQL database file. */
  content_type: string;
  /** The size of the CodeQL database file in bytes. */
  size: number;
  /**
   * The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /**
   * The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
   * @format uri
   */
  url: string;
  /** The commit SHA of the repository at the time the CodeQL database was created. */
  commit_oid?: string | null;
}

/** The language targeted by the CodeQL query */
enum CodeScanningVariantAnalysisLanguage {
  Cpp = "cpp",
  Csharp = "csharp",
  Go = "go",
  Java = "java",
  Javascript = "javascript",
  Python = "python",
  Ruby = "ruby",
  Rust = "rust",
  Swift = "swift",
}

/**
 * Repository Identifier
 * Repository Identifier
 */
interface CodeScanningVariantAnalysisRepository {
  /**
   * A unique identifier of the repository.
   * @example 1296269
   */
  id: number;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /** Whether the repository is private. */
  private: boolean;
  /** @example 80 */
  stargazers_count: number;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
}

/** The new status of the CodeQL variant analysis repository task. */
enum CodeScanningVariantAnalysisStatus {
  Pending = "pending",
  InProgress = "in_progress",
  Succeeded = "succeeded",
  Failed = "failed",
  Canceled = "canceled",
  TimedOut = "timed_out",
}

interface CodeScanningVariantAnalysisSkippedRepoGroup {
  /**
   * The total number of repositories that were skipped for this reason.
   * @example 2
   */
  repository_count: number;
  /** A list of repositories that were skipped. This list may not include all repositories that were skipped. This is only available when the repository was found and the user has access to it. */
  repositories: CodeScanningVariantAnalysisRepository[];
}

/**
 * Variant Analysis
 * A run of a CodeQL query against one or more repositories.
 */
interface CodeScanningVariantAnalysis {
  /** The ID of the variant analysis. */
  id: number;
  /** A GitHub repository. */
  controller_repo: SimpleRepository;
  /** A GitHub user. */
  actor: SimpleUser;
  /** The language targeted by the CodeQL query */
  query_language: CodeScanningVariantAnalysisLanguage;
  /** The download url for the query pack. */
  query_pack_url: string;
  /**
   * The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at?: string;
  /**
   * The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at?: string;
  /**
   * The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
   * @format date-time
   */
  completed_at?: string | null;
  status: "in_progress" | "succeeded" | "failed" | "cancelled";
  /** The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started. */
  actions_workflow_run_id?: number;
  /** The reason for a failure of the variant analysis. This is only available if the variant analysis has failed. */
  failure_reason?: "no_repos_queried" | "actions_workflow_run_failed" | "internal_error";
  scanned_repositories?: {
    /** Repository Identifier */
    repository: CodeScanningVariantAnalysisRepository;
    /** The new status of the CodeQL variant analysis repository task. */
    analysis_status: CodeScanningVariantAnalysisStatus;
    /** The number of results in the case of a successful analysis. This is only available for successful analyses. */
    result_count?: number;
    /** The size of the artifact. This is only available for successful analyses. */
    artifact_size_in_bytes?: number;
    /** The reason of the failure of this repo task. This is only available if the repository task has failed. */
    failure_message?: string;
  }[];
  /** Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis. */
  skipped_repositories?: {
    access_mismatch_repos: CodeScanningVariantAnalysisSkippedRepoGroup;
    not_found_repos: {
      /**
       * The total number of repositories that were skipped for this reason.
       * @example 2
       */
      repository_count: number;
      /** A list of full repository names that were skipped. This list may not include all repositories that were skipped. */
      repository_full_names: string[];
    };
    no_codeql_db_repos: CodeScanningVariantAnalysisSkippedRepoGroup;
    over_limit_repos: CodeScanningVariantAnalysisSkippedRepoGroup;
  };
}

interface CodeScanningVariantAnalysisRepoTask {
  /** A GitHub repository. */
  repository: SimpleRepository;
  /** The new status of the CodeQL variant analysis repository task. */
  analysis_status: CodeScanningVariantAnalysisStatus;
  /** The size of the artifact. This is only available for successful analyses. */
  artifact_size_in_bytes?: number;
  /** The number of results in the case of a successful analysis. This is only available for successful analyses. */
  result_count?: number;
  /** The reason of the failure of this repo task. This is only available if the repository task has failed. */
  failure_message?: string;
  /** The SHA of the commit the CodeQL database was built against. This is only available for successful analyses. */
  database_commit_sha?: string;
  /** The source location prefix to use. This is only available for successful analyses. */
  source_location_prefix?: string;
  /** The URL of the artifact. This is only available for successful analyses. */
  artifact_url?: string;
}

/** Configuration for code scanning default setup. */
interface CodeScanningDefaultSetup {
  /** Code scanning default setup has been configured or not. */
  state?: "configured" | "not-configured";
  /** Languages to be analyzed. */
  languages?: (
    | "actions"
    | "c-cpp"
    | "csharp"
    | "go"
    | "java-kotlin"
    | "javascript-typescript"
    | "javascript"
    | "python"
    | "ruby"
    | "typescript"
    | "swift"
  )[];
  /** Runner type to be used. */
  runner_type?: "standard" | "labeled" | null;
  /**
   * Runner label to be used if the runner type is labeled.
   * @example "code-scanning"
   */
  runner_label?: string | null;
  /** CodeQL query suite to be used. */
  query_suite?: "default" | "extended";
  /** Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input. */
  threat_model?: "remote" | "remote_and_local";
  /**
   * Timestamp of latest configuration update.
   * @format date-time
   * @example "2023-12-06T14:20:20.000Z"
   */
  updated_at?: string | null;
  /** The frequency of the periodic analysis. */
  schedule?: "weekly" | null;
}

/** Configuration for code scanning default setup. */
interface CodeScanningDefaultSetupUpdate {
  /** The desired state of code scanning default setup. */
  state?: "configured" | "not-configured";
  /** Runner type to be used. */
  runner_type?: "standard" | "labeled";
  /**
   * Runner label to be used if the runner type is labeled.
   * @example "code-scanning"
   */
  runner_label?: string | null;
  /** CodeQL query suite to be used. */
  query_suite?: "default" | "extended";
  /** Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input. */
  threat_model?: "remote" | "remote_and_local";
  /** CodeQL languages to be analyzed. */
  languages?: (
    | "actions"
    | "c-cpp"
    | "csharp"
    | "go"
    | "java-kotlin"
    | "javascript-typescript"
    | "python"
    | "ruby"
    | "swift"
  )[];
}

/**
 * You can use `run_url` to track the status of the run. This includes a property status and conclusion.
 * You should not rely on this always being an actions workflow run object.
 */
interface CodeScanningDefaultSetupUpdateResponse {
  /** ID of the corresponding run. */
  run_id?: number;
  /** URL of the corresponding run. */
  run_url?: string;
}

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 * @pattern ^refs/(heads|tags|pull)/.*$
 * @example "refs/heads/main"
 */
type CodeScanningRefFull = string;

/** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */
type CodeScanningAnalysisSarifFile = string;

interface CodeScanningSarifsReceipt {
  /** An identifier for the upload. */
  id?: CodeScanningAnalysisSarifId;
  /**
   * The REST API URL for checking the status of the upload.
   * @format uri
   */
  url?: string;
}

interface CodeScanningSarifsStatus {
  /** `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed. */
  processing_status?: "pending" | "complete" | "failed";
  /**
   * The REST API URL for getting the analyses associated with the upload.
   * @format uri
   */
  analyses_url?: string | null;
  /** Any errors that ocurred during processing of the delivery. */
  errors?: string[] | null;
}

/** Code security configuration associated with a repository and attachment status */
interface CodeSecurityConfigurationForRepository {
  /** The attachment status of the code security configuration on the repository. */
  status?:
    | "attached"
    | "attaching"
    | "detached"
    | "removed"
    | "enforced"
    | "failed"
    | "updating"
    | "removed_by_enterprise";
  /** A code security configuration */
  configuration?: CodeSecurityConfiguration;
}

/**
 * CODEOWNERS errors
 * A list of errors found in a repo's CODEOWNERS file
 */
interface CodeownersErrors {
  errors: {
    /**
     * The line number where this errors occurs.
     * @example 7
     */
    line: number;
    /**
     * The column number where this errors occurs.
     * @example 3
     */
    column: number;
    /**
     * The contents of the line where the error occurs.
     * @example "* user"
     */
    source?: string;
    /**
     * The type of error.
     * @example "Invalid owner"
     */
    kind: string;
    /**
     * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
     * @example "The pattern `/` will never match anything, did you mean `*` instead?"
     */
    suggestion?: string | null;
    /**
     * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     * @example "Invalid owner on line 7:
     *
     *   * user
     *     ^"
     */
    message: string;
    /**
     * The path of the file where the error occured.
     * @example ".github/CODEOWNERS"
     */
    path: string;
  }[];
}

/**
 * Codespace machine
 * A description of the machine powering a codespace.
 */
interface CodespaceMachine {
  /**
   * The name of the machine.
   * @example "standardLinux"
   */
  name: string;
  /**
   * The display name of the machine includes cores, memory, and storage.
   * @example "4 cores, 16 GB RAM, 64 GB storage"
   */
  display_name: string;
  /**
   * The operating system of the machine.
   * @example "linux"
   */
  operating_system: string;
  /**
   * How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;
  /**
   * How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;
  /**
   * How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example "ready"
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
}

/**
 * Codespaces Permissions Check
 * Permission check result for a given devcontainer config.
 */
interface CodespacesPermissionsCheckForDevcontainer {
  /**
   * Whether the user has accepted the permissions defined by the devcontainer config
   * @example true
   */
  accepted: boolean;
}

/**
 * Codespaces Secret
 * Set repository secrets for GitHub Codespaces.
 */
interface RepoCodespacesSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Collaborator
 * Collaborator
 */
interface Collaborator {
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };
  /** @example "admin" */
  role_name: string;
  /** @example "public" */
  user_view_type?: string;
}

/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
interface RepositoryInvitation {
  /**
   * Unique identifier of the repository invitation.
   * @format int64
   * @example 42
   */
  id: number;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** A GitHub user. */
  invitee: NullableSimpleUser;
  /** A GitHub user. */
  inviter: NullableSimpleUser;
  /**
   * The permission associated with the invitation.
   * @example "read"
   */
  permissions: "read" | "write" | "admin" | "triage" | "maintain";
  /**
   * @format date-time
   * @example "2016-06-13T14:52:50-05:00"
   */
  created_at: string;
  /** Whether or not the invitation has expired */
  expired?: boolean;
  /**
   * URL for the repository invitation
   * @example "https://api.github.com/user/repository-invitations/1"
   */
  url: string;
  /** @example "https://github.com/octocat/Hello-World/invitations" */
  html_url: string;
  node_id: string;
}

/**
 * Collaborator
 * Collaborator
 */
type NullableCollaborator = {
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };
  /** @example "admin" */
  role_name: string;
  /** @example "public" */
  user_view_type?: string;
};

/**
 * Repository Collaborator Permission
 * Repository Collaborator Permission
 */
interface RepositoryCollaboratorPermission {
  permission: string;
  /** @example "admin" */
  role_name: string;
  /** Collaborator */
  user: NullableCollaborator;
}

/**
 * Commit Comment
 * Commit Comment
 */
interface CommitComment {
  /** @format uri */
  html_url: string;
  /** @format uri */
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string | null;
  position: number | null;
  line: number | null;
  commit_id: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
}

/**
 * Branch Short
 * Branch Short
 */
interface BranchShort {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
}

/**
 * Link
 * Hypermedia Link
 */
interface Link {
  href: string;
}

/**
 * Auto merge
 * The status of auto merging a pull request.
 */
type AutoMerge = {
  /** A GitHub user. */
  enabled_by: SimpleUser;
  /** The merge method to use. */
  merge_method: "merge" | "squash" | "rebase";
  /** Title for the merge commit message. */
  commit_title: string;
  /** Commit message for the merge commit. */
  commit_message: string;
} | null;

/**
 * Pull Request Simple
 * Pull Request Simple
 */
interface PullRequestSimple {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDExOlB1bGxSZXF1ZXN0MQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /** @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}" */
  review_comment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /** @example 1347 */
  number: number;
  /** @example "open" */
  state: string;
  /** @example true */
  locked: boolean;
  /** @example "new-feature" */
  title: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @example "Please pull these awesome changes" */
  body: string | null;
  labels: {
    /** @format int64 */
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  /** @example "too heated" */
  active_lock_reason?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: string | null;
  /** @example "e5bd3914e2e596debea16f433f57875b5b90bcd6" */
  merge_commit_sha: string | null;
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: Team[] | null;
  head: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: NullableSimpleUser;
  };
  base: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: NullableSimpleUser;
  };
  _links: {
    /** Hypermedia Link */
    comments: Link;
    /** Hypermedia Link */
    commits: Link;
    /** Hypermedia Link */
    statuses: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    issue: Link;
    /** Hypermedia Link */
    review_comments: Link;
    /** Hypermedia Link */
    review_comment: Link;
    /** Hypermedia Link */
    self: Link;
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** The status of auto merging a pull request. */
  auto_merge: AutoMerge;
  /**
   * Indicates whether or not the pull request is a draft.
   * @example false
   */
  draft?: boolean;
}

/** Simple Commit Status */
interface SimpleCommitStatus {
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  context: string;
  /** @format uri */
  target_url: string | null;
  required?: boolean | null;
  /** @format uri */
  avatar_url: string | null;
  /** @format uri */
  url: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Combined Commit Status
 * Combined Commit Status
 */
interface CombinedCommitStatus {
  state: string;
  statuses: SimpleCommitStatus[];
  sha: string;
  total_count: number;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** @format uri */
  commit_url: string;
  /** @format uri */
  url: string;
}

/**
 * Status
 * The status of a commit.
 */
interface Status {
  url: string;
  avatar_url: string | null;
  id: number;
  node_id: string;
  state: string;
  description: string | null;
  target_url: string | null;
  context: string;
  created_at: string;
  updated_at: string;
  /** A GitHub user. */
  creator: NullableSimpleUser;
}

/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
type NullableCodeOfConductSimple = {
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   */
  url: string;
  /** @example "citizen_code_of_conduct" */
  key: string;
  /** @example "Citizen Code of Conduct" */
  name: string;
  /**
   * @format uri
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   */
  html_url: string | null;
};

/** Community Health File */
type NullableCommunityHealthFile = {
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
} | null;

/**
 * Community Profile
 * Community Profile
 */
interface CommunityProfile {
  /** @example 100 */
  health_percentage: number;
  /** @example "My first repository on GitHub!" */
  description: string | null;
  /** @example "example.com" */
  documentation: string | null;
  files: {
    /** Code of Conduct Simple */
    code_of_conduct: NullableCodeOfConductSimple;
    code_of_conduct_file: NullableCommunityHealthFile;
    /** License Simple */
    license: NullableLicenseSimple;
    contributing: NullableCommunityHealthFile;
    readme: NullableCommunityHealthFile;
    issue_template: NullableCommunityHealthFile;
    pull_request_template: NullableCommunityHealthFile;
  };
  /**
   * @format date-time
   * @example "2017-02-28T19:09:29Z"
   */
  updated_at: string | null;
  /** @example true */
  content_reports_enabled?: boolean;
}

/**
 * Commit Comparison
 * Commit Comparison
 */
interface CommitComparison {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/master...topic"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17"
   */
  permalink_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.diff"
   */
  diff_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.patch"
   */
  patch_url: string;
  /** Commit */
  base_commit: Commit;
  /** Commit */
  merge_base_commit: Commit;
  /** @example "ahead" */
  status: "diverged" | "ahead" | "behind" | "identical";
  /** @example 4 */
  ahead_by: number;
  /** @example 5 */
  behind_by: number;
  /** @example 6 */
  total_commits: number;
  commits: Commit[];
  files?: DiffEntry[];
}

/**
 * Content Tree
 * Content Tree
 */
interface ContentTree {
  type: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  content?: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  entries?: {
    type: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    /** @format uri */
    url: string;
    /** @format uri */
    git_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    download_url: string | null;
    _links: {
      /** @format uri */
      git: string | null;
      /** @format uri */
      html: string | null;
      /** @format uri */
      self: string;
    };
  }[];
  encoding?: string;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}

/**
 * Content Directory
 * A list of directory items
 */
type ContentDirectory = {
  type: "dir" | "file" | "submodule" | "symlink";
  size: number;
  name: string;
  path: string;
  content?: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}[];

/**
 * Content File
 * Content File
 */
interface ContentFile {
  type: "file";
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** @example ""actual/actual.md"" */
  target?: string;
  /** @example ""git://example.com/defunkt/dotjs.git"" */
  submodule_git_url?: string;
}

/**
 * Symlink Content
 * An object describing a symlink
 */
interface ContentSymlink {
  type: "symlink";
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}

/**
 * Submodule Content
 * An object describing a submodule
 */
interface ContentSubmodule {
  type: "submodule";
  /** @format uri */
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}

/**
 * File Commit
 * File Commit
 */
interface FileCommit {
  content: {
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    url?: string;
    html_url?: string;
    git_url?: string;
    download_url?: string;
    type?: string;
    _links?: {
      self?: string;
      git?: string;
      html?: string;
    };
  } | null;
  commit: {
    sha?: string;
    node_id?: string;
    url?: string;
    html_url?: string;
    author?: {
      date?: string;
      name?: string;
      email?: string;
    };
    committer?: {
      date?: string;
      name?: string;
      email?: string;
    };
    message?: string;
    tree?: {
      url?: string;
      sha?: string;
    };
    parents?: {
      url?: string;
      html_url?: string;
      sha?: string;
    }[];
    verification?: {
      verified?: boolean;
      reason?: string;
      signature?: string | null;
      payload?: string | null;
      verified_at?: string | null;
    };
  };
}

/** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
type SecretScanningPushProtectionBypassPlaceholderId = string;

/** Repository rule violation was detected */
interface RepositoryRuleViolationError {
  message?: string;
  documentation_url?: string;
  status?: string;
  metadata?: {
    secret_scanning?: {
      bypass_placeholders?: {
        /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
        placeholder_id?: SecretScanningPushProtectionBypassPlaceholderId;
        token_type?: string;
      }[];
    };
  };
}

/**
 * Contributor
 * Contributor
 */
interface Contributor {
  login?: string;
  id?: number;
  node_id?: string;
  /** @format uri */
  avatar_url?: string;
  gravatar_id?: string | null;
  /** @format uri */
  url?: string;
  /** @format uri */
  html_url?: string;
  /** @format uri */
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  repos_url?: string;
  events_url?: string;
  /** @format uri */
  received_events_url?: string;
  type: string;
  site_admin?: boolean;
  contributions: number;
  email?: string;
  name?: string;
  user_view_type?: string;
}

/** A Dependabot alert. */
interface DependabotAlert {
  /** The security alert number. */
  number: AlertNumber;
  /** The state of the Dependabot alert. */
  state: "auto_dismissed" | "dismissed" | "fixed" | "open";
  /** Details for the vulnerable dependency. */
  dependency: {
    /** Details for the vulnerable package. */
    package?: DependabotAlertPackage;
    /** The full path to the dependency manifest file, relative to the root of the repository. */
    manifest_path?: string;
    /** The execution scope of the vulnerable dependency. */
    scope?: "development" | "runtime" | null;
    /**
     * The vulnerable dependency's relationship to your project.
     *
     * > [!NOTE]
     * > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
     */
    relationship?: "unknown" | "direct" | "transitive" | null;
  };
  /** Details for the GitHub Security Advisory. */
  security_advisory: DependabotAlertSecurityAdvisory;
  /** Details pertaining to one vulnerable version range for the advisory. */
  security_vulnerability: DependabotAlertSecurityVulnerability;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at: AlertUpdatedAt;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The reason that the alert was dismissed. */
  dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | null;
  /**
   * An optional comment associated with the alert's dismissal.
   * @maxLength 280
   */
  dismissed_comment: string | null;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at: AlertFixedAt;
  /** The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  auto_dismissed_at?: AlertAutoDismissedAt;
}

/**
 * Dependabot Secret
 * Set secrets for Dependabot.
 */
interface DependabotSecret {
  /**
   * The name of the secret.
   * @example "MY_ARTIFACTORY_PASSWORD"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Dependency Graph Diff
 * A diff of the dependencies between two commits.
 */
type DependencyGraphDiff = {
  change_type: "added" | "removed";
  /** @example "path/to/package-lock.json" */
  manifest: string;
  /** @example "npm" */
  ecosystem: string;
  /** @example "@actions/core" */
  name: string;
  /** @example "1.0.0" */
  version: string;
  /** @example "pkg:/npm/%40actions/core@1.1.0" */
  package_url: string | null;
  /** @example "MIT" */
  license: string | null;
  /** @example "https://github.com/github/actions" */
  source_repository_url: string | null;
  vulnerabilities: {
    /** @example "critical" */
    severity: string;
    /** @example "GHSA-rf4j-j272-fj86" */
    advisory_ghsa_id: string;
    /** @example "A summary of the advisory." */
    advisory_summary: string;
    /** @example "https://github.com/advisories/GHSA-rf4j-j272-fj86" */
    advisory_url: string;
  }[];
  /** Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment. */
  scope: "unknown" | "runtime" | "development";
}[];

/**
 * Dependency Graph SPDX SBOM
 * A schema for the SPDX JSON format returned by the Dependency Graph.
 */
interface DependencyGraphSpdxSbom {
  sbom: {
    /**
     * The SPDX identifier for the SPDX document.
     * @example "SPDXRef-DOCUMENT"
     */
    SPDXID: string;
    /**
     * The version of the SPDX specification that this document conforms to.
     * @example "SPDX-2.3"
     */
    spdxVersion: string;
    /**
     * An optional comment about the SPDX document.
     * @example "Exact versions could not be resolved for some packages. For more information: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/"
     */
    comment?: string;
    creationInfo: {
      /**
       * The date and time the SPDX document was created.
       * @example "2021-11-03T00:00:00Z"
       */
      created: string;
      /** The tools that were used to generate the SPDX document. */
      creators: string[];
    };
    /**
     * The name of the SPDX document.
     * @example "github/github"
     */
    name: string;
    /**
     * The license under which the SPDX document is licensed.
     * @example "CC0-1.0"
     */
    dataLicense: string;
    /**
     * The namespace for the SPDX document.
     * @example "https://spdx.org/spdxdocs/protobom/15e41dd2-f961-4f4d-b8dc-f8f57ad70d57"
     */
    documentNamespace: string;
    packages: {
      /**
       * A unique SPDX identifier for the package.
       * @example "SPDXRef-Package"
       */
      SPDXID?: string;
      /**
       * The name of the package.
       * @example "github/github"
       */
      name?: string;
      /**
       * The version of the package. If the package does not have an exact version specified,
       * a version range is given.
       * @example "1.0.0"
       */
      versionInfo?: string;
      /**
       * The location where the package can be downloaded,
       * or NOASSERTION if this has not been determined.
       * @example "NOASSERTION"
       */
      downloadLocation?: string;
      /**
       * Whether the package's file content has been subjected to
       * analysis during the creation of the SPDX document.
       * @example false
       */
      filesAnalyzed?: boolean;
      /**
       * The license of the package as determined while creating the SPDX document.
       * @example "MIT"
       */
      licenseConcluded?: string;
      /**
       * The license of the package as declared by its author, or NOASSERTION if this information
       * was not available when the SPDX document was created.
       * @example "NOASSERTION"
       */
      licenseDeclared?: string;
      /**
       * The distribution source of this package, or NOASSERTION if this was not determined.
       * @example "NOASSERTION"
       */
      supplier?: string;
      /**
       * The copyright holders of the package, and any dates present with those notices, if available.
       * @example "Copyright (c) 1985 GitHub.com"
       */
      copyrightText?: string;
      externalRefs?: {
        /**
         * The category of reference to an external resource this reference refers to.
         * @example "PACKAGE-MANAGER"
         */
        referenceCategory: string;
        /**
         * A locator for the particular external resource this reference refers to.
         * @example "pkg:gem/rails@6.0.1"
         */
        referenceLocator: string;
        /**
         * The category of reference to an external resource this reference refers to.
         * @example "purl"
         */
        referenceType: string;
      }[];
    }[];
    relationships?: {
      /**
       * The type of relationship between the two SPDX elements.
       * @example "DEPENDS_ON"
       */
      relationshipType?: string;
      /** The SPDX identifier of the package that is the source of the relationship. */
      spdxElementId?: string;
      /** The SPDX identifier of the package that is the target of the relationship. */
      relatedSpdxElement?: string;
    }[];
  };
}

/**
 * metadata
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
type Metadata = Record<string, string | number | boolean | null>;

interface Dependency {
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   * @pattern ^pkg
   * @example "pkg:/npm/%40actions/http-client@1.0.11"
   */
  package_url?: string;
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
  metadata?: Metadata;
  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   * @example "direct"
   */
  relationship?: "direct" | "indirect";
  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   * @example "runtime"
   */
  scope?: "runtime" | "development";
  /**
   * Array of package-url (PURLs) of direct child dependencies.
   * @example "@actions/http-client"
   */
  dependencies?: string[];
}

interface Manifest {
  /**
   * The name of the manifest.
   * @example "package-lock.json"
   */
  name: string;
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     * @example "/src/build/package-lock.json"
     */
    source_location?: string;
  };
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
  metadata?: Metadata;
  /** A collection of resolved package dependencies. */
  resolved?: Record<string, Dependency>;
}

/**
 * snapshot
 * Create a new snapshot of a repository's dependencies.
 */
interface Snapshot {
  /** The version of the repository snapshot submission. */
  version: number;
  job: {
    /**
     * The external ID of the job.
     * @example "5622a2b0-63f6-4732-8c34-a1ab27e102a11"
     */
    id: string;
    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     * @example "yourworkflowname_yourjobname"
     */
    correlator: string;
    /**
     * The url for the job.
     * @example "http://example.com/build"
     */
    html_url?: string;
  };
  /**
   * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
   * @minLength 40
   * @maxLength 40
   * @example "ddc951f4b1293222421f2c8df679786153acf689"
   */
  sha: string;
  /**
   * The repository branch that triggered this snapshot.
   * @pattern ^refs/
   * @example "refs/heads/main"
   */
  ref: string;
  /** A description of the detector used. */
  detector: {
    /**
     * The name of the detector used.
     * @example "docker buildtime detector"
     */
    name: string;
    /**
     * The version of the detector used.
     * @example "1.0.0"
     */
    version: string;
    /**
     * The url of the detector used.
     * @example "http://example.com/docker-buildtimer-detector"
     */
    url: string;
  };
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
  metadata?: Metadata;
  /** A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies. */
  manifests?: Record<string, Manifest>;
  /**
   * The time at which the snapshot was scanned.
   * @format date-time
   * @example "2020-06-13T14:52:50-05:00"
   */
  scanned: string;
}

/**
 * Deployment Status
 * The status of a deployment.
 */
interface DeploymentStatus {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
   */
  url: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDE2OkRlcGxveW1lbnRTdGF0dXMx" */
  node_id: string;
  /**
   * The state of the status.
   * @example "success"
   */
  state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * A short description of the status.
   * @maxLength 140
   * @default ""
   * @example "Deployment finished successfully."
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   * @default ""
   * @example "production"
   */
  environment?: string;
  /**
   * Closing down notice: the URL to associate with this status.
   * @format uri
   * @default ""
   * @example "https://example.com/deployment/42/output"
   */
  target_url: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/42"
   */
  deployment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * The URL for accessing your environment.
   * @format uri
   * @default ""
   * @example "https://staging.example.com/"
   */
  environment_url?: string;
  /**
   * The URL to associate with this status.
   * @format uri
   * @default ""
   * @example "https://example.com/deployment/42/output"
   */
  log_url?: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 * @example 30
 */
type WaitTimer = number;

/** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
type DeploymentBranchPolicySettings = {
  /** Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
  protected_branches: boolean;
  /** Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
  custom_branch_policies: boolean;
} | null;

/**
 * Environment
 * Details of a deployment environment
 */
interface Environment {
  /**
   * The id of the environment.
   * @format int64
   * @example 56780428
   */
  id: number;
  /** @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg=" */
  node_id: string;
  /**
   * The name of the environment.
   * @example "staging"
   */
  name: string;
  /** @example "https://api.github.com/repos/github/hello-world/environments/staging" */
  url: string;
  /** @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging" */
  html_url: string;
  /**
   * The time that the environment was created, in ISO 8601 format.
   * @format date-time
   * @example "2020-11-23T22:00:40Z"
   */
  created_at: string;
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   * @format date-time
   * @example "2020-11-23T22:00:40Z"
   */
  updated_at: string;
  /** Built-in deployment protection rules for the environment. */
  protection_rules?: (
    | {
        /** @example 3515 */
        id: number;
        /** @example "MDQ6R2F0ZTM1MTU=" */
        node_id: string;
        /** @example "wait_timer" */
        type: string;
        /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
        wait_timer?: WaitTimer;
      }
    | {
        /** @example 3755 */
        id: number;
        /** @example "MDQ6R2F0ZTM3NTU=" */
        node_id: string;
        /**
         * Whether deployments to this environment can be approved by the user who created the deployment.
         * @example false
         */
        prevent_self_review?: boolean;
        /** @example "required_reviewers" */
        type: string;
        /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
        reviewers?: {
          /** The type of reviewer. */
          type?: DeploymentReviewerType;
          reviewer?: SimpleUser | Team;
        }[];
      }
    | {
        /** @example 3515 */
        id: number;
        /** @example "MDQ6R2F0ZTM1MTU=" */
        node_id: string;
        /** @example "branch_policy" */
        type: string;
      }
  )[];
  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
  deployment_branch_policy?: DeploymentBranchPolicySettings;
}

/**
 * Whether or not a user who created the job is prevented from approving their own job.
 * @example false
 */
type PreventSelfReview = boolean;

/**
 * Deployment branch policy
 * Details of a deployment branch or tag policy.
 */
interface DeploymentBranchPolicy {
  /**
   * The unique identifier of the branch or tag policy.
   * @example 361471
   */
  id?: number;
  /** @example "MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=" */
  node_id?: string;
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   * @example "release/*"
   */
  name?: string;
  /**
   * Whether this rule targets a branch or tag.
   * @example "branch"
   */
  type?: "branch" | "tag";
}

/** Deployment branch and tag policy name pattern */
interface DeploymentBranchPolicyNamePatternWithType {
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*​/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   * @example "release/*"
   */
  name: string;
  /**
   * Whether this rule targets a branch or tag
   * @example "branch"
   */
  type?: "branch" | "tag";
}

/** Deployment branch policy name pattern */
interface DeploymentBranchPolicyNamePattern {
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*​/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   * @example "release/*"
   */
  name: string;
}

/**
 * Custom deployment protection rule app
 * A GitHub App that is providing a custom deployment protection rule.
 */
interface CustomDeploymentRuleApp {
  /**
   * The unique identifier of the deployment protection rule integration.
   * @example 3515
   */
  id: number;
  /**
   * The slugified name of the deployment protection rule integration.
   * @example "my-custom-app"
   */
  slug: string;
  /**
   * The URL for the endpoint to get details about the app.
   * @example "https://api.github.com/apps/custom-app-slug"
   */
  integration_url: string;
  /**
   * The node ID for the deployment protection rule integration.
   * @example "MDQ6R2F0ZTM1MTU="
   */
  node_id: string;
}

/**
 * Deployment protection rule
 * Deployment protection rule
 */
interface DeploymentProtectionRule {
  /**
   * The unique identifier for the deployment protection rule.
   * @example 3515
   */
  id: number;
  /**
   * The node ID for the deployment protection rule.
   * @example "MDQ6R2F0ZTM1MTU="
   */
  node_id: string;
  /**
   * Whether the deployment protection rule is enabled for the environment.
   * @example true
   */
  enabled: boolean;
  /** A GitHub App that is providing a custom deployment protection rule. */
  app: CustomDeploymentRuleApp;
}

/**
 * Short Blob
 * Short Blob
 */
interface ShortBlob {
  url: string;
  sha: string;
}

/**
 * Blob
 * Blob
 */
interface Blob {
  content: string;
  encoding: string;
  /** @format uri */
  url: string;
  sha: string;
  size: number | null;
  node_id: string;
  highlighted_content?: string;
}

/**
 * Git Commit
 * Low-level Git commit operations within a repository
 */
interface GitCommit {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  node_id: string;
  /** @format uri */
  url: string;
  /** Identifying information for the git-user */
  author: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /** Identifying information for the git-user */
  committer: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
    /** @format uri */
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
    verified_at: string | null;
  };
  /** @format uri */
  html_url: string;
}

/**
 * Git Reference
 * Git references within a repository
 */
interface GitRef {
  ref: string;
  node_id: string;
  /** @format uri */
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     * @minLength 40
     * @maxLength 40
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
}

/**
 * Git Tag
 * Metadata for a Git tag
 */
interface GitTag {
  /** @example "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==" */
  node_id: string;
  /**
   * Name of the tag
   * @example "v0.0.1"
   */
  tag: string;
  /** @example "940bd336248efae0f9ee5bc7b2d5c985887b16ac" */
  sha: string;
  /**
   * URL for the tag
   * @format uri
   * @example "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   */
  url: string;
  /**
   * Message describing the purpose of the tag
   * @example "Initial public release"
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    /** @format uri */
    url: string;
  };
  verification?: Verification;
}

/**
 * Git Tree
 * The hierarchy between files in a Git repository.
 */
interface GitTree {
  sha: string;
  /** @format uri */
  url?: string;
  truncated: boolean;
  /**
   * Objects specifying a tree structure
   * @example [{"path":"file.rb","mode":"100644","type":"blob","size":30,"sha":"44b4fc6d56897b048c772eb4087f854f46256132","url":"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"}]
   */
  tree: {
    /** @example "test/file.rb" */
    path: string;
    /** @example "040000" */
    mode: string;
    /** @example "tree" */
    type: string;
    /** @example "23f6827669e43831def8a7ad935069c8bd418261" */
    sha: string;
    /** @example 12 */
    size?: number;
    /** @example "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261" */
    url?: string;
  }[];
}

/** Hook Response */
interface HookResponse {
  code: number | null;
  status: string | null;
  message: string | null;
}

/**
 * Webhook
 * Webhooks for repositories.
 */
interface Hook {
  type: string;
  /**
   * Unique identifier of the webhook.
   * @example 42
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   * @example "web"
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   * @example true
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   * @example ["push","pull_request"]
   */
  events: string[];
  /** Configuration object of the webhook */
  config: WebhookConfig;
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/test"
   */
  test_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries"
   */
  deliveries_url?: string;
  last_response: HookResponse;
}

/**
 * Import
 * A repository import from an external source.
 */
interface Import {
  vcs: string | null;
  use_lfs?: boolean;
  /** The URL of the originating repository. */
  vcs_url: string;
  svc_root?: string;
  tfvc_project?: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  failed_step?: string | null;
  error_message?: string | null;
  import_percent?: number | null;
  commit_count?: number | null;
  push_percent?: number | null;
  has_large_files?: boolean;
  large_files_size?: number;
  large_files_count?: number;
  project_choices?: {
    vcs?: string;
    tfvc_project?: string;
    human_name?: string;
  }[];
  message?: string;
  authors_count?: number | null;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  authors_url: string;
  /** @format uri */
  repository_url: string;
  svn_root?: string;
}

/**
 * Porter Author
 * Porter Author
 */
interface PorterAuthor {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  /** @format uri */
  url: string;
  /** @format uri */
  import_url: string;
}

/**
 * Porter Large File
 * Porter Large File
 */
interface PorterLargeFile {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
}

/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
type NullableIssue = {
  /** @format int64 */
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  /** @format uri */
  repository_url: string;
  labels_url: string;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * The reason for the current state
   * @example "not_planned"
   */
  state_reason?: "completed" | "reopened" | "not_planned" | null;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string | null;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example ["bug","registration"]
   */
  labels: (
    | string
    | {
        /** @format int64 */
        id?: number;
        node_id?: string;
        /** @format uri */
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  /** @format date-time */
  closed_at: string | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  draft?: boolean;
  /** A GitHub user. */
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  /** @format uri */
  timeline_url?: string;
  /** The type of issue. */
  type?: IssueType;
  /** A repository on GitHub. */
  repository?: Repository;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
  sub_issues_summary?: SubIssuesSummary;
};

/**
 * Issue Event Label
 * Issue Event Label
 */
interface IssueEventLabel {
  name: string | null;
  color: string | null;
}

/** Issue Event Dismissed Review */
interface IssueEventDismissedReview {
  state: string;
  review_id: number;
  dismissal_message: string | null;
  dismissal_commit_id?: string | null;
}

/**
 * Issue Event Milestone
 * Issue Event Milestone
 */
interface IssueEventMilestone {
  title: string;
}

/**
 * Issue Event Project Card
 * Issue Event Project Card
 */
interface IssueEventProjectCard {
  /** @format uri */
  url: string;
  id: number;
  /** @format uri */
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name?: string;
}

/**
 * Issue Event Rename
 * Issue Event Rename
 */
interface IssueEventRename {
  from: string;
  to: string;
}

/**
 * Issue Event
 * Issue Event
 */
interface IssueEvent {
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDEwOklzc3VlRXZlbnQx" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
   */
  url: string;
  /** A GitHub user. */
  actor: NullableSimpleUser;
  /** @example "closed" */
  event: string;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_id: string | null;
  /** @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_url: string | null;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  issue?: NullableIssue;
  /** Issue Event Label */
  label?: IssueEventLabel;
  /** A GitHub user. */
  assignee?: NullableSimpleUser;
  /** A GitHub user. */
  assigner?: NullableSimpleUser;
  /** A GitHub user. */
  review_requester?: NullableSimpleUser;
  /** A GitHub user. */
  requested_reviewer?: NullableSimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  dismissed_review?: IssueEventDismissedReview;
  /** Issue Event Milestone */
  milestone?: IssueEventMilestone;
  /** Issue Event Project Card */
  project_card?: IssueEventProjectCard;
  /** Issue Event Rename */
  rename?: IssueEventRename;
  /** How the author is associated with the repository. */
  author_association?: AuthorAssociation;
  lock_reason?: string | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * Labeled Issue Event
 * Labeled Issue Event
 */
interface LabeledIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;
    color: string;
  };
}

/**
 * Unlabeled Issue Event
 * Unlabeled Issue Event
 */
interface UnlabeledIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;
    color: string;
  };
}

/**
 * Assigned Issue Event
 * Assigned Issue Event
 */
interface AssignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: Integration;
  /** A GitHub user. */
  assignee: SimpleUser;
  /** A GitHub user. */
  assigner: SimpleUser;
}

/**
 * Unassigned Issue Event
 * Unassigned Issue Event
 */
interface UnassignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  assignee: SimpleUser;
  /** A GitHub user. */
  assigner: SimpleUser;
}

/**
 * Milestoned Issue Event
 * Milestoned Issue Event
 */
interface MilestonedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
}

/**
 * Demilestoned Issue Event
 * Demilestoned Issue Event
 */
interface DemilestonedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
}

/**
 * Renamed Issue Event
 * Renamed Issue Event
 */
interface RenamedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  rename: {
    from: string;
    to: string;
  };
}

/**
 * Review Requested Issue Event
 * Review Requested Issue Event
 */
interface ReviewRequestedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  review_requester: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  /** A GitHub user. */
  requested_reviewer?: SimpleUser;
}

/**
 * Review Request Removed Issue Event
 * Review Request Removed Issue Event
 */
interface ReviewRequestRemovedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  review_requester: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  /** A GitHub user. */
  requested_reviewer?: SimpleUser;
}

/**
 * Review Dismissed Issue Event
 * Review Dismissed Issue Event
 */
interface ReviewDismissedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  dismissed_review: {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: string;
  };
}

/**
 * Locked Issue Event
 * Locked Issue Event
 */
interface LockedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** @example ""off-topic"" */
  lock_reason: string | null;
}

/**
 * Added to Project Issue Event
 * Added to Project Issue Event
 */
interface AddedToProjectIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Moved Column in Project Issue Event
 * Moved Column in Project Issue Event
 */
interface MovedColumnInProjectIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Removed from Project Issue Event
 * Removed from Project Issue Event
 */
interface RemovedFromProjectIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Converted Note to Issue Issue Event
 * Converted Note to Issue Issue Event
 */
interface ConvertedNoteToIssueIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Issue Event for Issue
 * Issue Event for Issue
 */
type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;

/**
 * Label
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
interface Label {
  /**
   * Unique identifier for the label.
   * @format int64
   * @example 208045946
   */
  id: number;
  /** @example "MDU6TGFiZWwyMDgwNDU5NDY=" */
  node_id: string;
  /**
   * URL for the label
   * @format uri
   * @example "https://api.github.com/repositories/42/labels/bug"
   */
  url: string;
  /**
   * The name of the label.
   * @example "bug"
   */
  name: string;
  /**
   * Optional description of the label, such as its purpose.
   * @example "Something isn't working"
   */
  description: string | null;
  /**
   * 6-character hex code, without the leading #, identifying the color
   * @example "FFFFFF"
   */
  color: string;
  /**
   * Whether this label comes by default in a new repository.
   * @example true
   */
  default: boolean;
}

/**
 * Timeline Comment Event
 * Timeline Comment Event
 */
interface TimelineCommentEvent {
  event: string;
  /** A GitHub user. */
  actor: SimpleUser;
  /**
   * Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  /** @format uri */
  html_url: string;
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /** @format uri */
  issue_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
}

/**
 * Timeline Cross Referenced Event
 * Timeline Cross Referenced Event
 */
interface TimelineCrossReferencedEvent {
  event: string;
  /** A GitHub user. */
  actor?: SimpleUser;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  source: {
    type?: string;
    /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    issue?: Issue;
  };
}

/**
 * Timeline Committed Event
 * Timeline Committed Event
 */
interface TimelineCommittedEvent {
  event?: string;
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  node_id: string;
  /** @format uri */
  url: string;
  /** Identifying information for the git-user */
  author: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /** Identifying information for the git-user */
  committer: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
    /** @format uri */
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
    verified_at: string | null;
  };
  /** @format uri */
  html_url: string;
}

/**
 * Timeline Reviewed Event
 * Timeline Reviewed Event
 */
interface TimelineReviewedEvent {
  event: string;
  /**
   * Unique identifier of the review
   * @example 42
   */
  id: number;
  /** @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=" */
  node_id: string;
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string | null;
  /** @example "CHANGES_REQUESTED" */
  state: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /** @format date-time */
  submitted_at?: string;
  /**
   * A commit SHA for the review.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
}

/**
 * Pull Request Review Comment
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
interface PullRequestReviewComment {
  /**
   * URL for the pull request review comment
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   * @format int64
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * The ID of the pull request review comment.
   * @format int64
   * @example 1
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   * @example "config/database.yaml"
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
   * @example 1
   */
  position?: number;
  /**
   * The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
   * @example 4
   */
  original_position?: number;
  /**
   * The SHA of the commit to which the comment applies.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   * @example 8
   */
  in_reply_to_id?: number;
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * The text of the comment.
   * @example "We should probably include a check for null values here."
   */
  body: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  _links: {
    self: {
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
       */
      href: string;
    };
    html: {
      /**
       * @format uri
       * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
       */
      href: string;
    };
    pull_request: {
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
       */
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";
  /** The level at which the comment is targeted, can be a diff line or a file. */
  subject_type?: "line" | "file";
  reactions?: ReactionRollup;
  /** @example ""<p>comment body</p>"" */
  body_html?: string;
  /** @example ""comment body"" */
  body_text?: string;
}

/**
 * Timeline Line Commented Event
 * Timeline Line Commented Event
 */
interface TimelineLineCommentedEvent {
  event?: string;
  node_id?: string;
  comments?: PullRequestReviewComment[];
}

/**
 * Timeline Commit Commented Event
 * Timeline Commit Commented Event
 */
interface TimelineCommitCommentedEvent {
  event?: string;
  node_id?: string;
  commit_id?: string;
  comments?: CommitComment[];
}

/**
 * Timeline Assigned Issue Event
 * Timeline Assigned Issue Event
 */
interface TimelineAssignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  assignee: SimpleUser;
}

/**
 * Timeline Unassigned Issue Event
 * Timeline Unassigned Issue Event
 */
interface TimelineUnassignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  assignee: SimpleUser;
}

/**
 * State Change Issue Event
 * State Change Issue Event
 */
interface StateChangeIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  state_reason?: string | null;
}

/**
 * Timeline Event
 * Timeline Event
 */
type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent
  | StateChangeIssueEvent;

/**
 * Deploy Key
 * An SSH key granting access to a single repository.
 */
interface DeployKey {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
  added_by?: string | null;
  last_used?: string | null;
  enabled?: boolean;
}

/**
 * Language
 * Language
 */
type Language = Record<string, number>;

/**
 * License Content
 * License Content
 */
interface LicenseContent {
  name: string;
  path: string;
  sha: string;
  size: number;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  download_url: string | null;
  type: string;
  content: string;
  encoding: string;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** License Simple */
  license: NullableLicenseSimple;
}

/**
 * Merged upstream
 * Results of a successful merge upstream request
 */
interface MergedUpstream {
  message?: string;
  merge_type?: "merge" | "fast-forward" | "none";
  base_branch?: string;
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
interface Milestone {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /** @example 1002604 */
  id: number;
  /** @example "MDk6TWlsZXN0b25lMTAwMjYwNA==" */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /**
   * The state of the milestone.
   * @default "open"
   * @example "open"
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /** @example "Tracking milestone for version 1.0" */
  description: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /** @example 4 */
  open_issues: number;
  /** @example 8 */
  closed_issues: number;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: string | null;
}

/** Pages Source Hash */
interface PagesSourceHash {
  branch: string;
  path: string;
}

/** Pages Https Certificate */
interface PagesHttpsCertificate {
  /** @example "approved" */
  state:
    | "new"
    | "authorization_created"
    | "authorization_pending"
    | "authorized"
    | "authorization_revoked"
    | "issued"
    | "uploaded"
    | "approved"
    | "errored"
    | "bad_authz"
    | "destroy_pending"
    | "dns_changed";
  /** @example "Certificate is approved" */
  description: string;
  /**
   * Array of the domain set and its alternate name (if it is configured)
   * @example ["example.com","www.example.com"]
   */
  domains: string[];
  /** @format date */
  expires_at?: string;
}

/**
 * GitHub Pages
 * The configuration for GitHub Pages for a repository.
 */
interface Page {
  /**
   * The API address for accessing this Page resource.
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages"
   */
  url: string;
  /**
   * The status of the most recent build of the Page.
   * @example "built"
   */
  status: "built" | "building" | "errored" | null;
  /**
   * The Pages site's custom domain
   * @example "example.com"
   */
  cname: string | null;
  /**
   * The state if the domain is verified
   * @example "pending"
   */
  protected_domain_state?: "pending" | "verified" | "unverified" | null;
  /**
   * The timestamp when a pending domain becomes unverified.
   * @format date-time
   */
  pending_domain_unverified_at?: string | null;
  /**
   * Whether the Page has a custom 404 page.
   * @default false
   * @example false
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   * @format uri
   * @example "https://example.com"
   */
  html_url?: string;
  /**
   * The process in which the Page will be built.
   * @example "legacy"
   */
  build_type?: "legacy" | "workflow" | null;
  source?: PagesSourceHash;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   * @example true
   */
  public: boolean;
  https_certificate?: PagesHttpsCertificate;
  /**
   * Whether https is enabled on the domain
   * @example true
   */
  https_enforced?: boolean;
}

/**
 * Page Build
 * Page Build
 */
interface PageBuild {
  /** @format uri */
  url: string;
  status: string;
  error: {
    message: string | null;
  };
  /** A GitHub user. */
  pusher: NullableSimpleUser;
  commit: string;
  duration: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Page Build Status
 * Page Build Status
 */
interface PageBuildStatus {
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages/builds/latest"
   */
  url: string;
  /** @example "queued" */
  status: string;
}

/**
 * GitHub Pages
 * The GitHub Pages deployment status.
 */
interface PageDeployment {
  /** The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit. */
  id: number | string;
  /**
   * The URI to monitor GitHub Pages deployment status.
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251"
   */
  status_url: string;
  /**
   * The URI to the deployed GitHub Pages.
   * @format uri
   * @example "hello-world.github.io"
   */
  page_url: string;
  /**
   * The URI to the deployed GitHub Pages preview.
   * @format uri
   * @example "monalisa-1231a2312sa32-23sda74.drafts.github.io"
   */
  preview_url?: string;
}

/** GitHub Pages deployment status */
interface PagesDeploymentStatus {
  /** The current status of the deployment. */
  status?:
    | "deployment_in_progress"
    | "syncing_files"
    | "finished_file_sync"
    | "updating_pages"
    | "purging_cdn"
    | "deployment_cancelled"
    | "deployment_failed"
    | "deployment_content_failed"
    | "deployment_attempt_error"
    | "deployment_lost"
    | "succeed";
}

/**
 * Pages Health Check Status
 * Pages Health Check Status
 */
interface PagesHealthCheck {
  domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
  alt_domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
}

/**
 * Pull Request
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
interface PullRequest {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDExOlB1bGxSZXF1ZXN0MQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /** @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}" */
  review_comment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   * @example 42
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   * @example "open"
   */
  state: "open" | "closed";
  /** @example true */
  locked: boolean;
  /**
   * The title of the pull request.
   * @example "Amazing new feature"
   */
  title: string;
  /** A GitHub user. */
  user: SimpleUser;
  /** @example "Please pull these awesome changes" */
  body: string | null;
  labels: {
    /** @format int64 */
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string | null;
    color: string;
    default: boolean;
  }[];
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  /** @example "too heated" */
  active_lock_reason?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: string | null;
  /** @example "e5bd3914e2e596debea16f433f57875b5b90bcd6" */
  merge_commit_sha: string | null;
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  head: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: SimpleUser;
  };
  base: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: SimpleUser;
  };
  _links: {
    /** Hypermedia Link */
    comments: Link;
    /** Hypermedia Link */
    commits: Link;
    /** Hypermedia Link */
    statuses: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    issue: Link;
    /** Hypermedia Link */
    review_comments: Link;
    /** Hypermedia Link */
    review_comment: Link;
    /** Hypermedia Link */
    self: Link;
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** The status of auto merging a pull request. */
  auto_merge: AutoMerge;
  /**
   * Indicates whether or not the pull request is a draft.
   * @example false
   */
  draft?: boolean;
  merged: boolean;
  /** @example true */
  mergeable: boolean | null;
  /** @example true */
  rebaseable?: boolean | null;
  /** @example "clean" */
  mergeable_state: string;
  /** A GitHub user. */
  merged_by: NullableSimpleUser;
  /** @example 10 */
  comments: number;
  /** @example 0 */
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   * @example true
   */
  maintainer_can_modify: boolean;
  /** @example 3 */
  commits: number;
  /** @example 100 */
  additions: number;
  /** @example 3 */
  deletions: number;
  /** @example 5 */
  changed_files: number;
}

/**
 * Pull Request Merge Result
 * Pull Request Merge Result
 */
interface PullRequestMergeResult {
  sha: string;
  merged: boolean;
  message: string;
}

/**
 * Pull Request Review Request
 * Pull Request Review Request
 */
interface PullRequestReviewRequest {
  users: SimpleUser[];
  teams: Team[];
}

/**
 * Pull Request Review
 * Pull Request Reviews are reviews on pull requests.
 */
interface PullRequestReview {
  /**
   * Unique identifier of the review
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=" */
  node_id: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string;
  /** @example "CHANGES_REQUESTED" */
  state: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /** @format date-time */
  submitted_at?: string;
  /**
   * A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string | null;
  body_html?: string;
  body_text?: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
}

/**
 * Legacy Review Comment
 * Legacy Review Comment
 */
interface ReviewComment {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /**
   * @format int64
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * @format int64
   * @example 10
   */
  id: number;
  /** @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw" */
  node_id: string;
  /** @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..." */
  diff_hunk: string;
  /** @example "file1.txt" */
  path: string;
  /** @example 1 */
  position: number | null;
  /** @example 4 */
  original_position: number;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_id: string;
  /** @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840" */
  original_commit_id: string;
  /** @example 8 */
  in_reply_to_id?: number;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @example "Great stuff" */
  body: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  _links: {
    /** Hypermedia Link */
    self: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    pull_request: Link;
  };
  body_text?: string;
  body_html?: string;
  reactions?: ReactionRollup;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The original first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /** The level at which the comment is targeted, can be a diff line or a file. */
  subject_type?: "line" | "file";
}

/**
 * Release Asset
 * Data related to a release.
 */
interface ReleaseAsset {
  /** @format uri */
  url: string;
  /** @format uri */
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   * @example "Team Environment"
   */
  name: string;
  label: string | null;
  /** State of the release asset. */
  state: "uploaded" | "open";
  content_type: string;
  size: number;
  digest: string | null;
  download_count: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** A GitHub user. */
  uploader: NullableSimpleUser;
}

/**
 * Release
 * A release.
 */
interface Release {
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  assets_url: string;
  upload_url: string;
  /** @format uri */
  tarball_url: string | null;
  /** @format uri */
  zipball_url: string | null;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   * @example "v1.0.0"
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   * @example "master"
   */
  target_commitish: string;
  name: string | null;
  body?: string | null;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   * @example false
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   * @example false
   */
  prerelease: boolean;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  published_at: string | null;
  /** A GitHub user. */
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html?: string;
  body_text?: string;
  mentions_count?: number;
  /**
   * The URL of the release discussion.
   * @format uri
   */
  discussion_url?: string;
  reactions?: ReactionRollup;
}

/**
 * Generated Release Notes Content
 * Generated name and body describing a release
 */
interface ReleaseNotesContent {
  /**
   * The generated name of the release
   * @example "Release v1.0.0 is now available!"
   */
  name: string;
  /** The generated body describing the contents of the release supporting markdown formatting */
  body: string;
}

/**
 * repository ruleset data for rule
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
interface RepositoryRuleRulesetInfo {
  /** The type of source for the ruleset that includes this rule. */
  ruleset_source_type?: "Repository" | "Organization";
  /** The name of the source of the ruleset that includes this rule. */
  ruleset_source?: string;
  /** The ID of the ruleset that includes this rule. */
  ruleset_id?: number;
}

/**
 * Repository Rule
 * A repository rule with ruleset details.
 */
type RepositoryRuleDetailed =
  | (RepositoryRuleCreation & RepositoryRuleRulesetInfo)
  | (RepositoryRuleUpdate & RepositoryRuleRulesetInfo)
  | (RepositoryRuleDeletion & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredLinearHistory & RepositoryRuleRulesetInfo)
  | (RepositoryRuleMergeQueue & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredDeployments & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredSignatures & RepositoryRuleRulesetInfo)
  | (RepositoryRulePullRequest & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredStatusChecks & RepositoryRuleRulesetInfo)
  | (RepositoryRuleNonFastForward & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitMessagePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitAuthorEmailPattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitterEmailPattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleBranchNamePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleTagNamePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleFilePathRestriction & RepositoryRuleRulesetInfo)
  | (RepositoryRuleMaxFilePathLength & RepositoryRuleRulesetInfo)
  | (RepositoryRuleFileExtensionRestriction & RepositoryRuleRulesetInfo)
  | (RepositoryRuleMaxFileSize & RepositoryRuleRulesetInfo)
  | (RepositoryRuleWorkflows & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCodeScanning & RepositoryRuleRulesetInfo);

interface SecretScanningAlert {
  /** The security alert number. */
  number?: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at?: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: NullableAlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
  locations_url?: string;
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
  state?: SecretScanningAlertState;
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** A GitHub user. */
  resolved_by?: NullableSimpleUser;
  /** An optional comment to resolve an alert. */
  resolution_comment?: string | null;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /** The secret that was detected. */
  secret?: string;
  /** Whether push protection was bypassed for the detected secret. */
  push_protection_bypassed?: boolean | null;
  /** A GitHub user. */
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  /** A GitHub user. */
  push_protection_bypass_request_reviewer?: NullableSimpleUser;
  /** An optional comment when reviewing a push protection bypass. */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /** An optional comment when requesting a push protection bypass. */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
  push_protection_bypass_request_html_url?: string | null;
  /** The token status as of the latest validity check. */
  validity?: "active" | "inactive" | "unknown";
  /** Whether the detected secret was publicly leaked. */
  publicly_leaked?: boolean | null;
  /** Whether the detected secret was found in multiple repositories under the same organization or enterprise. */
  multi_repo?: boolean | null;
  /** A boolean value representing whether or not alert is base64 encoded */
  is_base64_encoded?: boolean | null;
  /** Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request. */
  first_location_detected?: NullableSecretScanningFirstDetectedLocation;
  /** A boolean value representing whether or not the token in the alert was detected in more than one location. */
  has_more_locations?: boolean;
}

/** An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
type SecretScanningAlertResolutionComment = string | null;

interface SecretScanningLocation {
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
   * @example "commit"
   */
  type?:
    | "commit"
    | "wiki_commit"
    | "issue_title"
    | "issue_body"
    | "issue_comment"
    | "discussion_title"
    | "discussion_body"
    | "discussion_comment"
    | "pull_request_title"
    | "pull_request_body"
    | "pull_request_comment"
    | "pull_request_review"
    | "pull_request_review_comment";
  details?:
    | SecretScanningLocationCommit
    | SecretScanningLocationWikiCommit
    | SecretScanningLocationIssueTitle
    | SecretScanningLocationIssueBody
    | SecretScanningLocationIssueComment
    | SecretScanningLocationDiscussionTitle
    | SecretScanningLocationDiscussionBody
    | SecretScanningLocationDiscussionComment
    | SecretScanningLocationPullRequestTitle
    | SecretScanningLocationPullRequestBody
    | SecretScanningLocationPullRequestComment
    | SecretScanningLocationPullRequestReview
    | SecretScanningLocationPullRequestReviewComment;
}

/** The reason for bypassing push protection. */
enum SecretScanningPushProtectionBypassReason {
  FalsePositive = "false_positive",
  UsedInTests = "used_in_tests",
  WillFixLater = "will_fix_later",
}

interface SecretScanningPushProtectionBypass {
  /** The reason for bypassing push protection. */
  reason?: SecretScanningPushProtectionBypassReason;
  /**
   * The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  expire_at?: string | null;
  /** The token type this bypass is for. */
  token_type?: string;
}

/** Information on a single scan performed by secret scanning on the repository */
interface SecretScanningScan {
  /** The type of scan */
  type?: string;
  /** The state of the scan. Either "completed", "running", or "pending" */
  status?: string;
  /**
   * The time that the scan was completed. Empty if the scan is running
   * @format date-time
   */
  completed_at?: string | null;
  /**
   * The time that the scan was started. Empty if the scan is pending
   * @format date-time
   */
  started_at?: string | null;
}

interface SecretScanningScanHistory {
  incremental_scans?: SecretScanningScan[];
  pattern_update_scans?: SecretScanningScan[];
  backfill_scans?: SecretScanningScan[];
  custom_pattern_backfill_scans?: (SecretScanningScan & {
    /** Name of the custom pattern for custom pattern scans */
    pattern_name?: string;
    /** Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise" */
    pattern_scope?: string;
  })[];
}

interface RepositoryAdvisoryCreate {
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory impacts.
   * @maxLength 65535
   */
  description: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id?: string | null;
  /** A product affected by the vulnerability detailed in a repository security advisory. */
  vulnerabilities: {
    /** The name of the package affected by the vulnerability. */
    package: {
      /** The package's language or package management ecosystem. */
      ecosystem: SecurityAdvisoryEcosystems;
      /** The unique package name within its ecosystem. */
      name?: string | null;
    };
    /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range?: string | null;
    /** The package version(s) that resolve the vulnerability. */
    patched_versions?: string | null;
    /** The functions in the package that are affected. */
    vulnerable_functions?: string[] | null;
  }[];
  /** A list of Common Weakness Enumeration (CWE) IDs. */
  cwe_ids?: string[] | null;
  /** A list of users receiving credit for their participation in the security advisory. */
  credits?:
    | {
        /** The username of the user credited. */
        login: string;
        /** The type of credit the user is receiving. */
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  /** The severity of the advisory. You must choose between setting this field or `cvss_vector_string`. */
  severity?: "critical" | "high" | "medium" | "low" | null;
  /** The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
  cvss_vector_string?: string | null;
  /**
   * Whether to create a temporary private fork of the repository to collaborate on a fix.
   * @default false
   */
  start_private_fork?: boolean;
}

interface PrivateVulnerabilityReportCreate {
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory impacts.
   * @maxLength 65535
   */
  description: string;
  /** An array of products affected by the vulnerability detailed in a repository security advisory. */
  vulnerabilities?: {
    /** The name of the package affected by the vulnerability. */
    package: {
      /** The package's language or package management ecosystem. */
      ecosystem: SecurityAdvisoryEcosystems;
      /** The unique package name within its ecosystem. */
      name?: string | null;
    };
    /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range?: string | null;
    /** The package version(s) that resolve the vulnerability. */
    patched_versions?: string | null;
    /** The functions in the package that are affected. */
    vulnerable_functions?: string[] | null;
  }[];
  /** A list of Common Weakness Enumeration (CWE) IDs. */
  cwe_ids?: string[] | null;
  /** The severity of the advisory. You must choose between setting this field or `cvss_vector_string`. */
  severity?: "critical" | "high" | "medium" | "low" | null;
  /** The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
  cvss_vector_string?: string | null;
  /**
   * Whether to create a temporary private fork of the repository to collaborate on a fix.
   * @default false
   */
  start_private_fork?: boolean;
}

interface RepositoryAdvisoryUpdate {
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary?: string;
  /**
   * A detailed description of what the advisory impacts.
   * @maxLength 65535
   */
  description?: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id?: string | null;
  /** A product affected by the vulnerability detailed in a repository security advisory. */
  vulnerabilities?: {
    /** The name of the package affected by the vulnerability. */
    package: {
      /** The package's language or package management ecosystem. */
      ecosystem: SecurityAdvisoryEcosystems;
      /** The unique package name within its ecosystem. */
      name?: string | null;
    };
    /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range?: string | null;
    /** The package version(s) that resolve the vulnerability. */
    patched_versions?: string | null;
    /** The functions in the package that are affected. */
    vulnerable_functions?: string[] | null;
  }[];
  /** A list of Common Weakness Enumeration (CWE) IDs. */
  cwe_ids?: string[] | null;
  /** A list of users receiving credit for their participation in the security advisory. */
  credits?:
    | {
        /** The username of the user credited. */
        login: string;
        /** The type of credit the user is receiving. */
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  /** The severity of the advisory. You must choose between setting this field or `cvss_vector_string`. */
  severity?: "critical" | "high" | "medium" | "low" | null;
  /** The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
  cvss_vector_string?: string | null;
  /** The state of the advisory. */
  state?: "published" | "closed" | "draft";
  /** A list of usernames who have been granted write access to the advisory. */
  collaborating_users?: string[] | null;
  /** A list of team slugs which have been granted write access to the advisory. */
  collaborating_teams?: string[] | null;
}

/**
 * Stargazer
 * Stargazer
 */
interface Stargazer {
  /** @format date-time */
  starred_at: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
}

/**
 * Code Frequency Stat
 * Code Frequency Stat
 */
type CodeFrequencyStat = number[];

/**
 * Commit Activity
 * Commit Activity
 */
interface CommitActivity {
  /** @example [0,3,26,20,39,1,0] */
  days: number[];
  /** @example 89 */
  total: number;
  /** @example 1336280400 */
  week: number;
}

/**
 * Contributor Activity
 * Contributor Activity
 */
interface ContributorActivity {
  /** A GitHub user. */
  author: NullableSimpleUser;
  /** @example 135 */
  total: number;
  /** @example [{"w":"1367712000","a":6898,"d":77,"c":10}] */
  weeks: {
    w?: number;
    a?: number;
    d?: number;
    c?: number;
  }[];
}

/** Participation Stats */
interface ParticipationStats {
  all: number[];
  owner: number[];
}

/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
interface RepositorySubscription {
  /**
   * Determines if notifications should be received from this repository.
   * @example true
   */
  subscribed: boolean;
  /** Determines if all notifications should be blocked from this repository. */
  ignored: boolean;
  reason: string | null;
  /**
   * @format date-time
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/subscription"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
}

/**
 * Tag
 * Tag
 */
interface Tag {
  /** @example "v0.1" */
  name: string;
  commit: {
    sha: string;
    /** @format uri */
    url: string;
  };
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/zipball/v0.1"
   */
  zipball_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/tarball/v0.1"
   */
  tarball_url: string;
  node_id: string;
}

/**
 * Tag protection
 * Tag protection
 */
interface TagProtection {
  /** @example 2 */
  id?: number;
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
  /** @example "2011-01-26T19:01:12Z" */
  updated_at?: string;
  /** @example true */
  enabled?: boolean;
  /** @example "v1.*" */
  pattern: string;
}

/**
 * Topic
 * A topic aggregates entities that are related to a subject.
 */
interface Topic {
  names: string[];
}

/** Traffic */
interface Traffic {
  /** @format date-time */
  timestamp: string;
  uniques: number;
  count: number;
}

/**
 * Clone Traffic
 * Clone Traffic
 */
interface CloneTraffic {
  /** @example 173 */
  count: number;
  /** @example 128 */
  uniques: number;
  clones: Traffic[];
}

/**
 * Content Traffic
 * Content Traffic
 */
interface ContentTraffic {
  /** @example "/github/hubot" */
  path: string;
  /** @example "github/hubot: A customizable life embetterment robot." */
  title: string;
  /** @example 3542 */
  count: number;
  /** @example 2225 */
  uniques: number;
}

/**
 * Referrer Traffic
 * Referrer Traffic
 */
interface ReferrerTraffic {
  /** @example "Google" */
  referrer: string;
  /** @example 4 */
  count: number;
  /** @example 3 */
  uniques: number;
}

/**
 * View Traffic
 * View Traffic
 */
interface ViewTraffic {
  /** @example 14850 */
  count: number;
  /** @example 3782 */
  uniques: number;
  views: Traffic[];
}

/** Search Result Text Matches */
type SearchResultTextMatches = {
  object_url?: string;
  object_type?: string | null;
  property?: string;
  fragment?: string;
  matches?: {
    text?: string;
    indices?: number[];
  }[];
}[];

/**
 * Code Search Result Item
 * Code Search Result Item
 */
interface CodeSearchResultItem {
  name: string;
  path: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string;
  /** @format uri */
  html_url: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  score: number;
  file_size?: number;
  language?: string | null;
  /** @format date-time */
  last_modified_at?: string;
  /** @example ["73..77","77..78"] */
  line_numbers?: string[];
  text_matches?: SearchResultTextMatches;
}

/**
 * Commit Search Result Item
 * Commit Search Result Item
 */
interface CommitSearchResultItem {
  /** @format uri */
  url: string;
  sha: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  comments_url: string;
  commit: {
    author: {
      name: string;
      email: string;
      /** @format date-time */
      date: string;
    };
    /** Metaproperties for Git author/committer information. */
    committer: NullableGitUser;
    comment_count: number;
    message: string;
    tree: {
      sha: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    url: string;
    verification?: Verification;
  };
  /** A GitHub user. */
  author: NullableSimpleUser;
  /** Metaproperties for Git author/committer information. */
  committer: NullableGitUser;
  parents: {
    url?: string;
    html_url?: string;
    sha?: string;
  }[];
  /** Minimal Repository */
  repository: MinimalRepository;
  score: number;
  node_id: string;
  text_matches?: SearchResultTextMatches;
}

/**
 * Issue Search Result Item
 * Issue Search Result Item
 */
interface IssueSearchResultItem {
  /** @format uri */
  url: string;
  /** @format uri */
  repository_url: string;
  labels_url: string;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /** @format int64 */
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason?: string | null;
  assignees?: SimpleUser[] | null;
  /** A GitHub user. */
  user: NullableSimpleUser;
  labels: {
    /** @format int64 */
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
    description?: string | null;
  }[];
  /** Sub-issues Summary */
  sub_issues_summary?: {
    total: number;
    completed: number;
    percent_completed: number;
  };
  state: string;
  state_reason?: string | null;
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  comments: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  closed_at: string | null;
  text_matches?: SearchResultTextMatches;
  pull_request?: {
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  body?: string;
  score: number;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  draft?: boolean;
  /** A repository on GitHub. */
  repository?: Repository;
  body_html?: string;
  body_text?: string;
  /** @format uri */
  timeline_url?: string;
  /** The type of issue. */
  type?: IssueType;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
}

/**
 * Label Search Result Item
 * Label Search Result Item
 */
interface LabelSearchResultItem {
  id: number;
  node_id: string;
  /** @format uri */
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string | null;
  score: number;
  text_matches?: SearchResultTextMatches;
}

/**
 * Repo Search Result Item
 * Repo Search Result Item
 */
interface RepoSearchResultItem {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  /** A GitHub user. */
  owner: NullableSimpleUser;
  private: boolean;
  /** @format uri */
  html_url: string;
  description: string | null;
  fork: boolean;
  /** @format uri */
  url: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  pushed_at: string;
  /** @format uri */
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  forks_count: number;
  open_issues_count: number;
  master_branch?: string;
  default_branch: string;
  score: number;
  /** @format uri */
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  /** @format uri */
  teams_url: string;
  /** @format uri */
  hooks_url: string;
  issue_events_url: string;
  /** @format uri */
  events_url: string;
  assignees_url: string;
  branches_url: string;
  /** @format uri */
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  /** @format uri */
  languages_url: string;
  /** @format uri */
  stargazers_url: string;
  /** @format uri */
  contributors_url: string;
  /** @format uri */
  subscribers_url: string;
  /** @format uri */
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  /** @format uri */
  merges_url: string;
  archive_url: string;
  /** @format uri */
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  /** @format uri */
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  /** @format uri */
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics?: string[];
  /** @format uri */
  mirror_url: string | null;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  has_discussions?: boolean;
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /** The repository visibility: public, private, or internal. */
  visibility?: string;
  /** License Simple */
  license: NullableLicenseSimple;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  text_matches?: SearchResultTextMatches;
  temp_clone_token?: string;
  allow_merge_commit?: boolean;
  allow_squash_merge?: boolean;
  allow_rebase_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  allow_forking?: boolean;
  is_template?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
}

/**
 * Topic Search Result Item
 * Topic Search Result Item
 */
interface TopicSearchResultItem {
  name: string;
  display_name: string | null;
  short_description: string | null;
  description: string | null;
  created_by: string | null;
  released: string | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count?: number | null;
  /** @format uri */
  logo_url?: string | null;
  text_matches?: SearchResultTextMatches;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
}

/**
 * User Search Result Item
 * User Search Result Item
 */
interface UserSearchResultItem {
  login: string;
  /** @format int64 */
  id: number;
  node_id: string;
  /** @format uri */
  avatar_url: string;
  gravatar_id: string | null;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  followers_url: string;
  /** @format uri */
  subscriptions_url: string;
  /** @format uri */
  organizations_url: string;
  /** @format uri */
  repos_url: string;
  /** @format uri */
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos?: number;
  public_gists?: number;
  followers?: number;
  following?: number;
  /** @format date-time */
  created_at?: string;
  /** @format date-time */
  updated_at?: string;
  name?: string | null;
  bio?: string | null;
  /** @format email */
  email?: string | null;
  location?: string | null;
  site_admin: boolean;
  hireable?: boolean | null;
  text_matches?: SearchResultTextMatches;
  blog?: string | null;
  company?: string | null;
  /** @format date-time */
  suspended_at?: string | null;
  user_view_type?: string;
}

/**
 * Private User
 * Private User
 */
interface PrivateUser {
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  user_view_type?: string;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example "monalisa octocat" */
  name: string | null;
  /** @example "GitHub" */
  company: string | null;
  /** @example "https://github.com/blog" */
  blog: string | null;
  /** @example "San Francisco" */
  location: string | null;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email: string | null;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  notification_email?: string | null;
  hireable: boolean | null;
  /** @example "There once was..." */
  bio: string | null;
  /** @example "monalisa" */
  twitter_username?: string | null;
  /** @example 2 */
  public_repos: number;
  /** @example 1 */
  public_gists: number;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  updated_at: string;
  /** @example 81 */
  private_gists: number;
  /** @example 100 */
  total_private_repos: number;
  /** @example 100 */
  owned_private_repos: number;
  /** @example 10000 */
  disk_usage: number;
  /** @example 8 */
  collaborators: number;
  /** @example true */
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  business_plus?: boolean;
  ldap_dn?: string;
}

/**
 * Codespaces Secret
 * Secrets for a GitHub Codespace.
 */
interface CodespacesSecret {
  /**
   * The name of the secret
   * @example "SECRET_NAME"
   */
  name: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /** The type of repositories in the organization that the secret is visible to */
  visibility: "all" | "private" | "selected";
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   * @format uri
   * @example "https://api.github.com/user/secrets/SECRET_NAME/repositories"
   */
  selected_repositories_url: string;
}

/**
 * CodespacesUserPublicKey
 * The public key used for setting user Codespaces' Secrets.
 */
interface CodespacesUserPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
}

/**
 * Fetches information about an export of a codespace.
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
interface CodespaceExportDetails {
  /**
   * State of the latest export
   * @example "succeeded | failed | in_progress"
   */
  state?: string | null;
  /**
   * Completion time of the last export operation
   * @format date-time
   * @example "2021-01-01T19:01:12Z"
   */
  completed_at?: string | null;
  /**
   * Name of the exported branch
   * @example "codespace-monalisa-octocat-hello-world-g4wpq6h95q"
   */
  branch?: string | null;
  /**
   * Git commit SHA of the exported branch
   * @example "fd95a81ca01e48ede9f39c799ecbcef817b8a3b2"
   */
  sha?: string | null;
  /**
   * Id for the export details
   * @example "latest"
   */
  id?: string;
  /**
   * Url for fetching export details
   * @example "https://api.github.com/user/codespaces/:name/exports/latest"
   */
  export_url?: string;
  /**
   * Web url for the exported branch
   * @example "https://github.com/octocat/hello-world/tree/:branch"
   */
  html_url?: string | null;
}

/**
 * Codespace
 * A codespace.
 */
interface CodespaceWithFullRepository {
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /**
   * Automatically generated name of this codespace.
   * @example "monalisa-octocat-hello-world-g4wpq6h95q"
   */
  name: string;
  /**
   * Display name for this codespace.
   * @example "bookish space pancake"
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   * @example "26a7c758-7299-4a73-b978-5a92a7ae98a0"
   */
  environment_id: string | null;
  /** A GitHub user. */
  owner: SimpleUser;
  /** A GitHub user. */
  billable_owner: SimpleUser;
  /** Full Repository */
  repository: FullRepository;
  /** A description of the machine powering a codespace. */
  machine: NullableCodespaceMachine;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   * @example ".devcontainer/example/devcontainer.json"
   */
  devcontainer_path?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   * @example false
   */
  prebuild: boolean | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * Last known time this codespace was started.
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  last_used_at: string;
  /**
   * State of this codespace.
   * @example "Available"
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";
  /**
   * API URL for this codespace.
   * @format uri
   */
  url: string;
  /** Details about the codespace's git repository. */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     * @example 0
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     * @example 0
     */
    behind?: number;
    /** Whether the local repository has unpushed changes. */
    has_unpushed_changes?: boolean;
    /** Whether the local repository has uncommitted changes. */
    has_uncommitted_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example "main"
     */
    ref?: string;
  };
  /**
   * The initally assigned location of a new codespace.
   * @example "WestUs2"
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * URL to access this codespace on the web.
   * @format uri
   */
  web_url: string;
  /**
   * API URL to access available alternate machine types for this codespace.
   * @format uri
   */
  machines_url: string;
  /**
   * API URL to start this codespace.
   * @format uri
   */
  start_url: string;
  /**
   * API URL to stop this codespace.
   * @format uri
   */
  stop_url: string;
  /**
   * API URL to publish this codespace to a new repository.
   * @format uri
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   * @format uri
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /** The privacy settings a user can select from when forwarding a port. */
    allowed_port_privacy_settings?: string[] | null;
  };
  /** Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
  pending_operation?: boolean | null;
  /** Text to show user when codespace is disabled by a pending operation */
  pending_operation_disabled_reason?: string | null;
  /** Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
  idle_timeout_notice?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @format date-time
   * @example "2011-01-26T20:01:12Z"
   */
  retention_expires_at?: string | null;
}

/**
 * Email
 * Email
 */
interface Email {
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email: string;
  /** @example true */
  primary: boolean;
  /** @example true */
  verified: boolean;
  /** @example "public" */
  visibility: string | null;
}

/**
 * GPG Key
 * A unique encryption key
 */
interface GpgKey {
  /**
   * @format int64
   * @example 3
   */
  id: number;
  /** @example "Octocat's GPG Key" */
  name?: string | null;
  primary_key_id: number | null;
  /** @example "3262EFF25BA0D270" */
  key_id: string;
  /** @example "xsBNBFayYZ..." */
  public_key: string;
  /** @example [{"email":"octocat@users.noreply.github.com","verified":true}] */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /** @example [{"id":4,"primary_key_id":3,"key_id":"4A595D4C72EE49C7","public_key":"zsBNBFayYZ...","emails":[],"can_sign":false,"can_encrypt_comms":true,"can_encrypt_storage":true,"can_certify":false,"created_at":"2016-03-24T11:31:04-06:00","expires_at":null,"revoked":false}] */
  subkeys: {
    /** @format int64 */
    id?: number;
    primary_key_id?: number;
    key_id?: string;
    public_key?: string;
    emails?: {
      email?: string;
      verified?: boolean;
    }[];
    subkeys?: any[];
    can_sign?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_certify?: boolean;
    created_at?: string;
    expires_at?: string | null;
    raw_key?: string | null;
    revoked?: boolean;
  }[];
  /** @example true */
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /** @example true */
  can_certify: boolean;
  /**
   * @format date-time
   * @example "2016-03-24T11:31:04-06:00"
   */
  created_at: string;
  /** @format date-time */
  expires_at: string | null;
  /** @example true */
  revoked: boolean;
  raw_key: string | null;
}

/**
 * Key
 * Key
 */
interface Key {
  key: string;
  /** @format int64 */
  id: number;
  url: string;
  title: string;
  /** @format date-time */
  created_at: string;
  verified: boolean;
  read_only: boolean;
}

/** Marketplace Account */
interface MarketplaceAccount {
  /** @format uri */
  url: string;
  id: number;
  type: string;
  node_id?: string;
  login: string;
  /** @format email */
  email?: string | null;
  /** @format email */
  organization_billing_email?: string | null;
}

/**
 * User Marketplace Purchase
 * User Marketplace Purchase
 */
interface UserMarketplacePurchase {
  /** @example "monthly" */
  billing_cycle: string;
  /**
   * @format date-time
   * @example "2017-11-11T00:00:00Z"
   */
  next_billing_date: string | null;
  unit_count: number | null;
  /** @example true */
  on_free_trial: boolean;
  /**
   * @format date-time
   * @example "2017-11-11T00:00:00Z"
   */
  free_trial_ends_on: string | null;
  /**
   * @format date-time
   * @example "2017-11-02T01:12:12Z"
   */
  updated_at: string | null;
  account: MarketplaceAccount;
  /** Marketplace Listing Plan */
  plan: MarketplaceListingPlan;
}

/**
 * Social account
 * Social media account
 */
interface SocialAccount {
  /** @example "linkedin" */
  provider: string;
  /** @example "https://www.linkedin.com/company/github/" */
  url: string;
}

/**
 * SSH Signing Key
 * A public SSH key used to sign Git commits
 */
interface SshSigningKey {
  key: string;
  id: number;
  title: string;
  /** @format date-time */
  created_at: string;
}

/**
 * Starred Repository
 * Starred Repository
 */
interface StarredRepository {
  /** @format date-time */
  starred_at: string;
  /** A repository on GitHub. */
  repo: Repository;
}

/**
 * Hovercard
 * Hovercard
 */
interface Hovercard {
  contexts: {
    message: string;
    octicon: string;
  }[];
}

/**
 * Key Simple
 * Key Simple
 */
interface KeySimple {
  id: number;
  key: string;
  /** @format date-time */
  created_at?: string;
}

interface BillingUsageReportUser {
  usageItems?: {
    /** Date of the usage line item. */
    date: string;
    /** Product name. */
    product: string;
    /** SKU name. */
    sku: string;
    /** Quantity of the usage line item. */
    quantity: number;
    /** Unit type of the usage line item. */
    unitType: string;
    /** Price per unit of the usage line item. */
    pricePerUnit: number;
    /** Gross amount of the usage line item. */
    grossAmount: number;
    /** Discount amount of the usage line item. */
    discountAmount: number;
    /** Net amount of the usage line item. */
    netAmount: number;
    /** Name of the repository. */
    repositoryName?: string;
  }[];
}

/**
 * Enterprise
 * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
 * on an enterprise account or an organization that's part of an enterprise account. For more information,
 * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
 */
interface EnterpriseWebhooks {
  /** A short description of the enterprise. */
  description?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   * @format uri
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @format date-time
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /** @format uri */
  avatar_url: string;
}

/**
 * Simple Installation
 * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
 * for and sent to a GitHub App. For more information,
 * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
 */
interface SimpleInstallation {
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  /**
   * The global node ID of the installation.
   * @example "MDQ6VXNlcjU4MzIzMQ=="
   */
  node_id: string;
}

/**
 * Organization Simple
 * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
 * organization, or when the event occurs from activity in a repository owned by an organization.
 */
interface OrganizationSimpleWebhooks {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
}

/**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
interface RepositoryWebhooks {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  /** A GitHub user. */
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
}

/**
 * branch protection rule
 * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
 */
interface WebhooksRule {
  admin_enforced: boolean;
  allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
  allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
  authorized_actor_names: string[];
  authorized_actors_only: boolean;
  authorized_dismissal_actors_only: boolean;
  create_protected?: boolean;
  /** @format date-time */
  created_at: string;
  dismiss_stale_reviews_on_push: boolean;
  id: number;
  ignore_approvals_from_contributors: boolean;
  linear_history_requirement_enforcement_level: "off" | "non_admins" | "everyone";
  /** The enforcement level of the branch lock setting. `off` means the branch is not locked, `non_admins` means the branch is read-only for non_admins, and `everyone` means the branch is read-only for everyone. */
  lock_branch_enforcement_level: "off" | "non_admins" | "everyone";
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks. */
  lock_allows_fork_sync?: boolean;
  merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
  name: string;
  pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
  repository_id: number;
  require_code_owner_review: boolean;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  require_last_push_approval?: boolean;
  required_approving_review_count: number;
  required_conversation_resolution_level: "off" | "non_admins" | "everyone";
  required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
  required_status_checks: string[];
  required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
  signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
  strict_required_status_checks_policy: boolean;
  /** @format date-time */
  updated_at: string;
}

/** A suite of checks performed on the code of a given code change */
interface SimpleCheckSuite {
  /** @example "d6fde92930d4715a2b49857d24b940956b26d2d3" */
  after?: string | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app?: Integration;
  /** @example "146e867f55c26428e5f9fade55a9bbf5e95a7912" */
  before?: string | null;
  /** @example "neutral" */
  conclusion?:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "stale"
    | "startup_failure"
    | null;
  /** @format date-time */
  created_at?: string;
  /** @example "master" */
  head_branch?: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha?: string;
  /** @example 5 */
  id?: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id?: string;
  pull_requests?: PullRequestMinimal[];
  /** Minimal Repository */
  repository?: MinimalRepository;
  /** @example "completed" */
  status?: "queued" | "in_progress" | "completed" | "pending" | "waiting";
  /** @format date-time */
  updated_at?: string;
  /** @example "https://api.github.com/repos/github/hello-world/check-suites/5" */
  url?: string;
}

/**
 * CheckRun
 * A check performed on the code of a given code change
 */
interface CheckRunWithSimpleCheckSuite {
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app: Integration;
  /** A suite of checks performed on the code of a given code change */
  check_suite: SimpleCheckSuite;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: string | null;
  /** @example "neutral" */
  conclusion:
    | "waiting"
    | "pending"
    | "startup_failure"
    | "stale"
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
  deployment?: DeploymentSimple;
  /** @example "https://example.com" */
  details_url: string;
  /** @example "42" */
  external_id: string;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string;
  /**
   * The id of the check.
   * @example 21
   */
  id: number;
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  output: {
    annotations_count: number;
    /** @format uri */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed" | "pending";
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  url: string;
}

/** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
type WebhooksCodeScanningCommitOid = string;

/** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
type WebhooksCodeScanningRef = string;

/** The pusher type for the event. Can be either `user` or a deploy key. */
type WebhooksDeployPusherType = string;

/** The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
type WebhooksRef0 = string;

/** The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
interface WebhooksDeployKey {
  added_by?: string | null;
  created_at: string;
  id: number;
  key: string;
  last_used?: string | null;
  read_only: boolean;
  title: string;
  /** @format uri */
  url: string;
  verified: boolean;
  enabled?: boolean;
}

/** Workflow */
type WebhooksWorkflow = {
  /** @format uri */
  badge_url: string;
  /** @format date-time */
  created_at: string;
  /** @format uri */
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  path: string;
  state: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
} | null;

interface WebhooksApprover {
  avatar_url?: string;
  events_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string;
  html_url?: string;
  id?: number;
  login?: string;
  node_id?: string;
  organizations_url?: string;
  received_events_url?: string;
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  subscriptions_url?: string;
  type?: string;
  url?: string;
  user_view_type?: string;
}

type WebhooksReviewers = {
  /** User */
  reviewer?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
  };
  type?: "User";
}[];

interface WebhooksWorkflowJobRun {
  conclusion: any;
  created_at: string;
  environment: string;
  html_url: string;
  id: number;
  name: any;
  status: string;
  updated_at: string;
}

/** User */
type WebhooksUser = {
  /** @format uri */
  avatar_url?: string;
  deleted?: boolean;
  email?: string | null;
  /** @format uri-template */
  events_url?: string;
  /** @format uri */
  followers_url?: string;
  /** @format uri-template */
  following_url?: string;
  /** @format uri-template */
  gists_url?: string;
  gravatar_id?: string;
  /** @format uri */
  html_url?: string;
  /** @format int64 */
  id: number;
  login: string;
  name?: string;
  node_id?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  received_events_url?: string;
  /** @format uri */
  repos_url?: string;
  site_admin?: boolean;
  /** @format uri-template */
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  type?: "Bot" | "User" | "Organization";
  /** @format uri */
  url?: string;
  user_view_type?: string;
};

interface WebhooksAnswer {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  child_comment_count: number;
  /** @format date-time */
  created_at: string;
  discussion_id: number;
  html_url: string;
  id: number;
  node_id: string;
  parent_id: any;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  repository_url: string;
  /** @format date-time */
  updated_at: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Discussion
 * A Discussion in a repository.
 */
interface Discussion {
  active_lock_reason: string | null;
  answer_chosen_at: string | null;
  /** User */
  answer_chosen_by: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  answer_html_url: string | null;
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  category: {
    /** @format date-time */
    created_at: string;
    description: string;
    emoji: string;
    id: number;
    is_answerable: boolean;
    name: string;
    node_id?: string;
    repository_id: number;
    slug: string;
    updated_at: string;
  };
  comments: number;
  /** @format date-time */
  created_at: string;
  html_url: string;
  id: number;
  locked: boolean;
  node_id: string;
  number: number;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  repository_url: string;
  /**
   * The current state of the discussion.
   * `converting` means that the discussion is being converted from an issue.
   * `transferring` means that the discussion is being transferred from another repository.
   */
  state: "open" | "closed" | "locked" | "converting" | "transferring";
  /**
   * The reason for the current state
   * @example "resolved"
   */
  state_reason: "resolved" | "outdated" | "duplicate" | "reopened" | null;
  timeline_url?: string;
  title: string;
  /** @format date-time */
  updated_at: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  labels?: Label[];
}

interface WebhooksComment {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  child_comment_count: number;
  created_at: string;
  discussion_id: number;
  html_url: string;
  id: number;
  node_id: string;
  parent_id: number | null;
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  repository_url: string;
  updated_at: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** Label */
interface WebhooksLabel {
  /** 6-character hex code, without the leading #, identifying the color */
  color: string;
  default: boolean;
  description: string | null;
  id: number;
  /** The name of the label. */
  name: string;
  node_id: string;
  /**
   * URL for the label
   * @format uri
   */
  url: string;
}

/** An array of repository objects that the installation can access. */
type WebhooksRepositories = {
  full_name: string;
  /** Unique identifier of the repository */
  id: number;
  /** The name of the repository. */
  name: string;
  node_id: string;
  /** Whether the repository is private or public. */
  private: boolean;
}[];

/** An array of repository objects, which were added to the installation. */
type WebhooksRepositoriesAdded = {
  full_name: string;
  /** Unique identifier of the repository */
  id: number;
  /** The name of the repository. */
  name: string;
  node_id: string;
  /** Whether the repository is private or public. */
  private: boolean;
}[];

/** Describe whether all repositories have been selected or there's a selection involved */
enum WebhooksRepositorySelection {
  All = "all",
  Selected = "selected",
}

/**
 * issue comment
 * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
 */
interface WebhooksIssueComment {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** Contents of the issue comment */
  body: string;
  /** @format date-time */
  created_at: string;
  /** @format uri */
  html_url: string;
  /**
   * Unique identifier of the issue comment
   * @format int64
   */
  id: number;
  /** @format uri */
  issue_url: string;
  node_id: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: Integration;
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue comment
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** The changes to the comment. */
interface WebhooksChanges {
  body?: {
    /** The previous version of the body. */
    from: string;
  };
}

/**
 * Issue
 * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
 */
interface WebhooksIssue {
  active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
  /** User */
  assignee?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  assignees: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  }[];
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** Contents of the issue */
  body: string | null;
  /** @format date-time */
  closed_at: string | null;
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format date-time */
  created_at: string;
  draft?: boolean;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /** @format int64 */
  id: number;
  labels?: {
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /** The name of the label. */
    name: string;
    node_id: string;
    /**
     * URL for the label
     * @format uri
     */
    url: string;
  }[];
  /** @format uri-template */
  labels_url: string;
  locked?: boolean;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    /** @format date-time */
    closed_at: string | null;
    closed_issues: number;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    /** @format date-time */
    due_on: string | null;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    labels_url: string;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    open_issues: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  node_id: string;
  number: number;
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: {
    /** @format date-time */
    created_at: string | null;
    description: string | null;
    /** The list of events for the GitHub app */
    events?: (
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "content_reference"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_review"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "milestone"
      | "organization"
      | "org_block"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_dispatch"
      | "secret_scanning_alert"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_dispatch"
      | "workflow_run"
      | "reminder"
      | "pull_request_review_thread"
    )[];
    /** @format uri */
    external_url: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the GitHub app */
    id: number | null;
    /** The name of the GitHub app */
    name: string;
    node_id: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The set of permissions for the GitHub app */
    permissions?: {
      actions?: "read" | "write";
      administration?: "read" | "write";
      checks?: "read" | "write";
      content_references?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      discussions?: "read" | "write";
      emails?: "read" | "write";
      environments?: "read" | "write";
      issues?: "read" | "write";
      keys?: "read" | "write";
      members?: "read" | "write";
      metadata?: "read" | "write";
      organization_administration?: "read" | "write";
      organization_hooks?: "read" | "write";
      organization_packages?: "read" | "write";
      organization_plan?: "read" | "write";
      organization_projects?: "read" | "write" | "admin";
      organization_secrets?: "read" | "write";
      organization_self_hosted_runners?: "read" | "write";
      organization_user_blocking?: "read" | "write";
      packages?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      secret_scanning_alerts?: "read" | "write";
      secrets?: "read" | "write";
      security_events?: "read" | "write";
      security_scanning_alert?: "read" | "write";
      single_file?: "read" | "write";
      statuses?: "read" | "write";
      team_discussions?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
      workflows?: "read" | "write";
    };
    /** The slug name of the GitHub app */
    slug?: string;
    /** @format date-time */
    updated_at: string | null;
  };
  pull_request?: {
    /** @format uri */
    diff_url?: string;
    /** @format uri */
    html_url?: string;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url?: string;
    /** @format uri */
    url?: string;
  };
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** @format uri */
  repository_url: string;
  /** Sub-issues Summary */
  sub_issues_summary?: {
    total: number;
    completed: number;
    percent_completed: number;
  };
  /** State of the issue; either 'open' or 'closed' */
  state?: "open" | "closed";
  state_reason?: string | null;
  /** @format uri */
  timeline_url?: string;
  /** Title of the issue */
  title: string;
  /** The type of issue. */
  type?: IssueType;
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
interface WebhooksMilestone {
  /** @format date-time */
  closed_at: string | null;
  closed_issues: number;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  description: string | null;
  /** @format date-time */
  due_on: string | null;
  /** @format uri */
  html_url: string;
  id: number;
  /** @format uri */
  labels_url: string;
  node_id: string;
  /** The number of the milestone. */
  number: number;
  open_issues: number;
  /** The state of the milestone. */
  state: "open" | "closed";
  /** The title of the milestone. */
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Issue
 * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
 */
interface WebhooksIssue2 {
  active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
  /** User */
  assignee?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  assignees: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  }[];
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** Contents of the issue */
  body: string | null;
  /** @format date-time */
  closed_at: string | null;
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format date-time */
  created_at: string;
  draft?: boolean;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /** @format int64 */
  id: number;
  labels?: {
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /** The name of the label. */
    name: string;
    node_id: string;
    /**
     * URL for the label
     * @format uri
     */
    url: string;
  }[];
  /** @format uri-template */
  labels_url: string;
  locked?: boolean;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    /** @format date-time */
    closed_at: string | null;
    closed_issues: number;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    /** @format date-time */
    due_on: string | null;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    labels_url: string;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    open_issues: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  node_id: string;
  number: number;
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: {
    /** @format date-time */
    created_at: string | null;
    description: string | null;
    /** The list of events for the GitHub app */
    events?: (
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "content_reference"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_review"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "milestone"
      | "organization"
      | "org_block"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_dispatch"
      | "secret_scanning_alert"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_dispatch"
      | "workflow_run"
    )[];
    /** @format uri */
    external_url: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the GitHub app */
    id: number | null;
    /** The name of the GitHub app */
    name: string;
    node_id: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The set of permissions for the GitHub app */
    permissions?: {
      actions?: "read" | "write";
      administration?: "read" | "write";
      checks?: "read" | "write";
      content_references?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      discussions?: "read" | "write";
      emails?: "read" | "write";
      environments?: "read" | "write";
      issues?: "read" | "write";
      keys?: "read" | "write";
      members?: "read" | "write";
      metadata?: "read" | "write";
      organization_administration?: "read" | "write";
      organization_hooks?: "read" | "write";
      organization_packages?: "read" | "write";
      organization_plan?: "read" | "write";
      organization_projects?: "read" | "write";
      organization_secrets?: "read" | "write";
      organization_self_hosted_runners?: "read" | "write";
      organization_user_blocking?: "read" | "write";
      packages?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      secret_scanning_alerts?: "read" | "write";
      secrets?: "read" | "write";
      security_events?: "read" | "write";
      security_scanning_alert?: "read" | "write";
      single_file?: "read" | "write";
      statuses?: "read" | "write";
      team_discussions?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
      workflows?: "read" | "write";
    };
    /** The slug name of the GitHub app */
    slug?: string;
    /** @format date-time */
    updated_at: string | null;
  };
  pull_request?: {
    /** @format uri */
    diff_url?: string;
    /** @format uri */
    html_url?: string;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url?: string;
    /** @format uri */
    url?: string;
  };
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** @format uri */
  repository_url: string;
  /** Sub-issues Summary */
  sub_issues_summary?: {
    total: number;
    completed: number;
    percent_completed: number;
  };
  /** State of the issue; either 'open' or 'closed' */
  state?: "open" | "closed";
  state_reason?: string | null;
  /** @format uri */
  timeline_url?: string;
  /** Title of the issue */
  title: string;
  /** The type of issue. */
  type?: IssueType;
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** User */
type WebhooksUserMannequin = {
  /** @format uri */
  avatar_url?: string;
  deleted?: boolean;
  email?: string | null;
  /** @format uri-template */
  events_url?: string;
  /** @format uri */
  followers_url?: string;
  /** @format uri-template */
  following_url?: string;
  /** @format uri-template */
  gists_url?: string;
  gravatar_id?: string;
  /** @format uri */
  html_url?: string;
  id: number;
  login: string;
  name?: string;
  node_id?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  received_events_url?: string;
  /** @format uri */
  repos_url?: string;
  site_admin?: boolean;
  /** @format uri-template */
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  type?: "Bot" | "User" | "Organization" | "Mannequin";
  /** @format uri */
  url?: string;
  user_view_type?: string;
};

/** Marketplace Purchase */
interface WebhooksMarketplacePurchase {
  account: {
    id: number;
    login: string;
    node_id: string;
    organization_billing_email: string | null;
    type: string;
  };
  billing_cycle: string;
  free_trial_ends_on: string | null;
  next_billing_date: string | null;
  on_free_trial: boolean;
  plan: {
    bullets: (string | null)[];
    description: string;
    has_free_trial: boolean;
    id: number;
    monthly_price_in_cents: number;
    name: string;
    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
    unit_name: string | null;
    yearly_price_in_cents: number;
  };
  unit_count: number;
}

/** Marketplace Purchase */
interface WebhooksPreviousMarketplacePurchase {
  account: {
    id: number;
    login: string;
    node_id: string;
    organization_billing_email: string | null;
    type: string;
  };
  billing_cycle: string;
  free_trial_ends_on: any;
  next_billing_date?: string | null;
  on_free_trial: boolean;
  plan: {
    bullets: string[];
    description: string;
    has_free_trial: boolean;
    id: number;
    monthly_price_in_cents: number;
    name: string;
    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
    unit_name: string | null;
    yearly_price_in_cents: number;
  };
  unit_count: number;
}

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
interface WebhooksTeam {
  deleted?: boolean;
  /** Description of the team */
  description?: string | null;
  /** @format uri */
  html_url?: string;
  /** Unique identifier of the team */
  id: number;
  /** @format uri-template */
  members_url?: string;
  /** Name of the team */
  name: string;
  node_id?: string;
  parent?: {
    /** Description of the team */
    description: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the team */
    id: number;
    /** @format uri-template */
    members_url: string;
    /** Name of the team */
    name: string;
    node_id: string;
    /** Permission that the team will have for its repositories */
    permission: string;
    privacy: "open" | "closed" | "secret";
    /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting: "notifications_enabled" | "notifications_disabled";
    /** @format uri */
    repositories_url: string;
    slug: string;
    /**
     * URL for the team
     * @format uri
     */
    url: string;
  };
  /** Permission that the team will have for its repositories */
  permission?: string;
  privacy?: "open" | "closed" | "secret";
  notification_setting?: "notifications_enabled" | "notifications_disabled";
  /** @format uri */
  repositories_url?: string;
  slug?: string;
  /**
   * URL for the team
   * @format uri
   */
  url?: string;
}

/**
 * Merge Group
 * A group of pull requests that the merge queue has grouped together to be merged.
 */
interface MergeGroup {
  /** The SHA of the merge group. */
  head_sha: string;
  /** The full ref of the merge group. */
  head_ref: string;
  /** The SHA of the merge group's parent commit. */
  base_sha: string;
  /** The full ref of the branch the merge group will be merged into. */
  base_ref: string;
  /** A commit. */
  head_commit: SimpleCommit;
}

/**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
type NullableRepositoryWebhooks = {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  /** A GitHub user. */
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
};

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
interface WebhooksMilestone3 {
  /** @format date-time */
  closed_at: string | null;
  closed_issues: number;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  description: string | null;
  /** @format date-time */
  due_on: string | null;
  /** @format uri */
  html_url: string;
  id: number;
  /** @format uri */
  labels_url: string;
  node_id: string;
  /** The number of the milestone. */
  number: number;
  open_issues: number;
  /** The state of the milestone. */
  state: "open" | "closed";
  /** The title of the milestone. */
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Membership
 * The membership between the user and the organization. Not present when the action is `member_invited`.
 */
interface WebhooksMembership {
  /** @format uri */
  organization_url: string;
  role: string;
  state: string;
  /** @format uri */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Personal Access Token Request
 * Details of a Personal Access Token Request.
 */
interface PersonalAccessTokenRequest {
  /** Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls. */
  id: number;
  /** A GitHub user. */
  owner: SimpleUser;
  /** New requested permissions, categorized by type of permission. */
  permissions_added: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Requested permissions that elevate access for a previously approved request for access, categorized by type of permission. */
  permissions_upgraded: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`. */
  permissions_result: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Type of repository selection requested. */
  repository_selection: "none" | "all" | "subset";
  /** The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
  repository_count: number | null;
  /** An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
  repositories:
    | {
        full_name: string;
        /** Unique identifier of the repository */
        id: number;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** Whether the repository is private or public. */
        private: boolean;
      }[]
    | null;
  /** Date and time when the request for access was created. */
  created_at: string;
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
  token_id: number;
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
  token_name: string;
  /** Whether the associated fine-grained personal access token has expired. */
  token_expired: boolean;
  /** Date and time when the associated fine-grained personal access token expires. */
  token_expires_at: string | null;
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
  token_last_used_at: string | null;
}

/** Project Card */
interface WebhooksProjectCard {
  after_id?: number | null;
  /** Whether or not the card is archived */
  archived: boolean;
  column_id: number;
  /** @format uri */
  column_url: string;
  /** @format uri */
  content_url?: string;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** The project card's ID */
  id: number;
  node_id: string;
  note: string | null;
  /** @format uri */
  project_url: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/** Project */
interface WebhooksProject {
  /** Body of the project */
  body: string | null;
  /** @format uri */
  columns_url: string;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** @format uri */
  html_url: string;
  id: number;
  /** Name of the project */
  name: string;
  node_id: string;
  number: number;
  /** @format uri */
  owner_url: string;
  /** State of the project; either 'open' or 'closed' */
  state: "open" | "closed";
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/** Project Column */
interface WebhooksProjectColumn {
  after_id?: number | null;
  /** @format uri */
  cards_url: string;
  /** @format date-time */
  created_at: string;
  /** The unique identifier of the project column */
  id: number;
  /** Name of the project column */
  name: string;
  node_id: string;
  /** @format uri */
  project_url: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Projects v2 Project
 * A projects v2 project
 */
interface ProjectsV2 {
  id: number;
  node_id: string;
  /** A GitHub user. */
  owner: SimpleUser;
  /** A GitHub user. */
  creator: SimpleUser;
  title: string;
  description: string | null;
  public: boolean;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: string;
  number: number;
  short_description: string | null;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  deleted_at: string | null;
  /** A GitHub user. */
  deleted_by: NullableSimpleUser;
}

interface WebhooksProjectChanges {
  archived_at?: {
    /** @format date-time */
    from?: string | null;
    /** @format date-time */
    to?: string | null;
  };
}

/**
 * Projects v2 Item Content Type
 * The type of content tracked in a project item
 */
enum ProjectsV2ItemContentType {
  Issue = "Issue",
  PullRequest = "PullRequest",
  DraftIssue = "DraftIssue",
}

/**
 * Projects v2 Item
 * An item belonging to a project
 */
interface ProjectsV2Item {
  id: number;
  node_id?: string;
  project_node_id?: string;
  content_node_id: string;
  /** The type of content tracked in a project item */
  content_type: ProjectsV2ItemContentType;
  /** A GitHub user. */
  creator?: SimpleUser;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  archived_at: string | null;
}

/**
 * Projects v2 Single Select Option
 * An option for a single select field
 */
interface ProjectsV2SingleSelectOption {
  id: string;
  name: string;
  color?: string | null;
  description?: string | null;
}

/**
 * Projects v2 Iteration Setting
 * An iteration setting for an iteration field
 */
interface ProjectsV2IterationSetting {
  id: string;
  title: string;
  duration?: number | null;
  start_date?: string | null;
}

/**
 * Projects v2 Status Update
 * An status update belonging to a project
 */
interface ProjectsV2StatusUpdate {
  id: number;
  node_id: string;
  project_node_id?: string;
  /** A GitHub user. */
  creator?: SimpleUser;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: string;
  status?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
  /**
   * @format date
   * @example "2022-04-28"
   */
  start_date?: string;
  /**
   * @format date
   * @example "2022-04-28"
   */
  target_date?: string;
  /**
   * Body of the status update
   * @example "The project is off to a great start!"
   */
  body?: string | null;
}

/** The pull request number. */
type WebhooksNumber = number;

type PullRequestWebhook = PullRequest & {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
  allow_auto_merge?: boolean;
  /** Whether to allow updating the pull request's branch. */
  allow_update_branch?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged.
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /**
   * The default value for a merge commit message.
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a squash merge commit message:
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.**
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
};

/** Pull Request */
interface WebhooksPullRequest5 {
  _links: {
    /** Link */
    comments: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    commits: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    html: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    issue: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    review_comment: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    review_comments: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    self: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    statuses: {
      /** @format uri-template */
      href: string;
    };
  };
  active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
  additions?: number;
  /** User */
  assignee: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  assignees: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
  }[];
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
  auto_merge: {
    /** Commit message for the merge commit. */
    commit_message: string | null;
    /** Title for the merge commit message. */
    commit_title: string | null;
    /** User */
    enabled_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase";
  };
  base: {
    label: string;
    ref: string;
    /**
     * Repository
     * A git repository
     */
    repo: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       * @default false
       */
      has_discussions: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /**
       * The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       */
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
      /**
       * The default value for a merge commit title.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       */
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      /**
       * The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       */
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
      /**
       * The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       */
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      /**
       * Whether a squash merge commit can use the pull request title as default.
       * @default false
       */
      use_squash_pr_title_as_default?: boolean;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require contributors to sign off on web-based commits */
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  body: string | null;
  changed_files?: number;
  /** @format date-time */
  closed_at: string | null;
  comments?: number;
  /** @format uri */
  comments_url: string;
  commits?: number;
  /** @format uri */
  commits_url: string;
  /** @format date-time */
  created_at: string;
  deletions?: number;
  /** @format uri */
  diff_url: string;
  /** Indicates whether or not the pull request is a draft. */
  draft: boolean;
  head: {
    label: string;
    ref: string;
    /**
     * Repository
     * A git repository
     */
    repo: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       * @default false
       */
      has_discussions: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /**
       * The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       */
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
      /**
       * The default value for a merge commit title.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       */
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      /**
       * The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       */
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
      /**
       * The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       */
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      /**
       * Whether a squash merge commit can use the pull request title as default.
       * @default false
       */
      use_squash_pr_title_as_default?: boolean;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require contributors to sign off on web-based commits */
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** @format uri */
  html_url: string;
  id: number;
  /** @format uri */
  issue_url: string;
  labels: {
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /** The name of the label. */
    name: string;
    node_id: string;
    /**
     * URL for the label
     * @format uri
     */
    url: string;
  }[];
  locked: boolean;
  /** Indicates whether maintainers can modify the pull request. */
  maintainer_can_modify?: boolean;
  merge_commit_sha: string | null;
  mergeable?: boolean | null;
  mergeable_state?: string;
  merged?: boolean | null;
  /** @format date-time */
  merged_at: string | null;
  /** User */
  merged_by?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    /** @format date-time */
    closed_at: string | null;
    closed_issues: number;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    /** @format date-time */
    due_on: string | null;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    labels_url: string;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    open_issues: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  node_id: string;
  /** Number uniquely identifying the pull request within its repository. */
  number: number;
  /** @format uri */
  patch_url: string;
  rebaseable?: boolean | null;
  requested_reviewers: (
    | {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      }
    | {
        deleted?: boolean;
        /** Description of the team */
        description?: string | null;
        /** @format uri */
        html_url?: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url?: string;
        /** Name of the team */
        name: string;
        node_id?: string;
        parent?: {
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        };
        /** Permission that the team will have for its repositories */
        permission?: string;
        privacy?: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         * @format uri
         */
        url?: string;
      }
  )[];
  requested_teams: {
    deleted?: boolean;
    /** Description of the team */
    description?: string | null;
    /** @format uri */
    html_url?: string;
    /** Unique identifier of the team */
    id: number;
    /** @format uri-template */
    members_url?: string;
    /** Name of the team */
    name: string;
    node_id?: string;
    parent?: {
      /** Description of the team */
      description: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url: string;
      /** Name of the team */
      name: string;
      node_id: string;
      /** Permission that the team will have for its repositories */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       * @format uri
       */
      url: string;
    };
    /** Permission that the team will have for its repositories */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /** @format uri */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     * @format uri
     */
    url?: string;
  }[];
  /** @format uri-template */
  review_comment_url: string;
  review_comments?: number;
  /** @format uri */
  review_comments_url: string;
  /** State of this Pull Request. Either `open` or `closed`. */
  state: "open" | "closed";
  /** @format uri */
  statuses_url: string;
  /** The title of the pull request. */
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Pull Request Review Comment
 * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
 */
interface WebhooksReviewComment {
  _links: {
    /** Link */
    html: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    pull_request: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    self: {
      /** @format uri-template */
      href: string;
    };
  };
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** The text of the comment. */
  body: string;
  /** The SHA of the commit to which the comment applies. */
  commit_id: string;
  /** @format date-time */
  created_at: string;
  /** The diff of the line that the comment refers to. */
  diff_hunk: string;
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
  html_url: string;
  /** The ID of the pull request review comment. */
  id: number;
  /** The comment ID to reply to. */
  in_reply_to_id?: number;
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
  line: number | null;
  /** The node ID of the pull request review comment. */
  node_id: string;
  /** The SHA of the original commit to which the comment applies. */
  original_commit_id: string;
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
  original_line: number;
  /** The index of the original line in the diff to which the comment applies. */
  original_position: number;
  /** The first line of the range for a multi-line comment. */
  original_start_line: number | null;
  /** The relative path of the file to which the comment applies. */
  path: string;
  /** The line index in the diff to which the comment applies. */
  position: number | null;
  /** The ID of the pull request review to which the comment belongs. */
  pull_request_review_id: number | null;
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
  pull_request_url: string;
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** The side of the first line of the range for a multi-line comment. */
  side: "LEFT" | "RIGHT";
  /** The first line of the range for a multi-line comment. */
  start_line: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side: "LEFT" | "RIGHT" | null;
  /** The level at which the comment is targeted, can be a diff line or a file. */
  subject_type?: "line" | "file";
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the pull request review comment
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** The review that was affected. */
interface WebhooksReview {
  _links: {
    /** Link */
    html: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    pull_request: {
      /** @format uri-template */
      href: string;
    };
  };
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** The text of the review. */
  body: string | null;
  /** A commit SHA for the review. */
  commit_id: string;
  /** @format uri */
  html_url: string;
  /** Unique identifier of the review */
  id: number;
  node_id: string;
  /** @format uri */
  pull_request_url: string;
  state: string;
  /** @format date-time */
  submitted_at: string | null;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

type WebhooksNullableString = string | null;

/**
 * Release
 * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
 */
interface WebhooksRelease {
  assets: {
    /** @format uri */
    browser_download_url: string;
    content_type: string;
    /** @format date-time */
    created_at: string;
    download_count: number;
    id: number;
    label: string | null;
    /** The file name of the asset. */
    name: string;
    node_id: string;
    size: number;
    digest: string | null;
    /** State of the release asset. */
    state: "uploaded";
    /** @format date-time */
    updated_at: string;
    /** User */
    uploader?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    url: string;
  }[];
  /** @format uri */
  assets_url: string;
  /** User */
  author: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  body: string | null;
  /** @format date-time */
  created_at: string | null;
  /** @format uri */
  discussion_url?: string;
  /** Whether the release is a draft or published */
  draft: boolean;
  /** @format uri */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /** Whether the release is identified as a prerelease or a full release. */
  prerelease: boolean;
  /** @format date-time */
  published_at: string | null;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** The name of the tag. */
  tag_name: string;
  /** @format uri */
  tarball_url: string | null;
  /** Specifies the commitish value that determines where the Git tag is created from. */
  target_commitish: string;
  /** @format uri-template */
  upload_url: string;
  /** @format uri */
  url: string;
  /** @format uri */
  zipball_url: string | null;
}

/**
 * Release
 * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
 */
interface WebhooksRelease1 {
  assets: {
    /** @format uri */
    browser_download_url: string;
    content_type: string;
    /** @format date-time */
    created_at: string;
    download_count: number;
    id: number;
    label: string | null;
    /** The file name of the asset. */
    name: string;
    node_id: string;
    size: number;
    digest: string | null;
    /** State of the release asset. */
    state: "uploaded";
    /** @format date-time */
    updated_at: string;
    /** User */
    uploader?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    url: string;
  }[];
  /** @format uri */
  assets_url: string;
  /** User */
  author: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  body: string | null;
  /** @format date-time */
  created_at: string | null;
  /** @format uri */
  discussion_url?: string;
  /** Whether the release is a draft or published */
  draft: boolean;
  /** @format uri */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /** Whether the release is identified as a prerelease or a full release. */
  prerelease: boolean;
  /** @format date-time */
  published_at: string | null;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** The name of the tag. */
  tag_name: string;
  /** @format uri */
  tarball_url: string | null;
  /** Specifies the commitish value that determines where the Git tag is created from. */
  target_commitish: string;
  /** @format uri-template */
  upload_url: string;
  /** @format uri */
  url: string;
  /** @format uri */
  zipball_url: string | null;
}

/**
 * Repository Vulnerability Alert Alert
 * The security alert of the vulnerable dependency.
 */
interface WebhooksAlert {
  affected_package_name: string;
  affected_range: string;
  created_at: string;
  dismiss_reason?: string;
  dismissed_at?: string;
  /** User */
  dismisser?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
  };
  external_identifier: string;
  /** @format uri */
  external_reference: string | null;
  fix_reason?: string;
  /** @format date-time */
  fixed_at?: string;
  fixed_in?: string;
  ghsa_id: string;
  id: number;
  node_id: string;
  number: number;
  severity: string;
  state: "open";
}

/** The reason for resolving the alert. */
enum SecretScanningAlertResolutionWebhook {
  FalsePositive = "false_positive",
  WontFix = "wont_fix",
  Revoked = "revoked",
  UsedInTests = "used_in_tests",
  PatternDeleted = "pattern_deleted",
  PatternEdited = "pattern_edited",
}

interface SecretScanningAlertWebhook {
  /** The security alert number. */
  number?: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at?: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: NullableAlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
  locations_url?: string;
  /** The reason for resolving the alert. */
  resolution?: SecretScanningAlertResolutionWebhook;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** A GitHub user. */
  resolved_by?: NullableSimpleUser;
  /** An optional comment to resolve an alert. */
  resolution_comment?: string | null;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /** The token status as of the latest validity check. */
  validity?: "active" | "inactive" | "unknown";
  /** Whether push protection was bypassed for the detected secret. */
  push_protection_bypassed?: boolean | null;
  /** A GitHub user. */
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  /** A GitHub user. */
  push_protection_bypass_request_reviewer?: NullableSimpleUser;
  /** An optional comment when reviewing a push protection bypass. */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /** An optional comment when requesting a push protection bypass. */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
  push_protection_bypass_request_html_url?: string | null;
  /** Whether the detected secret was publicly leaked. */
  publicly_leaked?: boolean | null;
  /** Whether the detected secret was found in multiple repositories in the same organization or business. */
  multi_repo?: boolean | null;
}

/** The details of the security advisory, including summary, description, and severity. */
interface WebhooksSecurityAdvisory {
  cvss: {
    score: number;
    vector_string: string | null;
  };
  cvss_severities?: CvssSeverities;
  cwes: {
    cwe_id: string;
    name: string;
  }[];
  description: string;
  ghsa_id: string;
  identifiers: {
    type: string;
    value: string;
  }[];
  published_at: string;
  references: {
    /** @format uri */
    url: string;
  }[];
  severity: string;
  summary: string;
  updated_at: string;
  vulnerabilities: {
    first_patched_version: {
      identifier: string;
    } | null;
    package: {
      ecosystem: string;
      name: string;
    };
    severity: string;
    vulnerable_version_range: string;
  }[];
  withdrawn_at: string | null;
}

interface WebhooksSponsorship {
  created_at: string;
  maintainer?: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
    user_view_type?: string;
  };
  node_id: string;
  privacy_level: string;
  /** User */
  sponsor: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** User */
  sponsorable: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /**
   * Sponsorship Tier
   * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
   */
  tier: {
    created_at: string;
    description: string;
    is_custom_ammount?: boolean;
    is_custom_amount?: boolean;
    is_one_time: boolean;
    monthly_price_in_cents: number;
    monthly_price_in_dollars: number;
    name: string;
    node_id: string;
  };
}

/** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
type WebhooksEffectiveDate = string;

interface WebhooksChanges8 {
  tier: {
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    from: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
}

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
interface WebhooksTeam1 {
  deleted?: boolean;
  /** Description of the team */
  description?: string | null;
  /** @format uri */
  html_url?: string;
  /** Unique identifier of the team */
  id: number;
  /** @format uri-template */
  members_url?: string;
  /** Name of the team */
  name: string;
  node_id?: string;
  parent?: {
    /** Description of the team */
    description: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the team */
    id: number;
    /** @format uri-template */
    members_url: string;
    /** Name of the team */
    name: string;
    node_id: string;
    /** Permission that the team will have for its repositories */
    permission: string;
    privacy: "open" | "closed" | "secret";
    /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting: "notifications_enabled" | "notifications_disabled";
    /** @format uri */
    repositories_url: string;
    slug: string;
    /**
     * URL for the team
     * @format uri
     */
    url: string;
  };
  /** Permission that the team will have for its repositories */
  permission?: string;
  privacy?: "open" | "closed" | "secret";
  /** Whether team members will receive notifications when their team is @mentioned */
  notification_setting?: "notifications_enabled" | "notifications_disabled";
  /** @format uri */
  repositories_url?: string;
  slug?: string;
  /**
   * URL for the team
   * @format uri
   */
  url?: string;
}

/** branch protection configuration disabled event */
interface WebhookBranchProtectionConfigurationDisabled {
  action: "disabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection configuration enabled event */
interface WebhookBranchProtectionConfigurationEnabled {
  action: "enabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection rule created event */
interface WebhookBranchProtectionRuleCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
  rule: WebhooksRule;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection rule deleted event */
interface WebhookBranchProtectionRuleDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
  rule: WebhooksRule;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection rule edited event */
interface WebhookBranchProtectionRuleEdited {
  action: "edited";
  /** If the action was `edited`, the changes to the rule. */
  changes?: {
    admin_enforced?: {
      from: boolean | null;
    };
    authorized_actor_names?: {
      from: string[];
    };
    authorized_actors_only?: {
      from: boolean | null;
    };
    authorized_dismissal_actors_only?: {
      from: boolean | null;
    };
    linear_history_requirement_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    lock_branch_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    lock_allows_fork_sync?: {
      from: boolean | null;
    };
    pull_request_reviews_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    require_last_push_approval?: {
      from: boolean | null;
    };
    required_status_checks?: {
      from: string[];
    };
    required_status_checks_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
  rule: WebhooksRule;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Check Run Completed Event */
interface WebhookCheckRunCompleted {
  action?: "completed";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Completed Event
 * The check_run.completed webhook encoded with URL encoding
 */
interface WebhookCheckRunCompletedFormEncoded {
  /** A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** Check Run Created Event */
interface WebhookCheckRunCreated {
  action?: "created";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Created Event
 * The check_run.created webhook encoded with URL encoding
 */
interface WebhookCheckRunCreatedFormEncoded {
  /** A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** Check Run Requested Action Event */
interface WebhookCheckRunRequestedAction {
  action: "requested_action";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The action requested by the user. */
  requested_action?: {
    /** The integrator reference of the action requested by the user. */
    identifier?: string;
  };
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Requested Action Event
 * The check_run.requested_action webhook encoded with URL encoding
 */
interface WebhookCheckRunRequestedActionFormEncoded {
  /** A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** Check Run Re-Requested Event */
interface WebhookCheckRunRerequested {
  action?: "rerequested";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Re-Requested Event
 * The check_run.rerequested webhook encoded with URL encoding
 */
interface WebhookCheckRunRerequestedFormEncoded {
  /** A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** check_suite completed event */
interface WebhookCheckSuiteCompleted {
  action: "completed";
  /** The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "merge_group"
        | "pull_request_review_thread"
        | "workflow_job"
        | "merge_queue_entry"
        | "security_and_analysis"
        | "projects_v2_item"
        | "secret_scanning_alert_location"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The client ID of the GitHub app */
      client_id?: string | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    before: string | null;
    /** @format uri */
    check_runs_url: string;
    /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`. */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    /** The head branch name the changes are on. */
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | null;
    /** @format date-time */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** check_suite requested event */
interface WebhookCheckSuiteRequested {
  action: "requested";
  /** The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "workflow_job"
        | "merge_queue_entry"
        | "security_and_analysis"
        | "secret_scanning_alert_location"
        | "projects_v2_item"
        | "merge_group"
        | "repository_import"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** Client ID of the GitHub app */
      client_id?: string | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    before: string | null;
    /** @format uri */
    check_runs_url: string;
    /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | null;
    /** @format date-time */
    created_at: string;
    /** The head branch name the changes are on. */
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    /** @format date-time */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** check_suite rerequested event */
interface WebhookCheckSuiteRerequested {
  action: "rerequested";
  /** The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "workflow_job"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The Client ID for the GitHub app */
      client_id?: string | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    before: string | null;
    /** @format uri */
    check_runs_url: string;
    /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    /** The head branch name the changes are on. */
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    /** @format date-time */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert appeared_in_branch event */
interface WebhookCodeScanningAlertAppearedInBranch {
  action: "appeared_in_branch";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    dismissed_at: string | null;
    /** User */
    dismissed_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | "fixed" | null;
    tool: {
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert closed_by_user event */
interface WebhookCodeScanningAlertClosedByUser {
  action: "closed_by_user";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    dismissed_at: string;
    /** User */
    dismissed_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. */
    state: "dismissed" | "fixed";
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
    /** User */
    dismissal_approved_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert created event */
interface WebhookCodeScanningAlertCreated {
  action: "created";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string | null;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: any;
    dismissed_by: any;
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: any;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    instances_url?: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | null;
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    updated_at?: string | null;
    /** @format uri */
    url: string;
    dismissal_approved_by?: any;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert fixed event */
interface WebhookCodeScanningAlertFixed {
  action: "fixed";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    dismissed_at: string | null;
    /** User */
    dismissed_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** @format uri */
    instances_url?: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "fixed" | null;
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert reopened event */
interface WebhookCodeScanningAlertReopened {
  action: "reopened";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: string | null;
    dismissed_by: object | null;
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: string | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | "fixed" | null;
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: string | null;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: string | null;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert reopened_by_user event */
interface WebhookCodeScanningAlertReopenedByUser {
  action: "reopened_by_user";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: any;
    dismissed_by: any;
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: any;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "fixed" | null;
    tool: {
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** commit_comment created event */
interface WebhookCommitCommentCreated {
  /** The action performed. Can be `created`. */
  action: "created";
  /** The [commit comment](${externalDocsUpapp/api/description/components/schemas/webhooks/issue-comment-created.yamlrl}/rest/commits/comments#get-a-commit-comment) resource. */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** The text of the comment. */
    body: string;
    /** The SHA of the commit to which the comment applies. */
    commit_id: string;
    created_at: string;
    /** @format uri */
    html_url: string;
    /** The ID of the commit comment. */
    id: number;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null;
    /** The node ID of the commit comment. */
    node_id: string;
    /** The relative path of the file to which the comment applies. */
    path: string | null;
    /** The line index in the diff to which the comment applies. */
    position: number | null;
    /** Reactions */
    reactions?: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** create event */
interface WebhookCreate {
  /** The repository's current description. */
  description: string | null;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The name of the repository's default branch (usually `main`). */
  master_branch: string;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The pusher type for the event. Can be either `user` or a deploy key. */
  pusher_type: WebhooksDeployPusherType;
  /** The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
  ref: WebhooksRef0;
  /** The type of Git ref object created in the repository. */
  ref_type: "tag" | "branch";
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** custom property created event */
interface WebhookCustomPropertyCreated {
  action: "created";
  /** Custom property defined on an organization */
  definition: CustomProperty;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** custom property deleted event */
interface WebhookCustomPropertyDeleted {
  action: "deleted";
  definition: {
    /** The name of the property that was deleted. */
    property_name: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** custom property promoted to business event */
interface WebhookCustomPropertyPromotedToEnterprise {
  action: "promote_to_enterprise";
  /** Custom property defined on an organization */
  definition: CustomProperty;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** custom property updated event */
interface WebhookCustomPropertyUpdated {
  action: "updated";
  /** Custom property defined on an organization */
  definition: CustomProperty;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Custom property values updated event */
interface WebhookCustomPropertyValuesUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  /** The new custom property values for the repository. */
  new_property_values: CustomPropertyValue[];
  /** The old custom property values for the repository. */
  old_property_values: CustomPropertyValue[];
}

/** delete event */
interface WebhookDelete {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The pusher type for the event. Can be either `user` or a deploy key. */
  pusher_type: WebhooksDeployPusherType;
  /** The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
  ref: WebhooksRef0;
  /** The type of Git ref object deleted in the repository. */
  ref_type: "tag" | "branch";
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert auto-dismissed event */
interface WebhookDependabotAlertAutoDismissed {
  action: "auto_dismissed";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert auto-reopened event */
interface WebhookDependabotAlertAutoReopened {
  action: "auto_reopened";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert created event */
interface WebhookDependabotAlertCreated {
  action: "created";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert dismissed event */
interface WebhookDependabotAlertDismissed {
  action: "dismissed";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert fixed event */
interface WebhookDependabotAlertFixed {
  action: "fixed";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert reintroduced event */
interface WebhookDependabotAlertReintroduced {
  action: "reintroduced";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert reopened event */
interface WebhookDependabotAlertReopened {
  action: "reopened";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** deploy_key created event */
interface WebhookDeployKeyCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
  key: WebhooksDeployKey;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** deploy_key deleted event */
interface WebhookDeployKeyDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
  key: WebhooksDeployKey;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** deployment created event */
interface WebhookDeploymentCreated {
  action: "created";
  /**
   * Deployment
   * The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: object | string;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "workflow_job"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "secret_scanning_alert_location"
        | "merge_group"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    production_environment?: boolean;
    ref: string;
    /** @format uri */
    repository_url: string;
    sha: string;
    /** @format uri */
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: any;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  };
}

/** deployment protection rule requested event */
interface WebhookDeploymentProtectionRuleRequested {
  action?: "requested";
  /** The name of the environment that has the deployment protection rule. */
  environment?: string;
  /** The event that triggered the deployment protection rule. */
  event?: string;
  /**
   * The URL to review the deployment protection rule.
   * @format uri
   */
  deployment_callback_url?: string;
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
  pull_requests?: PullRequest[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A GitHub user. */
  sender?: SimpleUser;
}

interface WebhookDeploymentReviewApproved {
  action: "approved";
  approver?: WebhooksApprover;
  comment?: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  reviewers?: WebhooksReviewers;
  /** A GitHub user. */
  sender: SimpleUser;
  since: string;
  workflow_job_run?: WebhooksWorkflowJobRun;
  workflow_job_runs?: {
    conclusion?: any;
    created_at?: string;
    environment?: string;
    html_url?: string;
    id?: number;
    name?: string | null;
    status?: string;
    updated_at?: string;
  }[];
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: object | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  };
}

interface WebhookDeploymentReviewRejected {
  action: "rejected";
  approver?: WebhooksApprover;
  comment?: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  reviewers?: WebhooksReviewers;
  /** A GitHub user. */
  sender: SimpleUser;
  since: string;
  workflow_job_run?: WebhooksWorkflowJobRun;
  workflow_job_runs?: {
    conclusion?: string | null;
    created_at?: string;
    environment?: string;
    html_url?: string;
    id?: number;
    name?: string | null;
    status?: string;
    updated_at?: string;
  }[];
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string;
    head_commit?: object | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
    display_title: string;
  };
}

interface WebhookDeploymentReviewRequested {
  action: "requested";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  environment: string;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  requestor: WebhooksUser;
  reviewers: {
    /** User */
    reviewer?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login?: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    type?: "User" | "Team";
  }[];
  /** A GitHub user. */
  sender: SimpleUser;
  since: string;
  workflow_job_run: {
    conclusion: any;
    created_at: string;
    environment: string;
    html_url: string;
    id: number;
    name: string | null;
    status: string;
    updated_at: string;
  };
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string;
    head_commit?: object | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
    display_title: string;
  };
}

/** deployment_status created event */
interface WebhookDeploymentStatusCreated {
  action: "created";
  check_run?: {
    /** @format date-time */
    completed_at: string | null;
    /** The result of the completed check run. This value will be `null` until the check run has completed. */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | null;
    /** @format uri */
    details_url: string;
    external_id: string;
    /** The SHA of the commit that is being checked. */
    head_sha: string;
    /** @format uri */
    html_url: string;
    /** The id of the check. */
    id: number;
    /** The name of the check run. */
    name: string;
    node_id: string;
    /** @format date-time */
    started_at: string;
    /** The current status of the check run. Can be `queued`, `in_progress`, or `completed`. */
    status: "queued" | "in_progress" | "completed" | "waiting" | "pending";
    /** @format uri */
    url: string;
  };
  /**
   * Deployment
   * The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: string | object | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "merge_queue_entry"
        | "workflow_job"
        | "pull_request_review_thread"
        | "secret_scanning_alert_location"
        | "merge_group"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    production_environment?: boolean;
    ref: string;
    /** @format uri */
    repository_url: string;
    sha: string;
    /** @format uri */
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /** The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses). */
  deployment_status: {
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format uri */
    deployment_url: string;
    /** The optional human-readable description added to the status. */
    description: string;
    environment: string;
    /** @format uri */
    environment_url?: string;
    id: number;
    /** @format uri */
    log_url?: string;
    node_id: string;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "workflow_job"
        | "merge_group"
        | "secret_scanning_alert_location"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    /** @format uri */
    repository_url: string;
    /** The new state. Can be `pending`, `success`, `failure`, or `error`. */
    state: string;
    /** The optional link added to the status. */
    target_url: string;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow?: WebhooksWorkflow;
  /** Deployment Workflow Run */
  workflow_run?: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: any;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  };
}

/** discussion answered event */
interface WebhookDiscussionAnswered {
  action: "answered";
  answer: WebhooksAnswer;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion category changed event */
interface WebhookDiscussionCategoryChanged {
  action: "category_changed";
  changes: {
    category: {
      from: {
        /** @format date-time */
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
    };
  };
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion closed event */
interface WebhookDiscussionClosed {
  action: "closed";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion_comment created event */
interface WebhookDiscussionCommentCreated {
  action: "created";
  comment: WebhooksComment;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion_comment deleted event */
interface WebhookDiscussionCommentDeleted {
  action: "deleted";
  comment: WebhooksComment;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion_comment edited event */
interface WebhookDiscussionCommentEdited {
  action: "edited";
  changes: {
    body: {
      from: string;
    };
  };
  comment: WebhooksComment;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion created event */
interface WebhookDiscussionCreated {
  action: "created";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion deleted event */
interface WebhookDiscussionDeleted {
  action: "deleted";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion edited event */
interface WebhookDiscussionEdited {
  action: "edited";
  changes?: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion labeled event */
interface WebhookDiscussionLabeled {
  action: "labeled";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion locked event */
interface WebhookDiscussionLocked {
  action: "locked";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion pinned event */
interface WebhookDiscussionPinned {
  action: "pinned";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion reopened event */
interface WebhookDiscussionReopened {
  action: "reopened";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion transferred event */
interface WebhookDiscussionTransferred {
  action: "transferred";
  changes: {
    /** A Discussion in a repository. */
    new_discussion: Discussion;
    /**
     * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
     * when the event occurs from activity in a repository.
     */
    new_repository: RepositoryWebhooks;
  };
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion unanswered event */
interface WebhookDiscussionUnanswered {
  action: "unanswered";
  /** A Discussion in a repository. */
  discussion: Discussion;
  old_answer: WebhooksAnswer;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** discussion unlabeled event */
interface WebhookDiscussionUnlabeled {
  action: "unlabeled";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion unlocked event */
interface WebhookDiscussionUnlocked {
  action: "unlocked";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion unpinned event */
interface WebhookDiscussionUnpinned {
  action: "unpinned";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * fork event
 * A user forks a repository.
 */
interface WebhookFork {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource. */
  forkee: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
    /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean;
  } & {
    allow_forking?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    deployments_url?: string;
    description?: string | null;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: true;
    forks?: number;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string | null;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: any;
    languages_url?: string;
    license?: object | null;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: any;
    name?: string;
    node_id?: string;
    notifications_url?: string;
    open_issues?: number;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    private?: boolean;
    public?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    topics?: any[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers?: number;
    watchers_count?: number;
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** github_app_authorization revoked event */
interface WebhookGithubAppAuthorizationRevoked {
  action: "revoked";
  /** A GitHub user. */
  sender: SimpleUser;
}

/** gollum event */
interface WebhookGollum {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The pages that were updated. */
  pages: {
    /** The action that was performed on the page. Can be `created` or `edited`. */
    action: "created" | "edited";
    /**
     * Points to the HTML wiki page.
     * @format uri
     */
    html_url: string;
    /** The name of the page. */
    page_name: string;
    /** The latest commit SHA of the page. */
    sha: string;
    summary: string | null;
    /** The current page title. */
    title: string;
  }[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation created event */
interface WebhookInstallationCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: WebhooksUser;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation deleted event */
interface WebhookInstallationDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation new_permissions_accepted event */
interface WebhookInstallationNewPermissionsAccepted {
  action: "new_permissions_accepted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation_repositories added event */
interface WebhookInstallationRepositoriesAdded {
  action: "added";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects, which were added to the installation. */
  repositories_added: WebhooksRepositoriesAdded;
  /** An array of repository objects, which were removed from the installation. */
  repositories_removed: {
    full_name?: string;
    /** Unique identifier of the repository */
    id?: number;
    /** The name of the repository. */
    name?: string;
    node_id?: string;
    /** Whether the repository is private or public. */
    private?: boolean;
  }[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: WebhooksRepositorySelection;
  requester: WebhooksUser;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation_repositories removed event */
interface WebhookInstallationRepositoriesRemoved {
  action: "removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects, which were added to the installation. */
  repositories_added: WebhooksRepositoriesAdded;
  /** An array of repository objects, which were removed from the installation. */
  repositories_removed: {
    full_name: string;
    /** Unique identifier of the repository */
    id: number;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** Whether the repository is private or public. */
    private: boolean;
  }[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: WebhooksRepositorySelection;
  requester: WebhooksUser;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation suspend event */
interface WebhookInstallationSuspend {
  action: "suspend";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

interface WebhookInstallationTargetRenamed {
  account: {
    archived_at?: string | null;
    avatar_url: string;
    created_at?: string;
    description?: any;
    events_url?: string;
    followers?: number;
    followers_url?: string;
    following?: number;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    hooks_url?: string;
    html_url: string;
    id: number;
    is_verified?: boolean;
    issues_url?: string;
    login?: string;
    members_url?: string;
    name?: string;
    node_id: string;
    organizations_url?: string;
    public_gists?: number;
    public_members_url?: string;
    public_repos?: number;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    slug?: string;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    updated_at?: string;
    url?: string;
    website_url?: any;
    user_view_type?: string;
  };
  action: "renamed";
  changes: {
    login?: {
      from: string;
    };
    slug?: {
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  target_type: string;
}

/** installation unsuspend event */
interface WebhookInstallationUnsuspend {
  action: "unsuspend";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issue_comment created event */
interface WebhookIssueCommentCreated {
  action: "created";
  /**
   * issue comment
   * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
   */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue comment */
    body: string;
    /** @format date-time */
    created_at: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the issue comment
     * @format int64
     */
    id: number;
    /** @format uri */
    issue_url: string;
    node_id: string;
    /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    performed_via_github_app: NullableIntegration;
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue comment
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issue_comment deleted event */
interface WebhookIssueCommentDeleted {
  action: "deleted";
  /** The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself. */
  comment: WebhooksIssueComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issue_comment edited event */
interface WebhookIssueCommentEdited {
  action: "edited";
  /** The changes to the comment. */
  changes: WebhooksChanges;
  /** The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself. */
  comment: WebhooksIssueComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues assigned event */
interface WebhookIssuesAssigned {
  /** The action that was performed. */
  action: "assigned";
  assignee?: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues closed event */
interface WebhookIssuesClosed {
  /** The action that was performed. */
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    assignee?: object | null;
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (object | null)[];
    labels_url?: string;
    locked?: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: "closed" | "open";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues deleted event */
interface WebhookIssuesDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues demilestoned event */
interface WebhookIssuesDemilestoned {
  action: "demilestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** A collection of related issues and pull requests. */
  milestone?: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues edited event */
interface WebhookIssuesEdited {
  action: "edited";
  /** The changes to the issue. */
  changes: {
    body?: {
      /** The previous version of the body. */
      from: string;
    };
    title?: {
      /** The previous version of the title. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** The type of issue. */
    type?: IssueType;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  label?: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues labeled event */
interface WebhookIssuesLabeled {
  action: "labeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** The type of issue. */
    type?: IssueType;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  label?: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues locked event */
interface WebhookIssuesLocked {
  action: "locked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked: true;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "security_and_analysis"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** The type of issue. */
    type?: IssueType;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues milestoned event */
interface WebhookIssuesMilestoned {
  action: "milestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues opened event */
interface WebhookIssuesOpened {
  action: "opened";
  changes?: {
    /**
     * Issue
     * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
     */
    old_issue: {
      active_lock_reason?: "resolved" | "off-topic" | "too heated" | "spam" | null;
      /** User */
      assignee?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      assignees?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      }[];
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association?:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** Contents of the issue */
      body?: string | null;
      /** @format date-time */
      closed_at?: string | null;
      comments?: number;
      /** @format uri */
      comments_url?: string;
      /** @format date-time */
      created_at?: string;
      draft?: boolean;
      /** @format uri */
      events_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      labels?: {
        /** 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /** The name of the label. */
        name: string;
        node_id: string;
        /**
         * URL for the label
         * @format uri
         */
        url: string;
      }[];
      /** @format uri-template */
      labels_url?: string;
      locked?: boolean;
      /**
       * Milestone
       * A collection of related issues and pull requests.
       */
      milestone?: {
        /** @format date-time */
        closed_at: string | null;
        closed_issues: number;
        /** @format date-time */
        created_at: string;
        /** User */
        creator: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        description: string | null;
        /** @format date-time */
        due_on: string | null;
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        labels_url: string;
        node_id: string;
        /** The number of the milestone. */
        number: number;
        open_issues: number;
        /** The state of the milestone. */
        state: "open" | "closed";
        /** The title of the milestone. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
      };
      node_id?: string;
      number: number;
      /**
       * App
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        /** @format date-time */
        created_at: string | null;
        description: string | null;
        /** The list of events for the GitHub app */
        events?: (
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "content_reference"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_review"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "milestone"
          | "organization"
          | "org_block"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_dispatch"
          | "secret_scanning_alert"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_dispatch"
          | "workflow_run"
        )[];
        /** @format uri */
        external_url: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the GitHub app */
        id: number | null;
        /** The name of the GitHub app */
        name: string;
        node_id: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /** The set of permissions for the GitHub app */
        permissions?: {
          actions?: "read" | "write";
          administration?: "read" | "write";
          checks?: "read" | "write";
          content_references?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          discussions?: "read" | "write";
          emails?: "read" | "write";
          environments?: "read" | "write";
          issues?: "read" | "write";
          keys?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_packages?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_secrets?: "read" | "write";
          organization_self_hosted_runners?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          packages?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          secret_scanning_alerts?: "read" | "write";
          secrets?: "read" | "write";
          security_events?: "read" | "write";
          security_scanning_alert?: "read" | "write";
          single_file?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
          workflows?: "read" | "write";
        };
        /** The slug name of the GitHub app */
        slug?: string;
        /** @format date-time */
        updated_at: string | null;
      };
      pull_request?: {
        /** @format uri */
        diff_url?: string;
        /** @format uri */
        html_url?: string;
        /** @format date-time */
        merged_at?: string | null;
        /** @format uri */
        patch_url?: string;
        /** @format uri */
        url?: string;
      };
      /** Reactions */
      reactions?: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** @format uri */
      repository_url?: string;
      /** Sub-issues Summary */
      sub_issues_summary?: {
        total: number;
        completed: number;
        percent_completed: number;
      };
      /** State of the issue; either 'open' or 'closed' */
      state?: "open" | "closed";
      state_reason?: string | null;
      /** @format uri */
      timeline_url?: string;
      /** Title of the issue */
      title?: string;
      /** @format date-time */
      updated_at?: string;
      /**
       * URL for the issue
       * @format uri
       */
      url?: string;
      /** User */
      user?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The type of issue. */
      type?: IssueType;
    };
    /**
     * Repository
     * A git repository
     */
    old_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
      custom_properties?: Record<string, any>;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /** Whether the repository has discussions enabled. */
      has_discussions?: boolean;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require commit signoff. */
      web_commit_signoff_required?: boolean;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues pinned event */
interface WebhookIssuesPinned {
  action: "pinned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue2;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues reopened event */
interface WebhookIssuesReopened {
  action: "reopened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The type of issue. */
    type?: IssueType;
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues transferred event */
interface WebhookIssuesTransferred {
  action: "transferred";
  changes: {
    /**
     * Issue
     * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
     */
    new_issue: {
      active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
      /** User */
      assignee?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      assignees: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      }[];
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** Contents of the issue */
      body: string | null;
      /** @format date-time */
      closed_at: string | null;
      comments: number;
      /** @format uri */
      comments_url: string;
      /** @format date-time */
      created_at: string;
      draft?: boolean;
      /** @format uri */
      events_url: string;
      /** @format uri */
      html_url: string;
      /** @format int64 */
      id: number;
      labels?: {
        /** 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /** The name of the label. */
        name: string;
        node_id: string;
        /**
         * URL for the label
         * @format uri
         */
        url: string;
      }[];
      /** @format uri-template */
      labels_url: string;
      locked?: boolean;
      /**
       * Milestone
       * A collection of related issues and pull requests.
       */
      milestone: {
        /** @format date-time */
        closed_at: string | null;
        closed_issues: number;
        /** @format date-time */
        created_at: string;
        /** User */
        creator: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        description: string | null;
        /** @format date-time */
        due_on: string | null;
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        labels_url: string;
        node_id: string;
        /** The number of the milestone. */
        number: number;
        open_issues: number;
        /** The state of the milestone. */
        state: "open" | "closed";
        /** The title of the milestone. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
      };
      node_id: string;
      number: number;
      /**
       * App
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        /** @format date-time */
        created_at: string | null;
        description: string | null;
        /** The list of events for the GitHub app */
        events?: (
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "content_reference"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_review"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "milestone"
          | "organization"
          | "org_block"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_dispatch"
          | "secret_scanning_alert"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_dispatch"
          | "workflow_run"
        )[];
        /** @format uri */
        external_url: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the GitHub app */
        id: number | null;
        /** The name of the GitHub app */
        name: string;
        node_id: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /** The set of permissions for the GitHub app */
        permissions?: {
          actions?: "read" | "write";
          administration?: "read" | "write";
          checks?: "read" | "write";
          content_references?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          discussions?: "read" | "write";
          emails?: "read" | "write";
          environments?: "read" | "write";
          issues?: "read" | "write";
          keys?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_packages?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_secrets?: "read" | "write";
          organization_self_hosted_runners?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          packages?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          secret_scanning_alerts?: "read" | "write";
          secrets?: "read" | "write";
          security_events?: "read" | "write";
          security_scanning_alert?: "read" | "write";
          single_file?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
          workflows?: "read" | "write";
        };
        /** The slug name of the GitHub app */
        slug?: string;
        /** @format date-time */
        updated_at: string | null;
      };
      pull_request?: {
        /** @format uri */
        diff_url?: string;
        /** @format uri */
        html_url?: string;
        /** @format date-time */
        merged_at?: string | null;
        /** @format uri */
        patch_url?: string;
        /** @format uri */
        url?: string;
      };
      /** Reactions */
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** @format uri */
      repository_url: string;
      /** Sub-issues Summary */
      sub_issues_summary?: {
        total: number;
        completed: number;
        percent_completed: number;
      };
      /** State of the issue; either 'open' or 'closed' */
      state?: "open" | "closed";
      state_reason?: string | null;
      /** @format uri */
      timeline_url?: string;
      /** Title of the issue */
      title: string;
      /** The type of issue. */
      type?: IssueType;
      /** @format date-time */
      updated_at: string;
      /**
       * URL for the issue
       * @format uri
       */
      url: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /**
     * Repository
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
      custom_properties?: Record<string, any>;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       * @default false
       */
      has_discussions: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require contributors to sign off on web-based commits */
      web_commit_signoff_required?: boolean;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue2;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues typed event */
interface WebhookIssuesTyped {
  action: "typed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /** The type of issue. */
  type: IssueType;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unassigned event */
interface WebhookIssuesUnassigned {
  /** The action that was performed. */
  action: "unassigned";
  assignee?: WebhooksUserMannequin;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unlabeled event */
interface WebhookIssuesUnlabeled {
  action: "unlabeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  label?: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unlocked event */
interface WebhookIssuesUnlocked {
  action: "unlocked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked: false;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unpinned event */
interface WebhookIssuesUnpinned {
  action: "unpinned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue2;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues untyped event */
interface WebhookIssuesUntyped {
  action: "untyped";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /** The type of issue. */
  type: IssueType;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** label created event */
interface WebhookLabelCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** label deleted event */
interface WebhookLabelDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** label edited event */
interface WebhookLabelEdited {
  action: "edited";
  /** The changes to the label if the action was `edited`. */
  changes?: {
    color?: {
      /** The previous version of the color if the action was `edited`. */
      from: string;
    };
    description?: {
      /** The previous version of the description if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The previous version of the name if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase cancelled event */
interface WebhookMarketplacePurchaseCancelled {
  action: "cancelled";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  previous_marketplace_purchase?: WebhooksPreviousMarketplacePurchase;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase changed event */
interface WebhookMarketplacePurchaseChanged {
  action: "changed";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Marketplace Purchase */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean | null;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase pending_change event */
interface WebhookMarketplacePurchasePendingChange {
  action: "pending_change";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Marketplace Purchase */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase pending_change_cancelled event */
interface WebhookMarketplacePurchasePendingChangeCancelled {
  action: "pending_change_cancelled";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** Marketplace Purchase */
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: any;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  previous_marketplace_purchase?: WebhooksPreviousMarketplacePurchase;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase purchased event */
interface WebhookMarketplacePurchasePurchased {
  action: "purchased";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  previous_marketplace_purchase?: WebhooksPreviousMarketplacePurchase;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** member added event */
interface WebhookMemberAdded {
  action: "added";
  changes?: {
    /**
     * This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
     * role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
     * assigned to the collaborator, use the `role_name` field instead, which will provide the full
     * role name, including custom roles.
     */
    permission?: {
      to: "write" | "admin" | "read";
    };
    /** The role assigned to the collaborator. */
    role_name?: {
      to: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** member edited event */
interface WebhookMemberEdited {
  action: "edited";
  /** The changes to the collaborator permissions */
  changes: {
    old_permission?: {
      /** The previous permissions of the collaborator if the action was edited. */
      from: string;
    };
    permission?: {
      from?: string | null;
      to?: string | null;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** member removed event */
interface WebhookMemberRemoved {
  action: "removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** membership added event */
interface WebhookMembershipAdded {
  action: "added";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The scope of the membership. Currently, can only be `team`. */
  scope: "team";
  /** User */
  sender: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam;
}

/** membership removed event */
interface WebhookMembershipRemoved {
  action: "removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The scope of the membership. Currently, can only be `team`. */
  scope: "team" | "organization";
  /** User */
  sender: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam;
}

interface WebhookMergeGroupChecksRequested {
  action: "checks_requested";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A group of pull requests that the merge queue has grouped together to be merged. */
  merge_group: MergeGroup;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

interface WebhookMergeGroupDestroyed {
  action: "destroyed";
  /** Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated). */
  reason?: "merged" | "invalidated" | "dequeued";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A group of pull requests that the merge queue has grouped together to be merged. */
  merge_group: MergeGroup;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** meta deleted event */
interface WebhookMetaDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** The deleted webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace. */
  hook: {
    active: boolean;
    config: {
      content_type: "json" | "form";
      insecure_ssl: string;
      secret?: string;
      /** @format uri */
      url: string;
    };
    created_at: string;
    events: (
      | "*"
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "meta"
      | "milestone"
      | "organization"
      | "org_block"
      | "package"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "pull_request_review_thread"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_import"
      | "repository_vulnerability_alert"
      | "secret_scanning_alert"
      | "secret_scanning_alert_location"
      | "security_and_analysis"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_job"
      | "workflow_run"
      | "repository_dispatch"
      | "projects_v2_item"
    )[];
    id: number;
    name: string;
    type: string;
    updated_at: string;
  };
  /** The id of the modified webhook. */
  hook_id: number;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** milestone closed event */
interface WebhookMilestoneClosed {
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone created event */
interface WebhookMilestoneCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone3;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone deleted event */
interface WebhookMilestoneDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone edited event */
interface WebhookMilestoneEdited {
  action: "edited";
  /** The changes to the milestone if the action was `edited`. */
  changes: {
    description?: {
      /** The previous version of the description if the action was `edited`. */
      from: string;
    };
    due_on?: {
      /** The previous version of the due date if the action was `edited`. */
      from: string;
    };
    title?: {
      /** The previous version of the title if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone opened event */
interface WebhookMilestoneOpened {
  action: "opened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone3;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** org_block blocked event */
interface WebhookOrgBlockBlocked {
  action: "blocked";
  blocked_user: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** org_block unblocked event */
interface WebhookOrgBlockUnblocked {
  action: "unblocked";
  blocked_user: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization deleted event */
interface WebhookOrganizationDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership?: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization member_added event */
interface WebhookOrganizationMemberAdded {
  action: "member_added";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization member_invited event */
interface WebhookOrganizationMemberInvited {
  action: "member_invited";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The invitation for the user or email if the action is `member_invited`. */
  invitation: {
    /** @format date-time */
    created_at: string;
    email: string | null;
    /** @format date-time */
    failed_at: string | null;
    failed_reason: string | null;
    id: number;
    /** @format uri */
    invitation_teams_url: string;
    /** User */
    inviter: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    login: string | null;
    node_id: string;
    role: string;
    team_count: number;
    invitation_source?: string;
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  user?: WebhooksUser;
}

/** organization member_removed event */
interface WebhookOrganizationMemberRemoved {
  action: "member_removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization renamed event */
interface WebhookOrganizationRenamed {
  action: "renamed";
  changes?: {
    login?: {
      from?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership?: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Ruby Gems metadata */
interface WebhookRubygemsMetadata {
  name?: string;
  description?: string;
  readme?: string;
  homepage?: string;
  version_info?: {
    version?: string;
  };
  platform?: string;
  metadata?: Record<string, string>;
  repo?: string;
  dependencies?: Record<string, string>[];
  commit_oid?: string;
}

/** package published event */
interface WebhookPackagePublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Information about the package. */
  package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    /** @format uri */
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      /** User */
      author?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      body?: string | object;
      body_html?: string;
      container_metadata?: {
        labels?: object | null;
        manifest?: object | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      /** @format uri */
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      npm_metadata?: {
        name?: string;
        version?: string;
        npm_user?: string;
        author?: object | null;
        bugs?: object | null;
        dependencies?: object;
        dev_dependencies?: object;
        peer_dependencies?: object;
        optional_dependencies?: object;
        description?: string;
        dist?: object | null;
        git_head?: string;
        homepage?: string;
        license?: string;
        main?: string;
        repository?: object | null;
        scripts?: object;
        id?: string;
        node_version?: string;
        npm_version?: string;
        has_shrinkwrap?: boolean;
        maintainers?: object[];
        contributors?: object[];
        engines?: object;
        keywords?: string[];
        files?: string[];
        bin?: object;
        man?: object;
        directories?: object | null;
        os?: string[];
        cpu?: string[];
        readme?: string;
        installation_command?: string;
        release_id?: number;
        commit_oid?: string;
        published_via_actions?: boolean;
        deleted_by_id?: number;
      };
      nuget_metadata?:
        | {
            id?: number | string;
            name?: string;
            value?:
              | boolean
              | string
              | number
              | {
                  url?: string;
                  branch?: string;
                  commit?: string;
                  type?: string;
                };
          }[]
        | null;
      package_files: {
        content_type: string;
        created_at: string;
        /** @format uri */
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        /** User */
        author: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        created_at: string;
        draft: boolean;
        /** @format uri */
        html_url: string;
        id: number;
        name: string | null;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        /** @format uri */
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    };
    registry: {
      /** @format uri */
      about_url: string;
      name: string;
      type: string;
      /** @format uri */
      url: string;
      vendor: string;
    } | null;
    updated_at: string | null;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** package updated event */
interface WebhookPackageUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Information about the package. */
  package: {
    created_at: string;
    description: string | null;
    ecosystem: string;
    /** @format uri */
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      /** User */
      author: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      /** @format uri */
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      package_files: {
        content_type: string;
        created_at: string;
        /** @format uri */
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string;
        size: number;
        state: string;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        /** User */
        author: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        created_at: string;
        draft: boolean;
        /** @format uri */
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        /** @format uri */
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      /** @format uri */
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: {
      /** @format uri */
      about_url: string;
      name: string;
      type: string;
      /** @format uri */
      url: string;
      vendor: string;
    } | null;
    updated_at: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** page_build event */
interface WebhookPageBuild {
  /** The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself. */
  build: {
    commit: string | null;
    created_at: string;
    duration: number;
    error: {
      message: string | null;
    };
    /** User */
    pusher: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    status: string;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  id: number;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** personal_access_token_request approved event */
interface WebhookPersonalAccessTokenRequestApproved {
  action: "approved";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
}

/** personal_access_token_request cancelled event */
interface WebhookPersonalAccessTokenRequestCancelled {
  action: "cancelled";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
}

/** personal_access_token_request created event */
interface WebhookPersonalAccessTokenRequestCreated {
  action: "created";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
}

/** personal_access_token_request denied event */
interface WebhookPersonalAccessTokenRequestDenied {
  action: "denied";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
}

interface WebhookPing {
  /**
   * Webhook
   * The webhook that is being pinged
   */
  hook?: {
    /** Determines whether the hook is actually triggered for the events it subscribes to. */
    active: boolean;
    /** Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app. */
    app_id?: number;
    config: {
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: WebhookConfigContentType;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: WebhookConfigInsecureSsl;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
      secret?: WebhookConfigSecret;
      /** The URL to which the payloads will be delivered. */
      url?: WebhookConfigUrl;
    };
    /** @format date-time */
    created_at: string;
    /** @format uri */
    deliveries_url?: string;
    /** Determines what events the hook is triggered for. Default: ['push']. */
    events: string[];
    /** Unique identifier of the webhook. */
    id: number;
    last_response?: HookResponse;
    /** The type of webhook. The only valid value is 'web'. */
    name: "web";
    /** @format uri */
    ping_url?: string;
    /** @format uri */
    test_url?: string;
    type: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url?: string;
  };
  /** The ID of the webhook that triggered the ping. */
  hook_id?: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  /** Random string of GitHub zen. */
  zen?: string;
}

/** The webhooks ping payload encoded with URL encoding. */
interface WebhookPingFormEncoded {
  /** A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** project_card converted event */
interface WebhookProjectCardConverted {
  action: "converted";
  changes: {
    note: {
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: WebhooksProjectCard;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card created event */
interface WebhookProjectCardCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: WebhooksProjectCard;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card deleted event */
interface WebhookProjectCardDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Project Card */
  project_card: {
    after_id?: number | null;
    /** Whether or not the card is archived */
    archived: boolean;
    column_id: number | null;
    /** @format uri */
    column_url: string;
    /** @format uri */
    content_url?: string;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The project card's ID */
    id: number;
    node_id: string;
    note: string | null;
    /** @format uri */
    project_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card edited event */
interface WebhookProjectCardEdited {
  action: "edited";
  changes: {
    note: {
      from: string | null;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: WebhooksProjectCard;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card moved event */
interface WebhookProjectCardMoved {
  action: "moved";
  changes?: {
    column_id: {
      from: number;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: {
    after_id?: number | null;
    /** Whether or not the card is archived */
    archived: boolean;
    column_id: number;
    /** @format uri */
    column_url: string;
    /** @format uri */
    content_url?: string;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The project card's ID */
    id: number;
    node_id: string;
    note: string | null;
    /** @format uri */
    project_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  } & {
    after_id: number | null;
    archived?: boolean;
    column_id?: number;
    column_url?: string;
    created_at?: string;
    creator?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    } | null;
    id?: number;
    node_id?: string;
    note?: string | null;
    project_url?: string;
    updated_at?: string;
    url?: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project closed event */
interface WebhookProjectClosed {
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_column created event */
interface WebhookProjectColumnCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project_column deleted event */
interface WebhookProjectColumnDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project_column edited event */
interface WebhookProjectColumnEdited {
  action: "edited";
  changes: {
    name?: {
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project_column moved event */
interface WebhookProjectColumnMoved {
  action: "moved";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project created event */
interface WebhookProjectCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project deleted event */
interface WebhookProjectDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project edited event */
interface WebhookProjectEdited {
  action: "edited";
  /** The changes to the project if the action was `edited`. */
  changes?: {
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The changes to the project if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project reopened event */
interface WebhookProjectReopened {
  action: "reopened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Closed Event */
interface WebhookProjectsV2ProjectClosed {
  action: "closed";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** A project was created */
interface WebhookProjectsV2ProjectCreated {
  action: "created";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Deleted Event */
interface WebhookProjectsV2ProjectDeleted {
  action: "deleted";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Edited Event */
interface WebhookProjectsV2ProjectEdited {
  action: "edited";
  changes: {
    description?: {
      from?: string | null;
      to?: string | null;
    };
    public?: {
      from?: boolean;
      to?: boolean;
    };
    short_description?: {
      from?: string | null;
      to?: string | null;
    };
    title?: {
      from?: string;
      to?: string;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Archived Event */
interface WebhookProjectsV2ItemArchived {
  action: "archived";
  changes: WebhooksProjectChanges;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Converted Event */
interface WebhookProjectsV2ItemConverted {
  action: "converted";
  changes: {
    content_type?: {
      from?: string | null;
      to?: string;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Created Event */
interface WebhookProjectsV2ItemCreated {
  action: "created";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Deleted Event */
interface WebhookProjectsV2ItemDeleted {
  action: "deleted";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Edited Event */
interface WebhookProjectsV2ItemEdited {
  action: "edited";
  /**
   * The changes made to the item may involve modifications in the item's fields and draft issue body.
   * It includes altered values for text, number, date, single select, and iteration fields, along with the GraphQL node ID of the changed field.
   */
  changes?:
    | {
        field_value: {
          field_node_id?: string;
          field_type?: string;
          field_name?: string;
          project_number?: number;
          from?: string | number | ProjectsV2SingleSelectOption | ProjectsV2IterationSetting | null;
          to?: string | number | ProjectsV2SingleSelectOption | ProjectsV2IterationSetting | null;
        };
      }
    | {
        body: {
          from?: string | null;
          to?: string | null;
        };
      };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Reordered Event */
interface WebhookProjectsV2ItemReordered {
  action: "reordered";
  changes: {
    previous_projects_v2_item_node_id?: {
      from?: string | null;
      to?: string | null;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Restored Event */
interface WebhookProjectsV2ItemRestored {
  action: "restored";
  changes: WebhooksProjectChanges;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Reopened Event */
interface WebhookProjectsV2ProjectReopened {
  action: "reopened";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Status Update Created Event */
interface WebhookProjectsV2StatusUpdateCreated {
  action: "created";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An status update belonging to a project */
  projects_v2_status_update: ProjectsV2StatusUpdate;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Status Update Deleted Event */
interface WebhookProjectsV2StatusUpdateDeleted {
  action: "deleted";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An status update belonging to a project */
  projects_v2_status_update: ProjectsV2StatusUpdate;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Status Update Edited Event */
interface WebhookProjectsV2StatusUpdateEdited {
  action: "edited";
  changes?: {
    body?: {
      from?: string | null;
      to?: string | null;
    };
    status?: {
      from?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
      to?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
    };
    start_date?: {
      /** @format date */
      from?: string | null;
      /** @format date */
      to?: string | null;
    };
    target_date?: {
      /** @format date */
      from?: string | null;
      /** @format date */
      to?: string | null;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An status update belonging to a project */
  projects_v2_status_update: ProjectsV2StatusUpdate;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** public event */
interface WebhookPublic {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request assigned event */
interface WebhookPullRequestAssigned {
  action: "assigned";
  assignee: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request auto_merge_disabled event */
interface WebhookPullRequestAutoMergeDisabled {
  action: "auto_merge_disabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  reason: string;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request auto_merge_enabled event */
interface WebhookPullRequestAutoMergeEnabled {
  action: "auto_merge_enabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  reason?: string;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request closed event */
interface WebhookPullRequestClosed {
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request converted_to_draft event */
interface WebhookPullRequestConvertedToDraft {
  action: "converted_to_draft";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request demilestoned event */
interface WebhookPullRequestDemilestoned {
  action: "demilestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** A collection of related issues and pull requests. */
  milestone?: Milestone;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: WebhooksPullRequest5;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request dequeued event */
interface WebhookPullRequestDequeued {
  action: "dequeued";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  reason:
    | "UNKNOWN_REMOVAL_REASON"
    | "MANUAL"
    | "MERGE"
    | "MERGE_CONFLICT"
    | "CI_FAILURE"
    | "CI_TIMEOUT"
    | "ALREADY_MERGED"
    | "QUEUE_CLEARED"
    | "ROLL_BACK"
    | "BRANCH_PROTECTIONS"
    | "GIT_TREE_INVALID"
    | "INVALID_MERGE_COMMIT";
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request edited event */
interface WebhookPullRequestEdited {
  action: "edited";
  /** The changes to the comment if the action was `edited`. */
  changes: {
    base?: {
      ref: {
        from: string;
      };
      sha: {
        from: string;
      };
    };
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
    title?: {
      /** The previous version of the title if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request enqueued event */
interface WebhookPullRequestEnqueued {
  action: "enqueued";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request labeled event */
interface WebhookPullRequestLabeled {
  action: "labeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label?: WebhooksLabel;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request locked event */
interface WebhookPullRequestLocked {
  action: "locked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request milestoned event */
interface WebhookPullRequestMilestoned {
  action: "milestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** A collection of related issues and pull requests. */
  milestone?: Milestone;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: WebhooksPullRequest5;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request opened event */
interface WebhookPullRequestOpened {
  action: "opened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request ready_for_review event */
interface WebhookPullRequestReadyForReview {
  action: "ready_for_review";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request reopened event */
interface WebhookPullRequestReopened {
  action: "reopened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_comment created event */
interface WebhookPullRequestReviewCommentCreated {
  action: "created";
  /**
   * Pull Request Review Comment
   * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
   */
  comment: {
    _links: {
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      pull_request: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** The text of the comment. */
    body: string;
    /** The SHA of the commit to which the comment applies. */
    commit_id: string;
    /** @format date-time */
    created_at: string;
    /** The diff of the line that the comment refers to. */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     * @format uri
     */
    html_url: string;
    /** The ID of the pull request review comment. */
    id: number;
    /** The comment ID to reply to. */
    in_reply_to_id?: number;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null;
    /** The node ID of the pull request review comment. */
    node_id: string;
    /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line: number | null;
    /** The index of the original line in the diff to which the comment applies. */
    original_position: number;
    /** The first line of the range for a multi-line comment. */
    original_start_line: number | null;
    /** The relative path of the file to which the comment applies. */
    path: string;
    /** The line index in the diff to which the comment applies. */
    position: number | null;
    /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     * @format uri
     */
    pull_request_url: string;
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** The side of the first line of the range for a multi-line comment. */
    side: "LEFT" | "RIGHT";
    /** The first line of the range for a multi-line comment. */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     * @default "RIGHT"
     */
    start_side: "LEFT" | "RIGHT" | null;
    /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file";
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the pull request review comment
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions?: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_comment deleted event */
interface WebhookPullRequestReviewCommentDeleted {
  action: "deleted";
  /** The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself. */
  comment: WebhooksReviewComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_comment edited event */
interface WebhookPullRequestReviewCommentEdited {
  action: "edited";
  /** The changes to the comment. */
  changes: WebhooksChanges;
  /** The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself. */
  comment: WebhooksReviewComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      user_view_type?: string;
      /** @format uri */
      url?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review dismissed event */
interface WebhookPullRequestReviewDismissed {
  action: "dismissed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The review that was affected. */
  review: {
    _links: {
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      pull_request: {
        /** @format uri-template */
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** The text of the review. */
    body: string | null;
    /** A commit SHA for the review. */
    commit_id: string;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the review */
    id: number;
    node_id: string;
    /** @format uri */
    pull_request_url: string;
    state: "dismissed" | "approved" | "changes_requested";
    /** @format date-time */
    submitted_at: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review edited event */
interface WebhookPullRequestReviewEdited {
  action: "edited";
  changes: {
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The review that was affected. */
  review: WebhooksReview;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request review_request_removed event */
type WebhookPullRequestReviewRequestRemoved =
  | {
      action: "review_request_removed";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /** The default value for a squash merge commit message. */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /** The default value for a squash merge commit title. */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description: string | null;
              /** @format uri */
              html_url: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url: string;
              /** Name of the team */
              name: string;
              node_id: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /** User */
      requested_reviewer: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    }
  | {
      action: "review_request_removed";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description: string | null;
              /** @format uri */
              html_url: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url: string;
              /** Name of the team */
              name: string;
              node_id: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /**
       * Team
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        parent?: {
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        };
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    };

/** pull_request review_requested event */
type WebhookPullRequestReviewRequested =
  | {
      action: "review_requested";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description: string | null;
              /** @format uri */
              html_url: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url: string;
              /** Name of the team */
              name: string;
              node_id: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /** User */
      requested_reviewer: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    }
  | {
      action: "review_requested";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description?: string | null;
              /** @format uri */
              html_url?: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url?: string;
              /** Name of the team */
              name: string;
              node_id?: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission?: string;
              privacy?: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url?: string;
              slug?: string;
              /**
               * URL for the team
               * @format uri
               */
              url?: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /**
       * Team
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /** Description of the team */
        description?: string | null;
        /** @format uri */
        html_url?: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url?: string;
        /** Name of the team */
        name: string;
        node_id?: string;
        parent?: {
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        };
        /** Permission that the team will have for its repositories */
        permission?: string;
        privacy?: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         * @format uri
         */
        url?: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    };

/** pull_request_review submitted event */
interface WebhookPullRequestReviewSubmitted {
  action: "submitted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The review that was affected. */
  review: WebhooksReview;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_thread resolved event */
interface WebhookPullRequestReviewThreadResolved {
  action: "resolved";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  thread: {
    comments: {
      _links: {
        /** Link */
        html: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        pull_request: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        self: {
          /** @format uri-template */
          href: string;
        };
      };
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** The text of the comment. */
      body: string;
      /** The SHA of the commit to which the comment applies. */
      commit_id: string;
      /** @format date-time */
      created_at: string;
      /** The diff of the line that the comment refers to. */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       * @format uri
       */
      html_url: string;
      /** The ID of the pull request review comment. */
      id: number;
      /** The comment ID to reply to. */
      in_reply_to_id?: number;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line: number | null;
      /** The node ID of the pull request review comment. */
      node_id: string;
      /** The SHA of the original commit to which the comment applies. */
      original_commit_id: string;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line: number | null;
      /** The index of the original line in the diff to which the comment applies. */
      original_position: number;
      /** The first line of the range for a multi-line comment. */
      original_start_line: number | null;
      /** The relative path of the file to which the comment applies. */
      path: string;
      /** The line index in the diff to which the comment applies. */
      position: number | null;
      /** The ID of the pull request review to which the comment belongs. */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       * @format uri
       */
      pull_request_url: string;
      /** Reactions */
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** The side of the first line of the range for a multi-line comment. */
      side: "LEFT" | "RIGHT";
      /** The first line of the range for a multi-line comment. */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       * @default "RIGHT"
       */
      start_side: "LEFT" | "RIGHT" | null;
      /** The level at which the comment is targeted, can be a diff line or a file. */
      subject_type?: "line" | "file";
      /** @format date-time */
      updated_at: string;
      /**
       * URL for the pull request review comment
       * @format uri
       */
      url: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    }[];
    node_id: string;
  };
}

/** pull_request_review_thread unresolved event */
interface WebhookPullRequestReviewThreadUnresolved {
  action: "unresolved";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  thread: {
    comments: {
      _links: {
        /** Link */
        html: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        pull_request: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        self: {
          /** @format uri-template */
          href: string;
        };
      };
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** The text of the comment. */
      body: string;
      /** The SHA of the commit to which the comment applies. */
      commit_id: string;
      /** @format date-time */
      created_at: string;
      /** The diff of the line that the comment refers to. */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       * @format uri
       */
      html_url: string;
      /** The ID of the pull request review comment. */
      id: number;
      /** The comment ID to reply to. */
      in_reply_to_id?: number;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line: number | null;
      /** The node ID of the pull request review comment. */
      node_id: string;
      /** The SHA of the original commit to which the comment applies. */
      original_commit_id: string;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line: number;
      /** The index of the original line in the diff to which the comment applies. */
      original_position: number;
      /** The first line of the range for a multi-line comment. */
      original_start_line: number | null;
      /** The relative path of the file to which the comment applies. */
      path: string;
      /** The line index in the diff to which the comment applies. */
      position: number | null;
      /** The ID of the pull request review to which the comment belongs. */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       * @format uri
       */
      pull_request_url: string;
      /** Reactions */
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** The side of the first line of the range for a multi-line comment. */
      side: "LEFT" | "RIGHT";
      /** The first line of the range for a multi-line comment. */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       * @default "RIGHT"
       */
      start_side: "LEFT" | "RIGHT" | null;
      /** The level at which the comment is targeted, can be a diff line or a file. */
      subject_type?: "line" | "file";
      /** @format date-time */
      updated_at: string;
      /**
       * URL for the pull request review comment
       * @format uri
       */
      url: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    }[];
    node_id: string;
  };
}

/** pull_request synchronize event */
interface WebhookPullRequestSynchronize {
  action: "synchronize";
  after: string;
  before: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** The default value for a merge commit message. */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /** The default value for a merge commit message title. */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request unassigned event */
interface WebhookPullRequestUnassigned {
  action: "unassigned";
  assignee?: WebhooksUserMannequin;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request unlabeled event */
interface WebhookPullRequestUnlabeled {
  action: "unlabeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label?: WebhooksLabel;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** The default value for a merge commit message. */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /** The default value for a merge commit message title. */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request unlocked event */
interface WebhookPullRequestUnlocked {
  action: "unlocked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** push event */
interface WebhookPush {
  /** The SHA of the most recent commit on `ref` after the push. */
  after: string;
  base_ref: WebhooksNullableString;
  /** The SHA of the most recent commit on `ref` before the push. */
  before: string;
  /** An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits. */
  commits: {
    /** An array of files added in the commit. A maximum of 3000 changed files will be reported per commit. */
    added?: string[];
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    author: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    committer: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /** Whether this commit is distinct from any that have been pushed before. */
    distinct: boolean;
    id: string;
    /** The commit message. */
    message: string;
    /** An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit. */
    modified?: string[];
    /** An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit. */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     * @format date-time
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     * @format uri
     */
    url: string;
  }[];
  /** URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit. */
  compare: string;
  /** Whether this push created the `ref`. */
  created: boolean;
  /** Whether this push deleted the `ref`. */
  deleted: boolean;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Whether this push was a force push of the `ref`. */
  forced: boolean;
  /** Commit */
  head_commit: {
    /** An array of files added in the commit. */
    added?: string[];
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    author: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    committer: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /** Whether this commit is distinct from any that have been pushed before. */
    distinct: boolean;
    id: string;
    /** The commit message. */
    message: string;
    /** An array of files modified by the commit. */
    modified?: string[];
    /** An array of files removed in the commit. */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     * @format date-time
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
  pusher: {
    /** @format date-time */
    date?: string;
    /** @format email */
    email?: string | null;
    /** The git author's name. */
    name: string;
    username?: string;
  };
  /** The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`. */
  ref: string;
  /**
   * Repository
   * A git repository
   */
  repository: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    /**
     * Whether discussions are enabled.
     * @default false
     */
    has_discussions: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
    /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
}

interface WebhookRegistryPackagePublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  registry_package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      author?: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
        user_view_type?: string;
      };
      body?: string | object;
      body_html?: string;
      container_metadata?: {
        labels?: object | null;
        manifest?: object | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      npm_metadata?: {
        name?: string;
        version?: string;
        npm_user?: string;
        author?: string | object | null;
        bugs?: string | object | null;
        dependencies?: object;
        dev_dependencies?: object;
        peer_dependencies?: object;
        optional_dependencies?: object;
        description?: string;
        dist?: string | object | null;
        git_head?: string;
        homepage?: string;
        license?: string;
        main?: string;
        repository?: string | object | null;
        scripts?: object;
        id?: string;
        node_version?: string;
        npm_version?: string;
        has_shrinkwrap?: boolean;
        maintainers?: string[];
        contributors?: string[];
        engines?: object;
        keywords?: string[];
        files?: string[];
        bin?: object;
        man?: object;
        directories?: string | object | null;
        os?: string[];
        cpu?: string[];
        readme?: string;
        installation_command?: string;
        release_id?: number;
        commit_oid?: string;
        published_via_actions?: boolean;
        deleted_by_id?: number;
      };
      nuget_metadata?: {
        id?: string | object | number | null;
        name?: string;
        value?:
          | boolean
          | string
          | number
          | {
              url?: string;
              branch?: string;
              commit?: string;
              type?: string;
            };
      }[];
      package_files: {
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
          user_view_type?: string;
        };
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: string | null;
        prerelease?: boolean;
        published_at?: string;
        tag_name?: string;
        target_commitish?: string;
        url?: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    };
    registry: {
      about_url?: string;
      name?: string;
      type?: string;
      url?: string;
      vendor?: string;
    } | null;
    updated_at: string | null;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

interface WebhookRegistryPackageUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  registry_package: {
    created_at: string;
    description: any;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      author: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
        user_view_type?: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: ({
        tags?: string[];
      } | null)[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      package_files: {
        content_type?: string;
        created_at?: string;
        download_url?: string;
        id?: number;
        md5?: string | null;
        name?: string;
        sha1?: string | null;
        sha256?: string;
        size?: number;
        state?: string;
        updated_at?: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
          user_view_type?: string;
        };
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: object | null;
    updated_at: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** release created event */
interface WebhookReleaseCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** release deleted event */
interface WebhookReleaseDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** release edited event */
interface WebhookReleaseEdited {
  action: "edited";
  changes: {
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The previous version of the name if the action was `edited`. */
      from: string;
    };
    tag_name?: {
      /** The previous version of the tag_name if the action was `edited`. */
      from: string;
    };
    make_latest?: {
      /** Whether this release was explicitly `edited` to be the latest. */
      to: boolean;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release prereleased event */
interface WebhookReleasePrereleased {
  action: "prereleased";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * Release
   * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
   */
  release: {
    assets: {
      /** @format uri */
      browser_download_url: string;
      content_type: string;
      /** @format date-time */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /** The file name of the asset. */
      name: string;
      node_id: string;
      size: number;
      digest: string | null;
      /** State of the release asset. */
      state: "uploaded";
      /** @format date-time */
      updated_at: string;
      /** User */
      uploader?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      };
      /** @format uri */
      url: string;
    }[];
    /** @format uri */
    assets_url: string;
    /** User */
    author: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    body: string | null;
    /** @format date-time */
    created_at: string | null;
    /** @format uri */
    discussion_url?: string;
    /** Whether the release is a draft or published */
    draft: boolean;
    /** @format uri */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /** Whether the release is identified as a prerelease or a full release. */
    prerelease: true;
    /** @format date-time */
    published_at: string | null;
    /** Reactions */
    reactions?: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** The name of the tag. */
    tag_name: string;
    /** @format uri */
    tarball_url: string | null;
    /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string;
    /** @format uri-template */
    upload_url: string;
    /** @format uri */
    url: string;
    /** @format uri */
    zipball_url: string | null;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release published event */
interface WebhookReleasePublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease1;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release released event */
interface WebhookReleaseReleased {
  action: "released";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release unpublished event */
interface WebhookReleaseUnpublished {
  action: "unpublished";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease1;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Repository advisory published event */
interface WebhookRepositoryAdvisoryPublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A repository security advisory. */
  repository_advisory: RepositoryAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Repository advisory reported event */
interface WebhookRepositoryAdvisoryReported {
  action: "reported";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A repository security advisory. */
  repository_advisory: RepositoryAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** repository archived event */
interface WebhookRepositoryArchived {
  action: "archived";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository created event */
interface WebhookRepositoryCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository deleted event */
interface WebhookRepositoryDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_dispatch event */
interface WebhookRepositoryDispatchSample {
  /** The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
  action: string;
  branch: string;
  /** The `client_payload` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
  client_payload: Record<string, any>;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository edited event */
interface WebhookRepositoryEdited {
  action: "edited";
  changes: {
    default_branch?: {
      from: string;
    };
    description?: {
      from: string | null;
    };
    homepage?: {
      from: string | null;
    };
    topics?: {
      from?: string[] | null;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_import event */
interface WebhookRepositoryImport {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  status: "success" | "cancelled" | "failure";
}

/** repository privatized event */
interface WebhookRepositoryPrivatized {
  action: "privatized";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository publicized event */
interface WebhookRepositoryPublicized {
  action: "publicized";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository renamed event */
interface WebhookRepositoryRenamed {
  action: "renamed";
  changes: {
    repository: {
      name: {
        from: string;
      };
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository ruleset created event */
interface WebhookRepositoryRulesetCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A set of rules to apply when specified conditions are met. */
  repository_ruleset: RepositoryRuleset;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository ruleset deleted event */
interface WebhookRepositoryRulesetDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A set of rules to apply when specified conditions are met. */
  repository_ruleset: RepositoryRuleset;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository ruleset edited event */
interface WebhookRepositoryRulesetEdited {
  action: "edited";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A set of rules to apply when specified conditions are met. */
  repository_ruleset: RepositoryRuleset;
  changes?: {
    name?: {
      from?: string;
    };
    enforcement?: {
      from?: string;
    };
    conditions?: {
      added?: RepositoryRulesetConditions[];
      deleted?: RepositoryRulesetConditions[];
      updated?: {
        /** Parameters for a repository ruleset ref name condition */
        condition?: RepositoryRulesetConditions;
        changes?: {
          condition_type?: {
            from?: string;
          };
          target?: {
            from?: string;
          };
          include?: {
            from?: string[];
          };
          exclude?: {
            from?: string[];
          };
        };
      }[];
    };
    rules?: {
      added?: RepositoryRule[];
      deleted?: RepositoryRule[];
      updated?: {
        /** A repository rule. */
        rule?: RepositoryRule;
        changes?: {
          configuration?: {
            from?: string;
          };
          rule_type?: {
            from?: string;
          };
          pattern?: {
            from?: string;
          };
        };
      }[];
    };
  };
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository transferred event */
interface WebhookRepositoryTransferred {
  action: "transferred";
  changes: {
    owner: {
      from: {
        /** Organization */
        organization?: {
          /** @format uri */
          avatar_url: string;
          description: string | null;
          /** @format uri */
          events_url: string;
          /** @format uri */
          hooks_url: string;
          /** @format uri */
          html_url?: string;
          id: number;
          /** @format uri */
          issues_url: string;
          login: string;
          /** @format uri-template */
          members_url: string;
          node_id: string;
          /** @format uri-template */
          public_members_url: string;
          /** @format uri */
          repos_url: string;
          /** @format uri */
          url: string;
        };
        /** User */
        user?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository unarchived event */
interface WebhookRepositoryUnarchived {
  action: "unarchived";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert create event */
interface WebhookRepositoryVulnerabilityAlertCreate {
  action: "create";
  /** The security alert of the vulnerable dependency. */
  alert: WebhooksAlert;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert dismiss event */
interface WebhookRepositoryVulnerabilityAlertDismiss {
  action: "dismiss";
  /**
   * Repository Vulnerability Alert Alert
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_comment?: string | null;
    dismiss_reason: string;
    dismissed_at: string;
    /** User */
    dismisser: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    external_identifier: string;
    /** @format uri */
    external_reference: string | null;
    fix_reason?: string;
    /** @format date-time */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: "dismissed";
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert reopen event */
interface WebhookRepositoryVulnerabilityAlertReopen {
  action: "reopen";
  /** The security alert of the vulnerable dependency. */
  alert: WebhooksAlert;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert resolve event */
interface WebhookRepositoryVulnerabilityAlertResolve {
  action: "resolve";
  /**
   * Repository Vulnerability Alert Alert
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    /** User */
    dismisser?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    external_identifier: string;
    /** @format uri */
    external_reference: string | null;
    fix_reason?: string;
    /** @format date-time */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: "fixed" | "open";
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** secret_scanning_alert created event */
interface WebhookSecretScanningAlertCreated {
  action: "created";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Secret Scanning Alert Location Created Event */
interface WebhookSecretScanningAlertLocationCreated {
  action?: "created";
  alert: SecretScanningAlertWebhook;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  location: SecretScanningLocation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Secret Scanning Alert Location Created Event */
interface WebhookSecretScanningAlertLocationCreatedFormEncoded {
  /** A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** secret_scanning_alert publicly leaked event */
interface WebhookSecretScanningAlertPubliclyLeaked {
  action: "publicly_leaked";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_alert reopened event */
interface WebhookSecretScanningAlertReopened {
  action: "reopened";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_alert resolved event */
interface WebhookSecretScanningAlertResolved {
  action: "resolved";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_alert validated event */
interface WebhookSecretScanningAlertValidated {
  action: "validated";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_scan completed event */
interface WebhookSecretScanningScanCompleted {
  action: "completed";
  /** What type of scan was completed */
  type: "backfill" | "custom-pattern-backfill" | "pattern-version-backfill";
  /** What type of content was scanned */
  source: "git" | "issues" | "pull-requests" | "discussions" | "wiki";
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  started_at: string;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  completed_at: string;
  /** List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updates */
  secret_types?: string[] | null;
  /** If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updated */
  custom_pattern_name?: string | null;
  /** If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updated */
  custom_pattern_scope?: "repository" | "organization" | "enterprise" | null;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_advisory published event */
interface WebhookSecurityAdvisoryPublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The details of the security advisory, including summary, description, and severity. */
  security_advisory: WebhooksSecurityAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_advisory updated event */
interface WebhookSecurityAdvisoryUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The details of the security advisory, including summary, description, and severity. */
  security_advisory: WebhooksSecurityAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_advisory withdrawn event */
interface WebhookSecurityAdvisoryWithdrawn {
  action: "withdrawn";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The details of the security advisory, including summary, description, and severity. */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cvss_severities?: CvssSeverities;
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      /** @format uri */
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_and_analysis event */
interface WebhookSecurityAndAnalysis {
  changes: {
    from?: {
      security_and_analysis?: SecurityAndAnalysis;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Full Repository */
  repository: FullRepository;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** sponsorship cancelled event */
interface WebhookSponsorshipCancelled {
  action: "cancelled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship created event */
interface WebhookSponsorshipCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship edited event */
interface WebhookSponsorshipEdited {
  action: "edited";
  changes: {
    privacy_level?: {
      /** The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship pending_cancellation event */
interface WebhookSponsorshipPendingCancellation {
  action: "pending_cancellation";
  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
  effective_date?: WebhooksEffectiveDate;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship pending_tier_change event */
interface WebhookSponsorshipPendingTierChange {
  action: "pending_tier_change";
  changes: WebhooksChanges8;
  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
  effective_date?: WebhooksEffectiveDate;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship tier_changed event */
interface WebhookSponsorshipTierChanged {
  action: "tier_changed";
  changes: WebhooksChanges8;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** star created event */
interface WebhookStarCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
  starred_at: string | null;
}

/** star deleted event */
interface WebhookStarDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
  starred_at: any;
}

/** status event */
interface WebhookStatus {
  /** @format uri */
  avatar_url?: string | null;
  /** An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches. */
  branches: {
    commit: {
      sha: string | null;
      /** @format uri */
      url: string | null;
    };
    name: string;
    protected: boolean;
  }[];
  commit: {
    /** User */
    author: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    comments_url: string;
    commit: {
      /** Metaproperties for Git author/committer information. */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      comment_count: number;
      /** Metaproperties for Git author/committer information. */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      message: string;
      tree: {
        sha: string;
        /** @format uri */
        url: string;
      };
      /** @format uri */
      url: string;
      verification: {
        payload: string | null;
        reason:
          | "expired_key"
          | "not_signing_key"
          | "gpgverify_error"
          | "gpgverify_unavailable"
          | "unsigned"
          | "unknown_signature_type"
          | "no_user"
          | "unverified_email"
          | "bad_email"
          | "unknown_key"
          | "malformed_signature"
          | "invalid"
          | "valid"
          | "bad_cert"
          | "ocsp_pending";
        signature: string | null;
        verified: boolean;
        verified_at: string | null;
      };
    };
    /** User */
    committer: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    html_url: string;
    node_id: string;
    parents: {
      /** @format uri */
      html_url: string;
      sha: string;
      /** @format uri */
      url: string;
    }[];
    sha: string;
    /** @format uri */
    url: string;
  };
  context: string;
  created_at: string;
  /** The optional human-readable description added to the status. */
  description: string | null;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** The unique identifier of the status. */
  id: number;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  name: string;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The Commit SHA. */
  sha: string;
  /** The new state. Can be `pending`, `success`, `failure`, or `error`. */
  state: "pending" | "success" | "failure" | "error";
  /** The optional link added to the status. */
  target_url: string | null;
  updated_at: string;
}

/** parent issue added event */
interface WebhookSubIssuesParentIssueAdded {
  action: "parent_issue_added";
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /** A repository on GitHub. */
  parent_issue_repo: Repository;
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** parent issue removed event */
interface WebhookSubIssuesParentIssueRemoved {
  action: "parent_issue_removed";
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /** A repository on GitHub. */
  parent_issue_repo: Repository;
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** sub-issue added event */
interface WebhookSubIssuesSubIssueAdded {
  action: "sub_issue_added";
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /** A repository on GitHub. */
  sub_issue_repo: Repository;
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** sub-issue removed event */
interface WebhookSubIssuesSubIssueRemoved {
  action: "sub_issue_removed";
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /** A repository on GitHub. */
  sub_issue_repo: Repository;
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** team_add event */
interface WebhookTeamAdd {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team added_to_repository event */
interface WebhookTeamAddedToRepository {
  action: "added_to_repository";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team created event */
interface WebhookTeamCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team deleted event */
interface WebhookTeamDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team edited event */
interface WebhookTeamEdited {
  action: "edited";
  /** The changes to the team if the action was `edited`. */
  changes: {
    description?: {
      /** The previous version of the description if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The previous version of the name if the action was `edited`. */
      from: string;
    };
    privacy?: {
      /** The previous version of the team's privacy if the action was `edited`. */
      from: string;
    };
    notification_setting?: {
      /** The previous version of the team's notification setting if the action was `edited`. */
      from: string;
    };
    repository?: {
      permissions: {
        from: {
          /** The previous version of the team member's `admin` permission on a repository, if the action was `edited`. */
          admin?: boolean;
          /** The previous version of the team member's `pull` permission on a repository, if the action was `edited`. */
          pull?: boolean;
          /** The previous version of the team member's `push` permission on a repository, if the action was `edited`. */
          push?: boolean;
        };
      };
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team removed_from_repository event */
interface WebhookTeamRemovedFromRepository {
  action: "removed_from_repository";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** watch started event */
interface WebhookWatchStarted {
  action: "started";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** workflow_dispatch event */
interface WebhookWorkflowDispatch {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  inputs: Record<string, any>;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  ref: string;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: string;
}

/** workflow_job completed event */
interface WebhookWorkflowJobCompleted {
  action: "completed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object. */
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out" | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    /** The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_id: number | null;
    /** The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_name: string | null;
    /** The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_id: number | null;
    /** The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_name: string | null;
    started_at: string;
    /** The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`. */
    status: "queued" | "in_progress" | "completed" | "waiting";
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "queued";
    }[];
    /** @format uri */
    url: string;
  } & {
    check_run_url?: string;
    completed_at?: string;
    conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out";
    /** The time that the job created. */
    created_at?: string;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: (string | null)[];
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status?: string;
    /** The name of the current branch. */
    head_branch?: string | null;
    /** The name of the workflow. */
    workflow_name?: string | null;
    steps?: (object | null)[];
    url?: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_job in_progress event */
interface WebhookWorkflowJobInProgress {
  action: "in_progress";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object. */
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: "success" | "failure" | "cancelled" | "neutral" | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    /** The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_id: number | null;
    /** The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_name: string | null;
    /** The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_id: number | null;
    /** The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_name: string | null;
    started_at: string;
    /** The current status of the job. Can be `queued`, `in_progress`, or `completed`. */
    status: "queued" | "in_progress" | "completed";
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "queued" | "pending";
    }[];
    /** @format uri */
    url: string;
  } & {
    check_run_url?: string;
    completed_at?: string | null;
    conclusion?: string | null;
    /** The time that the job created. */
    created_at?: string;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: string[];
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status: "in_progress" | "completed" | "queued";
    /** The name of the current branch. */
    head_branch?: string | null;
    /** The name of the workflow. */
    workflow_name?: string | null;
    steps: {
      completed_at: string | null;
      conclusion: string | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "pending" | "queued";
    }[];
    url?: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_job queued event */
interface WebhookWorkflowJobQueued {
  action: "queued";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    /** @format date-time */
    started_at: string;
    status: "queued" | "in_progress" | "completed" | "waiting";
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "completed" | "in_progress" | "queued" | "pending";
    }[];
    /** @format uri */
    url: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_job waiting event */
interface WebhookWorkflowJobWaiting {
  action: "waiting";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    /** @format date-time */
    started_at: string;
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    status: "queued" | "in_progress" | "completed" | "waiting";
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "completed" | "in_progress" | "queued" | "pending" | "waiting";
    }[];
    /** @format uri */
    url: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_run completed event */
interface WebhookWorkflowRunCompleted {
  action: "completed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format uri */
    artifacts_url: string;
    /** @format uri */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /** @format uri */
    check_suite_url: string;
    conclusion:
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** Repository Lite */
    head_repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    jobs_url: string;
    /** @format uri */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /** @format uri */
    previous_attempt_url: string | null;
    pull_requests: ({
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    } | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /** Repository Lite */
    repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    /** @format uri */
    workflow_url: string;
    /**
     * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
     * @example "Simple Workflow"
     */
    display_title?: string;
  };
}

/** workflow_run in_progress event */
interface WebhookWorkflowRunInProgress {
  action: "in_progress";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    artifacts_url: string;
    /** @format uri */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /** @format uri */
    check_suite_url: string;
    conclusion:
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** Repository Lite */
    head_repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string | null;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    jobs_url: string;
    /** @format uri */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /** @format uri */
    previous_attempt_url: string | null;
    pull_requests: ({
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    } | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /** Repository Lite */
    repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    /** @format uri */
    workflow_url: string;
  };
}

/** workflow_run requested event */
interface WebhookWorkflowRunRequested {
  action: "requested";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format uri */
    artifacts_url: string;
    /** @format uri */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /** @format uri */
    check_suite_url: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** Repository Lite */
    head_repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    jobs_url: string;
    /** @format uri */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /** @format uri */
    previous_attempt_url: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /** Repository Lite */
    repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    /** @format uri */
    workflow_url: string;
    display_title: string;
  };
}

type Routes = {
  ["GET /"]: { Request: { method?: "GET"; path?: "/" }; Response: Root };
  ["GET /advisories"]: {
    Request: {
      method?: "GET";
      path?: "/advisories";
      query: {
        /** If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. */
        ghsa_id?: string;
        /**
         * If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
         * @default "reviewed"
         */
        type?: "reviewed" | "malware" | "unreviewed";
        /** If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. */
        cve_id?: string;
        /** If specified, only advisories for these ecosystems will be returned. */
        ecosystem?: SecurityAdvisoryEcosystems;
        /** If specified, only advisories with these severities will be returned. */
        severity?: "unknown" | "low" | "medium" | "high" | "critical";
        /**
         * If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
         *
         * Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
         */
        cwes?: string | string[];
        /** Whether to only return advisories that have been withdrawn. */
        is_withdrawn?: boolean;
        /**
         * If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
         * If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.
         *
         * Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
         */
        affects?: string | string[];
        /**
         * If specified, only return advisories that were published on a date or date range.
         *
         * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         */
        published?: string;
        /**
         * If specified, only return advisories that were updated on a date or date range.
         *
         * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         */
        updated?: string;
        /**
         * If specified, only show advisories that were updated or published on a date or date range.
         *
         * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         */
        modified?: string;
        /**
         * If specified, only return advisories that have an EPSS percentage score that matches the provided value.
         * The EPSS percentage represents the likelihood of a CVE being exploited.
         */
        epss_percentage?: string;
        /**
         * If specified, only return advisories that have an EPSS percentile score that matches the provided value.
         * The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.
         */
        epss_percentile?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
        /**
         * The property to sort the results by.
         * @default "published"
         */
        sort?: "updated" | "published" | "epss_percentage" | "epss_percentile";
      };
    };
    Response: GlobalAdvisory[];
  };
  ["GET /advisories/${ghsaId}"]: {
    Request: {
      method?: "GET";
      path?: "/advisories/${ghsaId}";
      typedPath?: `/advisories/${string}`;
      params: {
        /** The GHSA (GitHub Security Advisory) identifier of the advisory. */
        ghsaId: string;
      };
    };
    Response: GlobalAdvisory;
  };
  ["GET /app"]: { Request: { method?: "GET"; path?: "/app" }; Response: Integration };
  ["GET /app/hook/config"]: { Request: { method?: "GET"; path?: "/app/hook/config" }; Response: WebhookConfig };
  ["PATCH /app/hook/config"]: {
    Request: {
      method?: "PATCH";
      path?: "/app/hook/config";
      body: {
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        content_type?: WebhookConfigContentType;
        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
      };
    };
    Response: WebhookConfig;
  };
  ["GET /app/hook/deliveries"]: {
    Request: {
      method?: "GET";
      path?: "/app/hook/deliveries";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        cursor?: string;
      };
    };
    Response: HookDeliveryItem[];
  };
  ["GET /app/hook/deliveries/${deliveryId}"]: {
    Request: {
      method?: "GET";
      path?: "/app/hook/deliveries/${deliveryId}";
      typedPath?: `/app/hook/deliveries/${number}`;
      params: {
        deliveryId: number;
      };
    };
    Response: HookDelivery;
  };
  ["POST /app/hook/deliveries/${deliveryId}/attempts"]: {
    Request: {
      method?: "POST";
      path?: "/app/hook/deliveries/${deliveryId}/attempts";
      typedPath?: `/app/hook/deliveries/${number}/attempts`;
      params: {
        deliveryId: number;
      };
    };
    Response: object;
  };
  ["GET /app/installation-requests"]: {
    Request: {
      method?: "GET";
      path?: "/app/installation-requests";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: IntegrationInstallationRequest[];
  };
  ["GET /app/installations"]: {
    Request: {
      method?: "GET";
      path?: "/app/installations";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        outdated?: string;
      };
    };
    Response: Installation[];
  };
  ["GET /app/installations/${installationId}"]: {
    Request: {
      method?: "GET";
      path?: "/app/installations/${installationId}";
      typedPath?: `/app/installations/${number}`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
      };
    };
    Response: Installation;
  };
  ["DELETE /app/installations/${installationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/app/installations/${installationId}";
      typedPath?: `/app/installations/${number}`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
      };
    };
    Response: void;
  };
  ["POST /app/installations/${installationId}/access_tokens"]: {
    Request: {
      method?: "POST";
      path?: "/app/installations/${installationId}/access_tokens";
      typedPath?: `/app/installations/${number}/access_tokens`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
      };
      body: {
        /** List of repository names that the token should have access to */
        repositories?: string[];
        /**
         * List of repository IDs that the token should have access to
         * @example [1]
         */
        repository_ids?: number[];
        /** The permissions granted to the user access token. */
        permissions?: AppPermissions;
      };
    };
    Response: InstallationToken;
  };
  ["PUT /app/installations/${installationId}/suspended"]: {
    Request: {
      method?: "PUT";
      path?: "/app/installations/${installationId}/suspended";
      typedPath?: `/app/installations/${number}/suspended`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
      };
    };
    Response: void;
  };
  ["DELETE /app/installations/${installationId}/suspended"]: {
    Request: {
      method?: "DELETE";
      path?: "/app/installations/${installationId}/suspended";
      typedPath?: `/app/installations/${number}/suspended`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
      };
    };
    Response: void;
  };
  ["POST /app-manifests/${code}/conversions"]: {
    Request: {
      method?: "POST";
      path?: "/app-manifests/${code}/conversions";
      typedPath?: `/app-manifests/${string}/conversions`;
      params: {
        code: string;
      };
    };
    Response: Integration & {
      client_id: string;
      client_secret: string;
      webhook_secret: string | null;
      pem: string;
      [key: string]: any;
    };
  };
  ["DELETE /applications/${clientId}/grant"]: {
    Request: {
      method?: "DELETE";
      path?: "/applications/${clientId}/grant";
      typedPath?: `/applications/${string}/grant`;
      params: {
        /** The client ID of the GitHub app. */
        clientId: string;
      };
      body: {
        /** The OAuth access token used to authenticate to the GitHub API. */
        access_token: string;
      };
    };
    Response: void;
  };
  ["POST /applications/${clientId}/token"]: {
    Request: {
      method?: "POST";
      path?: "/applications/${clientId}/token";
      typedPath?: `/applications/${string}/token`;
      params: {
        /** The client ID of the GitHub app. */
        clientId: string;
      };
      body: {
        /** The access_token of the OAuth or GitHub application. */
        access_token: string;
      };
    };
    Response: Authorization;
  };
  ["PATCH /applications/${clientId}/token"]: {
    Request: {
      method?: "PATCH";
      path?: "/applications/${clientId}/token";
      typedPath?: `/applications/${string}/token`;
      params: {
        /** The client ID of the GitHub app. */
        clientId: string;
      };
      body: {
        /** The access_token of the OAuth or GitHub application. */
        access_token: string;
      };
    };
    Response: Authorization;
  };
  ["DELETE /applications/${clientId}/token"]: {
    Request: {
      method?: "DELETE";
      path?: "/applications/${clientId}/token";
      typedPath?: `/applications/${string}/token`;
      params: {
        /** The client ID of the GitHub app. */
        clientId: string;
      };
      body: {
        /** The OAuth access token used to authenticate to the GitHub API. */
        access_token: string;
      };
    };
    Response: void;
  };
  ["POST /applications/${clientId}/token/scoped"]: {
    Request: {
      method?: "POST";
      path?: "/applications/${clientId}/token/scoped";
      typedPath?: `/applications/${string}/token/scoped`;
      params: {
        /** The client ID of the GitHub app. */
        clientId: string;
      };
      body: {
        /**
         * The access token used to authenticate to the GitHub API.
         * @example "e72e16c7e42f292c6912e7710c838347ae178b4a"
         */
        access_token: string;
        /**
         * The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
         * @example "octocat"
         */
        target?: string;
        /**
         * The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
         * @example 1
         */
        target_id?: number;
        /** The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified. */
        repositories?: string[];
        /**
         * The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
         * @example [1]
         */
        repository_ids?: number[];
        /** The permissions granted to the user access token. */
        permissions?: AppPermissions;
      };
    };
    Response: Authorization;
  };
  ["GET /apps/${appSlug}"]: {
    Request: {
      method?: "GET";
      path?: "/apps/${appSlug}";
      typedPath?: `/apps/${string}`;
      params: {
        appSlug: string;
      };
    };
    Response: Integration;
  };
  ["GET /assignments/${assignmentId}"]: {
    Request: {
      method?: "GET";
      path?: "/assignments/${assignmentId}";
      typedPath?: `/assignments/${number}`;
      params: {
        /** The unique identifier of the classroom assignment. */
        assignmentId: number;
      };
    };
    Response: ClassroomAssignment;
  };
  ["GET /assignments/${assignmentId}/accepted_assignments"]: {
    Request: {
      method?: "GET";
      path?: "/assignments/${assignmentId}/accepted_assignments";
      typedPath?: `/assignments/${number}/accepted_assignments`;
      params: {
        /** The unique identifier of the classroom assignment. */
        assignmentId: number;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: ClassroomAcceptedAssignment[];
  };
  ["GET /assignments/${assignmentId}/grades"]: {
    Request: {
      method?: "GET";
      path?: "/assignments/${assignmentId}/grades";
      typedPath?: `/assignments/${number}/grades`;
      params: {
        /** The unique identifier of the classroom assignment. */
        assignmentId: number;
      };
    };
    Response: ClassroomAssignmentGrade[];
  };
  ["GET /classrooms"]: {
    Request: {
      method?: "GET";
      path?: "/classrooms";
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: SimpleClassroom[];
  };
  ["GET /classrooms/${classroomId}"]: {
    Request: {
      method?: "GET";
      path?: "/classrooms/${classroomId}";
      typedPath?: `/classrooms/${number}`;
      params: {
        /** The unique identifier of the classroom. */
        classroomId: number;
      };
    };
    Response: Classroom;
  };
  ["GET /classrooms/${classroomId}/assignments"]: {
    Request: {
      method?: "GET";
      path?: "/classrooms/${classroomId}/assignments";
      typedPath?: `/classrooms/${number}/assignments`;
      params: {
        /** The unique identifier of the classroom. */
        classroomId: number;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: SimpleClassroomAssignment[];
  };
  ["GET /codes_of_conduct"]: { Request: { method?: "GET"; path?: "/codes_of_conduct" }; Response: CodeOfConduct[] };
  ["GET /codes_of_conduct/${key}"]: {
    Request: {
      method?: "GET";
      path?: "/codes_of_conduct/${key}";
      typedPath?: `/codes_of_conduct/${string}`;
      params: {
        key: string;
      };
    };
    Response: CodeOfConduct;
  };
  ["POST /credentials/revoke"]: {
    Request: {
      method?: "POST";
      path?: "/credentials/revoke";
      body: {
        /**
         * A list of credentials to be revoked, up to 1000 per request.
         * @maxItems 1000
         * @minItems 1
         */
        credentials: string[];
      };
    };
    Response: object;
  };
  ["GET /emojis"]: { Request: { method?: "GET"; path?: "/emojis" }; Response: Record<string, string> };
  ["GET /enterprises/${enterprise}/code-security/configurations"]: {
    Request: {
      method?: "GET";
      path?: "/enterprises/${enterprise}/code-security/configurations";
      typedPath?: `/enterprises/${string}/code-security/configurations`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      };
    };
    Response: CodeSecurityConfiguration[];
  };
  ["POST /enterprises/${enterprise}/code-security/configurations"]: {
    Request: {
      method?: "POST";
      path?: "/enterprises/${enterprise}/code-security/configurations";
      typedPath?: `/enterprises/${string}/code-security/configurations`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
      };
      body: {
        /** The name of the code security configuration. Must be unique within the enterprise. */
        name: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description: string;
        /**
         * The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         * @default "disabled"
         */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /**
         * The enablement status of Dependency Graph
         * @default "enabled"
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Automatic dependency submission
         * @default "disabled"
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /**
           * Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           * @default false
           */
          labeled_runners?: boolean;
        };
        /**
         * The enablement status of Dependabot alerts
         * @default "disabled"
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Dependabot security updates
         * @default "disabled"
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of code scanning default setup
         * @default "disabled"
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning
         * @default "disabled"
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning push protection
         * @default "disabled"
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning validity checks
         * @default "disabled"
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning non provider patterns
         * @default "disabled"
         */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning delegated alert dismissal
         * @default "disabled"
         */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of private vulnerability reporting
         * @default "disabled"
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /**
         * The enforcement status for a security configuration
         * @default "enforced"
         */
        enforcement?: "enforced" | "unenforced";
      };
    };
    Response: CodeSecurityConfiguration;
  };
  ["GET /enterprises/${enterprise}/code-security/configurations/defaults"]: {
    Request: {
      method?: "GET";
      path?: "/enterprises/${enterprise}/code-security/configurations/defaults";
      typedPath?: `/enterprises/${string}/code-security/configurations/defaults`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
      };
    };
    Response: CodeSecurityDefaultConfigurations;
  };
  ["GET /enterprises/${enterprise}/code-security/configurations/${configurationId}"]: {
    Request: {
      method?: "GET";
      path?: "/enterprises/${enterprise}/code-security/configurations/${configurationId}";
      typedPath?: `/enterprises/${string}/code-security/configurations/${number}`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
    };
    Response: CodeSecurityConfiguration;
  };
  ["PATCH /enterprises/${enterprise}/code-security/configurations/${configurationId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/enterprises/${enterprise}/code-security/configurations/${configurationId}";
      typedPath?: `/enterprises/${string}/code-security/configurations/${number}`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      body: {
        /** The name of the code security configuration. Must be unique across the enterprise. */
        name?: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description?: string;
        /** The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features. */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /** The enablement status of Dependency Graph */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Automatic dependency submission */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /** Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
          labeled_runners?: boolean;
        };
        /** The enablement status of Dependabot alerts */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Dependabot security updates */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /** The enablement status of code scanning default setup */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning push protection */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning validity checks */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning non-provider patterns */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning delegated alert dismissal
         * @default "disabled"
         */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of private vulnerability reporting */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /** The enforcement status for a security configuration */
        enforcement?: "enforced" | "unenforced";
      };
    };
    Response: CodeSecurityConfiguration;
  };
  ["DELETE /enterprises/${enterprise}/code-security/configurations/${configurationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/enterprises/${enterprise}/code-security/configurations/${configurationId}";
      typedPath?: `/enterprises/${string}/code-security/configurations/${number}`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
    };
    Response: any;
  };
  ["POST /enterprises/${enterprise}/code-security/configurations/${configurationId}/attach"]: {
    Request: {
      method?: "POST";
      path?: "/enterprises/${enterprise}/code-security/configurations/${configurationId}/attach";
      typedPath?: `/enterprises/${string}/code-security/configurations/${number}/attach`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      body: {
        /** The type of repositories to attach the configuration to. */
        scope: "all" | "all_without_configurations";
      };
    };
    Response: object;
  };
  ["PUT /enterprises/${enterprise}/code-security/configurations/${configurationId}/defaults"]: {
    Request: {
      method?: "PUT";
      path?: "/enterprises/${enterprise}/code-security/configurations/${configurationId}/defaults";
      typedPath?: `/enterprises/${string}/code-security/configurations/${number}/defaults`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      body: {
        /** Specify which types of repository this security configuration should be applied to by default. */
        default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
      };
    };
    Response: {
      /** Specifies which types of repository this security configuration is applied to by default. */
      default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
      /** A code security configuration */
      configuration?: CodeSecurityConfiguration;
    };
  };
  ["GET /enterprises/${enterprise}/code-security/configurations/${configurationId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/enterprises/${enterprise}/code-security/configurations/${configurationId}/repositories";
      typedPath?: `/enterprises/${string}/code-security/configurations/${number}/repositories`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
         *
         * Can be: `all`, `attached`, `attaching`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
         * @default "all"
         */
        status?: string;
      };
    };
    Response: CodeSecurityConfigurationRepositories[];
  };
  ["GET /enterprises/${enterprise}/dependabot/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/enterprises/${enterprise}/dependabot/alerts";
      typedPath?: `/enterprises/${string}/dependabot/alerts`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
      };
      query: {
        /**
         * A comma-separated list of states. If specified, only alerts with these states will be returned.
         *
         * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
         */
        state?: string;
        /**
         * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
         *
         * Can be: `low`, `medium`, `high`, `critical`
         */
        severity?: string;
        /**
         * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
         *
         * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
         */
        ecosystem?: string;
        /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
        package?: string;
        /**
         * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
         * - An exact number (`n`)
         * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
         * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
         *
         * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
         */
        epss_percentage?: string;
        /**
         * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
         * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
         */
        has?: string | "patch"[];
        /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
        scope?: "development" | "runtime";
        /**
         * The property by which to sort the results.
         * `created` means when the alert was created.
         * `updated` means when the alert's state last changed.
         * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
         * @default "created"
         */
        sort?: "created" | "updated" | "epss_percentage";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
         * This parameter must not be used in combination with `last`.
         * Instead, use `per_page` in combination with `after` to fetch the first page of results.
         * @min 1
         * @max 100
         * @default 30
         */
        first?: number;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
         * This parameter must not be used in combination with `first`.
         * Instead, use `per_page` in combination with `before` to fetch the last page of results.
         * @min 1
         * @max 100
         */
        last?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: DependabotAlertWithRepository[];
  };
  ["GET /enterprises/${enterprise}/secret-scanning/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/enterprises/${enterprise}/secret-scanning/alerts";
      typedPath?: `/enterprises/${string}/secret-scanning/alerts`;
      params: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
      };
      query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
        /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
        secret_type?: string;
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        resolution?: string;
        /**
         * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
        validity?: string;
        /**
         * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
         * @default false
         */
        is_publicly_leaked?: boolean;
        /**
         * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
         * @default false
         */
        is_multi_repo?: boolean;
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      };
    };
    Response: OrganizationSecretScanningAlert[];
  };
  ["GET /events"]: {
    Request: {
      method?: "GET";
      path?: "/events";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /feeds"]: { Request: { method?: "GET"; path?: "/feeds" }; Response: Feed };
  ["GET /gists"]: {
    Request: {
      method?: "GET";
      path?: "/gists";
      query: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: BaseGist[];
  };
  ["POST /gists"]: {
    Request: {
      method?: "POST";
      path?: "/gists";
      body: {
        /**
         * Description of the gist
         * @example "Example Ruby script"
         */
        description?: string;
        /**
         * Names and content for the files that make up the gist
         * @example {"hello.rb":{"content":"puts \"Hello, World!\""}}
         */
        files: Record<
          string,
          {
            /** Content of the file */
            content: string;
          }
        >;
        /** Flag indicating whether the gist is public */
        public?: boolean | "true" | "false";
      };
    };
    Response: GistSimple;
  };
  ["GET /gists/public"]: {
    Request: {
      method?: "GET";
      path?: "/gists/public";
      query: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: BaseGist[];
  };
  ["GET /gists/starred"]: {
    Request: {
      method?: "GET";
      path?: "/gists/starred";
      query: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: BaseGist[];
  };
  ["GET /gists/${gistId}"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}";
      typedPath?: `/gists/${string}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
    };
    Response: GistSimple;
  };
  ["PATCH /gists/${gistId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/gists/${gistId}";
      typedPath?: `/gists/${string}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
      body: {
        /**
         * The description of the gist.
         * @example "Example Ruby script"
         */
        description?: string;
        /**
         * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
         * (including extension) of the targeted gist file. For example: `hello.py`.
         *
         * To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
         * deleted if the specified object does not contain at least one of `content` or `filename`.
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: Record<
          string,
          {
            /** The new content of the file. */
            content?: string;
            /** The new filename for the file. */
            filename?: string | null;
          }
        >;
      };
    };
    Response: GistSimple;
  };
  ["DELETE /gists/${gistId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/gists/${gistId}";
      typedPath?: `/gists/${string}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
    };
    Response: void;
  };
  ["GET /gists/${gistId}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}/comments";
      typedPath?: `/gists/${string}/comments`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: GistComment[];
  };
  ["POST /gists/${gistId}/comments"]: {
    Request: {
      method?: "POST";
      path?: "/gists/${gistId}/comments";
      typedPath?: `/gists/${string}/comments`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
      body: {
        /**
         * The comment text.
         * @maxLength 65535
         * @example "Body of the attachment"
         */
        body: string;
      };
    };
    Response: GistComment;
  };
  ["GET /gists/${gistId}/comments/${commentId}"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}/comments/${commentId}";
      typedPath?: `/gists/${string}/comments/${number}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: GistComment;
  };
  ["PATCH /gists/${gistId}/comments/${commentId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/gists/${gistId}/comments/${commentId}";
      typedPath?: `/gists/${string}/comments/${number}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /**
         * The comment text.
         * @maxLength 65535
         * @example "Body of the attachment"
         */
        body: string;
      };
    };
    Response: GistComment;
  };
  ["DELETE /gists/${gistId}/comments/${commentId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/gists/${gistId}/comments/${commentId}";
      typedPath?: `/gists/${string}/comments/${number}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: void;
  };
  ["GET /gists/${gistId}/commits"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}/commits";
      typedPath?: `/gists/${string}/commits`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: GistCommit[];
  };
  ["GET /gists/${gistId}/forks"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}/forks";
      typedPath?: `/gists/${string}/forks`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: GistSimple[];
  };
  ["POST /gists/${gistId}/forks"]: {
    Request: {
      method?: "POST";
      path?: "/gists/${gistId}/forks";
      typedPath?: `/gists/${string}/forks`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
    };
    Response: BaseGist;
  };
  ["GET /gists/${gistId}/star"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}/star";
      typedPath?: `/gists/${string}/star`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
    };
    Response: void;
  };
  ["PUT /gists/${gistId}/star"]: {
    Request: {
      method?: "PUT";
      path?: "/gists/${gistId}/star";
      typedPath?: `/gists/${string}/star`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
    };
    Response: void;
  };
  ["DELETE /gists/${gistId}/star"]: {
    Request: {
      method?: "DELETE";
      path?: "/gists/${gistId}/star";
      typedPath?: `/gists/${string}/star`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
      };
    };
    Response: void;
  };
  ["GET /gists/${gistId}/${sha}"]: {
    Request: {
      method?: "GET";
      path?: "/gists/${gistId}/${sha}";
      typedPath?: `/gists/${string}/${string}`;
      params: {
        /** The unique identifier of the gist. */
        gistId: string;
        sha: string;
      };
    };
    Response: GistSimple;
  };
  ["GET /gitignore/templates"]: { Request: { method?: "GET"; path?: "/gitignore/templates" }; Response: string[] };
  ["GET /gitignore/templates/${name}"]: {
    Request: {
      method?: "GET";
      path?: "/gitignore/templates/${name}";
      typedPath?: `/gitignore/templates/${string}`;
      params: {
        name: string;
      };
    };
    Response: GitignoreTemplate;
  };
  ["GET /installation/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/installation/repositories";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: Repository[];
      /** @example "selected" */
      repository_selection?: string;
    };
  };
  ["DELETE /installation/token"]: { Request: { method?: "DELETE"; path?: "/installation/token" }; Response: void };
  ["GET /issues"]: {
    Request: {
      method?: "GET";
      path?: "/issues";
      query: {
        /**
         * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        collab?: boolean;
        orgs?: boolean;
        owned?: boolean;
        pulls?: boolean;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Issue[];
  };
  ["GET /licenses"]: {
    Request: {
      method?: "GET";
      path?: "/licenses";
      query: {
        featured?: boolean;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: LicenseSimple[];
  };
  ["GET /licenses/${license}"]: {
    Request: {
      method?: "GET";
      path?: "/licenses/${license}";
      typedPath?: `/licenses/${string}`;
      params: {
        license: string;
      };
    };
    Response: License;
  };
  ["POST /markdown"]: {
    Request: {
      method?: "POST";
      path?: "/markdown";
      body: {
        /** The Markdown text to render in HTML. */
        text: string;
        /**
         * The rendering mode.
         * @default "markdown"
         * @example "markdown"
         */
        mode?: "markdown" | "gfm";
        /** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
        context?: string;
      };
    };
    Response: WebhookConfigUrl;
  };
  ["POST /markdown/raw"]: {
    Request: { method?: "POST"; path?: "/markdown/raw"; body: WebhookConfigUrl };
    Response: WebhookConfigUrl;
  };
  ["GET /marketplace_listing/accounts/${accountId}"]: {
    Request: {
      method?: "GET";
      path?: "/marketplace_listing/accounts/${accountId}";
      typedPath?: `/marketplace_listing/accounts/${number}`;
      params: {
        /** account_id parameter */
        accountId: number;
      };
    };
    Response: MarketplacePurchase;
  };
  ["GET /marketplace_listing/plans"]: {
    Request: {
      method?: "GET";
      path?: "/marketplace_listing/plans";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MarketplaceListingPlan[];
  };
  ["GET /marketplace_listing/plans/${planId}/accounts"]: {
    Request: {
      method?: "GET";
      path?: "/marketplace_listing/plans/${planId}/accounts";
      typedPath?: `/marketplace_listing/plans/${number}/accounts`;
      params: {
        /** The unique identifier of the plan. */
        planId: number;
      };
      query: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MarketplacePurchase[];
  };
  ["GET /marketplace_listing/stubbed/accounts/${accountId}"]: {
    Request: {
      method?: "GET";
      path?: "/marketplace_listing/stubbed/accounts/${accountId}";
      typedPath?: `/marketplace_listing/stubbed/accounts/${number}`;
      params: {
        /** account_id parameter */
        accountId: number;
      };
    };
    Response: MarketplacePurchase;
  };
  ["GET /marketplace_listing/stubbed/plans"]: {
    Request: {
      method?: "GET";
      path?: "/marketplace_listing/stubbed/plans";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MarketplaceListingPlan[];
  };
  ["GET /marketplace_listing/stubbed/plans/${planId}/accounts"]: {
    Request: {
      method?: "GET";
      path?: "/marketplace_listing/stubbed/plans/${planId}/accounts";
      typedPath?: `/marketplace_listing/stubbed/plans/${number}/accounts`;
      params: {
        /** The unique identifier of the plan. */
        planId: number;
      };
      query: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MarketplacePurchase[];
  };
  ["GET /meta"]: { Request: { method?: "GET"; path?: "/meta" }; Response: ApiOverview };
  ["GET /networks/${owner}/${repo}/events"]: {
    Request: {
      method?: "GET";
      path?: "/networks/${owner}/${repo}/events";
      typedPath?: `/networks/${string}/${string}/events`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /notifications"]: {
    Request: {
      method?: "GET";
      path?: "/notifications";
      query: {
        /**
         * If `true`, show notifications marked as read.
         * @default false
         */
        all?: boolean;
        /**
         * If `true`, only shows notifications in which the user is directly participating or mentioned.
         * @default false
         */
        participating?: boolean;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        before?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 50). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 50
         */
        per_page?: number;
      };
    };
    Response: Thread[];
  };
  ["PUT /notifications"]: {
    Request: {
      method?: "PUT";
      path?: "/notifications";
      body: {
        /**
         * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
         * @format date-time
         */
        last_read_at?: string;
        /** Whether the notification has been read. */
        read?: boolean;
      };
    };
    Response: {
      message?: string;
    };
  };
  ["GET /notifications/threads/${threadId}"]: {
    Request: {
      method?: "GET";
      path?: "/notifications/threads/${threadId}";
      typedPath?: `/notifications/threads/${number}`;
      params: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). */
        threadId: number;
      };
    };
    Response: Thread;
  };
  ["PATCH /notifications/threads/${threadId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/notifications/threads/${threadId}";
      typedPath?: `/notifications/threads/${number}`;
      params: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). */
        threadId: number;
      };
    };
    Response: void;
  };
  ["DELETE /notifications/threads/${threadId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/notifications/threads/${threadId}";
      typedPath?: `/notifications/threads/${number}`;
      params: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). */
        threadId: number;
      };
    };
    Response: void;
  };
  ["GET /notifications/threads/${threadId}/subscription"]: {
    Request: {
      method?: "GET";
      path?: "/notifications/threads/${threadId}/subscription";
      typedPath?: `/notifications/threads/${number}/subscription`;
      params: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). */
        threadId: number;
      };
    };
    Response: ThreadSubscription;
  };
  ["PUT /notifications/threads/${threadId}/subscription"]: {
    Request: {
      method?: "PUT";
      path?: "/notifications/threads/${threadId}/subscription";
      typedPath?: `/notifications/threads/${number}/subscription`;
      params: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). */
        threadId: number;
      };
      body: {
        /**
         * Whether to block all notifications from a thread.
         * @default false
         */
        ignored?: boolean;
      };
    };
    Response: ThreadSubscription;
  };
  ["DELETE /notifications/threads/${threadId}/subscription"]: {
    Request: {
      method?: "DELETE";
      path?: "/notifications/threads/${threadId}/subscription";
      typedPath?: `/notifications/threads/${number}/subscription`;
      params: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). */
        threadId: number;
      };
    };
    Response: void;
  };
  ["GET /octocat"]: {
    Request: {
      method?: "GET";
      path?: "/octocat";
      query: {
        /** The words to show in Octocat's speech bubble */
        s?: string;
      };
    };
    Response: WebhookConfigUrl;
  };
  ["GET /organizations"]: {
    Request: {
      method?: "GET";
      path?: "/organizations";
      query: {
        /** An organization ID. Only return organizations with an ID greater than this ID. */
        since?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: OrganizationSimple[];
  };
  ["GET /organizations/${org}/dependabot/repository-access"]: {
    Request: {
      method?: "GET";
      path?: "/organizations/${org}/dependabot/repository-access";
      typedPath?: `/organizations/${string}/dependabot/repository-access`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The page number of results to fetch.
         * @min 1
         * @default 1
         */
        page?: number;
        /**
         * Number of results per page.
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: DependabotRepositoryAccessDetails;
  };
  ["PATCH /organizations/${org}/dependabot/repository-access"]: {
    Request: {
      method?: "PATCH";
      path?: "/organizations/${org}/dependabot/repository-access";
      typedPath?: `/organizations/${string}/dependabot/repository-access`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** List of repository IDs to add. */
        repository_ids_to_add?: number[];
        /** List of repository IDs to remove. */
        repository_ids_to_remove?: number[];
      };
    };
    Response: void;
  };
  ["PUT /organizations/${org}/dependabot/repository-access/default-level"]: {
    Request: {
      method?: "PUT";
      path?: "/organizations/${org}/dependabot/repository-access/default-level";
      typedPath?: `/organizations/${string}/dependabot/repository-access/default-level`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The default repository access level for Dependabot updates.
         * @example "internal"
         */
        default_level: "public" | "internal";
      };
    };
    Response: void;
  };
  ["GET /organizations/${org}/settings/billing/usage"]: {
    Request: {
      method?: "GET";
      path?: "/organizations/${org}/settings/billing/usage";
      typedPath?: `/organizations/${string}/settings/billing/usage`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** If specified, only return results for a single year. The value of `year` is an integer with four digits representing a year. For example, `2025`. Default value is the current year. */
        year?: number;
        /** If specified, only return results for a single month. The value of `month` is an integer between `1` and `12`. If no year is specified the default `year` is used. */
        month?: number;
        /** If specified, only return results for a single day. The value of `day` is an integer between `1` and `31`. If no `year` or `month` is specified, the default `year` and `month` are used. */
        day?: number;
        /** If specified, only return results for a single hour. The value of `hour` is an integer between `0` and `23`. If no `year`, `month`, or `day` is specified, the default `year`, `month`, and `day` are used. */
        hour?: number;
      };
    };
    Response: BillingUsageReport;
  };
  ["GET /orgs/${org}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}";
      typedPath?: `/orgs/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: OrganizationFull;
  };
  ["PATCH /orgs/${org}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}";
      typedPath?: `/orgs/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Billing email address. This address is not publicized. */
        billing_email?: string;
        /** The company name. */
        company?: string;
        /** The publicly visible email address. */
        email?: string;
        /** The Twitter username of the company. */
        twitter_username?: string;
        /** The location. */
        location?: string;
        /** The shorthand name of the company. */
        name?: string;
        /** The description of the company. The maximum size is 160 characters. */
        description?: string;
        /** Whether an organization can use organization projects. */
        has_organization_projects?: boolean;
        /** Whether repositories that belong to the organization can use repository projects. */
        has_repository_projects?: boolean;
        /**
         * Default permission level members have for organization repositories.
         * @default "read"
         */
        default_repository_permission?: "read" | "write" | "admin" | "none";
        /**
         * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
         * @default true
         */
        members_can_create_repositories?: boolean;
        /** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
        members_can_create_internal_repositories?: boolean;
        /** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
        members_can_create_private_repositories?: boolean;
        /** Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
        members_can_create_public_repositories?: boolean;
        /**
         * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
         * **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
         */
        members_allowed_repository_creation_type?: "all" | "private" | "none";
        /**
         * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_pages?: boolean;
        /**
         * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_public_pages?: boolean;
        /**
         * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_private_pages?: boolean;
        /**
         * Whether organization members can fork private organization repositories.
         * @default false
         */
        members_can_fork_private_repositories?: boolean;
        /**
         * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
         * @default false
         */
        web_commit_signoff_required?: boolean;
        /** @example ""http://github.blog"" */
        blog?: string;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        advanced_security_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependabot_alerts_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependabot_security_updates_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependency_graph_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        secret_scanning_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
        /** Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */
        secret_scanning_push_protection_custom_link_enabled?: boolean;
        /** If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret. */
        secret_scanning_push_protection_custom_link?: string;
        /** Controls whether or not deploy keys may be added and used for repositories in the organization. */
        deploy_keys_enabled_for_repositories?: boolean;
      };
    };
    Response: OrganizationFull;
  };
  ["DELETE /orgs/${org}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}";
      typedPath?: `/orgs/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: object;
  };
  ["GET /orgs/${org}/actions/cache/usage"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/cache/usage";
      typedPath?: `/orgs/${string}/actions/cache/usage`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: ActionsCacheUsageOrgEnterprise;
  };
  ["GET /orgs/${org}/actions/cache/usage-by-repository"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/cache/usage-by-repository";
      typedPath?: `/orgs/${string}/actions/cache/usage-by-repository`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      repository_cache_usages: ActionsCacheUsageByRepository[];
    };
  };
  ["GET /orgs/${org}/actions/hosted-runners"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners";
      typedPath?: `/orgs/${string}/actions/hosted-runners`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      runners: ActionsHostedRunner[];
    };
  };
  ["POST /orgs/${org}/actions/hosted-runners"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/hosted-runners";
      typedPath?: `/orgs/${string}/actions/hosted-runners`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name: string;
        /** The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`. */
        image: {
          /** The unique identifier of the runner image. */
          id?: string;
          /** The source of the runner image. */
          source?: "github" | "partner" | "custom";
        };
        /** The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes` */
        size: string;
        /** The existing runner group to add this runner to. */
        runner_group_id: number;
        /** The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost. */
        maximum_runners?: number;
        /** Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits` */
        enable_static_ip?: boolean;
      };
    };
    Response: ActionsHostedRunner;
  };
  ["GET /orgs/${org}/actions/hosted-runners/images/github-owned"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners/images/github-owned";
      typedPath?: `/orgs/${string}/actions/hosted-runners/images/github-owned`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: {
      total_count: number;
      images: ActionsHostedRunnerImage[];
    };
  };
  ["GET /orgs/${org}/actions/hosted-runners/images/partner"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners/images/partner";
      typedPath?: `/orgs/${string}/actions/hosted-runners/images/partner`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: {
      total_count: number;
      images: ActionsHostedRunnerImage[];
    };
  };
  ["GET /orgs/${org}/actions/hosted-runners/limits"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners/limits";
      typedPath?: `/orgs/${string}/actions/hosted-runners/limits`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: ActionsHostedRunnerLimits;
  };
  ["GET /orgs/${org}/actions/hosted-runners/machine-sizes"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners/machine-sizes";
      typedPath?: `/orgs/${string}/actions/hosted-runners/machine-sizes`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: {
      total_count: number;
      machine_specs: ActionsHostedRunnerMachineSpec[];
    };
  };
  ["GET /orgs/${org}/actions/hosted-runners/platforms"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners/platforms";
      typedPath?: `/orgs/${string}/actions/hosted-runners/platforms`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: {
      total_count: number;
      platforms: string[];
    };
  };
  ["GET /orgs/${org}/actions/hosted-runners/${hostedRunnerId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/hosted-runners/${hostedRunnerId}";
      typedPath?: `/orgs/${string}/actions/hosted-runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the GitHub-hosted runner. */
        hostedRunnerId: number;
      };
    };
    Response: ActionsHostedRunner;
  };
  ["PATCH /orgs/${org}/actions/hosted-runners/${hostedRunnerId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/actions/hosted-runners/${hostedRunnerId}";
      typedPath?: `/orgs/${string}/actions/hosted-runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the GitHub-hosted runner. */
        hostedRunnerId: number;
      };
      body: {
        /** Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name?: string;
        /** The existing runner group to add this runner to. */
        runner_group_id?: number;
        /** The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost. */
        maximum_runners?: number;
        /** Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits` */
        enable_static_ip?: boolean;
      };
    };
    Response: ActionsHostedRunner;
  };
  ["DELETE /orgs/${org}/actions/hosted-runners/${hostedRunnerId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/hosted-runners/${hostedRunnerId}";
      typedPath?: `/orgs/${string}/actions/hosted-runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the GitHub-hosted runner. */
        hostedRunnerId: number;
      };
    };
    Response: ActionsHostedRunner;
  };
  ["GET /orgs/${org}/actions/oidc/customization/sub"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/oidc/customization/sub";
      typedPath?: `/orgs/${string}/actions/oidc/customization/sub`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: OidcCustomSub;
  };
  ["PUT /orgs/${org}/actions/oidc/customization/sub"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/oidc/customization/sub";
      typedPath?: `/orgs/${string}/actions/oidc/customization/sub`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: OidcCustomSub;
    };
    Response: EmptyObject;
  };
  ["GET /orgs/${org}/actions/permissions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/permissions";
      typedPath?: `/orgs/${string}/actions/permissions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: ActionsOrganizationPermissions;
  };
  ["PUT /orgs/${org}/actions/permissions"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/permissions";
      typedPath?: `/orgs/${string}/actions/permissions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
        enabled_repositories: EnabledRepositories;
        /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
        allowed_actions?: AllowedActions;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/permissions/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/permissions/repositories";
      typedPath?: `/orgs/${string}/actions/permissions/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: Repository[];
    };
  };
  ["PUT /orgs/${org}/actions/permissions/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/permissions/repositories";
      typedPath?: `/orgs/${string}/actions/permissions/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** List of repository IDs to enable for GitHub Actions. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/actions/permissions/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/permissions/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/permissions/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the repository. */
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/actions/permissions/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/permissions/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/permissions/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the repository. */
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/permissions/selected-actions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/permissions/selected-actions";
      typedPath?: `/orgs/${string}/actions/permissions/selected-actions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: SelectedActions;
  };
  ["PUT /orgs/${org}/actions/permissions/selected-actions"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/permissions/selected-actions";
      typedPath?: `/orgs/${string}/actions/permissions/selected-actions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: SelectedActions;
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/permissions/workflow"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/permissions/workflow";
      typedPath?: `/orgs/${string}/actions/permissions/workflow`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: ActionsGetDefaultWorkflowPermissions;
  };
  ["PUT /orgs/${org}/actions/permissions/workflow"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/permissions/workflow";
      typedPath?: `/orgs/${string}/actions/permissions/workflow`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: ActionsSetDefaultWorkflowPermissions;
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/runner-groups"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runner-groups";
      typedPath?: `/orgs/${string}/actions/runner-groups`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Only return runner groups that are allowed to be used by this repository. */
        visible_to_repository?: string;
      };
    };
    Response: {
      total_count: number;
      runner_groups: RunnerGroupsOrg[];
    };
  };
  ["POST /orgs/${org}/actions/runner-groups"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/runner-groups";
      typedPath?: `/orgs/${string}/actions/runner-groups`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Name of the runner group. */
        name: string;
        /**
         * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
         * @default "all"
         */
        visibility?: "selected" | "all" | "private";
        /** List of repository IDs that can access the runner group. */
        selected_repository_ids?: number[];
        /** List of runner IDs to add to the runner group. */
        runners?: number[];
        /**
         * Whether the runner group can be used by `public` repositories.
         * @default false
         */
        allows_public_repositories?: boolean;
        /**
         * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
         * @default false
         */
        restricted_to_workflows?: boolean;
        /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
        selected_workflows?: string[];
        /** The identifier of a hosted compute network configuration. */
        network_configuration_id?: string;
      };
    };
    Response: RunnerGroupsOrg;
  };
  ["GET /orgs/${org}/actions/runner-groups/${runnerGroupId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
    };
    Response: RunnerGroupsOrg;
  };
  ["PATCH /orgs/${org}/actions/runner-groups/${runnerGroupId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
      body: {
        /** Name of the runner group. */
        name: string;
        /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. */
        visibility?: "selected" | "all" | "private";
        /**
         * Whether the runner group can be used by `public` repositories.
         * @default false
         */
        allows_public_repositories?: boolean;
        /**
         * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
         * @default false
         */
        restricted_to_workflows?: boolean;
        /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
        selected_workflows?: string[];
        /** The identifier of a hosted compute network configuration. */
        network_configuration_id?: string | null;
      };
    };
    Response: RunnerGroupsOrg;
  };
  ["DELETE /orgs/${org}/actions/runner-groups/${runnerGroupId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/runner-groups/${runnerGroupId}/hosted-runners"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/hosted-runners";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/hosted-runners`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      runners: ActionsHostedRunner[];
    };
  };
  ["GET /orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: MinimalRepository[];
    };
  };
  ["PUT /orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
      body: {
        /** List of repository IDs that can access the runner group. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
        /** The unique identifier of the repository. */
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
        /** The unique identifier of the repository. */
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/runner-groups/${runnerGroupId}/runners"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/runners`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      runners: Runner[];
    };
  };
  ["PUT /orgs/${org}/actions/runner-groups/${runnerGroupId}/runners"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/runners`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
      };
      body: {
        /** List of runner IDs to add to the runner group. */
        runners: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}";
      typedPath?: `/orgs/${string}/actions/runner-groups/${number}/runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner group. */
        runnerGroupId: number;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/runners"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runners";
      typedPath?: `/orgs/${string}/actions/runners`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The name of a self-hosted runner. */
        name?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      runners: Runner[];
    };
  };
  ["GET /orgs/${org}/actions/runners/downloads"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runners/downloads";
      typedPath?: `/orgs/${string}/actions/runners/downloads`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: RunnerApplication[];
  };
  ["POST /orgs/${org}/actions/runners/generate-jitconfig"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/runners/generate-jitconfig";
      typedPath?: `/orgs/${string}/actions/runners/generate-jitconfig`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the new runner. */
        name: string;
        /** The ID of the runner group to register the runner to. */
        runner_group_id: number;
        /**
         * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
        /**
         * The working directory to be used for job execution, relative to the runner install directory.
         * @default "_work"
         */
        work_folder?: string;
      };
    };
    Response: {
      /** A self hosted runner */
      runner: Runner;
      /** The base64 encoded runner configuration. */
      encoded_jit_config: string;
    };
  };
  ["POST /orgs/${org}/actions/runners/registration-token"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/runners/registration-token";
      typedPath?: `/orgs/${string}/actions/runners/registration-token`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: AuthenticationToken;
  };
  ["POST /orgs/${org}/actions/runners/remove-token"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/runners/remove-token";
      typedPath?: `/orgs/${string}/actions/runners/remove-token`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: AuthenticationToken;
  };
  ["GET /orgs/${org}/actions/runners/${runnerId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runners/${runnerId}";
      typedPath?: `/orgs/${string}/actions/runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: Runner;
  };
  ["DELETE /orgs/${org}/actions/runners/${runnerId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/runners/${runnerId}";
      typedPath?: `/orgs/${string}/actions/runners/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/runners/${runnerId}/labels";
      typedPath?: `/orgs/${string}/actions/runners/${number}/labels`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["POST /orgs/${org}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/runners/${runnerId}/labels";
      typedPath?: `/orgs/${string}/actions/runners/${number}/labels`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
      body: {
        /**
         * The names of the custom labels to add to the runner.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["PUT /orgs/${org}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/runners/${runnerId}/labels";
      typedPath?: `/orgs/${string}/actions/runners/${number}/labels`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
      body: {
        /**
         * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
         * @maxItems 100
         * @minItems 0
         */
        labels: string[];
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["DELETE /orgs/${org}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/runners/${runnerId}/labels";
      typedPath?: `/orgs/${string}/actions/runners/${number}/labels`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["DELETE /orgs/${org}/actions/runners/${runnerId}/labels/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/runners/${runnerId}/labels/${name}";
      typedPath?: `/orgs/${string}/actions/runners/${number}/labels/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
        /** The name of a self-hosted runner's custom label. */
        name: string;
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["GET /orgs/${org}/actions/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/secrets";
      typedPath?: `/orgs/${string}/actions/secrets`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: OrganizationActionsSecret[];
    };
  };
  ["GET /orgs/${org}/actions/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/secrets/public-key";
      typedPath?: `/orgs/${string}/actions/secrets/public-key`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: ActionsPublicKey;
  };
  ["GET /orgs/${org}/actions/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/secrets/${secretName}";
      typedPath?: `/orgs/${string}/actions/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: OrganizationActionsSecret;
  };
  ["PUT /orgs/${org}/actions/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/secrets/${secretName}";
      typedPath?: `/orgs/${string}/actions/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
        /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
        visibility: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: number[];
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /orgs/${org}/actions/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/secrets/${secretName}";
      typedPath?: `/orgs/${string}/actions/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/secrets/${secretName}/repositories";
      typedPath?: `/orgs/${string}/actions/secrets/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: MinimalRepository[];
    };
  };
  ["PUT /orgs/${org}/actions/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/secrets/${secretName}/repositories";
      typedPath?: `/orgs/${string}/actions/secrets/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/secrets/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/secrets/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/variables"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/variables";
      typedPath?: `/orgs/${string}/actions/variables`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      variables: OrganizationActionsVariable[];
    };
  };
  ["POST /orgs/${org}/actions/variables"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/actions/variables";
      typedPath?: `/orgs/${string}/actions/variables`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the variable. */
        name: string;
        /** The value of the variable. */
        value: string;
        /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
        visibility: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
        selected_repository_ids?: number[];
      };
    };
    Response: EmptyObject;
  };
  ["GET /orgs/${org}/actions/variables/${name}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/variables/${name}";
      typedPath?: `/orgs/${string}/actions/variables/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
      };
    };
    Response: OrganizationActionsVariable;
  };
  ["PATCH /orgs/${org}/actions/variables/${name}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/actions/variables/${name}";
      typedPath?: `/orgs/${string}/actions/variables/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
      };
      body: {
        /** The name of the variable. */
        name?: string;
        /** The value of the variable. */
        value?: string;
        /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
        visibility?: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
        selected_repository_ids?: number[];
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/actions/variables/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/variables/${name}";
      typedPath?: `/orgs/${string}/actions/variables/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/actions/variables/${name}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/actions/variables/${name}/repositories";
      typedPath?: `/orgs/${string}/actions/variables/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: MinimalRepository[];
    };
  };
  ["PUT /orgs/${org}/actions/variables/${name}/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/variables/${name}/repositories";
      typedPath?: `/orgs/${string}/actions/variables/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
      };
      body: {
        /** The IDs of the repositories that can access the organization variable. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/actions/variables/${name}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/variables/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/actions/variables/${name}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/actions/variables/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the variable. */
        name: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["POST /orgs/${org}/attestations/bulk-list"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/attestations/bulk-list";
      typedPath?: `/orgs/${string}/attestations/bulk-list`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      };
      body: {
        /**
         * List of subject digests to fetch attestations for.
         * @maxItems 1024
         * @minItems 1
         */
        subject_digests: string[];
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    Response: {
      /** Mapping of subject digest to bundles. */
      attestations_subject_digests?: Record<
        string,
        | {
            /** The bundle of the attestation. */
            bundle?: {
              mediaType?: string;
              verificationMaterial?: Record<string, any>;
              dsseEnvelope?: Record<string, any>;
            };
            repository_id?: number;
            bundle_url?: string;
          }[]
        | null
      >;
      /** Information about the current page. */
      page_info?: {
        /** Indicates whether there is a next page. */
        has_next?: boolean;
        /** Indicates whether there is a previous page. */
        has_previous?: boolean;
        /** The cursor to the next page. */
        next?: string;
        /** The cursor to the previous page. */
        previous?: string;
      };
    };
  };
  ["POST /orgs/${org}/attestations/delete-request"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/attestations/delete-request";
      typedPath?: `/orgs/${string}/attestations/delete-request`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body:
        | {
            /**
             * List of subject digests associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            subject_digests: string[];
          }
        | {
            /**
             * List of unique IDs associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            attestation_ids: number[];
          };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/attestations/digest/${subjectDigest}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/attestations/digest/${subjectDigest}";
      typedPath?: `/orgs/${string}/attestations/digest/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Subject Digest */
        subjectDigest: string;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/attestations/${attestationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/attestations/${attestationId}";
      typedPath?: `/orgs/${string}/attestations/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Attestation ID */
        attestationId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/attestations/${subjectDigest}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/attestations/${subjectDigest}";
      typedPath?: `/orgs/${string}/attestations/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`. */
        subjectDigest: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    Response: {
      attestations?: {
        /**
         * The attestation's Sigstore Bundle.
         * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
         */
        bundle?: {
          mediaType?: string;
          verificationMaterial?: Record<string, any>;
          dsseEnvelope?: Record<string, any>;
        };
        repository_id?: number;
        bundle_url?: string;
      }[];
    };
  };
  ["GET /orgs/${org}/blocks"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/blocks";
      typedPath?: `/orgs/${string}/blocks`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /orgs/${org}/blocks/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/blocks/${username}";
      typedPath?: `/orgs/${string}/blocks/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/blocks/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/blocks/${username}";
      typedPath?: `/orgs/${string}/blocks/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/blocks/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/blocks/${username}";
      typedPath?: `/orgs/${string}/blocks/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/campaigns"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/campaigns";
      typedPath?: `/orgs/${string}/campaigns`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** If specified, only campaigns with this state will be returned. */
        state?: CampaignState;
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created" | "updated" | "ends_at" | "published";
      };
    };
    Response: CampaignSummary[];
  };
  ["POST /orgs/${org}/campaigns"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/campaigns";
      typedPath?: `/orgs/${string}/campaigns`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The name of the campaign
         * @minLength 1
         * @maxLength 50
         */
        name: string;
        /**
         * A description for the campaign
         * @minLength 1
         * @maxLength 255
         */
        description: string;
        /**
         * The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
         * @maxItems 10
         */
        managers?: string[];
        /**
         * The slugs of the teams to set as the campaign managers.
         * @maxItems 10
         */
        team_managers?: string[];
        /**
         * The end date and time of the campaign. The date must be in the future.
         * @format date-time
         */
        ends_at: string;
        /**
         * The contact link of the campaign. Must be a URI.
         * @format uri
         */
        contact_link?: string | null;
        /**
         * The code scanning alerts to include in this campaign
         * @minItems 1
         */
        code_scanning_alerts: {
          /** The repository id */
          repository_id: number;
          /**
           * The alert numbers
           * @minItems 1
           */
          alert_numbers: number[];
        }[];
        /**
         * If true, will automatically generate issues for the campaign. The default is false.
         * @default false
         */
        generate_issues?: boolean;
      };
    };
    Response: CampaignSummary;
  };
  ["GET /orgs/${org}/campaigns/${campaignNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/campaigns/${campaignNumber}";
      typedPath?: `/orgs/${string}/campaigns/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The campaign number. */
        campaignNumber: number;
      };
    };
    Response: CampaignSummary;
  };
  ["PATCH /orgs/${org}/campaigns/${campaignNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/campaigns/${campaignNumber}";
      typedPath?: `/orgs/${string}/campaigns/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The campaign number. */
        campaignNumber: number;
      };
      body: {
        /**
         * The name of the campaign
         * @minLength 1
         * @maxLength 50
         */
        name?: string;
        /**
         * A description for the campaign
         * @minLength 1
         * @maxLength 255
         */
        description?: string;
        /**
         * The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
         * @maxItems 10
         */
        managers?: string[];
        /**
         * The slugs of the teams to set as the campaign managers.
         * @maxItems 10
         */
        team_managers?: string[];
        /**
         * The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
         * @format date-time
         */
        ends_at?: string;
        /**
         * The contact link of the campaign. Must be a URI.
         * @format uri
         */
        contact_link?: string | null;
        /** Indicates whether a campaign is open or closed */
        state?: CampaignState;
      };
    };
    Response: CampaignSummary;
  };
  ["DELETE /orgs/${org}/campaigns/${campaignNumber}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/campaigns/${campaignNumber}";
      typedPath?: `/orgs/${string}/campaigns/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The campaign number. */
        campaignNumber: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/code-scanning/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/code-scanning/alerts";
      typedPath?: `/orgs/${string}/code-scanning/alerts`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        tool_name?: CodeScanningAnalysisToolName;
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        tool_guid?: CodeScanningAnalysisToolGuid;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** If specified, only code scanning alerts with this state will be returned. */
        state?: CodeScanningAlertStateQuery;
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** If specified, only code scanning alerts with this severity will be returned. */
        severity?: CodeScanningAlertSeverity;
      };
    };
    Response: CodeScanningOrganizationAlertItems[];
  };
  ["GET /orgs/${org}/code-security/configurations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/code-security/configurations";
      typedPath?: `/orgs/${string}/code-security/configurations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The target type of the code security configuration
         * @default "all"
         */
        target_type?: "global" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      };
    };
    Response: CodeSecurityConfiguration[];
  };
  ["POST /orgs/${org}/code-security/configurations"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/code-security/configurations";
      typedPath?: `/orgs/${string}/code-security/configurations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the code security configuration. Must be unique within the organization. */
        name: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description: string;
        /**
         * The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         * @default "disabled"
         */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /**
         * The enablement status of Dependency Graph
         * @default "enabled"
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Automatic dependency submission
         * @default "disabled"
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /**
           * Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           * @default false
           */
          labeled_runners?: boolean;
        };
        /**
         * The enablement status of Dependabot alerts
         * @default "disabled"
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Dependabot security updates
         * @default "disabled"
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of code scanning default setup
         * @default "disabled"
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "not_set"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning
         * @default "disabled"
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning push protection
         * @default "disabled"
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning delegated bypass
         * @default "disabled"
         */
        secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
        /** Feature options for secret scanning delegated bypass */
        secret_scanning_delegated_bypass_options?: {
          /** The bypass reviewers for secret scanning delegated bypass */
          reviewers?: {
            /** The ID of the team or role selected as a bypass reviewer */
            reviewer_id: number;
            /** The type of the bypass reviewer */
            reviewer_type: "TEAM" | "ROLE";
          }[];
        };
        /**
         * The enablement status of secret scanning validity checks
         * @default "disabled"
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning non provider patterns
         * @default "disabled"
         */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning delegated alert dismissal */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of private vulnerability reporting
         * @default "disabled"
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /**
         * The enforcement status for a security configuration
         * @default "enforced"
         */
        enforcement?: "enforced" | "unenforced";
      };
    };
    Response: CodeSecurityConfiguration;
  };
  ["GET /orgs/${org}/code-security/configurations/defaults"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/code-security/configurations/defaults";
      typedPath?: `/orgs/${string}/code-security/configurations/defaults`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: CodeSecurityDefaultConfigurations;
  };
  ["DELETE /orgs/${org}/code-security/configurations/detach"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/code-security/configurations/detach";
      typedPath?: `/orgs/${string}/code-security/configurations/detach`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** An array of repository IDs to detach from configurations. */
        selected_repository_ids?: number[];
      };
    };
    Response: any;
  };
  ["GET /orgs/${org}/code-security/configurations/${configurationId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/code-security/configurations/${configurationId}";
      typedPath?: `/orgs/${string}/code-security/configurations/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
    };
    Response: CodeSecurityConfiguration;
  };
  ["PATCH /orgs/${org}/code-security/configurations/${configurationId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/code-security/configurations/${configurationId}";
      typedPath?: `/orgs/${string}/code-security/configurations/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      body: {
        /** The name of the code security configuration. Must be unique within the organization. */
        name?: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description?: string;
        /** The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features. */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /** The enablement status of Dependency Graph */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Automatic dependency submission */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /** Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
          labeled_runners?: boolean;
        };
        /** The enablement status of Dependabot alerts */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Dependabot security updates */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /** The enablement status of code scanning default setup */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning push protection */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning delegated bypass */
        secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
        /** Feature options for secret scanning delegated bypass */
        secret_scanning_delegated_bypass_options?: {
          /** The bypass reviewers for secret scanning delegated bypass */
          reviewers?: {
            /** The ID of the team or role selected as a bypass reviewer */
            reviewer_id: number;
            /** The type of the bypass reviewer */
            reviewer_type: "TEAM" | "ROLE";
          }[];
        };
        /** The enablement status of secret scanning validity checks */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning non-provider patterns */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Copilot secret scanning */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning delegated alert dismissal */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of private vulnerability reporting */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /** The enforcement status for a security configuration */
        enforcement?: "enforced" | "unenforced";
      };
    };
    Response: CodeSecurityConfiguration;
  };
  ["DELETE /orgs/${org}/code-security/configurations/${configurationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/code-security/configurations/${configurationId}";
      typedPath?: `/orgs/${string}/code-security/configurations/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
    };
    Response: any;
  };
  ["POST /orgs/${org}/code-security/configurations/${configurationId}/attach"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/code-security/configurations/${configurationId}/attach";
      typedPath?: `/orgs/${string}/code-security/configurations/${number}/attach`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      body: {
        /** The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids` */
        scope: "all" | "all_without_configurations" | "public" | "private_or_internal" | "selected";
        /** An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`. */
        selected_repository_ids?: number[];
      };
    };
    Response: object;
  };
  ["PUT /orgs/${org}/code-security/configurations/${configurationId}/defaults"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/code-security/configurations/${configurationId}/defaults";
      typedPath?: `/orgs/${string}/code-security/configurations/${number}/defaults`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      body: {
        /** Specify which types of repository this security configuration should be applied to by default. */
        default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
      };
    };
    Response: {
      /** Specifies which types of repository this security configuration is applied to by default. */
      default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
      /** A code security configuration */
      configuration?: CodeSecurityConfiguration;
    };
  };
  ["GET /orgs/${org}/code-security/configurations/${configurationId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/code-security/configurations/${configurationId}/repositories";
      typedPath?: `/orgs/${string}/code-security/configurations/${number}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the code security configuration. */
        configurationId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
         *
         * Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
         * @default "all"
         */
        status?: string;
      };
    };
    Response: CodeSecurityConfigurationRepositories[];
  };
  ["GET /orgs/${org}/codespaces"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/codespaces";
      typedPath?: `/orgs/${string}/codespaces`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      codespaces: Codespace[];
    };
  };
  ["PUT /orgs/${org}/codespaces/access"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/codespaces/access";
      typedPath?: `/orgs/${string}/codespaces/access`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization. */
        visibility: "disabled" | "selected_members" | "all_members" | "all_members_and_outside_collaborators";
        /**
         * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
         * @maxItems 100
         */
        selected_usernames?: string[];
      };
    };
    Response: void;
  };
  ["POST /orgs/${org}/codespaces/access/selected_users"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/codespaces/access/selected_users";
      typedPath?: `/orgs/${string}/codespaces/access/selected_users`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The usernames of the organization members whose codespaces be billed to the organization.
         * @maxItems 100
         */
        selected_usernames: string[];
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/codespaces/access/selected_users"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/codespaces/access/selected_users";
      typedPath?: `/orgs/${string}/codespaces/access/selected_users`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The usernames of the organization members whose codespaces should not be billed to the organization.
         * @maxItems 100
         */
        selected_usernames: string[];
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/codespaces/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/codespaces/secrets";
      typedPath?: `/orgs/${string}/codespaces/secrets`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: CodespacesOrgSecret[];
    };
  };
  ["GET /orgs/${org}/codespaces/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/codespaces/secrets/public-key";
      typedPath?: `/orgs/${string}/codespaces/secrets/public-key`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: CodespacesPublicKey;
  };
  ["GET /orgs/${org}/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: CodespacesOrgSecret;
  };
  ["PUT /orgs/${org}/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** The ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
        visibility: "all" | "private" | "selected";
        /** An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: number[];
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /orgs/${org}/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/codespaces/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}/repositories";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: MinimalRepository[];
    };
  };
  ["PUT /orgs/${org}/codespaces/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}/repositories";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/codespaces/secrets/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/copilot/billing"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/copilot/billing";
      typedPath?: `/orgs/${string}/copilot/billing`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: CopilotOrganizationDetails;
  };
  ["GET /orgs/${org}/copilot/billing/seats"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/copilot/billing/seats";
      typedPath?: `/orgs/${string}/copilot/billing/seats`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 50
         */
        per_page?: number;
      };
    };
    Response: {
      /** Total number of Copilot seats for the organization currently being billed. */
      total_seats?: number;
      seats?: CopilotSeatDetails[];
    };
  };
  ["POST /orgs/${org}/copilot/billing/selected_teams"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/copilot/billing/selected_teams";
      typedPath?: `/orgs/${string}/copilot/billing/selected_teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * List of team names within the organization to which to grant access to GitHub Copilot.
         * @minItems 1
         */
        selected_teams: string[];
      };
    };
    Response: {
      seats_created: number;
    };
  };
  ["DELETE /orgs/${org}/copilot/billing/selected_teams"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/copilot/billing/selected_teams";
      typedPath?: `/orgs/${string}/copilot/billing/selected_teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The names of teams from which to revoke access to GitHub Copilot.
         * @minItems 1
         */
        selected_teams: string[];
      };
    };
    Response: {
      seats_cancelled: number;
    };
  };
  ["POST /orgs/${org}/copilot/billing/selected_users"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/copilot/billing/selected_users";
      typedPath?: `/orgs/${string}/copilot/billing/selected_users`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The usernames of the organization members to be granted access to GitHub Copilot.
         * @minItems 1
         */
        selected_usernames: string[];
      };
    };
    Response: {
      seats_created: number;
    };
  };
  ["DELETE /orgs/${org}/copilot/billing/selected_users"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/copilot/billing/selected_users";
      typedPath?: `/orgs/${string}/copilot/billing/selected_users`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The usernames of the organization members for which to revoke access to GitHub Copilot.
         * @minItems 1
         */
        selected_usernames: string[];
      };
    };
    Response: {
      seats_cancelled: number;
    };
  };
  ["GET /orgs/${org}/copilot/metrics"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/copilot/metrics";
      typedPath?: `/orgs/${string}/copilot/metrics`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago. */
        since?: string;
        /** Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed. */
        until?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 28
         */
        per_page?: number;
      };
    };
    Response: CopilotUsageMetricsDay[];
  };
  ["GET /orgs/${org}/dependabot/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/dependabot/alerts";
      typedPath?: `/orgs/${string}/dependabot/alerts`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * A comma-separated list of states. If specified, only alerts with these states will be returned.
         *
         * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
         */
        state?: string;
        /**
         * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
         *
         * Can be: `low`, `medium`, `high`, `critical`
         */
        severity?: string;
        /**
         * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
         *
         * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
         */
        ecosystem?: string;
        /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
        package?: string;
        /**
         * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
         * - An exact number (`n`)
         * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
         * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
         *
         * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
         */
        epss_percentage?: string;
        /**
         * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
         * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
         */
        has?: string | "patch"[];
        /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
        scope?: "development" | "runtime";
        /**
         * The property by which to sort the results.
         * `created` means when the alert was created.
         * `updated` means when the alert's state last changed.
         * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
         * @default "created"
         */
        sort?: "created" | "updated" | "epss_percentage";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
         * This parameter must not be used in combination with `last`.
         * Instead, use `per_page` in combination with `after` to fetch the first page of results.
         * @min 1
         * @max 100
         * @default 30
         */
        first?: number;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
         * This parameter must not be used in combination with `first`.
         * Instead, use `per_page` in combination with `before` to fetch the last page of results.
         * @min 1
         * @max 100
         */
        last?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: DependabotAlertWithRepository[];
  };
  ["GET /orgs/${org}/dependabot/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/dependabot/secrets";
      typedPath?: `/orgs/${string}/dependabot/secrets`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: OrganizationDependabotSecret[];
    };
  };
  ["GET /orgs/${org}/dependabot/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/dependabot/secrets/public-key";
      typedPath?: `/orgs/${string}/dependabot/secrets/public-key`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: DependabotPublicKey;
  };
  ["GET /orgs/${org}/dependabot/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: OrganizationDependabotSecret;
  };
  ["PUT /orgs/${org}/dependabot/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
        visibility: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: string[];
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /orgs/${org}/dependabot/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/dependabot/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}/repositories";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: {
      total_count: number;
      repositories: MinimalRepository[];
    };
  };
  ["PUT /orgs/${org}/dependabot/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}/repositories";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/orgs/${string}/dependabot/secrets/${string}/repositories/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/docker/conflicts"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/docker/conflicts";
      typedPath?: `/orgs/${string}/docker/conflicts`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: Package[];
  };
  ["GET /orgs/${org}/events"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/events";
      typedPath?: `/orgs/${string}/events`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /orgs/${org}/failed_invitations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/failed_invitations";
      typedPath?: `/orgs/${string}/failed_invitations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrganizationInvitation[];
  };
  ["GET /orgs/${org}/hooks"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/hooks";
      typedPath?: `/orgs/${string}/hooks`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrgHook[];
  };
  ["POST /orgs/${org}/hooks"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/hooks";
      typedPath?: `/orgs/${string}/hooks`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Must be passed as "web". */
        name: string;
        /** Key/value pairs to provide settings for this webhook. */
        config: {
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
          /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
          content_type?: WebhookConfigContentType;
          /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
          /** @example ""kdaigle"" */
          username?: string;
          /** @example ""password"" */
          password?: string;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
         * @default ["push"]
         */
        events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      };
    };
    Response: OrgHook;
  };
  ["GET /orgs/${org}/hooks/${hookId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/hooks/${hookId}";
      typedPath?: `/orgs/${string}/hooks/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: OrgHook;
  };
  ["PATCH /orgs/${org}/hooks/${hookId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/hooks/${hookId}";
      typedPath?: `/orgs/${string}/hooks/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
      body: {
        /** Key/value pairs to provide settings for this webhook. */
        config?: {
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
          /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
          content_type?: WebhookConfigContentType;
          /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
        /** @example ""web"" */
        name?: string;
      };
    };
    Response: OrgHook;
  };
  ["DELETE /orgs/${org}/hooks/${hookId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/hooks/${hookId}";
      typedPath?: `/orgs/${string}/hooks/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/hooks/${hookId}/config"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/hooks/${hookId}/config";
      typedPath?: `/orgs/${string}/hooks/${number}/config`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: WebhookConfig;
  };
  ["PATCH /orgs/${org}/hooks/${hookId}/config"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/hooks/${hookId}/config";
      typedPath?: `/orgs/${string}/hooks/${number}/config`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
      body: {
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        content_type?: WebhookConfigContentType;
        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
      };
    };
    Response: WebhookConfig;
  };
  ["GET /orgs/${org}/hooks/${hookId}/deliveries"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/hooks/${hookId}/deliveries";
      typedPath?: `/orgs/${string}/hooks/${number}/deliveries`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        cursor?: string;
      };
    };
    Response: HookDeliveryItem[];
  };
  ["GET /orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}";
      typedPath?: `/orgs/${string}/hooks/${number}/deliveries/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
        deliveryId: number;
      };
    };
    Response: HookDelivery;
  };
  ["POST /orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}/attempts"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}/attempts";
      typedPath?: `/orgs/${string}/hooks/${number}/deliveries/${number}/attempts`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
        deliveryId: number;
      };
    };
    Response: object;
  };
  ["POST /orgs/${org}/hooks/${hookId}/pings"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/hooks/${hookId}/pings";
      typedPath?: `/orgs/${string}/hooks/${number}/pings`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/insights/api/route-stats/${actorType}/${actorId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/route-stats/${actorType}/${actorId}";
      typedPath?: `/orgs/${string}/insights/api/route-stats/${
        | "installation"
        | "classic_pat"
        | "fine_grained_pat"
        | "oauth_app"
        | "github_app_user_to_server"}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The type of the actor */
        actorType: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server";
        /** The ID of the actor */
        actorId: number;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** The property to sort the results by. */
        sort?: (
          | "last_rate_limited_timestamp"
          | "last_request_timestamp"
          | "rate_limited_request_count"
          | "http_method"
          | "api_route"
          | "total_request_count"
        )[];
        /** Providing a substring will filter results where the API route contains the substring. This is a case-insensitive search. */
        api_route_substring?: string;
      };
    };
    Response: ApiInsightsRouteStats;
  };
  ["GET /orgs/${org}/insights/api/subject-stats"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/subject-stats";
      typedPath?: `/orgs/${string}/insights/api/subject-stats`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** The property to sort the results by. */
        sort?: (
          | "last_rate_limited_timestamp"
          | "last_request_timestamp"
          | "rate_limited_request_count"
          | "subject_name"
          | "total_request_count"
        )[];
        /** Providing a substring will filter results where the subject name contains the substring. This is a case-insensitive search. */
        subject_name_substring?: string;
      };
    };
    Response: ApiInsightsSubjectStats;
  };
  ["GET /orgs/${org}/insights/api/summary-stats"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/summary-stats";
      typedPath?: `/orgs/${string}/insights/api/summary-stats`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
      };
    };
    Response: ApiInsightsSummaryStats;
  };
  ["GET /orgs/${org}/insights/api/summary-stats/users/${userId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/summary-stats/users/${userId}";
      typedPath?: `/orgs/${string}/insights/api/summary-stats/users/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the user to query for stats */
        userId: string;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
      };
    };
    Response: ApiInsightsSummaryStats;
  };
  ["GET /orgs/${org}/insights/api/summary-stats/${actorType}/${actorId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/summary-stats/${actorType}/${actorId}";
      typedPath?: `/orgs/${string}/insights/api/summary-stats/${
        | "installation"
        | "classic_pat"
        | "fine_grained_pat"
        | "oauth_app"
        | "github_app_user_to_server"}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The type of the actor */
        actorType: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server";
        /** The ID of the actor */
        actorId: number;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
      };
    };
    Response: ApiInsightsSummaryStats;
  };
  ["GET /orgs/${org}/insights/api/time-stats"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/time-stats";
      typedPath?: `/orgs/${string}/insights/api/time-stats`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /** The increment of time used to breakdown the query results (5m, 10m, 1h, etc.) */
        timestamp_increment: string;
      };
    };
    Response: ApiInsightsTimeStats;
  };
  ["GET /orgs/${org}/insights/api/time-stats/users/${userId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/time-stats/users/${userId}";
      typedPath?: `/orgs/${string}/insights/api/time-stats/users/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the user to query for stats */
        userId: string;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /** The increment of time used to breakdown the query results (5m, 10m, 1h, etc.) */
        timestamp_increment: string;
      };
    };
    Response: ApiInsightsTimeStats;
  };
  ["GET /orgs/${org}/insights/api/time-stats/${actorType}/${actorId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/time-stats/${actorType}/${actorId}";
      typedPath?: `/orgs/${string}/insights/api/time-stats/${
        | "installation"
        | "classic_pat"
        | "fine_grained_pat"
        | "oauth_app"
        | "github_app_user_to_server"}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The type of the actor */
        actorType: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server";
        /** The ID of the actor */
        actorId: number;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /** The increment of time used to breakdown the query results (5m, 10m, 1h, etc.) */
        timestamp_increment: string;
      };
    };
    Response: ApiInsightsTimeStats;
  };
  ["GET /orgs/${org}/insights/api/user-stats/${userId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/insights/api/user-stats/${userId}";
      typedPath?: `/orgs/${string}/insights/api/user-stats/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the user to query for stats */
        userId: string;
      };
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** The property to sort the results by. */
        sort?: (
          | "last_rate_limited_timestamp"
          | "last_request_timestamp"
          | "rate_limited_request_count"
          | "subject_name"
          | "total_request_count"
        )[];
        /** Providing a substring will filter results where the actor name contains the substring. This is a case-insensitive search. */
        actor_name_substring?: string;
      };
    };
    Response: ApiInsightsUserStats;
  };
  ["GET /orgs/${org}/installation"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/installation";
      typedPath?: `/orgs/${string}/installation`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: Installation;
  };
  ["GET /orgs/${org}/installations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/installations";
      typedPath?: `/orgs/${string}/installations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      installations: Installation[];
    };
  };
  ["GET /orgs/${org}/interaction-limits"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/interaction-limits";
      typedPath?: `/orgs/${string}/interaction-limits`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: InteractionLimitResponse | object;
  };
  ["PUT /orgs/${org}/interaction-limits"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/interaction-limits";
      typedPath?: `/orgs/${string}/interaction-limits`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: InteractionLimit;
    };
    Response: InteractionLimitResponse;
  };
  ["DELETE /orgs/${org}/interaction-limits"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/interaction-limits";
      typedPath?: `/orgs/${string}/interaction-limits`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/invitations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/invitations";
      typedPath?: `/orgs/${string}/invitations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Filter invitations by their member role.
         * @default "all"
         */
        role?: "all" | "admin" | "direct_member" | "billing_manager" | "hiring_manager";
        /**
         * Filter invitations by their invitation source.
         * @default "all"
         */
        invitation_source?: "all" | "member" | "scim";
      };
    };
    Response: OrganizationInvitation[];
  };
  ["POST /orgs/${org}/invitations"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/invitations";
      typedPath?: `/orgs/${string}/invitations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** **Required unless you provide `email`**. GitHub user ID for the person you are inviting. */
        invitee_id?: number;
        /** **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. */
        email?: string;
        /**
         * The role for the new member.
         *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
         *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
         *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
         *  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
         * @default "direct_member"
         */
        role?: "admin" | "direct_member" | "billing_manager" | "reinstate";
        /** Specify IDs for the teams you want to invite new members to. */
        team_ids?: number[];
      };
    };
    Response: OrganizationInvitation;
  };
  ["DELETE /orgs/${org}/invitations/${invitationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/invitations/${invitationId}";
      typedPath?: `/orgs/${string}/invitations/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the invitation. */
        invitationId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/invitations/${invitationId}/teams"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/invitations/${invitationId}/teams";
      typedPath?: `/orgs/${string}/invitations/${number}/teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the invitation. */
        invitationId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Team[];
  };
  ["GET /orgs/${org}/issue-types"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/issue-types";
      typedPath?: `/orgs/${string}/issue-types`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: IssueType[];
  };
  ["POST /orgs/${org}/issue-types"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/issue-types";
      typedPath?: `/orgs/${string}/issue-types`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: OrganizationCreateIssueType;
    };
    Response: IssueType;
  };
  ["PUT /orgs/${org}/issue-types/${issueTypeId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/issue-types/${issueTypeId}";
      typedPath?: `/orgs/${string}/issue-types/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the issue type. */
        issueTypeId: number;
      };
      body: OrganizationUpdateIssueType;
    };
    Response: IssueType;
  };
  ["DELETE /orgs/${org}/issue-types/${issueTypeId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/issue-types/${issueTypeId}";
      typedPath?: `/orgs/${string}/issue-types/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the issue type. */
        issueTypeId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/issues"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/issues";
      typedPath?: `/orgs/${string}/issues`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /** Can be the name of an issue type. */
        type?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Issue[];
  };
  ["GET /orgs/${org}/members"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/members";
      typedPath?: `/orgs/${string}/members`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only members with [insecure 2FA methods](https://docs.github.com/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned. These options are only available for organization owners.
         * @default "all"
         */
        filter?: "2fa_disabled" | "2fa_insecure" | "all";
        /**
         * Filter members returned by their role.
         * @default "all"
         */
        role?: "all" | "admin" | "member";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /orgs/${org}/members/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/members/${username}";
      typedPath?: `/orgs/${string}/members/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/members/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/members/${username}";
      typedPath?: `/orgs/${string}/members/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/members/${username}/codespaces"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/members/${username}/codespaces";
      typedPath?: `/orgs/${string}/members/${string}/codespaces`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      codespaces: Codespace[];
    };
  };
  ["DELETE /orgs/${org}/members/${username}/codespaces/${codespaceName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/members/${username}/codespaces/${codespaceName}";
      typedPath?: `/orgs/${string}/members/${string}/codespaces/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: object;
  };
  ["POST /orgs/${org}/members/${username}/codespaces/${codespaceName}/stop"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/members/${username}/codespaces/${codespaceName}/stop";
      typedPath?: `/orgs/${string}/members/${string}/codespaces/${string}/stop`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: Codespace;
  };
  ["GET /orgs/${org}/members/${username}/copilot"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/members/${username}/copilot";
      typedPath?: `/orgs/${string}/members/${string}/copilot`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: CopilotSeatDetails;
  };
  ["GET /orgs/${org}/memberships/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/memberships/${username}";
      typedPath?: `/orgs/${string}/memberships/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: OrgMembership;
  };
  ["PUT /orgs/${org}/memberships/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/memberships/${username}";
      typedPath?: `/orgs/${string}/memberships/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
      body: {
        /**
         * The role to give the user in the organization. Can be one of:
         *  * `admin` - The user will become an owner of the organization.
         *  * `member` - The user will become a non-owner member of the organization.
         * @default "member"
         */
        role?: "admin" | "member";
      };
    };
    Response: OrgMembership;
  };
  ["DELETE /orgs/${org}/memberships/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/memberships/${username}";
      typedPath?: `/orgs/${string}/memberships/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/migrations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/migrations";
      typedPath?: `/orgs/${string}/migrations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Exclude attributes from the API response to improve performance */
        exclude?: "repositories"[];
      };
    };
    Response: Migration[];
  };
  ["POST /orgs/${org}/migrations"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/migrations";
      typedPath?: `/orgs/${string}/migrations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** A list of arrays indicating which repositories should be migrated. */
        repositories: string[];
        /**
         * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
         * @default false
         * @example true
         */
        lock_repositories?: boolean;
        /**
         * Indicates whether metadata should be excluded and only git source should be included for the migration.
         * @default false
         */
        exclude_metadata?: boolean;
        /**
         * Indicates whether the repository git data should be excluded from the migration.
         * @default false
         */
        exclude_git_data?: boolean;
        /**
         * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
         * @default false
         * @example true
         */
        exclude_attachments?: boolean;
        /**
         * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
         * @default false
         * @example true
         */
        exclude_releases?: boolean;
        /**
         * Indicates whether projects owned by the organization or users should be excluded. from the migration.
         * @default false
         * @example true
         */
        exclude_owner_projects?: boolean;
        /**
         * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
         * @default false
         * @example true
         */
        org_metadata_only?: boolean;
        /** Exclude related items from being returned in the response in order to improve performance of the request. */
        exclude?: "repositories"[];
      };
    };
    Response: Migration;
  };
  ["GET /orgs/${org}/migrations/${migrationId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/migrations/${migrationId}";
      typedPath?: `/orgs/${string}/migrations/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the migration. */
        migrationId: number;
      };
      query: {
        /** Exclude attributes from the API response to improve performance */
        exclude?: "repositories"[];
      };
    };
    Response: Migration;
  };
  ["GET /orgs/${org}/migrations/${migrationId}/archive"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/migrations/${migrationId}/archive";
      typedPath?: `/orgs/${string}/migrations/${number}/archive`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the migration. */
        migrationId: number;
      };
    };
    Response: any;
  };
  ["DELETE /orgs/${org}/migrations/${migrationId}/archive"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/migrations/${migrationId}/archive";
      typedPath?: `/orgs/${string}/migrations/${number}/archive`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the migration. */
        migrationId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/migrations/${migrationId}/repos/${repoName}/lock"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/migrations/${migrationId}/repos/${repoName}/lock";
      typedPath?: `/orgs/${string}/migrations/${number}/repos/${string}/lock`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the migration. */
        migrationId: number;
        /** repo_name parameter */
        repoName: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/migrations/${migrationId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/migrations/${migrationId}/repositories";
      typedPath?: `/orgs/${string}/migrations/${number}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the migration. */
        migrationId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /orgs/${org}/organization-roles"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/organization-roles";
      typedPath?: `/orgs/${string}/organization-roles`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: {
      /** The total number of organization roles available to the organization. */
      total_count?: number;
      /** The list of organization roles available to the organization. */
      roles?: OrganizationRole[];
    };
  };
  ["DELETE /orgs/${org}/organization-roles/teams/${teamSlug}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/organization-roles/teams/${teamSlug}";
      typedPath?: `/orgs/${string}/organization-roles/teams/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}";
      typedPath?: `/orgs/${string}/organization-roles/teams/${string}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}";
      typedPath?: `/orgs/${string}/organization-roles/teams/${string}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/organization-roles/users/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/organization-roles/users/${username}";
      typedPath?: `/orgs/${string}/organization-roles/users/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/organization-roles/users/${username}/${roleId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/organization-roles/users/${username}/${roleId}";
      typedPath?: `/orgs/${string}/organization-roles/users/${string}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/organization-roles/users/${username}/${roleId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/organization-roles/users/${username}/${roleId}";
      typedPath?: `/orgs/${string}/organization-roles/users/${string}/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/organization-roles/${roleId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/organization-roles/${roleId}";
      typedPath?: `/orgs/${string}/organization-roles/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
    };
    Response: OrganizationRole;
  };
  ["GET /orgs/${org}/organization-roles/${roleId}/teams"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/organization-roles/${roleId}/teams";
      typedPath?: `/orgs/${string}/organization-roles/${number}/teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamRoleAssignment[];
  };
  ["GET /orgs/${org}/organization-roles/${roleId}/users"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/organization-roles/${roleId}/users";
      typedPath?: `/orgs/${string}/organization-roles/${number}/users`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the role. */
        roleId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: UserRoleAssignment[];
  };
  ["GET /orgs/${org}/outside_collaborators"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/outside_collaborators";
      typedPath?: `/orgs/${string}/outside_collaborators`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only outside collaborators with [insecure 2FA methods](https://docs.github.com/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned.
         * @default "all"
         */
        filter?: "2fa_disabled" | "2fa_insecure" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["PUT /orgs/${org}/outside_collaborators/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/outside_collaborators/${username}";
      typedPath?: `/orgs/${string}/outside_collaborators/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
      body: {
        /**
         * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
         * @default false
         */
        async?: boolean;
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /orgs/${org}/outside_collaborators/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/outside_collaborators/${username}";
      typedPath?: `/orgs/${string}/outside_collaborators/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/packages"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/packages";
      typedPath?: `/orgs/${string}/packages`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /**
         * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
         *
         * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
         * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
         */
        visibility?: "public" | "private" | "internal";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: Package[];
  };
  ["GET /orgs/${org}/packages/${packageType}/${packageName}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: Package;
  };
  ["DELETE /orgs/${org}/packages/${packageType}/${packageName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: void;
  };
  ["POST /orgs/${org}/packages/${packageType}/${packageName}/restore"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}/restore";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/restore`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** package token */
        token?: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/packages/${packageType}/${packageName}/versions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}/versions";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The state of the package, either active or deleted.
         * @default "active"
         */
        state?: "active" | "deleted";
      };
    };
    Response: PackageVersion[];
  };
  ["GET /orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: PackageVersion;
  };
  ["DELETE /orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: void;
  };
  ["POST /orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore";
      typedPath?: `/orgs/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}/restore`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/personal-access-token-requests"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/personal-access-token-requests";
      typedPath?: `/orgs/${string}/personal-access-token-requests`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The property by which to sort the results.
         * @default "created_at"
         */
        sort?: "created_at";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * A list of owner usernames to use to filter the results.
         * @maxItems 10
         * @example "owner[]=octocat1,owner[]=octocat2"
         */
        owner?: string[];
        /**
         * The name of the repository to use to filter the results.
         * @example "Hello-World"
         */
        repository?: string;
        /**
         * The permission to use to filter the results.
         * @example "issues_read"
         */
        permission?: string;
        /**
         * Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_before?: string;
        /**
         * Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_after?: string;
        /**
         * The ID of the token
         * @maxItems 50
         * @example "token_id[]=1,token_id[]=2"
         */
        token_id?: string[];
      };
    };
    Response: OrganizationProgrammaticAccessGrantRequest[];
  };
  ["POST /orgs/${org}/personal-access-token-requests"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/personal-access-token-requests";
      typedPath?: `/orgs/${string}/personal-access-token-requests`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
         * @maxItems 100
         * @minItems 1
         */
        pat_request_ids?: number[];
        /** Action to apply to the requests. */
        action: "approve" | "deny";
        /**
         * Reason for approving or denying the requests. Max 1024 characters.
         * @maxLength 1024
         */
        reason?: string | null;
      };
    };
    Response: object;
  };
  ["POST /orgs/${org}/personal-access-token-requests/${patRequestId}"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/personal-access-token-requests/${patRequestId}";
      typedPath?: `/orgs/${string}/personal-access-token-requests/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the request for access via fine-grained personal access token. */
        patRequestId: number;
      };
      body: {
        /** Action to apply to the request. */
        action: "approve" | "deny";
        /**
         * Reason for approving or denying the request. Max 1024 characters.
         * @maxLength 1024
         */
        reason?: string | null;
      };
    };
    Response: any;
  };
  ["GET /orgs/${org}/personal-access-token-requests/${patRequestId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/personal-access-token-requests/${patRequestId}/repositories";
      typedPath?: `/orgs/${string}/personal-access-token-requests/${number}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the request for access via fine-grained personal access token. */
        patRequestId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /orgs/${org}/personal-access-tokens"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/personal-access-tokens";
      typedPath?: `/orgs/${string}/personal-access-tokens`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The property by which to sort the results.
         * @default "created_at"
         */
        sort?: "created_at";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * A list of owner usernames to use to filter the results.
         * @maxItems 10
         * @example "owner[]=octocat1,owner[]=octocat2"
         */
        owner?: string[];
        /**
         * The name of the repository to use to filter the results.
         * @example "Hello-World"
         */
        repository?: string;
        /**
         * The permission to use to filter the results.
         * @example "issues_read"
         */
        permission?: string;
        /**
         * Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_before?: string;
        /**
         * Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_after?: string;
        /**
         * The ID of the token
         * @maxItems 50
         * @example "token_id[]=1,token_id[]=2"
         */
        token_id?: string[];
      };
    };
    Response: OrganizationProgrammaticAccessGrant[];
  };
  ["POST /orgs/${org}/personal-access-tokens"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/personal-access-tokens";
      typedPath?: `/orgs/${string}/personal-access-tokens`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Action to apply to the fine-grained personal access token. */
        action: "revoke";
        /**
         * The IDs of the fine-grained personal access tokens.
         * @maxItems 100
         * @minItems 1
         */
        pat_ids: number[];
      };
    };
    Response: object;
  };
  ["POST /orgs/${org}/personal-access-tokens/${patId}"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/personal-access-tokens/${patId}";
      typedPath?: `/orgs/${string}/personal-access-tokens/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The unique identifier of the fine-grained personal access token. */
        patId: number;
      };
      body: {
        /** Action to apply to the fine-grained personal access token. */
        action: "revoke";
      };
    };
    Response: any;
  };
  ["GET /orgs/${org}/personal-access-tokens/${patId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/personal-access-tokens/${patId}/repositories";
      typedPath?: `/orgs/${string}/personal-access-tokens/${number}/repositories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the fine-grained personal access token. */
        patId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /orgs/${org}/private-registries"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/private-registries";
      typedPath?: `/orgs/${string}/private-registries`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      configurations: OrgPrivateRegistryConfiguration[];
    };
  };
  ["POST /orgs/${org}/private-registries"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/private-registries";
      typedPath?: `/orgs/${string}/private-registries`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The registry type. */
        registry_type: "maven_repository" | "nuget_feed" | "goproxy_server";
        /**
         * The URL of the private registry.
         * @format uri
         */
        url: string;
        /** The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication. */
        username?: string | null;
        /**
         * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** The ID of the key you used to encrypt the secret. */
        key_id: string;
        /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
        visibility: "all" | "private" | "selected";
        /** An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. You can manage the list of selected repositories using the [Update a private registry for an organization](https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization) endpoint. This field should be omitted if `visibility` is set to `all` or `private`. */
        selected_repository_ids?: number[];
      };
    };
    Response: OrgPrivateRegistryConfigurationWithSelectedRepositories;
  };
  ["GET /orgs/${org}/private-registries/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/private-registries/public-key";
      typedPath?: `/orgs/${string}/private-registries/public-key`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: {
      /**
       * The identifier for the key.
       * @example "012345678912345678"
       */
      key_id: string;
      /**
       * The Base64 encoded public key.
       * @example "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
       */
      key: string;
    };
  };
  ["GET /orgs/${org}/private-registries/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/private-registries/${secretName}";
      typedPath?: `/orgs/${string}/private-registries/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: OrgPrivateRegistryConfiguration;
  };
  ["PATCH /orgs/${org}/private-registries/${secretName}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/private-registries/${secretName}";
      typedPath?: `/orgs/${string}/private-registries/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /** The registry type. */
        registry_type?: "maven_repository" | "nuget_feed" | "goproxy_server";
        /**
         * The URL of the private registry.
         * @format uri
         */
        url?: string;
        /** The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication. */
        username?: string | null;
        /**
         * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** The ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
        visibility?: "all" | "private" | "selected";
        /** An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`. */
        selected_repository_ids?: number[];
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/private-registries/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/private-registries/${secretName}";
      typedPath?: `/orgs/${string}/private-registries/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/projects"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/projects";
      typedPath?: `/orgs/${string}/projects`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * Indicates the state of the projects to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Project[];
  };
  ["POST /orgs/${org}/projects"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/projects";
      typedPath?: `/orgs/${string}/projects`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the project. */
        name: string;
        /** The description of the project. */
        body?: string;
      };
    };
    Response: Project;
  };
  ["GET /orgs/${org}/properties/schema"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/properties/schema";
      typedPath?: `/orgs/${string}/properties/schema`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: CustomProperty[];
  };
  ["PATCH /orgs/${org}/properties/schema"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/properties/schema";
      typedPath?: `/orgs/${string}/properties/schema`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The array of custom properties to create or update.
         * @maxItems 100
         * @minItems 1
         */
        properties: CustomProperty[];
      };
    };
    Response: CustomProperty[];
  };
  ["GET /orgs/${org}/properties/schema/${customPropertyName}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/properties/schema/${customPropertyName}";
      typedPath?: `/orgs/${string}/properties/schema/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The custom property name */
        customPropertyName: string;
      };
    };
    Response: CustomProperty;
  };
  ["PUT /orgs/${org}/properties/schema/${customPropertyName}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/properties/schema/${customPropertyName}";
      typedPath?: `/orgs/${string}/properties/schema/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The custom property name */
        customPropertyName: string;
      };
      body: CustomPropertySetPayload;
    };
    Response: CustomProperty;
  };
  ["DELETE /orgs/${org}/properties/schema/${customPropertyName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/properties/schema/${customPropertyName}";
      typedPath?: `/orgs/${string}/properties/schema/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The custom property name */
        customPropertyName: string;
      };
    };
    Response: any;
  };
  ["GET /orgs/${org}/properties/values"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/properties/values";
      typedPath?: `/orgs/${string}/properties/values`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        repository_query?: string;
      };
    };
    Response: OrgRepoCustomPropertyValues[];
  };
  ["PATCH /orgs/${org}/properties/values"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/properties/values";
      typedPath?: `/orgs/${string}/properties/values`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /**
         * The names of repositories that the custom property values will be applied to.
         * @maxItems 30
         * @minItems 1
         */
        repository_names: string[];
        /** List of custom property names and associated values to apply to the repositories. */
        properties: CustomPropertyValue[];
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/public_members"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/public_members";
      typedPath?: `/orgs/${string}/public_members`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /orgs/${org}/public_members/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/public_members/${username}";
      typedPath?: `/orgs/${string}/public_members/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /orgs/${org}/public_members/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/public_members/${username}";
      typedPath?: `/orgs/${string}/public_members/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/public_members/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/public_members/${username}";
      typedPath?: `/orgs/${string}/public_members/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/repos"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/repos";
      typedPath?: `/orgs/${string}/repos`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * Specifies the types of repositories you want returned.
         * @default "all"
         */
        type?: "all" | "public" | "private" | "forks" | "sources" | "member";
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["POST /orgs/${org}/repos"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/repos";
      typedPath?: `/orgs/${string}/repos`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the repository. */
        name: string;
        /** A short description of the repository. */
        description?: string;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Whether the repository is private.
         * @default false
         */
        private?: boolean;
        /** The visibility of the repository. */
        visibility?: "public" | "private";
        /**
         * Either `true` to enable issues for this repository or `false` to disable them.
         * @default true
         */
        has_issues?: boolean;
        /**
         * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;
        /**
         * Either `true` to enable the wiki for this repository or `false` to disable it.
         * @default true
         */
        has_wiki?: boolean;
        /**
         * Whether downloads are enabled.
         * @default true
         * @example true
         */
        has_downloads?: boolean;
        /**
         * Either `true` to make this repo available as a template repository or `false` to prevent it.
         * @default false
         */
        is_template?: boolean;
        /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
        team_id?: number;
        /**
         * Pass `true` to create an initial commit with empty README.
         * @default false
         */
        auto_init?: boolean;
        /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
        gitignore_template?: string;
        /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
        license_template?: string;
        /**
         * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;
        /**
         * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @deprecated
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        /**
         * Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /** The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values. */
        custom_properties?: Record<string, any>;
      };
    };
    Response: FullRepository;
  };
  ["GET /orgs/${org}/rulesets"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/rulesets";
      typedPath?: `/orgs/${string}/rulesets`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * A comma-separated list of rule targets to filter by.
         * If provided, only rulesets that apply to the specified targets will be returned.
         * For example, `branch,tag,push`.
         * @example "branch,tag,push"
         */
        targets?: string;
      };
    };
    Response: RepositoryRuleset[];
  };
  ["POST /orgs/${org}/rulesets"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/rulesets";
      typedPath?: `/orgs/${string}/rulesets`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the ruleset. */
        name: string;
        /**
         * The target of the ruleset
         * @default "branch"
         */
        target?: "branch" | "tag" | "push" | "repository";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /**
         * Conditions for an organization ruleset.
         * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
         * The push rulesets conditions object does not require the `ref_name` property.
         * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
         */
        conditions?: OrgRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      };
    };
    Response: RepositoryRuleset;
  };
  ["GET /orgs/${org}/rulesets/rule-suites"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/rulesets/rule-suites";
      typedPath?: `/orgs/${string}/rulesets/rule-suites`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned. */
        ref?: string;
        /** The name of the repository to filter on. */
        repository_name?: string;
        /**
         * The time period to filter by.
         *
         * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
         * @default "day"
         */
        time_period?: "hour" | "day" | "week" | "month";
        /** The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. */
        actor_name?: string;
        /**
         * The rule suite results to filter on. When specified, only suites with this result will be returned.
         * @default "all"
         */
        rule_suite_result?: "pass" | "fail" | "bypass" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RuleSuites;
  };
  ["GET /orgs/${org}/rulesets/rule-suites/${ruleSuiteId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/rulesets/rule-suites/${ruleSuiteId}";
      typedPath?: `/orgs/${string}/rulesets/rule-suites/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /**
         * The unique identifier of the rule suite result.
         * To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)
         * for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)
         * for organizations.
         */
        ruleSuiteId: number;
      };
    };
    Response: RuleSuite;
  };
  ["GET /orgs/${org}/rulesets/${rulesetId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/rulesets/${rulesetId}";
      typedPath?: `/orgs/${string}/rulesets/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
    };
    Response: RepositoryRuleset;
  };
  ["PUT /orgs/${org}/rulesets/${rulesetId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/rulesets/${rulesetId}";
      typedPath?: `/orgs/${string}/rulesets/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
      body: {
        /** The name of the ruleset. */
        name?: string;
        /** The target of the ruleset */
        target?: "branch" | "tag" | "push" | "repository";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement?: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /**
         * Conditions for an organization ruleset.
         * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
         * The push rulesets conditions object does not require the `ref_name` property.
         * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
         */
        conditions?: OrgRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      };
    };
    Response: RepositoryRuleset;
  };
  ["DELETE /orgs/${org}/rulesets/${rulesetId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/rulesets/${rulesetId}";
      typedPath?: `/orgs/${string}/rulesets/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/rulesets/${rulesetId}/history"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/rulesets/${rulesetId}/history";
      typedPath?: `/orgs/${string}/rulesets/${number}/history`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RulesetVersion[];
  };
  ["GET /orgs/${org}/rulesets/${rulesetId}/history/${versionId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/rulesets/${rulesetId}/history/${versionId}";
      typedPath?: `/orgs/${string}/rulesets/${number}/history/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The ID of the ruleset. */
        rulesetId: number;
        /** The ID of the version */
        versionId: number;
      };
    };
    Response: RulesetVersionWithState;
  };
  ["GET /orgs/${org}/secret-scanning/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/secret-scanning/alerts";
      typedPath?: `/orgs/${string}/secret-scanning/alerts`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
        /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
        secret_type?: string;
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        resolution?: string;
        /**
         * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
        after?: string;
        /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
        validity?: string;
        /**
         * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
         * @default false
         */
        is_publicly_leaked?: boolean;
        /**
         * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
         * @default false
         */
        is_multi_repo?: boolean;
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      };
    };
    Response: OrganizationSecretScanningAlert[];
  };
  ["GET /orgs/${org}/security-advisories"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/security-advisories";
      typedPath?: `/orgs/${string}/security-advisories`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "published";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
        /** Filter by the state of the repository advisories. Only advisories of this state will be returned. */
        state?: "triage" | "draft" | "published" | "closed";
      };
    };
    Response: RepositoryAdvisory[];
  };
  ["GET /orgs/${org}/security-managers"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/security-managers";
      typedPath?: `/orgs/${string}/security-managers`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: TeamSimple[];
  };
  ["PUT /orgs/${org}/security-managers/teams/${teamSlug}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/security-managers/teams/${teamSlug}";
      typedPath?: `/orgs/${string}/security-managers/teams/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/security-managers/teams/${teamSlug}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/security-managers/teams/${teamSlug}";
      typedPath?: `/orgs/${string}/security-managers/teams/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/settings/billing/actions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/settings/billing/actions";
      typedPath?: `/orgs/${string}/settings/billing/actions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: ActionsBillingUsage;
  };
  ["GET /orgs/${org}/settings/billing/packages"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/settings/billing/packages";
      typedPath?: `/orgs/${string}/settings/billing/packages`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: PackagesBillingUsage;
  };
  ["GET /orgs/${org}/settings/billing/shared-storage"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/settings/billing/shared-storage";
      typedPath?: `/orgs/${string}/settings/billing/shared-storage`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: CombinedBillingUsage;
  };
  ["GET /orgs/${org}/settings/network-configurations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/settings/network-configurations";
      typedPath?: `/orgs/${string}/settings/network-configurations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      network_configurations: NetworkConfiguration[];
    };
  };
  ["POST /orgs/${org}/settings/network-configurations"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/settings/network-configurations";
      typedPath?: `/orgs/${string}/settings/network-configurations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name: string;
        /** The hosted compute service to use for the network configuration. */
        compute_service?: "none" | "actions";
        /**
         * The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
         * @maxItems 1
         * @minItems 1
         */
        network_settings_ids: string[];
      };
    };
    Response: NetworkConfiguration;
  };
  ["GET /orgs/${org}/settings/network-configurations/${networkConfigurationId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/settings/network-configurations/${networkConfigurationId}";
      typedPath?: `/orgs/${string}/settings/network-configurations/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the hosted compute network configuration. */
        networkConfigurationId: string;
      };
    };
    Response: NetworkConfiguration;
  };
  ["PATCH /orgs/${org}/settings/network-configurations/${networkConfigurationId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/settings/network-configurations/${networkConfigurationId}";
      typedPath?: `/orgs/${string}/settings/network-configurations/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the hosted compute network configuration. */
        networkConfigurationId: string;
      };
      body: {
        /** Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name?: string;
        /** The hosted compute service to use for the network configuration. */
        compute_service?: "none" | "actions";
        /**
         * The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
         * @maxItems 1
         * @minItems 0
         */
        network_settings_ids?: string[];
      };
    };
    Response: NetworkConfiguration;
  };
  ["DELETE /orgs/${org}/settings/network-configurations/${networkConfigurationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/settings/network-configurations/${networkConfigurationId}";
      typedPath?: `/orgs/${string}/settings/network-configurations/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the hosted compute network configuration. */
        networkConfigurationId: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/settings/network-settings/${networkSettingsId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/settings/network-settings/${networkSettingsId}";
      typedPath?: `/orgs/${string}/settings/network-settings/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** Unique identifier of the hosted compute network settings. */
        networkSettingsId: string;
      };
    };
    Response: NetworkSettings;
  };
  ["GET /orgs/${org}/team/${teamSlug}/copilot/metrics"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/team/${teamSlug}/copilot/metrics";
      typedPath?: `/orgs/${string}/team/${string}/copilot/metrics`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /** Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago. */
        since?: string;
        /** Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed. */
        until?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 28
         */
        per_page?: number;
      };
    };
    Response: CopilotUsageMetricsDay[];
  };
  ["GET /orgs/${org}/teams"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams";
      typedPath?: `/orgs/${string}/teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Team[];
  };
  ["POST /orgs/${org}/teams"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/teams";
      typedPath?: `/orgs/${string}/teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The name of the team. */
        name: string;
        /** The description of the team. */
        description?: string;
        /** List GitHub usernames for organization members who will become team maintainers. */
        maintainers?: string[];
        /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
        repo_names?: string[];
        /**
         * The level of privacy this team should have. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * Default: `secret`
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         * Default for child team: `closed`
         */
        privacy?: "secret" | "closed";
        /**
         * The notification setting the team has chosen. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         * Default: `notifications_enabled`
         */
        notification_setting?: "notifications_enabled" | "notifications_disabled";
        /**
         * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push";
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number;
      };
    };
    Response: TeamFull;
  };
  ["GET /orgs/${org}/teams/${teamSlug}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}";
      typedPath?: `/orgs/${string}/teams/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
    };
    Response: TeamFull;
  };
  ["PATCH /orgs/${org}/teams/${teamSlug}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/teams/${teamSlug}";
      typedPath?: `/orgs/${string}/teams/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      body: {
        /** The name of the team. */
        name?: string;
        /** The description of the team. */
        description?: string;
        /**
         * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";
        /**
         * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         */
        notification_setting?: "notifications_enabled" | "notifications_disabled";
        /**
         * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number | null;
      };
    };
    Response: TeamFull;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}";
      typedPath?: `/orgs/${string}/teams/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/discussions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions";
      typedPath?: `/orgs/${string}/teams/${string}/discussions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Pinned discussions only filter */
        pinned?: string;
      };
    };
    Response: TeamDiscussion[];
  };
  ["POST /orgs/${org}/teams/${teamSlug}/discussions"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions";
      typedPath?: `/orgs/${string}/teams/${string}/discussions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      body: {
        /** The discussion post's title. */
        title: string;
        /** The discussion post's body text. */
        body: string;
        /**
         * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
         * @default false
         */
        private?: boolean;
      };
    };
    Response: TeamDiscussion;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
    };
    Response: TeamDiscussion;
  };
  ["PATCH /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      body: {
        /** The discussion post's title. */
        title?: string;
        /** The discussion post's body text. */
        body?: string;
      };
    };
    Response: TeamDiscussion;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamDiscussionComment[];
  };
  ["POST /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      body: {
        /** The discussion comment's body text. */
        body: string;
      };
    };
    Response: TeamDiscussionComment;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
    };
    Response: TeamDiscussionComment;
  };
  ["PATCH /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
      body: {
        /** The discussion comment's body text. */
        body: string;
      };
    };
    Response: TeamDiscussionComment;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments/${number}/reactions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments/${number}/reactions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions/${reactionId}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/comments/${number}/reactions/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/reactions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/reactions`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions/${reactionId}";
      typedPath?: `/orgs/${string}/teams/${string}/discussions/${number}/reactions/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/invitations"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/invitations";
      typedPath?: `/orgs/${string}/teams/${string}/invitations`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrganizationInvitation[];
  };
  ["GET /orgs/${org}/teams/${teamSlug}/members"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/members";
      typedPath?: `/orgs/${string}/teams/${string}/members`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /**
         * Filters members returned by their role in the team.
         * @default "all"
         */
        role?: "member" | "maintainer" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /orgs/${org}/teams/${teamSlug}/memberships/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/memberships/${username}";
      typedPath?: `/orgs/${string}/teams/${string}/memberships/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: TeamMembership;
  };
  ["PUT /orgs/${org}/teams/${teamSlug}/memberships/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/teams/${teamSlug}/memberships/${username}";
      typedPath?: `/orgs/${string}/teams/${string}/memberships/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
      body: {
        /**
         * The role that this user should have in the team.
         * @default "member"
         */
        role?: "member" | "maintainer";
      };
    };
    Response: TeamMembership;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/memberships/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/memberships/${username}";
      typedPath?: `/orgs/${string}/teams/${string}/memberships/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/projects"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/projects";
      typedPath?: `/orgs/${string}/teams/${string}/projects`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamProject[];
  };
  ["GET /orgs/${org}/teams/${teamSlug}/projects/${projectId}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/projects/${projectId}";
      typedPath?: `/orgs/${string}/teams/${string}/projects/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The unique identifier of the project. */
        projectId: number;
      };
    };
    Response: TeamProject;
  };
  ["PUT /orgs/${org}/teams/${teamSlug}/projects/${projectId}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/teams/${teamSlug}/projects/${projectId}";
      typedPath?: `/orgs/${string}/teams/${string}/projects/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The unique identifier of the project. */
        projectId: number;
      };
      body: {
        /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." */
        permission?: "read" | "write" | "admin";
      } | null;
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/projects/${projectId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/projects/${projectId}";
      typedPath?: `/orgs/${string}/teams/${string}/projects/${number}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The unique identifier of the project. */
        projectId: number;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/repos"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/repos";
      typedPath?: `/orgs/${string}/teams/${string}/repos`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}";
      typedPath?: `/orgs/${string}/teams/${string}/repos/${string}/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: TeamRepository;
  };
  ["PUT /orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}"]: {
    Request: {
      method?: "PUT";
      path?: "/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}";
      typedPath?: `/orgs/${string}/teams/${string}/repos/${string}/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
        permission?: string;
      };
    };
    Response: void;
  };
  ["DELETE /orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}"]: {
    Request: {
      method?: "DELETE";
      path?: "/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}";
      typedPath?: `/orgs/${string}/teams/${string}/repos/${string}/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /orgs/${org}/teams/${teamSlug}/teams"]: {
    Request: {
      method?: "GET";
      path?: "/orgs/${org}/teams/${teamSlug}/teams";
      typedPath?: `/orgs/${string}/teams/${string}/teams`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The slug of the team name. */
        teamSlug: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Team[];
  };
  ["POST /orgs/${org}/${securityProduct}/${enablement}"]: {
    Request: {
      method?: "POST";
      path?: "/orgs/${org}/${securityProduct}/${enablement}";
      typedPath?: `/orgs/${string}/${
        | "dependency_graph"
        | "dependabot_alerts"
        | "dependabot_security_updates"
        | "advanced_security"
        | "code_scanning_default_setup"
        | "secret_scanning"
        | "secret_scanning_push_protection"}/${"enable_all" | "disable_all"}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
        /** The security feature to enable or disable. */
        securityProduct:
          | "dependency_graph"
          | "dependabot_alerts"
          | "dependabot_security_updates"
          | "advanced_security"
          | "code_scanning_default_setup"
          | "secret_scanning"
          | "secret_scanning_push_protection";
        /**
         * The action to take.
         *
         * `enable_all` means to enable the specified security feature for all repositories in the organization.
         * `disable_all` means to disable the specified security feature for all repositories in the organization.
         */
        enablement: "enable_all" | "disable_all";
      };
      body: {
        /**
         * CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
         * If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
         */
        query_suite?: "default" | "extended";
      };
    };
    Response: void;
  };
  ["GET /projects/columns/cards/${cardId}"]: {
    Request: {
      method?: "GET";
      path?: "/projects/columns/cards/${cardId}";
      typedPath?: `/projects/columns/cards/${number}`;
      params: {
        /** The unique identifier of the card. */
        cardId: number;
      };
    };
    Response: ProjectCard;
  };
  ["PATCH /projects/columns/cards/${cardId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/projects/columns/cards/${cardId}";
      typedPath?: `/projects/columns/cards/${number}`;
      params: {
        /** The unique identifier of the card. */
        cardId: number;
      };
      body: {
        /**
         * The project card's note
         * @example "Update all gems"
         */
        note?: string | null;
        /**
         * Whether or not the card is archived
         * @example false
         */
        archived?: boolean;
      };
    };
    Response: ProjectCard;
  };
  ["DELETE /projects/columns/cards/${cardId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/projects/columns/cards/${cardId}";
      typedPath?: `/projects/columns/cards/${number}`;
      params: {
        /** The unique identifier of the card. */
        cardId: number;
      };
    };
    Response: void;
  };
  ["POST /projects/columns/cards/${cardId}/moves"]: {
    Request: {
      method?: "POST";
      path?: "/projects/columns/cards/${cardId}/moves";
      typedPath?: `/projects/columns/cards/${number}/moves`;
      params: {
        /** The unique identifier of the card. */
        cardId: number;
      };
      body: {
        /**
         * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
         * @pattern ^(?:top|bottom|after:\d+)$
         * @example "bottom"
         */
        position: string;
        /**
         * The unique identifier of the column the card should be moved to
         * @example 42
         */
        column_id?: number;
      };
    };
    Response: EmptyObject;
  };
  ["GET /projects/columns/${columnId}"]: {
    Request: {
      method?: "GET";
      path?: "/projects/columns/${columnId}";
      typedPath?: `/projects/columns/${number}`;
      params: {
        /** The unique identifier of the column. */
        columnId: number;
      };
    };
    Response: ProjectColumn;
  };
  ["PATCH /projects/columns/${columnId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/projects/columns/${columnId}";
      typedPath?: `/projects/columns/${number}`;
      params: {
        /** The unique identifier of the column. */
        columnId: number;
      };
      body: {
        /**
         * Name of the project column
         * @example "Remaining tasks"
         */
        name: string;
      };
    };
    Response: ProjectColumn;
  };
  ["DELETE /projects/columns/${columnId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/projects/columns/${columnId}";
      typedPath?: `/projects/columns/${number}`;
      params: {
        /** The unique identifier of the column. */
        columnId: number;
      };
    };
    Response: void;
  };
  ["GET /projects/columns/${columnId}/cards"]: {
    Request: {
      method?: "GET";
      path?: "/projects/columns/${columnId}/cards";
      typedPath?: `/projects/columns/${number}/cards`;
      params: {
        /** The unique identifier of the column. */
        columnId: number;
      };
      query: {
        /**
         * Filters the project cards that are returned by the card's state.
         * @default "not_archived"
         */
        archived_state?: "all" | "archived" | "not_archived";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: ProjectCard[];
  };
  ["POST /projects/columns/${columnId}/cards"]: {
    Request: {
      method?: "POST";
      path?: "/projects/columns/${columnId}/cards";
      typedPath?: `/projects/columns/${number}/cards`;
      params: {
        /** The unique identifier of the column. */
        columnId: number;
      };
      body:
        | {
            /**
             * The project card's note
             * @example "Update all gems"
             */
            note: string | null;
          }
        | {
            /**
             * The unique identifier of the content associated with the card
             * @example 42
             */
            content_id: number;
            /**
             * The piece of content associated with the card
             * @example "PullRequest"
             */
            content_type: string;
          };
    };
    Response: ProjectCard;
  };
  ["POST /projects/columns/${columnId}/moves"]: {
    Request: {
      method?: "POST";
      path?: "/projects/columns/${columnId}/moves";
      typedPath?: `/projects/columns/${number}/moves`;
      params: {
        /** The unique identifier of the column. */
        columnId: number;
      };
      body: {
        /**
         * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
         * @pattern ^(?:first|last|after:\d+)$
         * @example "last"
         */
        position: string;
      };
    };
    Response: EmptyObject;
  };
  ["GET /projects/${projectId}"]: {
    Request: {
      method?: "GET";
      path?: "/projects/${projectId}";
      typedPath?: `/projects/${number}`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
      };
    };
    Response: Project;
  };
  ["PATCH /projects/${projectId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/projects/${projectId}";
      typedPath?: `/projects/${number}`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
      };
      body: {
        /**
         * Name of the project
         * @example "Week One Sprint"
         */
        name?: string;
        /**
         * Body of the project
         * @example "This project represents the sprint of the first week in January"
         */
        body?: string | null;
        /**
         * State of the project; either 'open' or 'closed'
         * @example "open"
         */
        state?: string;
        /** The baseline permission that all organization members have on this project */
        organization_permission?: "read" | "write" | "admin" | "none";
        /** Whether or not this project can be seen by everyone. */
        private?: boolean;
      };
    };
    Response: Project;
  };
  ["DELETE /projects/${projectId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/projects/${projectId}";
      typedPath?: `/projects/${number}`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
      };
    };
    Response: void;
  };
  ["GET /projects/${projectId}/collaborators"]: {
    Request: {
      method?: "GET";
      path?: "/projects/${projectId}/collaborators";
      typedPath?: `/projects/${number}/collaborators`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
      };
      query: {
        /**
         * Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
         * @default "all"
         */
        affiliation?: "outside" | "direct" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["PUT /projects/${projectId}/collaborators/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/projects/${projectId}/collaborators/${username}";
      typedPath?: `/projects/${number}/collaborators/${string}`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
      body: {
        /**
         * The permission to grant the collaborator.
         * @default "write"
         * @example "write"
         */
        permission?: "read" | "write" | "admin";
      } | null;
    };
    Response: void;
  };
  ["DELETE /projects/${projectId}/collaborators/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/projects/${projectId}/collaborators/${username}";
      typedPath?: `/projects/${number}/collaborators/${string}`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /projects/${projectId}/collaborators/${username}/permission"]: {
    Request: {
      method?: "GET";
      path?: "/projects/${projectId}/collaborators/${username}/permission";
      typedPath?: `/projects/${number}/collaborators/${string}/permission`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: ProjectCollaboratorPermission;
  };
  ["GET /projects/${projectId}/columns"]: {
    Request: {
      method?: "GET";
      path?: "/projects/${projectId}/columns";
      typedPath?: `/projects/${number}/columns`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: ProjectColumn[];
  };
  ["POST /projects/${projectId}/columns"]: {
    Request: {
      method?: "POST";
      path?: "/projects/${projectId}/columns";
      typedPath?: `/projects/${number}/columns`;
      params: {
        /** The unique identifier of the project. */
        projectId: number;
      };
      body: {
        /**
         * Name of the project column
         * @example "Remaining tasks"
         */
        name: string;
      };
    };
    Response: ProjectColumn;
  };
  ["GET /rate_limit"]: { Request: { method?: "GET"; path?: "/rate_limit" }; Response: RateLimitOverview };
  ["GET /repos/${owner}/${repo}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}";
      typedPath?: `/repos/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: FullRepository;
  };
  ["PATCH /repos/${owner}/${repo}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}";
      typedPath?: `/repos/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the repository. */
        name?: string;
        /** A short description of the repository. */
        description?: string;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Either `true` to make the repository private or `false` to make it public. Default: `false`.
         * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
         * @default false
         */
        private?: boolean;
        /** The visibility of the repository. */
        visibility?: "public" | "private";
        /**
         * Specify which security and analysis features to enable or disable for the repository.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
         * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
         *
         * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
         */
        security_and_analysis?: {
          /** Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)." */
          advanced_security?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable GitHub Code Security for this repository. */
          code_security?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)." */
          secret_scanning?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
          secret_scanning_push_protection?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)." */
          secret_scanning_ai_detection?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)." */
          secret_scanning_non_provider_patterns?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
        } | null;
        /**
         * Either `true` to enable issues for this repository or `false` to disable them.
         * @default true
         */
        has_issues?: boolean;
        /**
         * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;
        /**
         * Either `true` to enable the wiki for this repository or `false` to disable it.
         * @default true
         */
        has_wiki?: boolean;
        /**
         * Either `true` to make this repo available as a template repository or `false` to prevent it.
         * @default false
         */
        is_template?: boolean;
        /** Updates the default branch for this repository. */
        default_branch?: string;
        /**
         * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;
        /**
         * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
         * @default false
         */
        allow_update_branch?: boolean;
        /**
         * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @deprecated
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        /**
         * Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * Whether to archive this repository. `false` will unarchive a previously archived repository.
         * @default false
         */
        archived?: boolean;
        /**
         * Either `true` to allow private forks, or `false` to prevent private forks.
         * @default false
         */
        allow_forking?: boolean;
        /**
         * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
         * @default false
         */
        web_commit_signoff_required?: boolean;
      };
    };
    Response: FullRepository;
  };
  ["DELETE /repos/${owner}/${repo}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}";
      typedPath?: `/repos/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/artifacts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/artifacts";
      typedPath?: `/repos/${string}/${string}/actions/artifacts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** The name field of an artifact. When specified, only artifacts with this name will be returned. */
        name?: string;
      };
    };
    Response: {
      total_count: number;
      artifacts: Artifact[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/artifacts/${artifactId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/artifacts/${artifactId}";
      typedPath?: `/repos/${string}/${string}/actions/artifacts/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the artifact. */
        artifactId: number;
      };
    };
    Response: Artifact;
  };
  ["DELETE /repos/${owner}/${repo}/actions/artifacts/${artifactId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/artifacts/${artifactId}";
      typedPath?: `/repos/${string}/${string}/actions/artifacts/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the artifact. */
        artifactId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/artifacts/${artifactId}/${archiveFormat}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/artifacts/${artifactId}/${archiveFormat}";
      typedPath?: `/repos/${string}/${string}/actions/artifacts/${number}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the artifact. */
        artifactId: number;
        archiveFormat: string;
      };
    };
    Response: any;
  };
  ["GET /repos/${owner}/${repo}/actions/cache/usage"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/cache/usage";
      typedPath?: `/repos/${string}/${string}/actions/cache/usage`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ActionsCacheUsageByRepository;
  };
  ["GET /repos/${owner}/${repo}/actions/caches"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/caches";
      typedPath?: `/repos/${string}/${string}/actions/caches`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: string;
        /** An explicit key or prefix for identifying the cache */
        key?: string;
        /**
         * The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
         * @default "last_accessed_at"
         */
        sort?: "created_at" | "last_accessed_at" | "size_in_bytes";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
      };
    };
    Response: ActionsCacheList;
  };
  ["DELETE /repos/${owner}/${repo}/actions/caches"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/caches";
      typedPath?: `/repos/${string}/${string}/actions/caches`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** A key for identifying the cache. */
        key: string;
        /** The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: string;
      };
    };
    Response: ActionsCacheList;
  };
  ["DELETE /repos/${owner}/${repo}/actions/caches/${cacheId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/caches/${cacheId}";
      typedPath?: `/repos/${string}/${string}/actions/caches/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the GitHub Actions cache. */
        cacheId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/jobs/${jobId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/jobs/${jobId}";
      typedPath?: `/repos/${string}/${string}/actions/jobs/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the job. */
        jobId: number;
      };
    };
    Response: Job;
  };
  ["GET /repos/${owner}/${repo}/actions/jobs/${jobId}/logs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/jobs/${jobId}/logs";
      typedPath?: `/repos/${string}/${string}/actions/jobs/${number}/logs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the job. */
        jobId: number;
      };
    };
    Response: any;
  };
  ["POST /repos/${owner}/${repo}/actions/jobs/${jobId}/rerun"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/jobs/${jobId}/rerun";
      typedPath?: `/repos/${string}/${string}/actions/jobs/${number}/rerun`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the job. */
        jobId: number;
      };
      body: {
        /**
         * Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null;
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/actions/oidc/customization/sub"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/oidc/customization/sub";
      typedPath?: `/repos/${string}/${string}/actions/oidc/customization/sub`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: OidcCustomSubRepo;
  };
  ["PUT /repos/${owner}/${repo}/actions/oidc/customization/sub"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/oidc/customization/sub";
      typedPath?: `/repos/${string}/${string}/actions/oidc/customization/sub`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
        use_default: boolean;
        /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
        include_claim_keys?: string[];
      };
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/actions/organization-secrets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/organization-secrets";
      typedPath?: `/repos/${string}/${string}/actions/organization-secrets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: ActionsSecret[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/organization-variables"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/organization-variables";
      typedPath?: `/repos/${string}/${string}/actions/organization-variables`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      variables: ActionsVariable[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/permissions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/permissions";
      typedPath?: `/repos/${string}/${string}/actions/permissions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ActionsRepositoryPermissions;
  };
  ["PUT /repos/${owner}/${repo}/actions/permissions"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/permissions";
      typedPath?: `/repos/${string}/${string}/actions/permissions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Whether GitHub Actions is enabled on the repository. */
        enabled: ActionsEnabled;
        /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
        allowed_actions?: AllowedActions;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/permissions/access"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/permissions/access";
      typedPath?: `/repos/${string}/${string}/actions/permissions/access`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ActionsWorkflowAccessToRepository;
  };
  ["PUT /repos/${owner}/${repo}/actions/permissions/access"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/permissions/access";
      typedPath?: `/repos/${string}/${string}/actions/permissions/access`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: ActionsWorkflowAccessToRepository;
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/permissions/selected-actions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/permissions/selected-actions";
      typedPath?: `/repos/${string}/${string}/actions/permissions/selected-actions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: SelectedActions;
  };
  ["PUT /repos/${owner}/${repo}/actions/permissions/selected-actions"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/permissions/selected-actions";
      typedPath?: `/repos/${string}/${string}/actions/permissions/selected-actions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: SelectedActions;
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/permissions/workflow"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/permissions/workflow";
      typedPath?: `/repos/${string}/${string}/actions/permissions/workflow`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ActionsGetDefaultWorkflowPermissions;
  };
  ["PUT /repos/${owner}/${repo}/actions/permissions/workflow"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/permissions/workflow";
      typedPath?: `/repos/${string}/${string}/actions/permissions/workflow`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: ActionsSetDefaultWorkflowPermissions;
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/runners"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runners";
      typedPath?: `/repos/${string}/${string}/actions/runners`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** The name of a self-hosted runner. */
        name?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      runners: Runner[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/runners/downloads"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runners/downloads";
      typedPath?: `/repos/${string}/${string}/actions/runners/downloads`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: RunnerApplication[];
  };
  ["POST /repos/${owner}/${repo}/actions/runners/generate-jitconfig"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runners/generate-jitconfig";
      typedPath?: `/repos/${string}/${string}/actions/runners/generate-jitconfig`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the new runner. */
        name: string;
        /** The ID of the runner group to register the runner to. */
        runner_group_id: number;
        /**
         * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
        /**
         * The working directory to be used for job execution, relative to the runner install directory.
         * @default "_work"
         */
        work_folder?: string;
      };
    };
    Response: {
      /** A self hosted runner */
      runner: Runner;
      /** The base64 encoded runner configuration. */
      encoded_jit_config: string;
    };
  };
  ["POST /repos/${owner}/${repo}/actions/runners/registration-token"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runners/registration-token";
      typedPath?: `/repos/${string}/${string}/actions/runners/registration-token`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: AuthenticationToken;
  };
  ["POST /repos/${owner}/${repo}/actions/runners/remove-token"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runners/remove-token";
      typedPath?: `/repos/${string}/${string}/actions/runners/remove-token`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: AuthenticationToken;
  };
  ["GET /repos/${owner}/${repo}/actions/runners/${runnerId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: Runner;
  };
  ["DELETE /repos/${owner}/${repo}/actions/runners/${runnerId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}/labels";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["POST /repos/${owner}/${repo}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}/labels";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
      body: {
        /**
         * The names of the custom labels to add to the runner.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["PUT /repos/${owner}/${repo}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}/labels";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
      body: {
        /**
         * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
         * @maxItems 100
         * @minItems 0
         */
        labels: string[];
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["DELETE /repos/${owner}/${repo}/actions/runners/${runnerId}/labels"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}/labels";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["DELETE /repos/${owner}/${repo}/actions/runners/${runnerId}/labels/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/runners/${runnerId}/labels/${name}";
      typedPath?: `/repos/${string}/${string}/actions/runners/${number}/labels/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** Unique identifier of the self-hosted runner. */
        runnerId: number;
        /** The name of a self-hosted runner's custom label. */
        name: string;
      };
    };
    Response: {
      total_count: number;
      labels: RunnerLabel[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/runs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs";
      typedPath?: `/repos/${string}/${string}/actions/runs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        actor?: string;
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        branch?: string;
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event?: string;
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
        status?:
          | "completed"
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "skipped"
          | "stale"
          | "success"
          | "timed_out"
          | "in_progress"
          | "queued"
          | "requested"
          | "waiting"
          | "pending";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         * @format date-time
         */
        created?: string;
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
        /** Returns workflow runs with the `check_suite_id` that you specify. */
        check_suite_id?: number;
        /** Only returns workflow runs that are associated with the specified `head_sha`. */
        head_sha?: string;
      };
    };
    Response: {
      total_count: number;
      workflow_runs: WorkflowRun[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      query: {
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
      };
    };
    Response: WorkflowRun;
  };
  ["DELETE /repos/${owner}/${repo}/actions/runs/${runId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/approvals"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/approvals";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/approvals`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: EnvironmentApprovals[];
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/approve"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/approve";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/approve`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/artifacts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/artifacts";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/artifacts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** The name field of an artifact. When specified, only artifacts with this name will be returned. */
        name?: string;
      };
    };
    Response: {
      total_count: number;
      artifacts: Artifact[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/attempts/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
        /** The attempt number of the workflow run. */
        attemptNumber: number;
      };
      query: {
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
      };
    };
    Response: WorkflowRun;
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/jobs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/jobs";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/attempts/${number}/jobs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
        /** The attempt number of the workflow run. */
        attemptNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      jobs: Job[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/logs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/logs";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/attempts/${number}/logs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
        /** The attempt number of the workflow run. */
        attemptNumber: number;
      };
    };
    Response: any;
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/cancel"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/cancel";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/cancel`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: EmptyObject;
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/deployment_protection_rule"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/deployment_protection_rule";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/deployment_protection_rule`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      body: ReviewCustomGatesCommentRequired | ReviewCustomGatesStateRequired;
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/force-cancel"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/force-cancel";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/force-cancel`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/jobs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/jobs";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/jobs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      query: {
        /**
         * Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      jobs: Job[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/logs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/logs";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/logs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: any;
  };
  ["DELETE /repos/${owner}/${repo}/actions/runs/${runId}/logs"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/logs";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/logs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/pending_deployments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: PendingDeployment[];
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/pending_deployments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      body: {
        /**
         * The list of environment ids to approve or reject
         * @example [161171787,161171795]
         */
        environment_ids: number[];
        /**
         * Whether to approve or reject deployment to the specified environments.
         * @example "approved"
         */
        state: "approved" | "rejected";
        /**
         * A comment to accompany the deployment review
         * @example "Ship it!"
         */
        comment: string;
      };
    };
    Response: Deployment[];
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/rerun"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/rerun";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/rerun`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      body: {
        /**
         * Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null;
    };
    Response: EmptyObject;
  };
  ["POST /repos/${owner}/${repo}/actions/runs/${runId}/rerun-failed-jobs"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/rerun-failed-jobs";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/rerun-failed-jobs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
      body: {
        /**
         * Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null;
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/actions/runs/${runId}/timing"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/runs/${runId}/timing";
      typedPath?: `/repos/${string}/${string}/actions/runs/${number}/timing`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the workflow run. */
        runId: number;
      };
    };
    Response: WorkflowRunUsage;
  };
  ["GET /repos/${owner}/${repo}/actions/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/secrets";
      typedPath?: `/repos/${string}/${string}/actions/secrets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: ActionsSecret[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/secrets/public-key";
      typedPath?: `/repos/${string}/${string}/actions/secrets/public-key`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ActionsPublicKey;
  };
  ["GET /repos/${owner}/${repo}/actions/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/actions/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: ActionsSecret;
  };
  ["PUT /repos/${owner}/${repo}/actions/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/actions/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /repos/${owner}/${repo}/actions/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/actions/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/variables"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/variables";
      typedPath?: `/repos/${string}/${string}/actions/variables`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      variables: ActionsVariable[];
    };
  };
  ["POST /repos/${owner}/${repo}/actions/variables"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/variables";
      typedPath?: `/repos/${string}/${string}/actions/variables`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the variable. */
        name: string;
        /** The value of the variable. */
        value: string;
      };
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/actions/variables/${name}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/variables/${name}";
      typedPath?: `/repos/${string}/${string}/actions/variables/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the variable. */
        name: string;
      };
    };
    Response: ActionsVariable;
  };
  ["PATCH /repos/${owner}/${repo}/actions/variables/${name}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/actions/variables/${name}";
      typedPath?: `/repos/${string}/${string}/actions/variables/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the variable. */
        name: string;
      };
      body: {
        /** The name of the variable. */
        name?: string;
        /** The value of the variable. */
        value?: string;
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/actions/variables/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/actions/variables/${name}";
      typedPath?: `/repos/${string}/${string}/actions/variables/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the variable. */
        name: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/workflows"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/workflows";
      typedPath?: `/repos/${string}/${string}/actions/workflows`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      workflows: Workflow[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/workflows/${workflowId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/workflows/${workflowId}";
      typedPath?: `/repos/${string}/${string}/actions/workflows/${number | string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        workflowId: number | string;
      };
    };
    Response: Workflow;
  };
  ["PUT /repos/${owner}/${repo}/actions/workflows/${workflowId}/disable"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/workflows/${workflowId}/disable";
      typedPath?: `/repos/${string}/${string}/actions/workflows/${number | string}/disable`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        workflowId: number | string;
      };
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches";
      typedPath?: `/repos/${string}/${string}/actions/workflows/${number | string}/dispatches`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        workflowId: number | string;
      };
      body: {
        /** The git reference for the workflow. The reference can be a branch or tag name. */
        ref: string;
        /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
        inputs?: Record<string, any>;
      };
    };
    Response: void;
  };
  ["PUT /repos/${owner}/${repo}/actions/workflows/${workflowId}/enable"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/actions/workflows/${workflowId}/enable";
      typedPath?: `/repos/${string}/${string}/actions/workflows/${number | string}/enable`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        workflowId: number | string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/actions/workflows/${workflowId}/runs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/workflows/${workflowId}/runs";
      typedPath?: `/repos/${string}/${string}/actions/workflows/${number | string}/runs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        workflowId: number | string;
      };
      query: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        actor?: string;
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        branch?: string;
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event?: string;
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
        status?:
          | "completed"
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "skipped"
          | "stale"
          | "success"
          | "timed_out"
          | "in_progress"
          | "queued"
          | "requested"
          | "waiting"
          | "pending";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         * @format date-time
         */
        created?: string;
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
        /** Returns workflow runs with the `check_suite_id` that you specify. */
        check_suite_id?: number;
        /** Only returns workflow runs that are associated with the specified `head_sha`. */
        head_sha?: string;
      };
    };
    Response: {
      total_count: number;
      workflow_runs: WorkflowRun[];
    };
  };
  ["GET /repos/${owner}/${repo}/actions/workflows/${workflowId}/timing"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/actions/workflows/${workflowId}/timing";
      typedPath?: `/repos/${string}/${string}/actions/workflows/${number | string}/timing`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        workflowId: number | string;
      };
    };
    Response: WorkflowUsage;
  };
  ["GET /repos/${owner}/${repo}/activity"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/activity";
      typedPath?: `/repos/${string}/${string}/activity`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The Git reference for the activities you want to list.
         *
         * The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.
         */
        ref?: string;
        /** The GitHub username to use to filter by the actor who performed the activity. */
        actor?: string;
        /**
         * The time period to filter by.
         *
         * For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).
         */
        time_period?: "day" | "week" | "month" | "quarter" | "year";
        /**
         * The activity type to filter by.
         *
         * For example, you can choose to filter by "force_push", to see all force pushes to the repository.
         */
        activity_type?:
          | "push"
          | "force_push"
          | "branch_creation"
          | "branch_deletion"
          | "pr_merge"
          | "merge_queue_merge";
      };
    };
    Response: Activity[];
  };
  ["GET /repos/${owner}/${repo}/assignees"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/assignees";
      typedPath?: `/repos/${string}/${string}/assignees`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /repos/${owner}/${repo}/assignees/${assignee}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/assignees/${assignee}";
      typedPath?: `/repos/${string}/${string}/assignees/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        assignee: string;
      };
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/attestations"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/attestations";
      typedPath?: `/repos/${string}/${string}/attestations`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /**
         * The attestation's Sigstore Bundle.
         * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
         */
        bundle: {
          mediaType?: string;
          verificationMaterial?: Record<string, any>;
          dsseEnvelope?: Record<string, any>;
        };
      };
    };
    Response: {
      /** The ID of the attestation. */
      id?: number;
    };
  };
  ["GET /repos/${owner}/${repo}/attestations/${subjectDigest}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/attestations/${subjectDigest}";
      typedPath?: `/repos/${string}/${string}/attestations/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`. */
        subjectDigest: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    Response: {
      attestations?: {
        /**
         * The attestation's Sigstore Bundle.
         * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
         */
        bundle?: {
          mediaType?: string;
          verificationMaterial?: Record<string, any>;
          dsseEnvelope?: Record<string, any>;
        };
        repository_id?: number;
        bundle_url?: string;
      }[];
    };
  };
  ["GET /repos/${owner}/${repo}/autolinks"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/autolinks";
      typedPath?: `/repos/${string}/${string}/autolinks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: Autolink[];
  };
  ["POST /repos/${owner}/${repo}/autolinks"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/autolinks";
      typedPath?: `/repos/${string}/${string}/autolinks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit. */
        key_prefix: string;
        /** The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`. */
        url_template: string;
        /**
         * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
         * @default true
         */
        is_alphanumeric?: boolean;
      };
    };
    Response: Autolink;
  };
  ["GET /repos/${owner}/${repo}/autolinks/${autolinkId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/autolinks/${autolinkId}";
      typedPath?: `/repos/${string}/${string}/autolinks/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the autolink. */
        autolinkId: number;
      };
    };
    Response: Autolink;
  };
  ["DELETE /repos/${owner}/${repo}/autolinks/${autolinkId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/autolinks/${autolinkId}";
      typedPath?: `/repos/${string}/${string}/autolinks/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the autolink. */
        autolinkId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/automated-security-fixes"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/automated-security-fixes";
      typedPath?: `/repos/${string}/${string}/automated-security-fixes`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CheckAutomatedSecurityFixes;
  };
  ["PUT /repos/${owner}/${repo}/automated-security-fixes"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/automated-security-fixes";
      typedPath?: `/repos/${string}/${string}/automated-security-fixes`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/automated-security-fixes"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/automated-security-fixes";
      typedPath?: `/repos/${string}/${string}/automated-security-fixes`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches";
      typedPath?: `/repos/${string}/${string}/branches`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
        protected?: boolean;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: ShortBranch[];
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}";
      typedPath?: `/repos/${string}/${string}/branches/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: BranchWithProtection;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: BranchProtection;
  };
  ["PUT /repos/${owner}/${repo}/branches/${branch}/protection"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** Require status checks to pass before merging. Set to `null` to disable. */
        required_status_checks: {
          /** Require branches to be up to date before merging. */
          strict: boolean;
          /**
           * **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
           * @deprecated
           */
          contexts: string[];
          /** The list of status checks to require in order to merge into this branch. */
          checks?: {
            /** The name of the required check */
            context: string;
            /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
            app_id?: number;
          }[];
        } | null;
        /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
        enforce_admins: boolean | null;
        /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
        required_pull_request_reviews: {
          /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
          dismissal_restrictions?: {
            /** The list of user `login`s with dismissal access */
            users?: string[];
            /** The list of team `slug`s with dismissal access */
            teams?: string[];
            /** The list of app `slug`s with dismissal access */
            apps?: string[];
          };
          /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
          dismiss_stale_reviews?: boolean;
          /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
          require_code_owner_reviews?: boolean;
          /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
          required_approving_review_count?: number;
          /**
           * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
           * @default false
           */
          require_last_push_approval?: boolean;
          /** Allow specific users, teams, or apps to bypass pull request requirements. */
          bypass_pull_request_allowances?: {
            /** The list of user `login`s allowed to bypass pull request requirements. */
            users?: string[];
            /** The list of team `slug`s allowed to bypass pull request requirements. */
            teams?: string[];
            /** The list of app `slug`s allowed to bypass pull request requirements. */
            apps?: string[];
          };
        } | null;
        /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
        restrictions: {
          /** The list of user `login`s with push access */
          users: string[];
          /** The list of team `slug`s with push access */
          teams: string[];
          /** The list of app `slug`s with push access */
          apps?: string[];
        } | null;
        /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
        required_linear_history?: boolean;
        /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
        allow_force_pushes?: boolean | null;
        /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
        allow_deletions?: boolean;
        /** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
        block_creations?: boolean;
        /** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
        required_conversation_resolution?: boolean;
        /**
         * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
         * @default false
         */
        lock_branch?: boolean;
        /**
         * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
         * @default false
         */
        allow_fork_syncing?: boolean;
      };
    };
    Response: ProtectedBranch;
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/enforce_admins`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: ProtectedBranchAdminEnforced;
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/enforce_admins`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: ProtectedBranchAdminEnforced;
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/enforce_admins`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_pull_request_reviews`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: ProtectedBranchPullRequestReview;
  };
  ["PATCH /repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_pull_request_reviews`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
        dismissal_restrictions?: {
          /** The list of user `login`s with dismissal access */
          users?: string[];
          /** The list of team `slug`s with dismissal access */
          teams?: string[];
          /** The list of app `slug`s with dismissal access */
          apps?: string[];
        };
        /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
        dismiss_stale_reviews?: boolean;
        /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
        require_code_owner_reviews?: boolean;
        /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
        required_approving_review_count?: number;
        /**
         * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
         * @default false
         */
        require_last_push_approval?: boolean;
        /** Allow specific users, teams, or apps to bypass pull request requirements. */
        bypass_pull_request_allowances?: {
          /** The list of user `login`s allowed to bypass pull request requirements. */
          users?: string[];
          /** The list of team `slug`s allowed to bypass pull request requirements. */
          teams?: string[];
          /** The list of app `slug`s allowed to bypass pull request requirements. */
          apps?: string[];
        };
      };
    };
    Response: ProtectedBranchPullRequestReview;
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_pull_request_reviews`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/required_signatures"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_signatures`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: ProtectedBranchAdminEnforced;
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/protection/required_signatures"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_signatures`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: ProtectedBranchAdminEnforced;
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/required_signatures"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_signatures`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: StatusCheckPolicy;
  };
  ["PATCH /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** Require branches to be up to date before merging. */
        strict?: boolean;
        /**
         * **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
         * @deprecated
         */
        contexts?: string[];
        /** The list of status checks to require in order to merge into this branch. */
        checks?: {
          /** The name of the required check */
          context: string;
          /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
          app_id?: number;
        }[];
      };
    };
    Response: StatusCheckPolicy;
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks/contexts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: string[];
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks/contexts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body:
        | {
            /** The name of the status checks */
            contexts: string[];
          }
        | string[];
    };
    Response: string[];
  };
  ["PUT /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks/contexts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body:
        | {
            /** The name of the status checks */
            contexts: string[];
          }
        | string[];
    };
    Response: string[];
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/required_status_checks/contexts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body:
        | {
            /** The name of the status checks */
            contexts: string[];
          }
        | string[];
    };
    Response: string[];
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/restrictions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: BranchRestrictionPolicy;
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/restrictions"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/apps`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: Integration[];
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/apps`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      };
    };
    Response: Integration[];
  };
  ["PUT /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/apps`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      };
    };
    Response: Integration[];
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/apps`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      };
    };
    Response: Integration[];
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/teams`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: Team[];
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/teams`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body:
        | {
            /** The slug values for teams */
            teams: string[];
          }
        | string[];
    };
    Response: Team[];
  };
  ["PUT /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/teams`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body:
        | {
            /** The slug values for teams */
            teams: string[];
          }
        | string[];
    };
    Response: Team[];
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/teams`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body:
        | {
            /** The slug values for teams */
            teams: string[];
          }
        | string[];
    };
    Response: Team[];
  };
  ["GET /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/users`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
    };
    Response: SimpleUser[];
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/users`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The username for users */
        users: string[];
      };
    };
    Response: SimpleUser[];
  };
  ["PUT /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/users`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The username for users */
        users: string[];
      };
    };
    Response: SimpleUser[];
  };
  ["DELETE /repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users";
      typedPath?: `/repos/${string}/${string}/branches/${string}/protection/restrictions/users`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The username for users */
        users: string[];
      };
    };
    Response: SimpleUser[];
  };
  ["POST /repos/${owner}/${repo}/branches/${branch}/rename"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/branches/${branch}/rename";
      typedPath?: `/repos/${string}/${string}/branches/${string}/rename`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      body: {
        /** The new name of the branch. */
        new_name: string;
      };
    };
    Response: BranchWithProtection;
  };
  ["POST /repos/${owner}/${repo}/check-runs"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/check-runs";
      typedPath?: `/repos/${string}/${string}/check-runs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: (
        | {
            status: "completed";
            [key: string]: any;
          }
        | {
            status?: "queued" | "in_progress";
            [key: string]: any;
          }
      ) & {
        /** The name of the check. For example, "code-coverage". */
        name: string;
        /** The SHA of the commit. */
        head_sha: string;
        /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
        details_url?: string;
        /** A reference for the run on the integrator's system. */
        external_id?: string;
        /**
         * The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
         * @default "queued"
         */
        status?: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
        /**
         * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        started_at?: string;
        /**
         * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
         * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
         */
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out";
        /**
         * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        completed_at?: string;
        /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
        output?: {
          /** The title of the check run. */
          title: string;
          /**
           * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
           * @maxLength 65535
           */
          summary: string;
          /**
           * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
           * @maxLength 65535
           */
          text?: string;
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
           * @maxItems 50
           */
          annotations?: {
            /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
            path: string;
            /** The start line of the annotation. Line numbers start at 1. */
            start_line: number;
            /** The end line of the annotation. */
            end_line: number;
            /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
            start_column?: number;
            /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
            end_column?: number;
            /** The level of the annotation. */
            annotation_level: "notice" | "warning" | "failure";
            /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
            message: string;
            /** The title that represents the annotation. The maximum size is 255 characters. */
            title?: string;
            /** Details about this annotation. The maximum size is 64 KB. */
            raw_details?: string;
          }[];
          /** Adds images to the output displayed in the GitHub pull request UI. */
          images?: {
            /** The alternative text for the image. */
            alt: string;
            /** The full URL of the image. */
            image_url: string;
            /** A short image description. */
            caption?: string;
          }[];
        };
        /**
         * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
         * @maxItems 3
         */
        actions?: {
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           * @maxLength 20
           */
          label: string;
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           * @maxLength 40
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           * @maxLength 20
           */
          identifier: string;
        }[];
      };
    };
    Response: CheckRun;
  };
  ["GET /repos/${owner}/${repo}/check-runs/${checkRunId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/check-runs/${checkRunId}";
      typedPath?: `/repos/${string}/${string}/check-runs/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check run. */
        checkRunId: number;
      };
    };
    Response: CheckRun;
  };
  ["PATCH /repos/${owner}/${repo}/check-runs/${checkRunId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/check-runs/${checkRunId}";
      typedPath?: `/repos/${string}/${string}/check-runs/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check run. */
        checkRunId: number;
      };
      body: (
        | {
            status?: "completed";
            [key: string]: any;
          }
        | {
            status?: "queued" | "in_progress";
            [key: string]: any;
          }
      ) & {
        /** The name of the check. For example, "code-coverage". */
        name?: string;
        /** The URL of the integrator's site that has the full details of the check. */
        details_url?: string;
        /** A reference for the run on the integrator's system. */
        external_id?: string;
        /**
         * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        started_at?: string;
        /** The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
        status?: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
        /**
         * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
         * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
         */
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out";
        /**
         * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        completed_at?: string;
        /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
        output?: {
          /** **Required**. */
          title?: string;
          /**
           * Can contain Markdown.
           * @maxLength 65535
           */
          summary: string;
          /**
           * Can contain Markdown.
           * @maxLength 65535
           */
          text?: string;
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
           * @maxItems 50
           */
          annotations?: {
            /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
            path: string;
            /** The start line of the annotation. Line numbers start at 1. */
            start_line: number;
            /** The end line of the annotation. */
            end_line: number;
            /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
            start_column?: number;
            /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
            end_column?: number;
            /** The level of the annotation. */
            annotation_level: "notice" | "warning" | "failure";
            /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
            message: string;
            /** The title that represents the annotation. The maximum size is 255 characters. */
            title?: string;
            /** Details about this annotation. The maximum size is 64 KB. */
            raw_details?: string;
          }[];
          /** Adds images to the output displayed in the GitHub pull request UI. */
          images?: {
            /** The alternative text for the image. */
            alt: string;
            /** The full URL of the image. */
            image_url: string;
            /** A short image description. */
            caption?: string;
          }[];
        };
        /**
         * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
         * @maxItems 3
         */
        actions?: {
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           * @maxLength 20
           */
          label: string;
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           * @maxLength 40
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           * @maxLength 20
           */
          identifier: string;
        }[];
      };
    };
    Response: CheckRun;
  };
  ["GET /repos/${owner}/${repo}/check-runs/${checkRunId}/annotations"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/check-runs/${checkRunId}/annotations";
      typedPath?: `/repos/${string}/${string}/check-runs/${number}/annotations`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check run. */
        checkRunId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: CheckAnnotation[];
  };
  ["POST /repos/${owner}/${repo}/check-runs/${checkRunId}/rerequest"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/check-runs/${checkRunId}/rerequest";
      typedPath?: `/repos/${string}/${string}/check-runs/${number}/rerequest`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check run. */
        checkRunId: number;
      };
    };
    Response: EmptyObject;
  };
  ["POST /repos/${owner}/${repo}/check-suites"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/check-suites";
      typedPath?: `/repos/${string}/${string}/check-suites`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The sha of the head commit. */
        head_sha: string;
      };
    };
    Response: CheckSuite;
  };
  ["PATCH /repos/${owner}/${repo}/check-suites/preferences"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/check-suites/preferences";
      typedPath?: `/repos/${string}/${string}/check-suites/preferences`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. */
        auto_trigger_checks?: {
          /** The `id` of the GitHub App. */
          app_id: number;
          /**
           * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
           * @default true
           */
          setting: boolean;
        }[];
      };
    };
    Response: CheckSuitePreference;
  };
  ["GET /repos/${owner}/${repo}/check-suites/${checkSuiteId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/check-suites/${checkSuiteId}";
      typedPath?: `/repos/${string}/${string}/check-suites/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check suite. */
        checkSuiteId: number;
      };
    };
    Response: CheckSuite;
  };
  ["GET /repos/${owner}/${repo}/check-suites/${checkSuiteId}/check-runs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/check-suites/${checkSuiteId}/check-runs";
      typedPath?: `/repos/${string}/${string}/check-suites/${number}/check-runs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check suite. */
        checkSuiteId: number;
      };
      query: {
        /** Returns check runs with the specified `name`. */
        check_name?: string;
        /** Returns check runs with the specified `status`. */
        status?: "queued" | "in_progress" | "completed";
        /**
         * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      check_runs: CheckRun[];
    };
  };
  ["POST /repos/${owner}/${repo}/check-suites/${checkSuiteId}/rerequest"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/check-suites/${checkSuiteId}/rerequest";
      typedPath?: `/repos/${string}/${string}/check-suites/${number}/rerequest`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the check suite. */
        checkSuiteId: number;
      };
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        tool_name?: CodeScanningAnalysisToolName;
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        tool_guid?: CodeScanningAnalysisToolGuid;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
        /** The number of the pull request for the results you want to list. */
        pr?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** If specified, only code scanning alerts with this state will be returned. */
        state?: CodeScanningAlertStateQuery;
        /** If specified, only code scanning alerts with this severity will be returned. */
        severity?: CodeScanningAlertSeverity;
      };
    };
    Response: CodeScanningAlertItems[];
  };
  ["GET /repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts/${AlertNumber}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
    };
    Response: CodeScanningAlert;
  };
  ["PATCH /repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts/${AlertNumber}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
      body: {
        /** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
        state: CodeScanningAlertSetState;
        /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
        dismissed_reason?: CodeScanningAlertDismissedReason;
        /** The dismissal comment associated with the dismissal of the alert. */
        dismissed_comment?: CodeScanningAlertDismissedComment;
        /** If `true`, attempt to create an alert dismissal request. */
        create_request?: CodeScanningAlertCreateRequest;
      };
    };
    Response: CodeScanningAlert;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts/${AlertNumber}/autofix`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
    };
    Response: CodeScanningAutofix;
  };
  ["POST /repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts/${AlertNumber}/autofix`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
    };
    Response: CodeScanningAutofix;
  };
  ["POST /repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix/commits"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix/commits";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts/${AlertNumber}/autofix/commits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
      body: CodeScanningAutofixCommits;
    };
    Response: CodeScanningAutofixCommitsResponse;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/instances"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/instances";
      typedPath?: `/repos/${string}/${string}/code-scanning/alerts/${AlertNumber}/instances`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
        /** The number of the pull request for the results you want to list. */
        pr?: number;
      };
    };
    Response: CodeScanningAlertInstance[];
  };
  ["GET /repos/${owner}/${repo}/code-scanning/analyses"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/analyses";
      typedPath?: `/repos/${string}/${string}/code-scanning/analyses`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        tool_name?: CodeScanningAnalysisToolName;
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        tool_guid?: CodeScanningAnalysisToolGuid;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** The number of the pull request for the results you want to list. */
        pr?: number;
        /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
        /** Filter analyses belonging to the same SARIF upload. */
        sarif_id?: CodeScanningAnalysisSarifId;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created";
      };
    };
    Response: CodeScanningAnalysis[];
  };
  ["GET /repos/${owner}/${repo}/code-scanning/analyses/${analysisId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}";
      typedPath?: `/repos/${string}/${string}/code-scanning/analyses/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
        analysisId: number;
      };
    };
    Response: CodeScanningAnalysis;
  };
  ["DELETE /repos/${owner}/${repo}/code-scanning/analyses/${analysisId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}";
      typedPath?: `/repos/${string}/${string}/code-scanning/analyses/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
        analysisId: number;
      };
      query: {
        /** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
        confirm_delete?: string | null;
      };
    };
    Response: CodeScanningAnalysisDeletion;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/codeql/databases"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/codeql/databases";
      typedPath?: `/repos/${string}/${string}/code-scanning/codeql/databases`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CodeScanningCodeqlDatabase[];
  };
  ["GET /repos/${owner}/${repo}/code-scanning/codeql/databases/${language}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}";
      typedPath?: `/repos/${string}/${string}/code-scanning/codeql/databases/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The language of the CodeQL database. */
        language: string;
      };
    };
    Response: CodeScanningCodeqlDatabase;
  };
  ["DELETE /repos/${owner}/${repo}/code-scanning/codeql/databases/${language}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}";
      typedPath?: `/repos/${string}/${string}/code-scanning/codeql/databases/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The language of the CodeQL database. */
        language: string;
      };
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/code-scanning/codeql/variant-analyses"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses";
      typedPath?: `/repos/${string}/${string}/code-scanning/codeql/variant-analyses`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The language targeted by the CodeQL query */
        language: CodeScanningVariantAnalysisLanguage;
        /** A Base64-encoded tarball containing a CodeQL query and all its dependencies */
        query_pack: string;
        /** List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required. */
        repositories?: string[];
        /**
         * List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
         * @maxItems 1
         */
        repository_lists?: string[];
        /**
         * List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
         * @maxItems 1
         */
        repository_owners?: string[];
      };
    };
    Response: CodeScanningVariantAnalysis;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}";
      typedPath?: `/repos/${string}/${string}/code-scanning/codeql/variant-analyses/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the variant analysis. */
        codeqlVariantAnalysisId: number;
      };
    };
    Response: CodeScanningVariantAnalysis;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}/repos/${repoOwner}/${repoName}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}/repos/${repoOwner}/${repoName}";
      typedPath?: `/repos/${string}/${string}/code-scanning/codeql/variant-analyses/${number}/repos/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the controller repository. */
        repo: string;
        /** The ID of the variant analysis. */
        codeqlVariantAnalysisId: number;
        /** The account owner of the variant analysis repository. The name is not case sensitive. */
        repoOwner: string;
        /** The name of the variant analysis repository. */
        repoName: string;
      };
    };
    Response: CodeScanningVariantAnalysisRepoTask;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/default-setup"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/default-setup";
      typedPath?: `/repos/${string}/${string}/code-scanning/default-setup`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CodeScanningDefaultSetup;
  };
  ["PATCH /repos/${owner}/${repo}/code-scanning/default-setup"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/code-scanning/default-setup";
      typedPath?: `/repos/${string}/${string}/code-scanning/default-setup`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: CodeScanningDefaultSetupUpdate;
    };
    Response: EmptyObject;
  };
  ["POST /repos/${owner}/${repo}/code-scanning/sarifs"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/code-scanning/sarifs";
      typedPath?: `/repos/${string}/${string}/code-scanning/sarifs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The SHA of the commit to which the analysis you are uploading relates. */
        commit_sha: CodeScanningAnalysisCommitSha;
        /**
         * The full Git reference, formatted as `refs/heads/<branch name>`,
         * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
         */
        ref: CodeScanningRefFull;
        /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */
        sarif: CodeScanningAnalysisSarifFile;
        /**
         * The base directory used in the analysis, as it appears in the SARIF file.
         * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
         * @format uri
         * @example "file:///github/workspace/"
         */
        checkout_uri?: string;
        /**
         * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        started_at?: string;
        /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
        tool_name?: string;
        /**
         * Whether the SARIF file will be validated according to the code scanning specifications.
         * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
         */
        validate?: boolean;
      };
    };
    Response: CodeScanningSarifsReceipt;
  };
  ["GET /repos/${owner}/${repo}/code-scanning/sarifs/${sarifId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-scanning/sarifs/${sarifId}";
      typedPath?: `/repos/${string}/${string}/code-scanning/sarifs/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SARIF ID obtained after uploading. */
        sarifId: string;
      };
    };
    Response: CodeScanningSarifsStatus;
  };
  ["GET /repos/${owner}/${repo}/code-security-configuration"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/code-security-configuration";
      typedPath?: `/repos/${string}/${string}/code-security-configuration`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CodeSecurityConfigurationForRepository;
  };
  ["GET /repos/${owner}/${repo}/codeowners/errors"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codeowners/errors";
      typedPath?: `/repos/${string}/${string}/codeowners/errors`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */
        ref?: string;
      };
    };
    Response: CodeownersErrors;
  };
  ["GET /repos/${owner}/${repo}/codespaces"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces";
      typedPath?: `/repos/${string}/${string}/codespaces`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      codespaces: Codespace[];
    };
  };
  ["POST /repos/${owner}/${repo}/codespaces"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/codespaces";
      typedPath?: `/repos/${string}/${string}/codespaces`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Git ref (typically a branch name) for this codespace */
        ref?: string;
        /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
        location?: string;
        /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /** Machine type to use for this codespace */
        machine?: string;
        /** Path to devcontainer.json config to use for this codespace */
        devcontainer_path?: string;
        /** Whether to authorize requested permissions from devcontainer.json */
        multi_repo_permissions_opt_out?: boolean;
        /** Working directory for this codespace */
        working_directory?: string;
        /** Time in minutes before codespace stops from inactivity */
        idle_timeout_minutes?: number;
        /** Display name for this codespace */
        display_name?: string;
        /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
        retention_period_minutes?: number;
      } | null;
    };
    Response: Codespace;
  };
  ["GET /repos/${owner}/${repo}/codespaces/devcontainers"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/devcontainers";
      typedPath?: `/repos/${string}/${string}/codespaces/devcontainers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      devcontainers: {
        path: string;
        name?: string;
        display_name?: string;
      }[];
    };
  };
  ["GET /repos/${owner}/${repo}/codespaces/machines"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/machines";
      typedPath?: `/repos/${string}/${string}/codespaces/machines`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The location to check for available machines. Assigned by IP if not provided.
         * @example "WestUs2"
         */
        location?: string;
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /**
         * The branch or commit to check for prebuild availability and devcontainer restrictions.
         * @example "main"
         */
        ref?: string;
      };
    };
    Response: {
      total_count: number;
      machines: CodespaceMachine[];
    };
  };
  ["GET /repos/${owner}/${repo}/codespaces/new"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/new";
      typedPath?: `/repos/${string}/${string}/codespaces/new`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
         * @example "main"
         */
        ref?: string;
        /**
         * An alternative IP for default location auto-detection, such as when proxying a request.
         * @example "1.2.3.4"
         */
        client_ip?: string;
      };
    };
    Response: {
      /** A GitHub user. */
      billable_owner?: SimpleUser;
      defaults?: {
        location: string;
        devcontainer_path: string | null;
      };
    };
  };
  ["GET /repos/${owner}/${repo}/codespaces/permissions_check"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/permissions_check";
      typedPath?: `/repos/${string}/${string}/codespaces/permissions_check`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
         * @example "master"
         */
        ref: string;
        /**
         * Path to the devcontainer.json configuration to use for the permission check.
         * @example ".devcontainer/example/devcontainer.json"
         */
        devcontainer_path: string;
      };
    };
    Response: CodespacesPermissionsCheckForDevcontainer;
  };
  ["GET /repos/${owner}/${repo}/codespaces/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/secrets";
      typedPath?: `/repos/${string}/${string}/codespaces/secrets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: RepoCodespacesSecret[];
    };
  };
  ["GET /repos/${owner}/${repo}/codespaces/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/secrets/public-key";
      typedPath?: `/repos/${string}/${string}/codespaces/secrets/public-key`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CodespacesPublicKey;
  };
  ["GET /repos/${owner}/${repo}/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/codespaces/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/codespaces/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: RepoCodespacesSecret;
  };
  ["PUT /repos/${owner}/${repo}/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/codespaces/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/codespaces/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /repos/${owner}/${repo}/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/codespaces/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/codespaces/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/collaborators"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/collaborators";
      typedPath?: `/repos/${string}/${string}/collaborators`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
         * @default "all"
         */
        affiliation?: "outside" | "direct" | "all";
        /** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */
        permission?: "pull" | "triage" | "push" | "maintain" | "admin";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Collaborator[];
  };
  ["GET /repos/${owner}/${repo}/collaborators/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/collaborators/${username}";
      typedPath?: `/repos/${string}/${string}/collaborators/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /repos/${owner}/${repo}/collaborators/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/collaborators/${username}";
      typedPath?: `/repos/${string}/${string}/collaborators/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
      body: {
        /**
         * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
         * @default "push"
         */
        permission?: string;
      };
    };
    Response: RepositoryInvitation;
  };
  ["DELETE /repos/${owner}/${repo}/collaborators/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/collaborators/${username}";
      typedPath?: `/repos/${string}/${string}/collaborators/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/collaborators/${username}/permission"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/collaborators/${username}/permission";
      typedPath?: `/repos/${string}/${string}/collaborators/${string}/permission`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: RepositoryCollaboratorPermission;
  };
  ["GET /repos/${owner}/${repo}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/comments";
      typedPath?: `/repos/${string}/${string}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: CommitComment[];
  };
  ["GET /repos/${owner}/${repo}/comments/${commentId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: CommitComment;
  };
  ["PATCH /repos/${owner}/${repo}/comments/${commentId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The contents of the comment */
        body: string;
      };
    };
    Response: CommitComment;
  };
  ["DELETE /repos/${owner}/${repo}/comments/${commentId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/comments/${commentId}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/comments/${commentId}/reactions";
      typedPath?: `/repos/${string}/${string}/comments/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /repos/${owner}/${repo}/comments/${commentId}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/comments/${commentId}/reactions";
      typedPath?: `/repos/${string}/${string}/comments/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /repos/${owner}/${repo}/comments/${commentId}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/comments/${commentId}/reactions/${reactionId}";
      typedPath?: `/repos/${string}/${string}/comments/${number}/reactions/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/commits"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits";
      typedPath?: `/repos/${string}/${string}/commits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */
        sha?: string;
        /** Only commits containing this file path will be returned. */
        path?: string;
        /** GitHub username or email address to use to filter by commit author. */
        author?: string;
        /** GitHub username or email address to use to filter by commit committer. */
        committer?: string;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
         * @format date-time
         */
        since?: string;
        /**
         * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
         * @format date-time
         */
        until?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Commit[];
  };
  ["GET /repos/${owner}/${repo}/commits/${commitSha}/branches-where-head"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${commitSha}/branches-where-head";
      typedPath?: `/repos/${string}/${string}/commits/${string}/branches-where-head`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SHA of the commit. */
        commitSha: string;
      };
    };
    Response: BranchShort[];
  };
  ["GET /repos/${owner}/${repo}/commits/${commitSha}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${commitSha}/comments";
      typedPath?: `/repos/${string}/${string}/commits/${string}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SHA of the commit. */
        commitSha: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: CommitComment[];
  };
  ["POST /repos/${owner}/${repo}/commits/${commitSha}/comments"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/commits/${commitSha}/comments";
      typedPath?: `/repos/${string}/${string}/commits/${string}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SHA of the commit. */
        commitSha: string;
      };
      body: {
        /** The contents of the comment. */
        body: string;
        /** Relative path of the file to comment on. */
        path?: string;
        /** Line index in the diff to comment on. */
        position?: number;
        /** **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on. */
        line?: number;
      };
    };
    Response: CommitComment;
  };
  ["GET /repos/${owner}/${repo}/commits/${commitSha}/pulls"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${commitSha}/pulls";
      typedPath?: `/repos/${string}/${string}/commits/${string}/pulls`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SHA of the commit. */
        commitSha: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: PullRequestSimple[];
  };
  ["GET /repos/${owner}/${repo}/commits/${ref}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${ref}";
      typedPath?: `/repos/${string}/${string}/commits/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
        ref: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: Commit;
  };
  ["GET /repos/${owner}/${repo}/commits/${ref}/check-runs"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${ref}/check-runs";
      typedPath?: `/repos/${string}/${string}/commits/${string}/check-runs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
        ref: string;
      };
      query: {
        /** Returns check runs with the specified `name`. */
        check_name?: string;
        /** Returns check runs with the specified `status`. */
        status?: "queued" | "in_progress" | "completed";
        /**
         * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        app_id?: number;
      };
    };
    Response: {
      total_count: number;
      check_runs: CheckRun[];
    };
  };
  ["GET /repos/${owner}/${repo}/commits/${ref}/check-suites"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${ref}/check-suites";
      typedPath?: `/repos/${string}/${string}/commits/${string}/check-suites`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
        ref: string;
      };
      query: {
        /**
         * Filters check suites by GitHub App `id`.
         * @example 1
         */
        app_id?: number;
        /** Returns check runs with the specified `name`. */
        check_name?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      check_suites: CheckSuite[];
    };
  };
  ["GET /repos/${owner}/${repo}/commits/${ref}/status"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${ref}/status";
      typedPath?: `/repos/${string}/${string}/commits/${string}/status`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
        ref: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: CombinedCommitStatus;
  };
  ["GET /repos/${owner}/${repo}/commits/${ref}/statuses"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/commits/${ref}/statuses";
      typedPath?: `/repos/${string}/${string}/commits/${string}/statuses`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
        ref: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Status[];
  };
  ["GET /repos/${owner}/${repo}/community/profile"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/community/profile";
      typedPath?: `/repos/${string}/${string}/community/profile`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CommunityProfile;
  };
  ["GET /repos/${owner}/${repo}/compare/${basehead}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/compare/${basehead}";
      typedPath?: `/repos/${string}/${string}/compare/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`. */
        basehead: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: CommitComparison;
  };
  ["GET /repos/${owner}/${repo}/contents/${path}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/contents/${path}";
      typedPath?: `/repos/${string}/${string}/contents/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** path parameter */
        path: string;
      };
      query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch. */
        ref?: string;
      };
    };
    Response: ContentTree;
  };
  ["PUT /repos/${owner}/${repo}/contents/${path}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/contents/${path}";
      typedPath?: `/repos/${string}/${string}/contents/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** path parameter */
        path: string;
      };
      body: {
        /** The commit message. */
        message: string;
        /** The new file content, using Base64 encoding. */
        content: string;
        /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
        sha?: string;
        /** The branch name. Default: the repository’s default branch. */
        branch?: string;
        /** The person that committed the file. Default: the authenticated user. */
        committer?: {
          /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
          name: string;
          /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
          email: string;
          /** @example ""2013-01-05T13:13:22+05:00"" */
          date?: string;
        };
        /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
        author?: {
          /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
          name: string;
          /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
          email: string;
          /** @example ""2013-01-15T17:13:22+05:00"" */
          date?: string;
        };
      };
    };
    Response: FileCommit;
  };
  ["DELETE /repos/${owner}/${repo}/contents/${path}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/contents/${path}";
      typedPath?: `/repos/${string}/${string}/contents/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** path parameter */
        path: string;
      };
      body: {
        /** The commit message. */
        message: string;
        /** The blob SHA of the file being deleted. */
        sha: string;
        /** The branch name. Default: the repository’s default branch */
        branch?: string;
        /** object containing information about the committer. */
        committer?: {
          /** The name of the author (or committer) of the commit */
          name?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
        };
        /** object containing information about the author. */
        author?: {
          /** The name of the author (or committer) of the commit */
          name?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
        };
      };
    };
    Response: FileCommit;
  };
  ["GET /repos/${owner}/${repo}/contributors"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/contributors";
      typedPath?: `/repos/${string}/${string}/contributors`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** Set to `1` or `true` to include anonymous contributors in results. */
        anon?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Contributor[];
  };
  ["GET /repos/${owner}/${repo}/dependabot/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependabot/alerts";
      typedPath?: `/repos/${string}/${string}/dependabot/alerts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * A comma-separated list of states. If specified, only alerts with these states will be returned.
         *
         * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
         */
        state?: string;
        /**
         * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
         *
         * Can be: `low`, `medium`, `high`, `critical`
         */
        severity?: string;
        /**
         * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
         *
         * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
         */
        ecosystem?: string;
        /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
        package?: string;
        /** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */
        manifest?: string;
        /**
         * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
         * - An exact number (`n`)
         * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
         * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
         *
         * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
         */
        epss_percentage?: string;
        /**
         * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
         * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
         */
        has?: string | "patch"[];
        /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
        scope?: "development" | "runtime";
        /**
         * The property by which to sort the results.
         * `created` means when the alert was created.
         * `updated` means when the alert's state last changed.
         * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
         * @default "created"
         */
        sort?: "created" | "updated" | "epss_percentage";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * **Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
         * @deprecated
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @deprecated
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
         * This parameter must not be used in combination with `last`.
         * Instead, use `per_page` in combination with `after` to fetch the first page of results.
         * @min 1
         * @max 100
         * @default 30
         */
        first?: number;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
         * This parameter must not be used in combination with `first`.
         * Instead, use `per_page` in combination with `before` to fetch the last page of results.
         * @min 1
         * @max 100
         */
        last?: number;
      };
    };
    Response: DependabotAlert[];
  };
  ["GET /repos/${owner}/${repo}/dependabot/alerts/${alertNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}";
      typedPath?: `/repos/${string}/${string}/dependabot/alerts/${AlertNumber}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The number that identifies a Dependabot alert in its repository.
         * You can find this at the end of the URL for a Dependabot alert within GitHub,
         * or in `number` fields in the response from the
         * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
         */
        alertNumber: AlertNumber;
      };
    };
    Response: DependabotAlert;
  };
  ["PATCH /repos/${owner}/${repo}/dependabot/alerts/${alertNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}";
      typedPath?: `/repos/${string}/${string}/dependabot/alerts/${AlertNumber}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The number that identifies a Dependabot alert in its repository.
         * You can find this at the end of the URL for a Dependabot alert within GitHub,
         * or in `number` fields in the response from the
         * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
         */
        alertNumber: AlertNumber;
      };
      body: {
        /**
         * The state of the Dependabot alert.
         * A `dismissed_reason` must be provided when setting the state to `dismissed`.
         */
        state: "dismissed" | "open";
        /** **Required when `state` is `dismissed`.** A reason for dismissing the alert. */
        dismissed_reason?: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk";
        /**
         * An optional comment associated with dismissing the alert.
         * @maxLength 280
         */
        dismissed_comment?: string;
      };
    };
    Response: DependabotAlert;
  };
  ["GET /repos/${owner}/${repo}/dependabot/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependabot/secrets";
      typedPath?: `/repos/${string}/${string}/dependabot/secrets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: DependabotSecret[];
    };
  };
  ["GET /repos/${owner}/${repo}/dependabot/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependabot/secrets/public-key";
      typedPath?: `/repos/${string}/${string}/dependabot/secrets/public-key`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: DependabotPublicKey;
  };
  ["GET /repos/${owner}/${repo}/dependabot/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependabot/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/dependabot/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: DependabotSecret;
  };
  ["PUT /repos/${owner}/${repo}/dependabot/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/dependabot/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/dependabot/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /repos/${owner}/${repo}/dependabot/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/dependabot/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/dependabot/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/dependency-graph/compare/${basehead}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependency-graph/compare/${basehead}";
      typedPath?: `/repos/${string}/${string}/dependency-graph/compare/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. */
        basehead: string;
      };
      query: {
        /** The full path, relative to the repository root, of the dependency manifest file. */
        name?: string;
      };
    };
    Response: DependencyGraphDiff;
  };
  ["GET /repos/${owner}/${repo}/dependency-graph/sbom"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/dependency-graph/sbom";
      typedPath?: `/repos/${string}/${string}/dependency-graph/sbom`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: DependencyGraphSpdxSbom;
  };
  ["POST /repos/${owner}/${repo}/dependency-graph/snapshots"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/dependency-graph/snapshots";
      typedPath?: `/repos/${string}/${string}/dependency-graph/snapshots`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: Snapshot;
    };
    Response: {
      /** ID of the created snapshot. */
      id: number;
      /** The time at which the snapshot was created. */
      created_at: string;
      /** Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed. */
      result: string;
      /** A message providing further details about the result, such as why the dependencies were not updated. */
      message: string;
    };
  };
  ["GET /repos/${owner}/${repo}/deployments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/deployments";
      typedPath?: `/repos/${string}/${string}/deployments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The SHA recorded at creation time.
         * @default "none"
         */
        sha?: string;
        /**
         * The name of the ref. This can be a branch, tag, or SHA.
         * @default "none"
         */
        ref?: string;
        /**
         * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
         * @default "none"
         */
        task?: string;
        /**
         * The name of the environment that was deployed to (e.g., `staging` or `production`).
         * @default "none"
         */
        environment?: string | null;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Deployment[];
  };
  ["POST /repos/${owner}/${repo}/deployments"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/deployments";
      typedPath?: `/repos/${string}/${string}/deployments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The ref to deploy. This can be a branch, tag, or SHA. */
        ref: string;
        /**
         * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
         * @default "deploy"
         */
        task?: string;
        /**
         * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
         * @default true
         */
        auto_merge?: boolean;
        /** The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
        required_contexts?: string[];
        /** JSON payload with extra information about the deployment. */
        payload?: Record<string, any> | string;
        /**
         * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
         * @default "production"
         */
        environment?: string;
        /**
         * Short description of the deployment.
         * @default ""
         */
        description?: string | null;
        /**
         * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
         * @default false
         */
        transient_environment?: boolean;
        /** Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */
        production_environment?: boolean;
      };
    };
    Response: Deployment;
  };
  ["GET /repos/${owner}/${repo}/deployments/${deploymentId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/deployments/${deploymentId}";
      typedPath?: `/repos/${string}/${string}/deployments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** deployment_id parameter */
        deploymentId: number;
      };
    };
    Response: Deployment;
  };
  ["DELETE /repos/${owner}/${repo}/deployments/${deploymentId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/deployments/${deploymentId}";
      typedPath?: `/repos/${string}/${string}/deployments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** deployment_id parameter */
        deploymentId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/deployments/${deploymentId}/statuses"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/deployments/${deploymentId}/statuses";
      typedPath?: `/repos/${string}/${string}/deployments/${number}/statuses`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** deployment_id parameter */
        deploymentId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: DeploymentStatus[];
  };
  ["POST /repos/${owner}/${repo}/deployments/${deploymentId}/statuses"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/deployments/${deploymentId}/statuses";
      typedPath?: `/repos/${string}/${string}/deployments/${number}/statuses`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** deployment_id parameter */
        deploymentId: number;
      };
      body: {
        /** The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
        state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
        /**
         * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
         *
         * > [!NOTE]
         * > It's recommended to use the `log_url` parameter, which replaces `target_url`.
         * @default ""
         */
        target_url?: string;
        /**
         * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
         * @default ""
         */
        log_url?: string;
        /**
         * A short description of the status. The maximum description length is 140 characters.
         * @default ""
         */
        description?: string;
        /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used. */
        environment?: string;
        /**
         * Sets the URL for accessing your environment. Default: `""`
         * @default ""
         */
        environment_url?: string;
        /** Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
        auto_inactive?: boolean;
      };
    };
    Response: DeploymentStatus;
  };
  ["GET /repos/${owner}/${repo}/deployments/${deploymentId}/statuses/${statusId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/deployments/${deploymentId}/statuses/${statusId}";
      typedPath?: `/repos/${string}/${string}/deployments/${number}/statuses/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** deployment_id parameter */
        deploymentId: number;
        statusId: number;
      };
    };
    Response: DeploymentStatus;
  };
  ["POST /repos/${owner}/${repo}/dispatches"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/dispatches";
      typedPath?: `/repos/${string}/${string}/dispatches`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /**
         * A custom webhook event name. Must be 100 characters or fewer.
         * @minLength 1
         * @maxLength 100
         */
        event_type: string;
        /** JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB. */
        client_payload?: Record<string, any>;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/environments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments";
      typedPath?: `/repos/${string}/${string}/environments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      /**
       * The number of environments in this repository
       * @example 5
       */
      total_count?: number;
      environments?: Environment[];
    };
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}";
      typedPath?: `/repos/${string}/${string}/environments/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
    };
    Response: Environment;
  };
  ["PUT /repos/${owner}/${repo}/environments/${environmentName}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}";
      typedPath?: `/repos/${string}/${string}/environments/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      body: {
        /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
        wait_timer?: WaitTimer;
        /** Whether or not a user who created the job is prevented from approving their own job. */
        prevent_self_review?: PreventSelfReview;
        /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
        reviewers?:
          | {
              /** The type of reviewer. */
              type?: DeploymentReviewerType;
              /**
               * The id of the user or team who can review the deployment
               * @example 4532992
               */
              id?: number;
            }[]
          | null;
        /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
        deployment_branch_policy?: DeploymentBranchPolicySettings;
      };
    };
    Response: Environment;
  };
  ["DELETE /repos/${owner}/${repo}/environments/${environmentName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}";
      typedPath?: `/repos/${string}/${string}/environments/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment-branch-policies`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      /**
       * The number of deployment branch policies for the environment.
       * @example 2
       */
      total_count: number;
      branch_policies: DeploymentBranchPolicy[];
    };
  };
  ["POST /repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment-branch-policies`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      body: DeploymentBranchPolicyNamePatternWithType;
    };
    Response: DeploymentBranchPolicy;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment-branch-policies/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The unique identifier of the branch policy. */
        branchPolicyId: number;
      };
    };
    Response: DeploymentBranchPolicy;
  };
  ["PUT /repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment-branch-policies/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The unique identifier of the branch policy. */
        branchPolicyId: number;
      };
      body: DeploymentBranchPolicyNamePattern;
    };
    Response: DeploymentBranchPolicy;
  };
  ["DELETE /repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment-branch-policies/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The unique identifier of the branch policy. */
        branchPolicyId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment_protection_rules`;
      params: {
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
      };
    };
    Response: {
      /**
       * The number of enabled custom deployment protection rules for this environment
       * @example 10
       */
      total_count?: number;
      custom_deployment_protection_rules?: DeploymentProtectionRule[];
    };
  };
  ["POST /repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment_protection_rules`;
      params: {
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
      };
      body: {
        /** The ID of the custom app that will be enabled on the environment. */
        integration_id?: number;
      };
    };
    Response: DeploymentProtectionRule;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/apps"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/apps";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment_protection_rules/apps`;
      params: {
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: {
      /**
       * The total number of custom deployment protection rule integrations available for this environment.
       * @example 35
       */
      total_count?: number;
      available_custom_deployment_protection_rule_integrations?: CustomDeploymentRuleApp[];
    };
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment_protection_rules/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The unique identifier of the protection rule. */
        protectionRuleId: number;
      };
    };
    Response: DeploymentProtectionRule;
  };
  ["DELETE /repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/deployment_protection_rules/${number}`;
      params: {
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The unique identifier of the protection rule. */
        protectionRuleId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/secrets";
      typedPath?: `/repos/${string}/${string}/environments/${string}/secrets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: ActionsSecret[];
    };
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/secrets/public-key"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/secrets/public-key";
      typedPath?: `/repos/${string}/${string}/environments/${string}/secrets/public-key`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
    };
    Response: ActionsPublicKey;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: ActionsSecret;
  };
  ["PUT /repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/secrets/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/variables"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/variables";
      typedPath?: `/repos/${string}/${string}/environments/${string}/variables`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      query: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      variables: ActionsVariable[];
    };
  };
  ["POST /repos/${owner}/${repo}/environments/${environmentName}/variables"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/variables";
      typedPath?: `/repos/${string}/${string}/environments/${string}/variables`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      body: {
        /** The name of the variable. */
        name: string;
        /** The value of the variable. */
        value: string;
      };
    };
    Response: EmptyObject;
  };
  ["GET /repos/${owner}/${repo}/environments/${environmentName}/variables/${name}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/variables/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
        /** The name of the variable. */
        name: string;
      };
    };
    Response: ActionsVariable;
  };
  ["PATCH /repos/${owner}/${repo}/environments/${environmentName}/variables/${name}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/variables/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the variable. */
        name: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
      body: {
        /** The name of the variable. */
        name?: string;
        /** The value of the variable. */
        value?: string;
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/environments/${environmentName}/variables/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}";
      typedPath?: `/repos/${string}/${string}/environments/${string}/variables/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the variable. */
        name: string;
        /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
        environmentName: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/events"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/events";
      typedPath?: `/repos/${string}/${string}/events`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /repos/${owner}/${repo}/forks"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/forks";
      typedPath?: `/repos/${string}/${string}/forks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The sort order. `stargazers` will sort by star count.
         * @default "newest"
         */
        sort?: "newest" | "oldest" | "stargazers" | "watchers";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["POST /repos/${owner}/${repo}/forks"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/forks";
      typedPath?: `/repos/${string}/${string}/forks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Optional parameter to specify the organization name if forking into an organization. */
        organization?: string;
        /** When forking from an existing repository, a new name for the fork. */
        name?: string;
        /** When forking from an existing repository, fork with only the default branch. */
        default_branch_only?: boolean;
      } | null;
    };
    Response: FullRepository;
  };
  ["POST /repos/${owner}/${repo}/git/blobs"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/git/blobs";
      typedPath?: `/repos/${string}/${string}/git/blobs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The new blob's content. */
        content: string;
        /**
         * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
         * @default "utf-8"
         */
        encoding?: string;
      };
    };
    Response: ShortBlob;
  };
  ["GET /repos/${owner}/${repo}/git/blobs/${fileSha}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/git/blobs/${fileSha}";
      typedPath?: `/repos/${string}/${string}/git/blobs/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        fileSha: string;
      };
    };
    Response: Blob;
  };
  ["POST /repos/${owner}/${repo}/git/commits"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/git/commits";
      typedPath?: `/repos/${string}/${string}/git/commits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The commit message */
        message: string;
        /** The SHA of the tree object this commit points to */
        tree: string;
        /** The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
        parents?: string[];
        /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
        author?: {
          /** The name of the author (or committer) of the commit */
          name: string;
          /** The email of the author (or committer) of the commit */
          email: string;
          /**
           * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           * @format date-time
           */
          date?: string;
        };
        /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
        committer?: {
          /** The name of the author (or committer) of the commit */
          name?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
          /**
           * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           * @format date-time
           */
          date?: string;
        };
        /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
        signature?: string;
      };
    };
    Response: GitCommit;
  };
  ["GET /repos/${owner}/${repo}/git/commits/${commitSha}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/git/commits/${commitSha}";
      typedPath?: `/repos/${string}/${string}/git/commits/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SHA of the commit. */
        commitSha: string;
      };
    };
    Response: GitCommit;
  };
  ["GET /repos/${owner}/${repo}/git/matching-refs/${ref}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/git/matching-refs/${ref}";
      typedPath?: `/repos/${string}/${string}/git/matching-refs/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The Git reference. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
         * @example "heads/feature-a"
         */
        ref: string;
      };
    };
    Response: GitRef[];
  };
  ["GET /repos/${owner}/${repo}/git/ref/${ref}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/git/ref/${ref}";
      typedPath?: `/repos/${string}/${string}/git/ref/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The Git reference. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
         * @example "heads/feature-a"
         */
        ref: string;
      };
    };
    Response: GitRef;
  };
  ["POST /repos/${owner}/${repo}/git/refs"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/git/refs";
      typedPath?: `/repos/${string}/${string}/git/refs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
        ref: string;
        /** The SHA1 value for this reference. */
        sha: string;
      };
    };
    Response: GitRef;
  };
  ["PATCH /repos/${owner}/${repo}/git/refs/${ref}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/git/refs/${ref}";
      typedPath?: `/repos/${string}/${string}/git/refs/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The Git reference. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
         * @example "heads/feature-a"
         */
        ref: string;
      };
      body: {
        /** The SHA1 value to set this reference to */
        sha: string;
        /**
         * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
         * @default false
         */
        force?: boolean;
      };
    };
    Response: GitRef;
  };
  ["DELETE /repos/${owner}/${repo}/git/refs/${ref}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/git/refs/${ref}";
      typedPath?: `/repos/${string}/${string}/git/refs/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The Git reference. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
         * @example "heads/feature-a"
         */
        ref: string;
      };
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/git/tags"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/git/tags";
      typedPath?: `/repos/${string}/${string}/git/tags`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
        tag: string;
        /** The tag message. */
        message: string;
        /** The SHA of the git object this is tagging. */
        object: string;
        /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */
        type: "commit" | "tree" | "blob";
        /** An object with information about the individual creating the tag. */
        tagger?: {
          /** The name of the author of the tag */
          name: string;
          /** The email of the author of the tag */
          email: string;
          /**
           * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           * @format date-time
           */
          date?: string;
        };
      };
    };
    Response: GitTag;
  };
  ["GET /repos/${owner}/${repo}/git/tags/${tagSha}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/git/tags/${tagSha}";
      typedPath?: `/repos/${string}/${string}/git/tags/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        tagSha: string;
      };
    };
    Response: GitTag;
  };
  ["POST /repos/${owner}/${repo}/git/trees"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/git/trees";
      typedPath?: `/repos/${string}/${string}/git/trees`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
        tree: {
          /** The file referenced in the tree. */
          path?: string;
          /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
          mode?: "100644" | "100755" | "040000" | "160000" | "120000";
          /** Either `blob`, `tree`, or `commit`. */
          type?: "blob" | "tree" | "commit";
          /**
           * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
           *
           * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
           */
          sha?: string | null;
          /**
           * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
           *
           * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
           */
          content?: string;
        }[];
        /**
         * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
         * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
         */
        base_tree?: string;
      };
    };
    Response: GitTree;
  };
  ["GET /repos/${owner}/${repo}/git/trees/${treeSha}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/git/trees/${treeSha}";
      typedPath?: `/repos/${string}/${string}/git/trees/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The SHA1 value or ref (branch or tag) name of the tree. */
        treeSha: string;
      };
      query: {
        /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
        recursive?: string;
      };
    };
    Response: GitTree;
  };
  ["GET /repos/${owner}/${repo}/hooks"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/hooks";
      typedPath?: `/repos/${string}/${string}/hooks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Hook[];
  };
  ["POST /repos/${owner}/${repo}/hooks"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/hooks";
      typedPath?: `/repos/${string}/${string}/hooks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
        name?: string;
        /** Key/value pairs to provide settings for this webhook. */
        config?: {
          /** The URL to which the payloads will be delivered. */
          url?: WebhookConfigUrl;
          /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
          content_type?: WebhookConfigContentType;
          /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      } | null;
    };
    Response: Hook;
  };
  ["GET /repos/${owner}/${repo}/hooks/${hookId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}";
      typedPath?: `/repos/${string}/${string}/hooks/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: Hook;
  };
  ["PATCH /repos/${owner}/${repo}/hooks/${hookId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}";
      typedPath?: `/repos/${string}/${string}/hooks/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
      body: {
        /** Configuration object of the webhook */
        config?: WebhookConfig;
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
         * @default ["push"]
         */
        events?: string[];
        /** Determines a list of events to be added to the list of events that the Hook triggers for. */
        add_events?: string[];
        /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
        remove_events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      };
    };
    Response: Hook;
  };
  ["DELETE /repos/${owner}/${repo}/hooks/${hookId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}";
      typedPath?: `/repos/${string}/${string}/hooks/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/hooks/${hookId}/config"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/config";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/config`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: WebhookConfig;
  };
  ["PATCH /repos/${owner}/${repo}/hooks/${hookId}/config"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/config";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/config`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
      body: {
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        content_type?: WebhookConfigContentType;
        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
      };
    };
    Response: WebhookConfig;
  };
  ["GET /repos/${owner}/${repo}/hooks/${hookId}/deliveries"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/deliveries";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/deliveries`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        cursor?: string;
      };
    };
    Response: HookDeliveryItem[];
  };
  ["GET /repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/deliveries/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
        deliveryId: number;
      };
    };
    Response: HookDelivery;
  };
  ["POST /repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}/attempts"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}/attempts";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/deliveries/${number}/attempts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
        deliveryId: number;
      };
    };
    Response: object;
  };
  ["POST /repos/${owner}/${repo}/hooks/${hookId}/pings"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/pings";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/pings`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/hooks/${hookId}/tests"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/hooks/${hookId}/tests";
      typedPath?: `/repos/${string}/${string}/hooks/${number}/tests`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
        hookId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/import"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/import";
      typedPath?: `/repos/${string}/${string}/import`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: Import;
  };
  ["PUT /repos/${owner}/${repo}/import"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/import";
      typedPath?: `/repos/${string}/${string}/import`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The URL of the originating repository. */
        vcs_url: string;
        /** The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */
        vcs?: "subversion" | "git" | "mercurial" | "tfvc";
        /** If authentication is required, the username to provide to `vcs_url`. */
        vcs_username?: string;
        /** If authentication is required, the password to provide to `vcs_url`. */
        vcs_password?: string;
        /** For a tfvc import, the name of the project that is being imported. */
        tfvc_project?: string;
      };
    };
    Response: Import;
  };
  ["PATCH /repos/${owner}/${repo}/import"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/import";
      typedPath?: `/repos/${string}/${string}/import`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The username to provide to the originating repository. */
        vcs_username?: string;
        /** The password to provide to the originating repository. */
        vcs_password?: string;
        /**
         * The type of version control system you are migrating from.
         * @example ""git""
         */
        vcs?: "subversion" | "tfvc" | "git" | "mercurial";
        /**
         * For a tfvc import, the name of the project that is being imported.
         * @example ""project1""
         */
        tfvc_project?: string;
      } | null;
    };
    Response: Import;
  };
  ["DELETE /repos/${owner}/${repo}/import"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/import";
      typedPath?: `/repos/${string}/${string}/import`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/import/authors"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/import/authors";
      typedPath?: `/repos/${string}/${string}/import/authors`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** A user ID. Only return users with an ID greater than this ID. */
        since?: number;
      };
    };
    Response: PorterAuthor[];
  };
  ["PATCH /repos/${owner}/${repo}/import/authors/${authorId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/import/authors/${authorId}";
      typedPath?: `/repos/${string}/${string}/import/authors/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        authorId: number;
      };
      body: {
        /** The new Git author email. */
        email?: string;
        /** The new Git author name. */
        name?: string;
      };
    };
    Response: PorterAuthor;
  };
  ["GET /repos/${owner}/${repo}/import/large_files"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/import/large_files";
      typedPath?: `/repos/${string}/${string}/import/large_files`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: PorterLargeFile[];
  };
  ["PATCH /repos/${owner}/${repo}/import/lfs"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/import/lfs";
      typedPath?: `/repos/${string}/${string}/import/lfs`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import. */
        use_lfs: "opt_in" | "opt_out";
      };
    };
    Response: Import;
  };
  ["GET /repos/${owner}/${repo}/installation"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/installation";
      typedPath?: `/repos/${string}/${string}/installation`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: Installation;
  };
  ["GET /repos/${owner}/${repo}/interaction-limits"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/interaction-limits";
      typedPath?: `/repos/${string}/${string}/interaction-limits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: InteractionLimitResponse | object;
  };
  ["PUT /repos/${owner}/${repo}/interaction-limits"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/interaction-limits";
      typedPath?: `/repos/${string}/${string}/interaction-limits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: InteractionLimit;
    };
    Response: InteractionLimitResponse;
  };
  ["DELETE /repos/${owner}/${repo}/interaction-limits"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/interaction-limits";
      typedPath?: `/repos/${string}/${string}/interaction-limits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/invitations"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/invitations";
      typedPath?: `/repos/${string}/${string}/invitations`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RepositoryInvitation[];
  };
  ["PATCH /repos/${owner}/${repo}/invitations/${invitationId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/invitations/${invitationId}";
      typedPath?: `/repos/${string}/${string}/invitations/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the invitation. */
        invitationId: number;
      };
      body: {
        /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
        permissions?: "read" | "write" | "maintain" | "triage" | "admin";
      };
    };
    Response: RepositoryInvitation;
  };
  ["DELETE /repos/${owner}/${repo}/invitations/${invitationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/invitations/${invitationId}";
      typedPath?: `/repos/${string}/${string}/invitations/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the invitation. */
        invitationId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/issues"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues";
      typedPath?: `/repos/${string}/${string}/issues`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
        milestone?: string;
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
        assignee?: string;
        /** Can be the name of an issue type. If the string `*` is passed, issues with any type are accepted. If the string `none` is passed, issues without type are returned. */
        type?: string;
        /** The user that created the issue. */
        creator?: string;
        /** A user that's mentioned in the issue. */
        mentioned?: string;
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Issue[];
  };
  ["POST /repos/${owner}/${repo}/issues"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues";
      typedPath?: `/repos/${string}/${string}/issues`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The title of the issue. */
        title: string | number;
        /** The contents of the issue. */
        body?: string;
        /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_ */
        assignee?: string | null;
        /** The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._ */
        milestone?: string | number | null;
        /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
        labels?: (
          | string
          | {
              id?: number;
              name?: string;
              description?: string | null;
              color?: string | null;
            }
        )[];
        /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
        assignees?: string[];
        /**
         * The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._
         * @example "Epic"
         */
        type?: string | null;
      };
    };
    Response: Issue;
  };
  ["GET /repos/${owner}/${repo}/issues/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/comments";
      typedPath?: `/repos/${string}/${string}/issues/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: IssueComment[];
  };
  ["GET /repos/${owner}/${repo}/issues/comments/${commentId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/issues/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: IssueComment;
  };
  ["PATCH /repos/${owner}/${repo}/issues/comments/${commentId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/issues/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/issues/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The contents of the comment. */
        body: string;
      };
    };
    Response: IssueComment;
  };
  ["DELETE /repos/${owner}/${repo}/issues/comments/${commentId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/issues/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/issues/comments/${commentId}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/comments/${commentId}/reactions";
      typedPath?: `/repos/${string}/${string}/issues/comments/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /repos/${owner}/${repo}/issues/comments/${commentId}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues/comments/${commentId}/reactions";
      typedPath?: `/repos/${string}/${string}/issues/comments/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /repos/${owner}/${repo}/issues/comments/${commentId}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/comments/${commentId}/reactions/${reactionId}";
      typedPath?: `/repos/${string}/${string}/issues/comments/${number}/reactions/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/issues/events"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/events";
      typedPath?: `/repos/${string}/${string}/issues/events`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: IssueEvent[];
  };
  ["GET /repos/${owner}/${repo}/issues/events/${eventId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/events/${eventId}";
      typedPath?: `/repos/${string}/${string}/issues/events/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        eventId: number;
      };
    };
    Response: IssueEvent;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}";
      typedPath?: `/repos/${string}/${string}/issues/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
    };
    Response: Issue;
  };
  ["PATCH /repos/${owner}/${repo}/issues/${issueNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}";
      typedPath?: `/repos/${string}/${string}/issues/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** The title of the issue. */
        title?: string | number | null;
        /** The contents of the issue. */
        body?: string | null;
        /** Username to assign to this issue. **This field is closing down.** */
        assignee?: string | null;
        /** The open or closed state of the issue. */
        state?: "open" | "closed";
        /**
         * The reason for the state change. Ignored unless `state` is changed.
         * @example "not_planned"
         */
        state_reason?: "completed" | "not_planned" | "reopened" | null;
        /** The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped. */
        milestone?: string | number | null;
        /** Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. */
        labels?: (
          | string
          | {
              id?: number;
              name?: string;
              description?: string | null;
              color?: string | null;
            }
        )[];
        /** Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. */
        assignees?: string[];
        /**
         * The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.
         * @example "Epic"
         */
        type?: string | null;
      };
    };
    Response: Issue;
  };
  ["POST /repos/${owner}/${repo}/issues/${issueNumber}/assignees"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/assignees";
      typedPath?: `/repos/${string}/${string}/issues/${number}/assignees`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
        assignees?: string[];
      };
    };
    Response: Issue;
  };
  ["DELETE /repos/${owner}/${repo}/issues/${issueNumber}/assignees"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/assignees";
      typedPath?: `/repos/${string}/${string}/issues/${number}/assignees`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
        assignees?: string[];
      };
    };
    Response: Issue;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/assignees/${assignee}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/assignees/${assignee}";
      typedPath?: `/repos/${string}/${string}/issues/${number}/assignees/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
        assignee: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/comments";
      typedPath?: `/repos/${string}/${string}/issues/${number}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      query: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: IssueComment[];
  };
  ["POST /repos/${owner}/${repo}/issues/${issueNumber}/comments"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/comments";
      typedPath?: `/repos/${string}/${string}/issues/${number}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** The contents of the comment. */
        body: string;
      };
    };
    Response: IssueComment;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/events"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/events";
      typedPath?: `/repos/${string}/${string}/issues/${number}/events`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: IssueEventForIssue[];
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/labels"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/labels";
      typedPath?: `/repos/${string}/${string}/issues/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Label[];
  };
  ["POST /repos/${owner}/${repo}/issues/${issueNumber}/labels"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/labels";
      typedPath?: `/repos/${string}/${string}/issues/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body:
        | {
            /**
             * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
             * @minItems 1
             */
            labels?: string[];
          }
        | string[]
        | {
            /** @minItems 1 */
            labels?: {
              name: string;
            }[];
          }
        | {
            name: string;
          }[]
        | string;
    };
    Response: Label[];
  };
  ["PUT /repos/${owner}/${repo}/issues/${issueNumber}/labels"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/labels";
      typedPath?: `/repos/${string}/${string}/issues/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body:
        | {
            /**
             * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
             * @minItems 1
             */
            labels?: string[];
          }
        | string[]
        | {
            /** @minItems 1 */
            labels?: {
              name: string;
            }[];
          }
        | {
            name: string;
          }[]
        | string;
    };
    Response: Label[];
  };
  ["DELETE /repos/${owner}/${repo}/issues/${issueNumber}/labels"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/labels";
      typedPath?: `/repos/${string}/${string}/issues/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/issues/${issueNumber}/labels/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/labels/${name}";
      typedPath?: `/repos/${string}/${string}/issues/${number}/labels/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
        name: string;
      };
    };
    Response: Label[];
  };
  ["PUT /repos/${owner}/${repo}/issues/${issueNumber}/lock"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/lock";
      typedPath?: `/repos/${string}/${string}/issues/${number}/lock`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /**
         * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
         *  * `off-topic`
         *  * `too heated`
         *  * `resolved`
         *  * `spam`
         */
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
      } | null;
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/issues/${issueNumber}/lock"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/lock";
      typedPath?: `/repos/${string}/${string}/issues/${number}/lock`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/reactions";
      typedPath?: `/repos/${string}/${string}/issues/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /repos/${owner}/${repo}/issues/${issueNumber}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/reactions";
      typedPath?: `/repos/${string}/${string}/issues/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /repos/${owner}/${repo}/issues/${issueNumber}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/reactions/${reactionId}";
      typedPath?: `/repos/${string}/${string}/issues/${number}/reactions/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/issues/${issueNumber}/sub_issue"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/sub_issue";
      typedPath?: `/repos/${string}/${string}/issues/${number}/sub_issue`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** The id of the sub-issue to remove */
        sub_issue_id: number;
      };
    };
    Response: Issue;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/sub_issues"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues";
      typedPath?: `/repos/${string}/${string}/issues/${number}/sub_issues`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Issue[];
  };
  ["POST /repos/${owner}/${repo}/issues/${issueNumber}/sub_issues"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues";
      typedPath?: `/repos/${string}/${string}/issues/${number}/sub_issues`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** The id of the sub-issue to add. The sub-issue must belong to the same repository owner as the parent issue */
        sub_issue_id: number;
        /** Option that, when true, instructs the operation to replace the sub-issues current parent issue */
        replace_parent?: boolean;
      };
    };
    Response: Issue;
  };
  ["PATCH /repos/${owner}/${repo}/issues/${issueNumber}/sub_issues/priority"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues/priority";
      typedPath?: `/repos/${string}/${string}/issues/${number}/sub_issues/priority`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      body: {
        /** The id of the sub-issue to reprioritize */
        sub_issue_id: number;
        /** The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified). */
        after_id?: number;
        /** The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified). */
        before_id?: number;
      };
    };
    Response: Issue;
  };
  ["GET /repos/${owner}/${repo}/issues/${issueNumber}/timeline"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/issues/${issueNumber}/timeline";
      typedPath?: `/repos/${string}/${string}/issues/${number}/timeline`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the issue. */
        issueNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TimelineIssueEvents[];
  };
  ["GET /repos/${owner}/${repo}/keys"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/keys";
      typedPath?: `/repos/${string}/${string}/keys`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: DeployKey[];
  };
  ["POST /repos/${owner}/${repo}/keys"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/keys";
      typedPath?: `/repos/${string}/${string}/keys`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** A name for the key. */
        title?: string;
        /** The contents of the key. */
        key: string;
        /**
         * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
         *
         * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
         */
        read_only?: boolean;
      };
    };
    Response: DeployKey;
  };
  ["GET /repos/${owner}/${repo}/keys/${keyId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/keys/${keyId}";
      typedPath?: `/repos/${string}/${string}/keys/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the key. */
        keyId: number;
      };
    };
    Response: DeployKey;
  };
  ["DELETE /repos/${owner}/${repo}/keys/${keyId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/keys/${keyId}";
      typedPath?: `/repos/${string}/${string}/keys/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the key. */
        keyId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/labels"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/labels";
      typedPath?: `/repos/${string}/${string}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Label[];
  };
  ["POST /repos/${owner}/${repo}/labels"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/labels";
      typedPath?: `/repos/${string}/${string}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
        name: string;
        /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
        color?: string;
        /** A short description of the label. Must be 100 characters or fewer. */
        description?: string;
      };
    };
    Response: Label;
  };
  ["GET /repos/${owner}/${repo}/labels/${name}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/labels/${name}";
      typedPath?: `/repos/${string}/${string}/labels/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        name: string;
      };
    };
    Response: Label;
  };
  ["PATCH /repos/${owner}/${repo}/labels/${name}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/labels/${name}";
      typedPath?: `/repos/${string}/${string}/labels/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        name: string;
      };
      body: {
        /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
        new_name?: string;
        /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
        color?: string;
        /** A short description of the label. Must be 100 characters or fewer. */
        description?: string;
      };
    };
    Response: Label;
  };
  ["DELETE /repos/${owner}/${repo}/labels/${name}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/labels/${name}";
      typedPath?: `/repos/${string}/${string}/labels/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        name: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/languages"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/languages";
      typedPath?: `/repos/${string}/${string}/languages`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: Language;
  };
  ["GET /repos/${owner}/${repo}/license"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/license";
      typedPath?: `/repos/${string}/${string}/license`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
      };
    };
    Response: LicenseContent;
  };
  ["POST /repos/${owner}/${repo}/merge-upstream"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/merge-upstream";
      typedPath?: `/repos/${string}/${string}/merge-upstream`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the branch which should be updated to match upstream. */
        branch: string;
      };
    };
    Response: MergedUpstream;
  };
  ["POST /repos/${owner}/${repo}/merges"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/merges";
      typedPath?: `/repos/${string}/${string}/merges`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the base branch that the head will be merged into. */
        base: string;
        /** The head to merge. This can be a branch name or a commit SHA1. */
        head: string;
        /** Commit message to use for the merge commit. If omitted, a default message will be used. */
        commit_message?: string;
      };
    };
    Response: Commit;
  };
  ["GET /repos/${owner}/${repo}/milestones"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/milestones";
      typedPath?: `/repos/${string}/${string}/milestones`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The state of the milestone. Either `open`, `closed`, or `all`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * What to sort results by. Either `due_on` or `completeness`.
         * @default "due_on"
         */
        sort?: "due_on" | "completeness";
        /**
         * The direction of the sort. Either `asc` or `desc`.
         * @default "asc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Milestone[];
  };
  ["POST /repos/${owner}/${repo}/milestones"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/milestones";
      typedPath?: `/repos/${string}/${string}/milestones`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The title of the milestone. */
        title: string;
        /**
         * The state of the milestone. Either `open` or `closed`.
         * @default "open"
         */
        state?: "open" | "closed";
        /** A description of the milestone. */
        description?: string;
        /**
         * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        due_on?: string;
      };
    };
    Response: Milestone;
  };
  ["GET /repos/${owner}/${repo}/milestones/${milestoneNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/milestones/${milestoneNumber}";
      typedPath?: `/repos/${string}/${string}/milestones/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the milestone. */
        milestoneNumber: number;
      };
    };
    Response: Milestone;
  };
  ["PATCH /repos/${owner}/${repo}/milestones/${milestoneNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/milestones/${milestoneNumber}";
      typedPath?: `/repos/${string}/${string}/milestones/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the milestone. */
        milestoneNumber: number;
      };
      body: {
        /** The title of the milestone. */
        title?: string;
        /**
         * The state of the milestone. Either `open` or `closed`.
         * @default "open"
         */
        state?: "open" | "closed";
        /** A description of the milestone. */
        description?: string;
        /**
         * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        due_on?: string;
      };
    };
    Response: Milestone;
  };
  ["DELETE /repos/${owner}/${repo}/milestones/${milestoneNumber}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/milestones/${milestoneNumber}";
      typedPath?: `/repos/${string}/${string}/milestones/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the milestone. */
        milestoneNumber: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/milestones/${milestoneNumber}/labels"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/milestones/${milestoneNumber}/labels";
      typedPath?: `/repos/${string}/${string}/milestones/${number}/labels`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the milestone. */
        milestoneNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Label[];
  };
  ["GET /repos/${owner}/${repo}/notifications"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/notifications";
      typedPath?: `/repos/${string}/${string}/notifications`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * If `true`, show notifications marked as read.
         * @default false
         */
        all?: boolean;
        /**
         * If `true`, only shows notifications in which the user is directly participating or mentioned.
         * @default false
         */
        participating?: boolean;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        before?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Thread[];
  };
  ["PUT /repos/${owner}/${repo}/notifications"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/notifications";
      typedPath?: `/repos/${string}/${string}/notifications`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /**
         * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
         * @format date-time
         */
        last_read_at?: string;
      };
    };
    Response: {
      message?: string;
      url?: string;
    };
  };
  ["GET /repos/${owner}/${repo}/pages"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pages";
      typedPath?: `/repos/${string}/${string}/pages`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: Page;
  };
  ["POST /repos/${owner}/${repo}/pages"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pages";
      typedPath?: `/repos/${string}/${string}/pages`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: null &
        ({
          /** The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`. */
          build_type?: "legacy" | "workflow";
          /** The source branch and directory used to publish your Pages site. */
          source?: {
            /** The repository branch used to publish your site's source files. */
            branch: string;
            /**
             * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
             * @default "/"
             */
            path?: "/" | "/docs";
          };
        } | null);
    };
    Response: Page;
  };
  ["PUT /repos/${owner}/${repo}/pages"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/pages";
      typedPath?: `/repos/${string}/${string}/pages`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site)." */
        cname?: string | null;
        /** Specify whether HTTPS should be enforced for the repository. */
        https_enforced?: boolean;
        /** The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch. */
        build_type?: "legacy" | "workflow";
        /** Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`. */
        source?:
          | "gh-pages"
          | "master"
          | "master /docs"
          | {
              /** The repository branch used to publish your site's source files. */
              branch: string;
              /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */
              path: "/" | "/docs";
            };
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/pages"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/pages";
      typedPath?: `/repos/${string}/${string}/pages`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/pages/builds"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pages/builds";
      typedPath?: `/repos/${string}/${string}/pages/builds`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: PageBuild[];
  };
  ["POST /repos/${owner}/${repo}/pages/builds"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pages/builds";
      typedPath?: `/repos/${string}/${string}/pages/builds`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: PageBuildStatus;
  };
  ["GET /repos/${owner}/${repo}/pages/builds/latest"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pages/builds/latest";
      typedPath?: `/repos/${string}/${string}/pages/builds/latest`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: PageBuild;
  };
  ["GET /repos/${owner}/${repo}/pages/builds/${buildId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pages/builds/${buildId}";
      typedPath?: `/repos/${string}/${string}/pages/builds/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        buildId: number;
      };
    };
    Response: PageBuild;
  };
  ["POST /repos/${owner}/${repo}/pages/deployments"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pages/deployments";
      typedPath?: `/repos/${string}/${string}/pages/deployments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required. */
        artifact_id?: number;
        /** The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required. */
        artifact_url?: string;
        /**
         * The target environment for this GitHub Pages deployment.
         * @default "github-pages"
         */
        environment?: string;
        /**
         * A unique string that represents the version of the build for this deployment.
         * @default "GITHUB_SHA"
         */
        pages_build_version: string;
        /** The OIDC token issued by GitHub Actions certifying the origin of the deployment. */
        oidc_token: string;
      };
    };
    Response: PageDeployment;
  };
  ["GET /repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}";
      typedPath?: `/repos/${string}/${string}/pages/deployments/${number | string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the Pages deployment. You can also give the commit SHA of the deployment. */
        pagesDeploymentId: number | string;
      };
    };
    Response: PagesDeploymentStatus;
  };
  ["POST /repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}/cancel"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}/cancel";
      typedPath?: `/repos/${string}/${string}/pages/deployments/${number | string}/cancel`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the Pages deployment. You can also give the commit SHA of the deployment. */
        pagesDeploymentId: number | string;
      };
    };
    Response: any;
  };
  ["GET /repos/${owner}/${repo}/pages/health"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pages/health";
      typedPath?: `/repos/${string}/${string}/pages/health`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: PagesHealthCheck;
  };
  ["GET /repos/${owner}/${repo}/private-vulnerability-reporting"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/private-vulnerability-reporting";
      typedPath?: `/repos/${string}/${string}/private-vulnerability-reporting`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: {
      /** Whether or not private vulnerability reporting is enabled for the repository. */
      enabled: boolean;
    };
  };
  ["PUT /repos/${owner}/${repo}/private-vulnerability-reporting"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/private-vulnerability-reporting";
      typedPath?: `/repos/${string}/${string}/private-vulnerability-reporting`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: any;
  };
  ["DELETE /repos/${owner}/${repo}/private-vulnerability-reporting"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/private-vulnerability-reporting";
      typedPath?: `/repos/${string}/${string}/private-vulnerability-reporting`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: any;
  };
  ["GET /repos/${owner}/${repo}/projects"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/projects";
      typedPath?: `/repos/${string}/${string}/projects`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * Indicates the state of the projects to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Project[];
  };
  ["POST /repos/${owner}/${repo}/projects"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/projects";
      typedPath?: `/repos/${string}/${string}/projects`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the project. */
        name: string;
        /** The description of the project. */
        body?: string;
      };
    };
    Response: Project;
  };
  ["GET /repos/${owner}/${repo}/properties/values"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/properties/values";
      typedPath?: `/repos/${string}/${string}/properties/values`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CustomPropertyValue[];
  };
  ["PATCH /repos/${owner}/${repo}/properties/values"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/properties/values";
      typedPath?: `/repos/${string}/${string}/properties/values`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** A list of custom property names and associated values to apply to the repositories. */
        properties: CustomPropertyValue[];
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/pulls"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls";
      typedPath?: `/repos/${string}/${string}/pulls`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * Either `open`, `closed`, or `all` to filter by state.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
        head?: string;
        /** Filter pulls by base branch name. Example: `gh-pages`. */
        base?: string;
        /**
         * What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
         * @default "created"
         */
        sort?: "created" | "updated" | "popularity" | "long-running";
        /** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: PullRequestSimple[];
  };
  ["POST /repos/${owner}/${repo}/pulls"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls";
      typedPath?: `/repos/${string}/${string}/pulls`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The title of the new pull request. Required unless `issue` is specified. */
        title?: string;
        /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
        head: string;
        /**
         * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
         * @format repo.nwo
         * @example "octo-org/octo-repo"
         */
        head_repo?: string;
        /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
        base: string;
        /** The contents of the pull request. */
        body?: string;
        /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
        maintainer_can_modify?: boolean;
        /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
        draft?: boolean;
        /**
         * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
         * @format int64
         * @example 1
         */
        issue?: number;
      };
    };
    Response: PullRequest;
  };
  ["GET /repos/${owner}/${repo}/pulls/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/comments";
      typedPath?: `/repos/${string}/${string}/pulls/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        sort?: "created" | "updated" | "created_at";
        /** The direction to sort results. Ignored without `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: PullRequestReviewComment[];
  };
  ["GET /repos/${owner}/${repo}/pulls/comments/${commentId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/pulls/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: PullRequestReviewComment;
  };
  ["PATCH /repos/${owner}/${repo}/pulls/comments/${commentId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/pulls/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/pulls/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The text of the reply to the review comment. */
        body: string;
      };
    };
    Response: PullRequestReviewComment;
  };
  ["DELETE /repos/${owner}/${repo}/pulls/comments/${commentId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/pulls/comments/${commentId}";
      typedPath?: `/repos/${string}/${string}/pulls/comments/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/pulls/comments/${commentId}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions";
      typedPath?: `/repos/${string}/${string}/pulls/comments/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /repos/${owner}/${repo}/pulls/comments/${commentId}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions";
      typedPath?: `/repos/${string}/${string}/pulls/comments/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /repos/${owner}/${repo}/pulls/comments/${commentId}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions/${reactionId}";
      typedPath?: `/repos/${string}/${string}/pulls/comments/${number}/reactions/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}";
      typedPath?: `/repos/${string}/${string}/pulls/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
    };
    Response: PullRequest;
  };
  ["PATCH /repos/${owner}/${repo}/pulls/${pullNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}";
      typedPath?: `/repos/${string}/${string}/pulls/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** The title of the pull request. */
        title?: string;
        /** The contents of the pull request. */
        body?: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state?: "open" | "closed";
        /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
        base?: string;
        /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
        maintainer_can_modify?: boolean;
      };
    };
    Response: PullRequest;
  };
  ["POST /repos/${owner}/${repo}/pulls/${pullNumber}/codespaces"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/codespaces";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/codespaces`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
        location?: string;
        /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /** Machine type to use for this codespace */
        machine?: string;
        /** Path to devcontainer.json config to use for this codespace */
        devcontainer_path?: string;
        /** Whether to authorize requested permissions from devcontainer.json */
        multi_repo_permissions_opt_out?: boolean;
        /** Working directory for this codespace */
        working_directory?: string;
        /** Time in minutes before codespace stops from inactivity */
        idle_timeout_minutes?: number;
        /** Display name for this codespace */
        display_name?: string;
        /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
        retention_period_minutes?: number;
      } | null;
    };
    Response: Codespace;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/comments";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      query: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** The direction to sort results. Ignored without `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: PullRequestReviewComment[];
  };
  ["POST /repos/${owner}/${repo}/pulls/${pullNumber}/comments"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/comments";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** The text of the review comment. */
        body: string;
        /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
        commit_id: string;
        /** The relative path to the file that necessitates a comment. */
        path: string;
        /**
         * **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
         * @deprecated
         */
        position?: number;
        /** In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
        side?: "LEFT" | "RIGHT";
        /** **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
        line?: number;
        /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
        start_line?: number;
        /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
        start_side?: "LEFT" | "RIGHT" | "side";
        /**
         * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
         * @example 2
         */
        in_reply_to?: number;
        /** The level at which the comment is targeted. */
        subject_type?: "line" | "file";
      };
    };
    Response: PullRequestReviewComment;
  };
  ["POST /repos/${owner}/${repo}/pulls/${pullNumber}/comments/${commentId}/replies"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/comments/${commentId}/replies";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/comments/${number}/replies`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /**
         * The unique identifier of the comment.
         * @format int64
         */
        commentId: number;
      };
      body: {
        /** The text of the review comment. */
        body: string;
      };
    };
    Response: PullRequestReviewComment;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/commits"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/commits";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/commits`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Commit[];
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/files"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/files";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/files`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: DiffEntry[];
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/merge"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/merge";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/merge`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
    };
    Response: void;
  };
  ["PUT /repos/${owner}/${repo}/pulls/${pullNumber}/merge"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/merge";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/merge`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** Title for the automatic commit message. */
        commit_title?: string;
        /** Extra detail to append to automatic commit message. */
        commit_message?: string;
        /** SHA that pull request head must match to allow merge. */
        sha?: string;
        /** The merge method to use. */
        merge_method?: "merge" | "squash" | "rebase";
      } | null;
    };
    Response: PullRequestMergeResult;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/requested_reviewers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
    };
    Response: PullRequestReviewRequest;
  };
  ["POST /repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/requested_reviewers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** An array of user `login`s that will be requested. */
        reviewers?: string[];
        /** An array of team `slug`s that will be requested. */
        team_reviewers?: string[];
      };
    };
    Response: PullRequestSimple;
  };
  ["DELETE /repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/requested_reviewers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** An array of user `login`s that will be removed. */
        reviewers: string[];
        /** An array of team `slug`s that will be removed. */
        team_reviewers?: string[];
      };
    };
    Response: PullRequestSimple;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/reviews"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: PullRequestReview[];
  };
  ["POST /repos/${owner}/${repo}/pulls/${pullNumber}/reviews"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
        commit_id?: string;
        /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
        body?: string;
        /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready. */
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
        /** Use the following table to specify the location, destination, and contents of the draft review comment. */
        comments?: {
          /** The relative path to the file that necessitates a review comment. */
          path: string;
          /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. */
          position?: number;
          /** Text of the review comment. */
          body: string;
          /** @example 28 */
          line?: number;
          /** @example "RIGHT" */
          side?: string;
          /** @example 26 */
          start_line?: number;
          /** @example "LEFT" */
          start_side?: string;
        }[];
      };
    };
    Response: PullRequestReview;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /** The unique identifier of the review. */
        reviewId: number;
      };
    };
    Response: PullRequestReview;
  };
  ["PUT /repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /** The unique identifier of the review. */
        reviewId: number;
      };
      body: {
        /** The body text of the pull request review. */
        body: string;
      };
    };
    Response: PullRequestReview;
  };
  ["DELETE /repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /** The unique identifier of the review. */
        reviewId: number;
      };
    };
    Response: PullRequestReview;
  };
  ["GET /repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/comments";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews/${number}/comments`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /** The unique identifier of the review. */
        reviewId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: ReviewComment[];
  };
  ["PUT /repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/dismissals"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/dismissals";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews/${number}/dismissals`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /** The unique identifier of the review. */
        reviewId: number;
      };
      body: {
        /** The message for the pull request review dismissal */
        message: string;
        /** @example ""DISMISS"" */
        event?: "DISMISS";
      };
    };
    Response: PullRequestReview;
  };
  ["POST /repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/events"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/events";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/reviews/${number}/events`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
        /** The unique identifier of the review. */
        reviewId: number;
      };
      body: {
        /** The body text of the pull request review */
        body?: string;
        /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
      };
    };
    Response: PullRequestReview;
  };
  ["PUT /repos/${owner}/${repo}/pulls/${pullNumber}/update-branch"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/pulls/${pullNumber}/update-branch";
      typedPath?: `/repos/${string}/${string}/pulls/${number}/update-branch`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies the pull request. */
        pullNumber: number;
      };
      body: {
        /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
        expected_head_sha?: string;
      } | null;
    };
    Response: {
      message?: string;
      url?: string;
    };
  };
  ["GET /repos/${owner}/${repo}/readme"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/readme";
      typedPath?: `/repos/${string}/${string}/readme`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch. */
        ref?: string;
      };
    };
    Response: ContentFile;
  };
  ["GET /repos/${owner}/${repo}/readme/${dir}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/readme/${dir}";
      typedPath?: `/repos/${string}/${string}/readme/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The alternate path to look for a README file */
        dir: string;
      };
      query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch. */
        ref?: string;
      };
    };
    Response: ContentFile;
  };
  ["GET /repos/${owner}/${repo}/releases"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases";
      typedPath?: `/repos/${string}/${string}/releases`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Release[];
  };
  ["POST /repos/${owner}/${repo}/releases"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/releases";
      typedPath?: `/repos/${string}/${string}/releases`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the tag. */
        tag_name: string;
        /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch. */
        target_commitish?: string;
        /** The name of the release. */
        name?: string;
        /** Text describing the contents of the tag. */
        body?: string;
        /**
         * `true` to create a draft (unpublished) release, `false` to create a published one.
         * @default false
         */
        draft?: boolean;
        /**
         * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
         * @default false
         */
        prerelease?: boolean;
        /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)." */
        discussion_category_name?: string;
        /**
         * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
         * @default false
         */
        generate_release_notes?: boolean;
        /**
         * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
         * @default "true"
         */
        make_latest?: "true" | "false" | "legacy";
      };
    };
    Response: Release;
  };
  ["GET /repos/${owner}/${repo}/releases/assets/${assetId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases/assets/${assetId}";
      typedPath?: `/repos/${string}/${string}/releases/assets/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the asset. */
        assetId: number;
      };
    };
    Response: ReleaseAsset;
  };
  ["PATCH /repos/${owner}/${repo}/releases/assets/${assetId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/releases/assets/${assetId}";
      typedPath?: `/repos/${string}/${string}/releases/assets/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the asset. */
        assetId: number;
      };
      body: {
        /** The file name of the asset. */
        name?: string;
        /** An alternate short description of the asset. Used in place of the filename. */
        label?: string;
        /** @example ""uploaded"" */
        state?: string;
      };
    };
    Response: ReleaseAsset;
  };
  ["DELETE /repos/${owner}/${repo}/releases/assets/${assetId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/releases/assets/${assetId}";
      typedPath?: `/repos/${string}/${string}/releases/assets/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the asset. */
        assetId: number;
      };
    };
    Response: void;
  };
  ["POST /repos/${owner}/${repo}/releases/generate-notes"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/releases/generate-notes";
      typedPath?: `/repos/${string}/${string}/releases/generate-notes`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The tag name for the release. This can be an existing tag or a new one. */
        tag_name: string;
        /** Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */
        target_commitish?: string;
        /** The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */
        previous_tag_name?: string;
        /** Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */
        configuration_file_path?: string;
      };
    };
    Response: ReleaseNotesContent;
  };
  ["GET /repos/${owner}/${repo}/releases/latest"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases/latest";
      typedPath?: `/repos/${string}/${string}/releases/latest`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: Release;
  };
  ["GET /repos/${owner}/${repo}/releases/tags/${tag}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases/tags/${tag}";
      typedPath?: `/repos/${string}/${string}/releases/tags/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** tag parameter */
        tag: string;
      };
    };
    Response: Release;
  };
  ["GET /repos/${owner}/${repo}/releases/${releaseId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}";
      typedPath?: `/repos/${string}/${string}/releases/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
    };
    Response: Release;
  };
  ["PATCH /repos/${owner}/${repo}/releases/${releaseId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}";
      typedPath?: `/repos/${string}/${string}/releases/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
      body: {
        /** The name of the tag. */
        tag_name?: string;
        /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch. */
        target_commitish?: string;
        /** The name of the release. */
        name?: string;
        /** Text describing the contents of the tag. */
        body?: string;
        /** `true` makes the release a draft, and `false` publishes the release. */
        draft?: boolean;
        /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
        prerelease?: boolean;
        /**
         * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
         * @default true
         */
        make_latest?: "true" | "false" | "legacy";
        /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)." */
        discussion_category_name?: string;
      };
    };
    Response: Release;
  };
  ["DELETE /repos/${owner}/${repo}/releases/${releaseId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}";
      typedPath?: `/repos/${string}/${string}/releases/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/releases/${releaseId}/assets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}/assets";
      typedPath?: `/repos/${string}/${string}/releases/${number}/assets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: ReleaseAsset[];
  };
  ["POST /repos/${owner}/${repo}/releases/${releaseId}/assets"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}/assets";
      typedPath?: `/repos/${string}/${string}/releases/${number}/assets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
      query: {
        name: string;
        label?: string;
      };
      body: File;
    };
    Response: ReleaseAsset;
  };
  ["GET /repos/${owner}/${repo}/releases/${releaseId}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}/reactions";
      typedPath?: `/repos/${string}/${string}/releases/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release. */
        content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /repos/${owner}/${repo}/releases/${releaseId}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}/reactions";
      typedPath?: `/repos/${string}/${string}/releases/${number}/reactions`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release. */
        content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["DELETE /repos/${owner}/${repo}/releases/${releaseId}/reactions/${reactionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/releases/${releaseId}/reactions/${reactionId}";
      typedPath?: `/repos/${string}/${string}/releases/${number}/reactions/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the release. */
        releaseId: number;
        /** The unique identifier of the reaction. */
        reactionId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/rules/branches/${branch}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rules/branches/${branch}";
      typedPath?: `/repos/${string}/${string}/rules/branches/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
        branch: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RepositoryRuleDetailed[];
  };
  ["GET /repos/${owner}/${repo}/rulesets"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rulesets";
      typedPath?: `/repos/${string}/${string}/rulesets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Include rulesets configured at higher levels that apply to this repository
         * @default true
         */
        includes_parents?: boolean;
        /**
         * A comma-separated list of rule targets to filter by.
         * If provided, only rulesets that apply to the specified targets will be returned.
         * For example, `branch,tag,push`.
         * @example "branch,tag,push"
         */
        targets?: string;
      };
    };
    Response: RepositoryRuleset[];
  };
  ["POST /repos/${owner}/${repo}/rulesets"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/rulesets";
      typedPath?: `/repos/${string}/${string}/rulesets`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The name of the ruleset. */
        name: string;
        /**
         * The target of the ruleset
         * @default "branch"
         */
        target?: "branch" | "tag" | "push";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /** Parameters for a repository ruleset ref name condition */
        conditions?: RepositoryRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      };
    };
    Response: RepositoryRuleset;
  };
  ["GET /repos/${owner}/${repo}/rulesets/rule-suites"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rulesets/rule-suites";
      typedPath?: `/repos/${string}/${string}/rulesets/rule-suites`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned. */
        ref?: string;
        /**
         * The time period to filter by.
         *
         * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
         * @default "day"
         */
        time_period?: "hour" | "day" | "week" | "month";
        /** The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. */
        actor_name?: string;
        /**
         * The rule suite results to filter on. When specified, only suites with this result will be returned.
         * @default "all"
         */
        rule_suite_result?: "pass" | "fail" | "bypass" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RuleSuites;
  };
  ["GET /repos/${owner}/${repo}/rulesets/rule-suites/${ruleSuiteId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rulesets/rule-suites/${ruleSuiteId}";
      typedPath?: `/repos/${string}/${string}/rulesets/rule-suites/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /**
         * The unique identifier of the rule suite result.
         * To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)
         * for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)
         * for organizations.
         */
        ruleSuiteId: number;
      };
    };
    Response: RuleSuite;
  };
  ["GET /repos/${owner}/${repo}/rulesets/${rulesetId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rulesets/${rulesetId}";
      typedPath?: `/repos/${string}/${string}/rulesets/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
      query: {
        /**
         * Include rulesets configured at higher levels that apply to this repository
         * @default true
         */
        includes_parents?: boolean;
      };
    };
    Response: RepositoryRuleset;
  };
  ["PUT /repos/${owner}/${repo}/rulesets/${rulesetId}"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/rulesets/${rulesetId}";
      typedPath?: `/repos/${string}/${string}/rulesets/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
      body: {
        /** The name of the ruleset. */
        name?: string;
        /** The target of the ruleset */
        target?: "branch" | "tag" | "push";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement?: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /** Parameters for a repository ruleset ref name condition */
        conditions?: RepositoryRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      };
    };
    Response: RepositoryRuleset;
  };
  ["DELETE /repos/${owner}/${repo}/rulesets/${rulesetId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/rulesets/${rulesetId}";
      typedPath?: `/repos/${string}/${string}/rulesets/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/rulesets/${rulesetId}/history"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rulesets/${rulesetId}/history";
      typedPath?: `/repos/${string}/${string}/rulesets/${number}/history`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the ruleset. */
        rulesetId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RulesetVersion[];
  };
  ["GET /repos/${owner}/${repo}/rulesets/${rulesetId}/history/${versionId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/rulesets/${rulesetId}/history/${versionId}";
      typedPath?: `/repos/${string}/${string}/rulesets/${number}/history/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The ID of the ruleset. */
        rulesetId: number;
        /** The ID of the version */
        versionId: number;
      };
    };
    Response: RulesetVersionWithState;
  };
  ["GET /repos/${owner}/${repo}/secret-scanning/alerts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/secret-scanning/alerts";
      typedPath?: `/repos/${string}/${string}/secret-scanning/alerts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
        /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
        secret_type?: string;
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        resolution?: string;
        /**
         * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
        after?: string;
        /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
        validity?: string;
        /**
         * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
         * @default false
         */
        is_publicly_leaked?: boolean;
        /**
         * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
         * @default false
         */
        is_multi_repo?: boolean;
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      };
    };
    Response: SecretScanningAlert[];
  };
  ["GET /repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}";
      typedPath?: `/repos/${string}/${string}/secret-scanning/alerts/${AlertNumber}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
      query: {
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      };
    };
    Response: SecretScanningAlert;
  };
  ["PATCH /repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}";
      typedPath?: `/repos/${string}/${string}/secret-scanning/alerts/${AlertNumber}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
      body: {
        /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
        state: SecretScanningAlertState;
        /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
        resolution?: SecretScanningAlertResolution;
        /** An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
        resolution_comment?: SecretScanningAlertResolutionComment;
      };
    };
    Response: SecretScanningAlert;
  };
  ["GET /repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}/locations"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}/locations";
      typedPath?: `/repos/${string}/${string}/secret-scanning/alerts/${AlertNumber}/locations`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        alertNumber: AlertNumber;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: SecretScanningLocation[];
  };
  ["POST /repos/${owner}/${repo}/secret-scanning/push-protection-bypasses"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/secret-scanning/push-protection-bypasses";
      typedPath?: `/repos/${string}/${string}/secret-scanning/push-protection-bypasses`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The reason for bypassing push protection. */
        reason: SecretScanningPushProtectionBypassReason;
        /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
        placeholder_id: SecretScanningPushProtectionBypassPlaceholderId;
      };
    };
    Response: SecretScanningPushProtectionBypass;
  };
  ["GET /repos/${owner}/${repo}/secret-scanning/scan-history"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/secret-scanning/scan-history";
      typedPath?: `/repos/${string}/${string}/secret-scanning/scan-history`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: SecretScanningScanHistory;
  };
  ["GET /repos/${owner}/${repo}/security-advisories"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/security-advisories";
      typedPath?: `/repos/${string}/${string}/security-advisories`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "published";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
        /** Filter by state of the repository advisories. Only advisories of this state will be returned. */
        state?: "triage" | "draft" | "published" | "closed";
      };
    };
    Response: RepositoryAdvisory[];
  };
  ["POST /repos/${owner}/${repo}/security-advisories"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/security-advisories";
      typedPath?: `/repos/${string}/${string}/security-advisories`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: RepositoryAdvisoryCreate;
    };
    Response: RepositoryAdvisory;
  };
  ["POST /repos/${owner}/${repo}/security-advisories/reports"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/security-advisories/reports";
      typedPath?: `/repos/${string}/${string}/security-advisories/reports`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: PrivateVulnerabilityReportCreate;
    };
    Response: RepositoryAdvisory;
  };
  ["GET /repos/${owner}/${repo}/security-advisories/${ghsaId}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/security-advisories/${ghsaId}";
      typedPath?: `/repos/${string}/${string}/security-advisories/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The GHSA (GitHub Security Advisory) identifier of the advisory. */
        ghsaId: string;
      };
    };
    Response: RepositoryAdvisory;
  };
  ["PATCH /repos/${owner}/${repo}/security-advisories/${ghsaId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/repos/${owner}/${repo}/security-advisories/${ghsaId}";
      typedPath?: `/repos/${string}/${string}/security-advisories/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The GHSA (GitHub Security Advisory) identifier of the advisory. */
        ghsaId: string;
      };
      body: RepositoryAdvisoryUpdate;
    };
    Response: RepositoryAdvisory;
  };
  ["POST /repos/${owner}/${repo}/security-advisories/${ghsaId}/cve"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/security-advisories/${ghsaId}/cve";
      typedPath?: `/repos/${string}/${string}/security-advisories/${string}/cve`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The GHSA (GitHub Security Advisory) identifier of the advisory. */
        ghsaId: string;
      };
    };
    Response: object;
  };
  ["POST /repos/${owner}/${repo}/security-advisories/${ghsaId}/forks"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/security-advisories/${ghsaId}/forks";
      typedPath?: `/repos/${string}/${string}/security-advisories/${string}/forks`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The GHSA (GitHub Security Advisory) identifier of the advisory. */
        ghsaId: string;
      };
    };
    Response: FullRepository;
  };
  ["GET /repos/${owner}/${repo}/stargazers"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/stargazers";
      typedPath?: `/repos/${string}/${string}/stargazers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[] | Stargazer[];
  };
  ["GET /repos/${owner}/${repo}/stats/code_frequency"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/stats/code_frequency";
      typedPath?: `/repos/${string}/${string}/stats/code_frequency`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CodeFrequencyStat[];
  };
  ["GET /repos/${owner}/${repo}/stats/commit_activity"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/stats/commit_activity";
      typedPath?: `/repos/${string}/${string}/stats/commit_activity`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CommitActivity[];
  };
  ["GET /repos/${owner}/${repo}/stats/contributors"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/stats/contributors";
      typedPath?: `/repos/${string}/${string}/stats/contributors`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ContributorActivity[];
  };
  ["GET /repos/${owner}/${repo}/stats/participation"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/stats/participation";
      typedPath?: `/repos/${string}/${string}/stats/participation`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ParticipationStats;
  };
  ["GET /repos/${owner}/${repo}/stats/punch_card"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/stats/punch_card";
      typedPath?: `/repos/${string}/${string}/stats/punch_card`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: CodeFrequencyStat[];
  };
  ["POST /repos/${owner}/${repo}/statuses/${sha}"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/statuses/${sha}";
      typedPath?: `/repos/${string}/${string}/statuses/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        sha: string;
      };
      body: {
        /** The state of the status. */
        state: "error" | "failure" | "pending" | "success";
        /**
         * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
         * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
         * `http://ci.example.com/user/repo/build/sha`
         */
        target_url?: string | null;
        /** A short description of the status. */
        description?: string | null;
        /**
         * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
         * @default "default"
         */
        context?: string;
      };
    };
    Response: Status;
  };
  ["GET /repos/${owner}/${repo}/subscribers"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/subscribers";
      typedPath?: `/repos/${string}/${string}/subscribers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /repos/${owner}/${repo}/subscription"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/subscription";
      typedPath?: `/repos/${string}/${string}/subscription`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: RepositorySubscription;
  };
  ["PUT /repos/${owner}/${repo}/subscription"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/subscription";
      typedPath?: `/repos/${string}/${string}/subscription`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** Determines if notifications should be received from this repository. */
        subscribed?: boolean;
        /** Determines if all notifications should be blocked from this repository. */
        ignored?: boolean;
      };
    };
    Response: RepositorySubscription;
  };
  ["DELETE /repos/${owner}/${repo}/subscription"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/subscription";
      typedPath?: `/repos/${string}/${string}/subscription`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/tags"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/tags";
      typedPath?: `/repos/${string}/${string}/tags`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Tag[];
  };
  ["GET /repos/${owner}/${repo}/tags/protection"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/tags/protection";
      typedPath?: `/repos/${string}/${string}/tags/protection`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: TagProtection[];
  };
  ["POST /repos/${owner}/${repo}/tags/protection"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/tags/protection";
      typedPath?: `/repos/${string}/${string}/tags/protection`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** An optional glob pattern to match against when enforcing tag protection. */
        pattern: string;
      };
    };
    Response: TagProtection;
  };
  ["DELETE /repos/${owner}/${repo}/tags/protection/${tagProtectionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/tags/protection/${tagProtectionId}";
      typedPath?: `/repos/${string}/${string}/tags/protection/${number}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        /** The unique identifier of the tag protection. */
        tagProtectionId: number;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/tarball/${ref}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/tarball/${ref}";
      typedPath?: `/repos/${string}/${string}/tarball/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        ref: string;
      };
    };
    Response: any;
  };
  ["GET /repos/${owner}/${repo}/teams"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/teams";
      typedPath?: `/repos/${string}/${string}/teams`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Team[];
  };
  ["GET /repos/${owner}/${repo}/topics"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/topics";
      typedPath?: `/repos/${string}/${string}/topics`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: Topic;
  };
  ["PUT /repos/${owner}/${repo}/topics"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/topics";
      typedPath?: `/repos/${string}/${string}/topics`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase. */
        names: string[];
      };
    };
    Response: Topic;
  };
  ["GET /repos/${owner}/${repo}/traffic/clones"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/traffic/clones";
      typedPath?: `/repos/${string}/${string}/traffic/clones`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The time frame to display results for.
         * @default "day"
         */
        per?: "day" | "week";
      };
    };
    Response: CloneTraffic;
  };
  ["GET /repos/${owner}/${repo}/traffic/popular/paths"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/traffic/popular/paths";
      typedPath?: `/repos/${string}/${string}/traffic/popular/paths`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ContentTraffic[];
  };
  ["GET /repos/${owner}/${repo}/traffic/popular/referrers"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/traffic/popular/referrers";
      typedPath?: `/repos/${string}/${string}/traffic/popular/referrers`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: ReferrerTraffic[];
  };
  ["GET /repos/${owner}/${repo}/traffic/views"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/traffic/views";
      typedPath?: `/repos/${string}/${string}/traffic/views`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      query: {
        /**
         * The time frame to display results for.
         * @default "day"
         */
        per?: "day" | "week";
      };
    };
    Response: ViewTraffic;
  };
  ["POST /repos/${owner}/${repo}/transfer"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${owner}/${repo}/transfer";
      typedPath?: `/repos/${string}/${string}/transfer`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The username or organization name the repository will be transferred to. */
        new_owner: string;
        /** The new name to be given to the repository. */
        new_name?: string;
        /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
        team_ids?: number[];
      };
    };
    Response: MinimalRepository;
  };
  ["GET /repos/${owner}/${repo}/vulnerability-alerts"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/vulnerability-alerts";
      typedPath?: `/repos/${string}/${string}/vulnerability-alerts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["PUT /repos/${owner}/${repo}/vulnerability-alerts"]: {
    Request: {
      method?: "PUT";
      path?: "/repos/${owner}/${repo}/vulnerability-alerts";
      typedPath?: `/repos/${string}/${string}/vulnerability-alerts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["DELETE /repos/${owner}/${repo}/vulnerability-alerts"]: {
    Request: {
      method?: "DELETE";
      path?: "/repos/${owner}/${repo}/vulnerability-alerts";
      typedPath?: `/repos/${string}/${string}/vulnerability-alerts`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /repos/${owner}/${repo}/zipball/${ref}"]: {
    Request: {
      method?: "GET";
      path?: "/repos/${owner}/${repo}/zipball/${ref}";
      typedPath?: `/repos/${string}/${string}/zipball/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
        ref: string;
      };
    };
    Response: any;
  };
  ["POST /repos/${templateOwner}/${templateRepo}/generate"]: {
    Request: {
      method?: "POST";
      path?: "/repos/${templateOwner}/${templateRepo}/generate";
      typedPath?: `/repos/${string}/${string}/generate`;
      params: {
        /** The account owner of the template repository. The name is not case sensitive. */
        templateOwner: string;
        /** The name of the template repository without the `.git` extension. The name is not case sensitive. */
        templateRepo: string;
      };
      body: {
        /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
        owner?: string;
        /** The name of the new repository. */
        name: string;
        /** A short description of the new repository. */
        description?: string;
        /**
         * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
         * @default false
         */
        include_all_branches?: boolean;
        /**
         * Either `true` to create a new private repository or `false` to create a new public one.
         * @default false
         */
        private?: boolean;
      };
    };
    Response: FullRepository;
  };
  ["GET /repositories"]: {
    Request: {
      method?: "GET";
      path?: "/repositories";
      query: {
        /** A repository ID. Only return repositories with an ID greater than this ID. */
        since?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /search/code"]: {
    Request: {
      method?: "GET";
      path?: "/search/code";
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers. */
        q: string;
        /**
         * **This field is closing down.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
         * @deprecated
         */
        sort?: "indexed";
        /**
         * **This field is closing down.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @deprecated
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: CodeSearchResultItem[];
    };
  };
  ["GET /search/commits"]: {
    Request: {
      method?: "GET";
      path?: "/search/commits";
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "author-date" | "committer-date";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: CommitSearchResultItem[];
    };
  };
  ["GET /search/issues"]: {
    Request: {
      method?: "GET";
      path?: "/search/issues";
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?:
          | "comments"
          | "reactions"
          | "reactions-+1"
          | "reactions--1"
          | "reactions-smile"
          | "reactions-thinking_face"
          | "reactions-heart"
          | "reactions-tada"
          | "interactions"
          | "created"
          | "updated";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Set to `true` to use advanced search.
         * Example: `http://api.github.com/search/issues?q={query}&advanced_search=true`
         */
        advanced_search?: string;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: IssueSearchResultItem[];
    };
  };
  ["GET /search/labels"]: {
    Request: {
      method?: "GET";
      path?: "/search/labels";
      query: {
        /** The id of the repository. */
        repository_id: number;
        /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). */
        q: string;
        /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "created" | "updated";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: LabelSearchResultItem[];
    };
  };
  ["GET /search/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/search/repositories";
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: RepoSearchResultItem[];
    };
  };
  ["GET /search/topics"]: {
    Request: {
      method?: "GET";
      path?: "/search/topics";
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). */
        q: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: TopicSearchResultItem[];
    };
  };
  ["GET /search/users"]: {
    Request: {
      method?: "GET";
      path?: "/search/users";
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "followers" | "repositories" | "joined";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      incomplete_results: boolean;
      items: UserSearchResultItem[];
    };
  };
  ["GET /teams/${teamId}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}";
      typedPath?: `/teams/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
    };
    Response: TeamFull;
  };
  ["PATCH /teams/${teamId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/teams/${teamId}";
      typedPath?: `/teams/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      body: {
        /** The name of the team. */
        name: string;
        /** The description of the team. */
        description?: string;
        /**
         * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";
        /**
         * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         */
        notification_setting?: "notifications_enabled" | "notifications_disabled";
        /**
         * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number | null;
      };
    };
    Response: TeamFull;
  };
  ["DELETE /teams/${teamId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}";
      typedPath?: `/teams/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/discussions"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/discussions";
      typedPath?: `/teams/${number}/discussions`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamDiscussion[];
  };
  ["POST /teams/${teamId}/discussions"]: {
    Request: {
      method?: "POST";
      path?: "/teams/${teamId}/discussions";
      typedPath?: `/teams/${number}/discussions`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      body: {
        /** The discussion post's title. */
        title: string;
        /** The discussion post's body text. */
        body: string;
        /**
         * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
         * @default false
         */
        private?: boolean;
      };
    };
    Response: TeamDiscussion;
  };
  ["GET /teams/${teamId}/discussions/${discussionNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/discussions/${discussionNumber}";
      typedPath?: `/teams/${number}/discussions/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
    };
    Response: TeamDiscussion;
  };
  ["PATCH /teams/${teamId}/discussions/${discussionNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/teams/${teamId}/discussions/${discussionNumber}";
      typedPath?: `/teams/${number}/discussions/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      body: {
        /** The discussion post's title. */
        title?: string;
        /** The discussion post's body text. */
        body?: string;
      };
    };
    Response: TeamDiscussion;
  };
  ["DELETE /teams/${teamId}/discussions/${discussionNumber}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}/discussions/${discussionNumber}";
      typedPath?: `/teams/${number}/discussions/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/discussions/${discussionNumber}/comments"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments";
      typedPath?: `/teams/${number}/discussions/${number}/comments`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      query: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamDiscussionComment[];
  };
  ["POST /teams/${teamId}/discussions/${discussionNumber}/comments"]: {
    Request: {
      method?: "POST";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments";
      typedPath?: `/teams/${number}/discussions/${number}/comments`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      body: {
        /** The discussion comment's body text. */
        body: string;
      };
    };
    Response: TeamDiscussionComment;
  };
  ["GET /teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}";
      typedPath?: `/teams/${number}/discussions/${number}/comments/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
    };
    Response: TeamDiscussionComment;
  };
  ["PATCH /teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}"]: {
    Request: {
      method?: "PATCH";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}";
      typedPath?: `/teams/${number}/discussions/${number}/comments/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
      body: {
        /** The discussion comment's body text. */
        body: string;
      };
    };
    Response: TeamDiscussionComment;
  };
  ["DELETE /teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}";
      typedPath?: `/teams/${number}/discussions/${number}/comments/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions";
      typedPath?: `/teams/${number}/discussions/${number}/comments/${number}/reactions`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions";
      typedPath?: `/teams/${number}/discussions/${number}/comments/${number}/reactions`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
        /** The number that identifies the comment. */
        commentNumber: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["GET /teams/${teamId}/discussions/${discussionNumber}/reactions"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/reactions";
      typedPath?: `/teams/${number}/discussions/${number}/reactions`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Reaction[];
  };
  ["POST /teams/${teamId}/discussions/${discussionNumber}/reactions"]: {
    Request: {
      method?: "POST";
      path?: "/teams/${teamId}/discussions/${discussionNumber}/reactions";
      typedPath?: `/teams/${number}/discussions/${number}/reactions`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The number that identifies the discussion. */
        discussionNumber: number;
      };
      body: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    Response: Reaction;
  };
  ["GET /teams/${teamId}/invitations"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/invitations";
      typedPath?: `/teams/${number}/invitations`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrganizationInvitation[];
  };
  ["GET /teams/${teamId}/members"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/members";
      typedPath?: `/teams/${number}/members`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      query: {
        /**
         * Filters members returned by their role in the team.
         * @default "all"
         */
        role?: "member" | "maintainer" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /teams/${teamId}/members/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/members/${username}";
      typedPath?: `/teams/${number}/members/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /teams/${teamId}/members/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/teams/${teamId}/members/${username}";
      typedPath?: `/teams/${number}/members/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["DELETE /teams/${teamId}/members/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}/members/${username}";
      typedPath?: `/teams/${number}/members/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/memberships/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/memberships/${username}";
      typedPath?: `/teams/${number}/memberships/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: TeamMembership;
  };
  ["PUT /teams/${teamId}/memberships/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/teams/${teamId}/memberships/${username}";
      typedPath?: `/teams/${number}/memberships/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
      body: {
        /**
         * The role that this user should have in the team.
         * @default "member"
         */
        role?: "member" | "maintainer";
      };
    };
    Response: TeamMembership;
  };
  ["DELETE /teams/${teamId}/memberships/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}/memberships/${username}";
      typedPath?: `/teams/${number}/memberships/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/projects"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/projects";
      typedPath?: `/teams/${number}/projects`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamProject[];
  };
  ["GET /teams/${teamId}/projects/${projectId}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/projects/${projectId}";
      typedPath?: `/teams/${number}/projects/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The unique identifier of the project. */
        projectId: number;
      };
    };
    Response: TeamProject;
  };
  ["PUT /teams/${teamId}/projects/${projectId}"]: {
    Request: {
      method?: "PUT";
      path?: "/teams/${teamId}/projects/${projectId}";
      typedPath?: `/teams/${number}/projects/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The unique identifier of the project. */
        projectId: number;
      };
      body: {
        /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." */
        permission?: "read" | "write" | "admin";
      };
    };
    Response: void;
  };
  ["DELETE /teams/${teamId}/projects/${projectId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}/projects/${projectId}";
      typedPath?: `/teams/${number}/projects/${number}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The unique identifier of the project. */
        projectId: number;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/repos"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/repos";
      typedPath?: `/teams/${number}/repos`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /teams/${teamId}/repos/${owner}/${repo}"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/repos/${owner}/${repo}";
      typedPath?: `/teams/${number}/repos/${string}/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: TeamRepository;
  };
  ["PUT /teams/${teamId}/repos/${owner}/${repo}"]: {
    Request: {
      method?: "PUT";
      path?: "/teams/${teamId}/repos/${owner}/${repo}";
      typedPath?: `/teams/${number}/repos/${string}/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
      body: {
        /** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
        permission?: "pull" | "push" | "admin";
      };
    };
    Response: void;
  };
  ["DELETE /teams/${teamId}/repos/${owner}/${repo}"]: {
    Request: {
      method?: "DELETE";
      path?: "/teams/${teamId}/repos/${owner}/${repo}";
      typedPath?: `/teams/${number}/repos/${string}/${string}`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /teams/${teamId}/teams"]: {
    Request: {
      method?: "GET";
      path?: "/teams/${teamId}/teams";
      typedPath?: `/teams/${number}/teams`;
      params: {
        /** The unique identifier of the team. */
        teamId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Team[];
  };
  ["GET /user"]: {
    Request: { method?: "GET"; path?: "/user" };
    Response:
      | ({
          user_view_type: "public";
        } & PublicUser)
      | ({
          user_view_type: "private";
        } & PrivateUser);
  };
  ["PATCH /user"]: {
    Request: {
      method?: "PATCH";
      path?: "/user";
      body: {
        /**
         * The new name of the user.
         * @example "Omar Jahandar"
         */
        name?: string;
        /**
         * The publicly visible email address of the user.
         * @example "omar@example.com"
         */
        email?: string;
        /**
         * The new blog URL of the user.
         * @example "blog.example.com"
         */
        blog?: string;
        /**
         * The new Twitter username of the user.
         * @example "therealomarj"
         */
        twitter_username?: string | null;
        /**
         * The new company of the user.
         * @example "Acme corporation"
         */
        company?: string;
        /**
         * The new location of the user.
         * @example "Berlin, Germany"
         */
        location?: string;
        /** The new hiring availability of the user. */
        hireable?: boolean;
        /** The new short biography of the user. */
        bio?: string;
      };
    };
    Response: PrivateUser;
  };
  ["GET /user/blocks"]: {
    Request: {
      method?: "GET";
      path?: "/user/blocks";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /user/blocks/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/user/blocks/${username}";
      typedPath?: `/user/blocks/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /user/blocks/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/blocks/${username}";
      typedPath?: `/user/blocks/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["DELETE /user/blocks/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/blocks/${username}";
      typedPath?: `/user/blocks/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /user/codespaces"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** ID of the Repository to filter on */
        repository_id?: number;
      };
    };
    Response: {
      total_count: number;
      codespaces: Codespace[];
    };
  };
  ["POST /user/codespaces"]: {
    Request: {
      method?: "POST";
      path?: "/user/codespaces";
      body:
        | {
            /** Repository id for this codespace */
            repository_id: number;
            /** Git ref (typically a branch name) for this codespace */
            ref?: string;
            /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
            location?: string;
            /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
            /** IP for location auto-detection when proxying a request */
            client_ip?: string;
            /** Machine type to use for this codespace */
            machine?: string;
            /** Path to devcontainer.json config to use for this codespace */
            devcontainer_path?: string;
            /** Whether to authorize requested permissions from devcontainer.json */
            multi_repo_permissions_opt_out?: boolean;
            /** Working directory for this codespace */
            working_directory?: string;
            /** Time in minutes before codespace stops from inactivity */
            idle_timeout_minutes?: number;
            /** Display name for this codespace */
            display_name?: string;
            /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
            retention_period_minutes?: number;
          }
        | {
            /** Pull request number for this codespace */
            pull_request: {
              /** Pull request number */
              pull_request_number: number;
              /** Repository id for this codespace */
              repository_id: number;
            };
            /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
            location?: string;
            /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
            /** Machine type to use for this codespace */
            machine?: string;
            /** Path to devcontainer.json config to use for this codespace */
            devcontainer_path?: string;
            /** Working directory for this codespace */
            working_directory?: string;
            /** Time in minutes before codespace stops from inactivity */
            idle_timeout_minutes?: number;
          };
    };
    Response: Codespace;
  };
  ["GET /user/codespaces/secrets"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces/secrets";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      secrets: CodespacesSecret[];
    };
  };
  ["GET /user/codespaces/secrets/public-key"]: {
    Request: { method?: "GET"; path?: "/user/codespaces/secrets/public-key" };
    Response: CodespacesUserPublicKey;
  };
  ["GET /user/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces/secrets/${secretName}";
      typedPath?: `/user/codespaces/secrets/${string}`;
      params: {
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: CodespacesSecret;
  };
  ["PUT /user/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/codespaces/secrets/${secretName}";
      typedPath?: `/user/codespaces/secrets/${string}`;
      params: {
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
        /** An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints. */
        selected_repository_ids?: (number | string)[];
      };
    };
    Response: EmptyObject;
  };
  ["DELETE /user/codespaces/secrets/${secretName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/codespaces/secrets/${secretName}";
      typedPath?: `/user/codespaces/secrets/${string}`;
      params: {
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: void;
  };
  ["GET /user/codespaces/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces/secrets/${secretName}/repositories";
      typedPath?: `/user/codespaces/secrets/${string}/repositories`;
      params: {
        /** The name of the secret. */
        secretName: string;
      };
    };
    Response: {
      total_count: number;
      repositories: MinimalRepository[];
    };
  };
  ["PUT /user/codespaces/secrets/${secretName}/repositories"]: {
    Request: {
      method?: "PUT";
      path?: "/user/codespaces/secrets/${secretName}/repositories";
      typedPath?: `/user/codespaces/secrets/${string}/repositories`;
      params: {
        /** The name of the secret. */
        secretName: string;
      };
      body: {
        /** An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints. */
        selected_repository_ids: number[];
      };
    };
    Response: void;
  };
  ["PUT /user/codespaces/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/codespaces/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/user/codespaces/secrets/${string}/repositories/${number}`;
      params: {
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /user/codespaces/secrets/${secretName}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/codespaces/secrets/${secretName}/repositories/${repositoryId}";
      typedPath?: `/user/codespaces/secrets/${string}/repositories/${number}`;
      params: {
        /** The name of the secret. */
        secretName: string;
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /user/codespaces/${codespaceName}"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces/${codespaceName}";
      typedPath?: `/user/codespaces/${string}`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: Codespace;
  };
  ["PATCH /user/codespaces/${codespaceName}"]: {
    Request: {
      method?: "PATCH";
      path?: "/user/codespaces/${codespaceName}";
      typedPath?: `/user/codespaces/${string}`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
      body: {
        /** A valid machine to transition this codespace to. */
        machine?: string;
        /** Display name for this codespace */
        display_name?: string;
        /** Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in. */
        recent_folders?: string[];
      };
    };
    Response: Codespace;
  };
  ["DELETE /user/codespaces/${codespaceName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/codespaces/${codespaceName}";
      typedPath?: `/user/codespaces/${string}`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: object;
  };
  ["POST /user/codespaces/${codespaceName}/exports"]: {
    Request: {
      method?: "POST";
      path?: "/user/codespaces/${codespaceName}/exports";
      typedPath?: `/user/codespaces/${string}/exports`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: CodespaceExportDetails;
  };
  ["GET /user/codespaces/${codespaceName}/exports/${exportId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces/${codespaceName}/exports/${exportId}";
      typedPath?: `/user/codespaces/${string}/exports/${string}`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
        /** The ID of the export operation, or `latest`. Currently only `latest` is currently supported. */
        exportId: string;
      };
    };
    Response: CodespaceExportDetails;
  };
  ["GET /user/codespaces/${codespaceName}/machines"]: {
    Request: {
      method?: "GET";
      path?: "/user/codespaces/${codespaceName}/machines";
      typedPath?: `/user/codespaces/${string}/machines`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: {
      total_count: number;
      machines: CodespaceMachine[];
    };
  };
  ["POST /user/codespaces/${codespaceName}/publish"]: {
    Request: {
      method?: "POST";
      path?: "/user/codespaces/${codespaceName}/publish";
      typedPath?: `/user/codespaces/${string}/publish`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
      body: {
        /** A name for the new repository. */
        name?: string;
        /**
         * Whether the new repository should be private.
         * @default false
         */
        private?: boolean;
      };
    };
    Response: CodespaceWithFullRepository;
  };
  ["POST /user/codespaces/${codespaceName}/start"]: {
    Request: {
      method?: "POST";
      path?: "/user/codespaces/${codespaceName}/start";
      typedPath?: `/user/codespaces/${string}/start`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: Codespace;
  };
  ["POST /user/codespaces/${codespaceName}/stop"]: {
    Request: {
      method?: "POST";
      path?: "/user/codespaces/${codespaceName}/stop";
      typedPath?: `/user/codespaces/${string}/stop`;
      params: {
        /** The name of the codespace. */
        codespaceName: string;
      };
    };
    Response: Codespace;
  };
  ["GET /user/docker/conflicts"]: { Request: { method?: "GET"; path?: "/user/docker/conflicts" }; Response: Package[] };
  ["PATCH /user/email/visibility"]: {
    Request: {
      method?: "PATCH";
      path?: "/user/email/visibility";
      body: {
        /** Denotes whether an email is publicly visible. */
        visibility: "public" | "private";
      };
    };
    Response: Email[];
  };
  ["GET /user/emails"]: {
    Request: {
      method?: "GET";
      path?: "/user/emails";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Email[];
  };
  ["POST /user/emails"]: {
    Request: {
      method?: "POST";
      path?: "/user/emails";
      body:
        | {
            /**
             * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
             * @minItems 1
             * @example []
             */
            emails: string[];
          }
        | string[]
        | string;
    };
    Response: Email[];
  };
  ["DELETE /user/emails"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/emails";
      body:
        | {
            /**
             * Email addresses associated with the GitHub user account.
             * @minItems 1
             */
            emails: string[];
          }
        | string[]
        | string;
    };
    Response: void;
  };
  ["GET /user/followers"]: {
    Request: {
      method?: "GET";
      path?: "/user/followers";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /user/following"]: {
    Request: {
      method?: "GET";
      path?: "/user/following";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /user/following/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/user/following/${username}";
      typedPath?: `/user/following/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["PUT /user/following/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/following/${username}";
      typedPath?: `/user/following/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["DELETE /user/following/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/following/${username}";
      typedPath?: `/user/following/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["GET /user/gpg_keys"]: {
    Request: {
      method?: "GET";
      path?: "/user/gpg_keys";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: GpgKey[];
  };
  ["POST /user/gpg_keys"]: {
    Request: {
      method?: "POST";
      path?: "/user/gpg_keys";
      body: {
        /** A descriptive name for the new key. */
        name?: string;
        /** A GPG key in ASCII-armored format. */
        armored_public_key: string;
      };
    };
    Response: GpgKey;
  };
  ["GET /user/gpg_keys/${gpgKeyId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/gpg_keys/${gpgKeyId}";
      typedPath?: `/user/gpg_keys/${number}`;
      params: {
        /** The unique identifier of the GPG key. */
        gpgKeyId: number;
      };
    };
    Response: GpgKey;
  };
  ["DELETE /user/gpg_keys/${gpgKeyId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/gpg_keys/${gpgKeyId}";
      typedPath?: `/user/gpg_keys/${number}`;
      params: {
        /** The unique identifier of the GPG key. */
        gpgKeyId: number;
      };
    };
    Response: void;
  };
  ["GET /user/installations"]: {
    Request: {
      method?: "GET";
      path?: "/user/installations";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      installations: Installation[];
    };
  };
  ["GET /user/installations/${installationId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/user/installations/${installationId}/repositories";
      typedPath?: `/user/installations/${number}/repositories`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: {
      total_count: number;
      repository_selection?: string;
      repositories: Repository[];
    };
  };
  ["PUT /user/installations/${installationId}/repositories/${repositoryId}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/installations/${installationId}/repositories/${repositoryId}";
      typedPath?: `/user/installations/${number}/repositories/${number}`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
        /** The unique identifier of the repository. */
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["DELETE /user/installations/${installationId}/repositories/${repositoryId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/installations/${installationId}/repositories/${repositoryId}";
      typedPath?: `/user/installations/${number}/repositories/${number}`;
      params: {
        /** The unique identifier of the installation. */
        installationId: number;
        /** The unique identifier of the repository. */
        repositoryId: number;
      };
    };
    Response: void;
  };
  ["GET /user/interaction-limits"]: {
    Request: { method?: "GET"; path?: "/user/interaction-limits" };
    Response: InteractionLimitResponse | object;
  };
  ["PUT /user/interaction-limits"]: {
    Request: { method?: "PUT"; path?: "/user/interaction-limits"; body: InteractionLimit };
    Response: InteractionLimitResponse;
  };
  ["DELETE /user/interaction-limits"]: {
    Request: { method?: "DELETE"; path?: "/user/interaction-limits" };
    Response: void;
  };
  ["GET /user/issues"]: {
    Request: {
      method?: "GET";
      path?: "/user/issues";
      query: {
        /**
         * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Issue[];
  };
  ["GET /user/keys"]: {
    Request: {
      method?: "GET";
      path?: "/user/keys";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Key[];
  };
  ["POST /user/keys"]: {
    Request: {
      method?: "POST";
      path?: "/user/keys";
      body: {
        /**
         * A descriptive name for the new key.
         * @example "Personal MacBook Air"
         */
        title?: string;
        /**
         * The public SSH key to add to your GitHub account.
         * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
         */
        key: string;
      };
    };
    Response: Key;
  };
  ["GET /user/keys/${keyId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/keys/${keyId}";
      typedPath?: `/user/keys/${number}`;
      params: {
        /** The unique identifier of the key. */
        keyId: number;
      };
    };
    Response: Key;
  };
  ["DELETE /user/keys/${keyId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/keys/${keyId}";
      typedPath?: `/user/keys/${number}`;
      params: {
        /** The unique identifier of the key. */
        keyId: number;
      };
    };
    Response: void;
  };
  ["GET /user/marketplace_purchases"]: {
    Request: {
      method?: "GET";
      path?: "/user/marketplace_purchases";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: UserMarketplacePurchase[];
  };
  ["GET /user/marketplace_purchases/stubbed"]: {
    Request: {
      method?: "GET";
      path?: "/user/marketplace_purchases/stubbed";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: UserMarketplacePurchase[];
  };
  ["GET /user/memberships/orgs"]: {
    Request: {
      method?: "GET";
      path?: "/user/memberships/orgs";
      query: {
        /** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */
        state?: "active" | "pending";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrgMembership[];
  };
  ["GET /user/memberships/orgs/${org}"]: {
    Request: {
      method?: "GET";
      path?: "/user/memberships/orgs/${org}";
      typedPath?: `/user/memberships/orgs/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
    };
    Response: OrgMembership;
  };
  ["PATCH /user/memberships/orgs/${org}"]: {
    Request: {
      method?: "PATCH";
      path?: "/user/memberships/orgs/${org}";
      typedPath?: `/user/memberships/orgs/${string}`;
      params: {
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      body: {
        /** The state that the membership should be in. Only `"active"` will be accepted. */
        state: "active";
      };
    };
    Response: OrgMembership;
  };
  ["GET /user/migrations"]: {
    Request: {
      method?: "GET";
      path?: "/user/migrations";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Migration[];
  };
  ["POST /user/migrations"]: {
    Request: {
      method?: "POST";
      path?: "/user/migrations";
      body: {
        /**
         * Lock the repositories being migrated at the start of the migration
         * @example true
         */
        lock_repositories?: boolean;
        /**
         * Indicates whether metadata should be excluded and only git source should be included for the migration.
         * @example true
         */
        exclude_metadata?: boolean;
        /**
         * Indicates whether the repository git data should be excluded from the migration.
         * @example true
         */
        exclude_git_data?: boolean;
        /**
         * Do not include attachments in the migration
         * @example true
         */
        exclude_attachments?: boolean;
        /**
         * Do not include releases in the migration
         * @example true
         */
        exclude_releases?: boolean;
        /**
         * Indicates whether projects owned by the organization or users should be excluded.
         * @example true
         */
        exclude_owner_projects?: boolean;
        /**
         * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
         * @default false
         * @example true
         */
        org_metadata_only?: boolean;
        /**
         * Exclude attributes from the API response to improve performance
         * @example ["repositories"]
         */
        exclude?: "repositories"[];
        repositories: string[];
      };
    };
    Response: Migration;
  };
  ["GET /user/migrations/${migrationId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/migrations/${migrationId}";
      typedPath?: `/user/migrations/${number}`;
      params: {
        /** The unique identifier of the migration. */
        migrationId: number;
      };
      query: {
        exclude?: string[];
      };
    };
    Response: Migration;
  };
  ["GET /user/migrations/${migrationId}/archive"]: {
    Request: {
      method?: "GET";
      path?: "/user/migrations/${migrationId}/archive";
      typedPath?: `/user/migrations/${number}/archive`;
      params: {
        /** The unique identifier of the migration. */
        migrationId: number;
      };
    };
    Response: any;
  };
  ["DELETE /user/migrations/${migrationId}/archive"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/migrations/${migrationId}/archive";
      typedPath?: `/user/migrations/${number}/archive`;
      params: {
        /** The unique identifier of the migration. */
        migrationId: number;
      };
    };
    Response: void;
  };
  ["DELETE /user/migrations/${migrationId}/repos/${repoName}/lock"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/migrations/${migrationId}/repos/${repoName}/lock";
      typedPath?: `/user/migrations/${number}/repos/${string}/lock`;
      params: {
        /** The unique identifier of the migration. */
        migrationId: number;
        /** repo_name parameter */
        repoName: string;
      };
    };
    Response: void;
  };
  ["GET /user/migrations/${migrationId}/repositories"]: {
    Request: {
      method?: "GET";
      path?: "/user/migrations/${migrationId}/repositories";
      typedPath?: `/user/migrations/${number}/repositories`;
      params: {
        /** The unique identifier of the migration. */
        migrationId: number;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /user/orgs"]: {
    Request: {
      method?: "GET";
      path?: "/user/orgs";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrganizationSimple[];
  };
  ["GET /user/packages"]: {
    Request: {
      method?: "GET";
      path?: "/user/packages";
      query: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /**
         * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
         *
         * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
         * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
         */
        visibility?: "public" | "private" | "internal";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: Package[];
  };
  ["GET /user/packages/${packageType}/${packageName}"]: {
    Request: {
      method?: "GET";
      path?: "/user/packages/${packageType}/${packageName}";
      typedPath?: `/user/packages/${"npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"}/${string}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
      };
    };
    Response: Package;
  };
  ["DELETE /user/packages/${packageType}/${packageName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/packages/${packageType}/${packageName}";
      typedPath?: `/user/packages/${"npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"}/${string}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
      };
    };
    Response: void;
  };
  ["POST /user/packages/${packageType}/${packageName}/restore"]: {
    Request: {
      method?: "POST";
      path?: "/user/packages/${packageType}/${packageName}/restore";
      typedPath?: `/user/packages/${"npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"}/${string}/restore`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
      };
      query: {
        /** package token */
        token?: string;
      };
    };
    Response: void;
  };
  ["GET /user/packages/${packageType}/${packageName}/versions"]: {
    Request: {
      method?: "GET";
      path?: "/user/packages/${packageType}/${packageName}/versions";
      typedPath?: `/user/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
      };
      query: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The state of the package, either active or deleted.
         * @default "active"
         */
        state?: "active" | "deleted";
      };
    };
    Response: PackageVersion[];
  };
  ["GET /user/packages/${packageType}/${packageName}/versions/${packageVersionId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/packages/${packageType}/${packageName}/versions/${packageVersionId}";
      typedPath?: `/user/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: PackageVersion;
  };
  ["DELETE /user/packages/${packageType}/${packageName}/versions/${packageVersionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/packages/${packageType}/${packageName}/versions/${packageVersionId}";
      typedPath?: `/user/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: void;
  };
  ["POST /user/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore"]: {
    Request: {
      method?: "POST";
      path?: "/user/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore";
      typedPath?: `/user/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}/restore`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: void;
  };
  ["POST /user/projects"]: {
    Request: {
      method?: "POST";
      path?: "/user/projects";
      body: {
        /**
         * Name of the project
         * @example "Week One Sprint"
         */
        name: string;
        /**
         * Body of the project
         * @example "This project represents the sprint of the first week in January"
         */
        body?: string | null;
      };
    };
    Response: Project;
  };
  ["GET /user/public_emails"]: {
    Request: {
      method?: "GET";
      path?: "/user/public_emails";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Email[];
  };
  ["GET /user/repos"]: {
    Request: {
      method?: "GET";
      path?: "/user/repos";
      query: {
        /**
         * Limit results to repositories with the specified visibility.
         * @default "all"
         */
        visibility?: "all" | "public" | "private";
        /**
         * Comma-separated list of values. Can include:
         *  * `owner`: Repositories that are owned by the authenticated user.
         *  * `collaborator`: Repositories that the user has been added to as a collaborator.
         *  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
         * @default "owner,collaborator,organization_member"
         */
        affiliation?: string;
        /**
         * Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
         * @default "all"
         */
        type?: "all" | "owner" | "public" | "private" | "member";
        /**
         * The property to sort the results by.
         * @default "full_name"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        before?: string;
      };
    };
    Response: Repository[];
  };
  ["POST /user/repos"]: {
    Request: {
      method?: "POST";
      path?: "/user/repos";
      body: {
        /**
         * The name of the repository.
         * @example "Team Environment"
         */
        name: string;
        /** A short description of the repository. */
        description?: string;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Whether the repository is private.
         * @default false
         */
        private?: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         * @example true
         */
        has_issues?: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         * @example true
         */
        has_projects?: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         * @example true
         */
        has_wiki?: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         * @example true
         */
        has_discussions?: boolean;
        /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
        team_id?: number;
        /**
         * Whether the repository is initialized with a minimal README.
         * @default false
         */
        auto_init?: boolean;
        /**
         * The desired language or platform to apply to the .gitignore.
         * @example "Haskell"
         */
        gitignore_template?: string;
        /**
         * The license keyword of the open source license for this repository.
         * @example "mit"
         */
        license_template?: string;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         * @example true
         */
        allow_squash_merge?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         * @example true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         * @example true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow Auto-merge to be used on pull requests.
         * @default false
         * @example false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         * @example false
         */
        delete_branch_on_merge?: boolean;
        /**
         * Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * Whether downloads are enabled.
         * @default true
         * @example true
         */
        has_downloads?: boolean;
        /**
         * Whether this repository acts as a template that can be used to generate new repositories.
         * @default false
         * @example true
         */
        is_template?: boolean;
      };
    };
    Response: FullRepository;
  };
  ["GET /user/repository_invitations"]: {
    Request: {
      method?: "GET";
      path?: "/user/repository_invitations";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: RepositoryInvitation[];
  };
  ["PATCH /user/repository_invitations/${invitationId}"]: {
    Request: {
      method?: "PATCH";
      path?: "/user/repository_invitations/${invitationId}";
      typedPath?: `/user/repository_invitations/${number}`;
      params: {
        /** The unique identifier of the invitation. */
        invitationId: number;
      };
    };
    Response: void;
  };
  ["DELETE /user/repository_invitations/${invitationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/repository_invitations/${invitationId}";
      typedPath?: `/user/repository_invitations/${number}`;
      params: {
        /** The unique identifier of the invitation. */
        invitationId: number;
      };
    };
    Response: void;
  };
  ["GET /user/social_accounts"]: {
    Request: {
      method?: "GET";
      path?: "/user/social_accounts";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SocialAccount[];
  };
  ["POST /user/social_accounts"]: {
    Request: {
      method?: "POST";
      path?: "/user/social_accounts";
      body: {
        /**
         * Full URLs for the social media profiles to add.
         * @example []
         */
        account_urls: string[];
      };
    };
    Response: SocialAccount[];
  };
  ["DELETE /user/social_accounts"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/social_accounts";
      body: {
        /**
         * Full URLs for the social media profiles to delete.
         * @example []
         */
        account_urls: string[];
      };
    };
    Response: void;
  };
  ["GET /user/ssh_signing_keys"]: {
    Request: {
      method?: "GET";
      path?: "/user/ssh_signing_keys";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SshSigningKey[];
  };
  ["POST /user/ssh_signing_keys"]: {
    Request: {
      method?: "POST";
      path?: "/user/ssh_signing_keys";
      body: {
        /**
         * A descriptive name for the new key.
         * @example "Personal MacBook Air"
         */
        title?: string;
        /**
         * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
         * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com
         */
        key: string;
      };
    };
    Response: SshSigningKey;
  };
  ["GET /user/ssh_signing_keys/${sshSigningKeyId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/ssh_signing_keys/${sshSigningKeyId}";
      typedPath?: `/user/ssh_signing_keys/${number}`;
      params: {
        /** The unique identifier of the SSH signing key. */
        sshSigningKeyId: number;
      };
    };
    Response: SshSigningKey;
  };
  ["DELETE /user/ssh_signing_keys/${sshSigningKeyId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/ssh_signing_keys/${sshSigningKeyId}";
      typedPath?: `/user/ssh_signing_keys/${number}`;
      params: {
        /** The unique identifier of the SSH signing key. */
        sshSigningKeyId: number;
      };
    };
    Response: void;
  };
  ["GET /user/starred"]: {
    Request: {
      method?: "GET";
      path?: "/user/starred";
      query: {
        /**
         * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Repository[];
  };
  ["GET /user/starred/${owner}/${repo}"]: {
    Request: {
      method?: "GET";
      path?: "/user/starred/${owner}/${repo}";
      typedPath?: `/user/starred/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["PUT /user/starred/${owner}/${repo}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/starred/${owner}/${repo}";
      typedPath?: `/user/starred/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["DELETE /user/starred/${owner}/${repo}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/starred/${owner}/${repo}";
      typedPath?: `/user/starred/${string}/${string}`;
      params: {
        /** The account owner of the repository. The name is not case sensitive. */
        owner: string;
        /** The name of the repository without the `.git` extension. The name is not case sensitive. */
        repo: string;
      };
    };
    Response: void;
  };
  ["GET /user/subscriptions"]: {
    Request: {
      method?: "GET";
      path?: "/user/subscriptions";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /user/teams"]: {
    Request: {
      method?: "GET";
      path?: "/user/teams";
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: TeamFull[];
  };
  ["GET /user/${accountId}"]: {
    Request: {
      method?: "GET";
      path?: "/user/${accountId}";
      typedPath?: `/user/${number}`;
      params: {
        /** account_id parameter */
        accountId: number;
      };
    };
    Response:
      | ({
          user_view_type: "public";
        } & PublicUser)
      | ({
          user_view_type: "private";
        } & PrivateUser);
  };
  ["GET /users"]: {
    Request: {
      method?: "GET";
      path?: "/users";
      query: {
        /** A user ID. Only return users with an ID greater than this ID. */
        since?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /users/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}";
      typedPath?: `/users/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response:
      | ({
          user_view_type: "public";
        } & PublicUser)
      | ({
          user_view_type: "private";
        } & PrivateUser);
  };
  ["POST /users/${username}/attestations/bulk-list"]: {
    Request: {
      method?: "POST";
      path?: "/users/${username}/attestations/bulk-list";
      typedPath?: `/users/${string}/attestations/bulk-list`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      };
      body: {
        /**
         * List of subject digests to fetch attestations for.
         * @maxItems 1024
         * @minItems 1
         */
        subject_digests: string[];
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    Response: {
      /** Mapping of subject digest to bundles. */
      attestations_subject_digests?: Record<
        string,
        | {
            /** The bundle of the attestation. */
            bundle?: {
              mediaType?: string;
              verificationMaterial?: Record<string, any>;
              dsseEnvelope?: Record<string, any>;
            };
            repository_id?: number;
            bundle_url?: string;
          }[]
        | null
      >;
      /** Information about the current page. */
      page_info?: {
        /** Indicates whether there is a next page. */
        has_next?: boolean;
        /** Indicates whether there is a previous page. */
        has_previous?: boolean;
        /** The cursor to the next page. */
        next?: string;
        /** The cursor to the previous page. */
        previous?: string;
      };
    };
  };
  ["POST /users/${username}/attestations/delete-request"]: {
    Request: {
      method?: "POST";
      path?: "/users/${username}/attestations/delete-request";
      typedPath?: `/users/${string}/attestations/delete-request`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      body:
        | {
            /**
             * List of subject digests associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            subject_digests: string[];
          }
        | {
            /**
             * List of unique IDs associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            attestation_ids: number[];
          };
    };
    Response: void;
  };
  ["DELETE /users/${username}/attestations/digest/${subjectDigest}"]: {
    Request: {
      method?: "DELETE";
      path?: "/users/${username}/attestations/digest/${subjectDigest}";
      typedPath?: `/users/${string}/attestations/digest/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
        /** Subject Digest */
        subjectDigest: string;
      };
    };
    Response: void;
  };
  ["DELETE /users/${username}/attestations/${attestationId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/users/${username}/attestations/${attestationId}";
      typedPath?: `/users/${string}/attestations/${number}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
        /** Attestation ID */
        attestationId: number;
      };
    };
    Response: void;
  };
  ["GET /users/${username}/attestations/${subjectDigest}"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/attestations/${subjectDigest}";
      typedPath?: `/users/${string}/attestations/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
        /** Subject Digest */
        subjectDigest: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    Response: {
      attestations?: {
        /**
         * The attestation's Sigstore Bundle.
         * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
         */
        bundle?: {
          mediaType?: string;
          verificationMaterial?: Record<string, any>;
          dsseEnvelope?: Record<string, any>;
        };
        repository_id?: number;
        bundle_url?: string;
      }[];
    };
  };
  ["GET /users/${username}/docker/conflicts"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/docker/conflicts";
      typedPath?: `/users/${string}/docker/conflicts`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: Package[];
  };
  ["GET /users/${username}/events"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/events";
      typedPath?: `/users/${string}/events`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /users/${username}/events/orgs/${org}"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/events/orgs/${org}";
      typedPath?: `/users/${string}/events/orgs/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
        /** The organization name. The name is not case sensitive. */
        org: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /users/${username}/events/public"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/events/public";
      typedPath?: `/users/${string}/events/public`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /users/${username}/followers"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/followers";
      typedPath?: `/users/${string}/followers`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /users/${username}/following"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/following";
      typedPath?: `/users/${string}/following`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SimpleUser[];
  };
  ["GET /users/${username}/following/${targetUser}"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/following/${targetUser}";
      typedPath?: `/users/${string}/following/${string}`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
        targetUser: string;
      };
    };
    Response: void;
  };
  ["GET /users/${username}/gists"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/gists";
      typedPath?: `/users/${string}/gists`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: BaseGist[];
  };
  ["GET /users/${username}/gpg_keys"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/gpg_keys";
      typedPath?: `/users/${string}/gpg_keys`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: GpgKey[];
  };
  ["GET /users/${username}/hovercard"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/hovercard";
      typedPath?: `/users/${string}/hovercard`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
        subject_type?: "organization" | "repository" | "issue" | "pull_request";
        /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
        subject_id?: string;
      };
    };
    Response: Hovercard;
  };
  ["GET /users/${username}/installation"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/installation";
      typedPath?: `/users/${string}/installation`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: Installation;
  };
  ["GET /users/${username}/keys"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/keys";
      typedPath?: `/users/${string}/keys`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: KeySimple[];
  };
  ["GET /users/${username}/orgs"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/orgs";
      typedPath?: `/users/${string}/orgs`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: OrganizationSimple[];
  };
  ["GET /users/${username}/packages"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/packages";
      typedPath?: `/users/${string}/packages`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /**
         * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
         *
         * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
         * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
         */
        visibility?: "public" | "private" | "internal";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      };
    };
    Response: Package[];
  };
  ["GET /users/${username}/packages/${packageType}/${packageName}"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/packages/${packageType}/${packageName}";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: Package;
  };
  ["DELETE /users/${username}/packages/${packageType}/${packageName}"]: {
    Request: {
      method?: "DELETE";
      path?: "/users/${username}/packages/${packageType}/${packageName}";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: void;
  };
  ["POST /users/${username}/packages/${packageType}/${packageName}/restore"]: {
    Request: {
      method?: "POST";
      path?: "/users/${username}/packages/${packageType}/${packageName}/restore";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/restore`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /** package token */
        token?: string;
      };
    };
    Response: void;
  };
  ["GET /users/${username}/packages/${packageType}/${packageName}/versions"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/packages/${packageType}/${packageName}/versions";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: PackageVersion[];
  };
  ["GET /users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: PackageVersion;
  };
  ["DELETE /users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The handle for the GitHub user account. */
        username: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: void;
  };
  ["POST /users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore"]: {
    Request: {
      method?: "POST";
      path?: "/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore";
      typedPath?: `/users/${string}/packages/${
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"}/${string}/versions/${number}/restore`;
      params: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /** The name of the package. */
        packageName: string;
        /** The handle for the GitHub user account. */
        username: string;
        /** Unique identifier of the package version. */
        packageVersionId: number;
      };
    };
    Response: void;
  };
  ["GET /users/${username}/projects"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/projects";
      typedPath?: `/users/${string}/projects`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * Indicates the state of the projects to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Project[];
  };
  ["GET /users/${username}/received_events"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/received_events";
      typedPath?: `/users/${string}/received_events`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /users/${username}/received_events/public"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/received_events/public";
      typedPath?: `/users/${string}/received_events/public`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: Event[];
  };
  ["GET /users/${username}/repos"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/repos";
      typedPath?: `/users/${string}/repos`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * Limit results to repositories of the specified type.
         * @default "owner"
         */
        type?: "all" | "owner" | "member";
        /**
         * The property to sort the results by.
         * @default "full_name"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /users/${username}/settings/billing/actions"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/settings/billing/actions";
      typedPath?: `/users/${string}/settings/billing/actions`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: ActionsBillingUsage;
  };
  ["GET /users/${username}/settings/billing/packages"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/settings/billing/packages";
      typedPath?: `/users/${string}/settings/billing/packages`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: PackagesBillingUsage;
  };
  ["GET /users/${username}/settings/billing/shared-storage"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/settings/billing/shared-storage";
      typedPath?: `/users/${string}/settings/billing/shared-storage`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
    };
    Response: CombinedBillingUsage;
  };
  ["GET /users/${username}/settings/billing/usage"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/settings/billing/usage";
      typedPath?: `/users/${string}/settings/billing/usage`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /** If specified, only return results for a single year. The value of `year` is an integer with four digits representing a year. For example, `2025`. Default value is the current year. */
        year?: number;
        /** If specified, only return results for a single month. The value of `month` is an integer between `1` and `12`. If no year is specified the default `year` is used. */
        month?: number;
        /** If specified, only return results for a single day. The value of `day` is an integer between `1` and `31`. If no `year` or `month` is specified, the default `year` and `month` are used. */
        day?: number;
        /** If specified, only return results for a single hour. The value of `hour` is an integer between `0` and `23`. If no `year`, `month`, or `day` is specified, the default `year`, `month`, and `day` are used. */
        hour?: number;
      };
    };
    Response: BillingUsageReportUser;
  };
  ["GET /users/${username}/social_accounts"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/social_accounts";
      typedPath?: `/users/${string}/social_accounts`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SocialAccount[];
  };
  ["GET /users/${username}/ssh_signing_keys"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/ssh_signing_keys";
      typedPath?: `/users/${string}/ssh_signing_keys`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: SshSigningKey[];
  };
  ["GET /users/${username}/starred"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/starred";
      typedPath?: `/users/${string}/starred`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: StarredRepository[] | Repository[];
  };
  ["GET /users/${username}/subscriptions"]: {
    Request: {
      method?: "GET";
      path?: "/users/${username}/subscriptions";
      typedPath?: `/users/${string}/subscriptions`;
      params: {
        /** The handle for the GitHub user account. */
        username: string;
      };
      query: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      };
    };
    Response: MinimalRepository[];
  };
  ["GET /versions"]: { Request: { method?: "GET"; path?: "/versions" }; Response: string[] };
  ["GET /zen"]: { Request: { method?: "GET"; path?: "/zen" }; Response: WebhookConfigUrl };
};

export type { Routes };
