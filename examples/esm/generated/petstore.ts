/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// prettier-ignore-file
// @flow-ignore-file

// GENERATED FILE - DO NOT EDIT
// Generated by swagger2types

interface ApiResponse {
  /** @format int32 */
  code?: number;
  type?: string;
  message?: string;
}

interface Category {
  /** @format int64 */
  id?: number;
  name?: string;
}

interface Pet {
  /** @format int64 */
  id?: number;
  category?: Category;
  /** @example "doggie" */
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /** pet status in the store */
  status?: "available" | "pending" | "sold";
}

interface Tag {
  /** @format int64 */
  id?: number;
  name?: string;
}

interface Order {
  /** @format int64 */
  id?: number;
  /** @format int64 */
  petId?: number;
  /** @format int32 */
  quantity?: number;
  /** @format date-time */
  shipDate?: string;
  /** Order Status */
  status?: "placed" | "approved" | "delivered";
  complete?: boolean;
}

interface User {
  /** @format int64 */
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   * @format int32
   */
  userStatus?: number;
}

type $_Routes = {
  ["POST /pet/${petId}/uploadImage"]: {
    Request: {
      params: {
        /**
         * ID of pet to update
         * @format int64
         */
        petId: number;
      };
      headers?: never;
      query?: never;
      body: {
        /** Additional data to pass to server */
        additionalMetadata?: string;
        /** file to upload */
        file?: File;
      };
    };
    Response: ApiResponse;
  };

  ["POST /pet"]: { Request: { params?: never; headers?: never; query?: never; body: Pet }; Response: any };

  ["PUT /pet"]: { Request: { params?: never; headers?: never; query?: never; body: Pet }; Response: any };

  /** Multiple status values can be provided with comma separated strings */
  ["GET /pet/findByStatus"]: {
    Request: {
      params?: never;
      headers?: never;
      query: {
        /** Status values that need to be considered for filter */
        status: ("available" | "pending" | "sold")[];
      };
      body?: never;
    };
    Response: Pet[];
  };

  /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
  ["GET /pet/findByTags"]: {
    Request: {
      params?: never;
      headers?: never;
      query: {
        /** Tags to filter by */
        tags: string[];
      };
      body?: never;
    };
    Response: Pet[];
  };

  /** Returns a single pet */
  ["GET /pet/${petId}"]: {
    Request: {
      params: {
        /**
         * ID of pet to return
         * @format int64
         */
        petId: number;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: Pet;
  };

  ["POST /pet/${petId}"]: {
    Request: {
      params: {
        /**
         * ID of pet that needs to be updated
         * @format int64
         */
        petId: number;
      };
      headers?: never;
      query?: never;
      body: {
        /** Updated name of the pet */
        name?: string;
        /** Updated status of the pet */
        status?: string;
      };
    };
    Response: any;
  };

  ["DELETE /pet/${petId}"]: {
    Request: {
      params: {
        /**
         * Pet id to delete
         * @format int64
         */
        petId: number;
      };
      headers: {
        api_key?: string;
      };
      query?: never;
      body?: never;
    };
    Response: any;
  };

  /** Returns a map of status codes to quantities */
  ["GET /store/inventory"]: {
    Request: { params?: never; headers?: never; query?: never; body?: never };
    Response: Record<string, number>;
  };

  ["POST /store/order"]: { Request: { params?: never; headers?: never; query?: never; body: Order }; Response: Order };

  /** For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions */
  ["GET /store/order/${orderId}"]: {
    Request: {
      params: {
        /**
         * ID of pet that needs to be fetched
         * @format int64
         * @min 1
         * @max 10
         */
        orderId: number;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: Order;
  };

  /** For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors */
  ["DELETE /store/order/${orderId}"]: {
    Request: {
      params: {
        /**
         * ID of the order that needs to be deleted
         * @format int64
         * @min 1
         */
        orderId: number;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: any;
  };

  ["POST /user/createWithList"]: {
    Request: { params?: never; headers?: never; query?: never; body: User[] };
    Response: void;
  };

  ["GET /user/${username}"]: {
    Request: {
      params: {
        /** The name that needs to be fetched. Use user1 for testing.  */
        username: string;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: User;
  };

  /** This can only be done by the logged in user. */
  ["PUT /user/${username}"]: {
    Request: {
      params: {
        /** name that need to be updated */
        username: string;
      };
      headers?: never;
      query?: never;
      body: User;
    };
    Response: any;
  };

  /** This can only be done by the logged in user. */
  ["DELETE /user/${username}"]: {
    Request: {
      params: {
        /** The name that needs to be deleted */
        username: string;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: any;
  };

  ["GET /user/login"]: {
    Request: {
      params?: never;
      headers?: never;
      query: {
        /** The user name for login */
        username: string;
        /** The password for login in clear text */
        password: string;
      };
      body?: never;
    };
    Response: string;
  };

  ["GET /user/logout"]: { Request: { params?: never; headers?: never; query?: never; body?: never }; Response: void };

  ["POST /user/createWithArray"]: {
    Request: { params?: never; headers?: never; query?: never; body: User[] };
    Response: void;
  };

  /** This can only be done by the logged in user. */
  ["POST /user"]: { Request: { params?: never; headers?: never; query?: never; body: User }; Response: void };
};

export type {
  $_Routes as Routes,

  // The following are only exported to avoid the error: Exported variable 'X' has or is using name 'Y' from external module "Z" but cannot be named.ts(4023)

  ApiResponse as ಠ_ಠ_ApiResponse,
  Category as ಠ_ಠ_Category,
  Pet as ಠ_ಠ_Pet,
  Tag as ಠ_ಠ_Tag,
  Order as ಠ_ಠ_Order,
  User as ಠ_ಠ_User
};
