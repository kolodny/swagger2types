/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// prettier-ignore-file
// @flow-ignore-file

// GENERATED FILE - DO NOT EDIT
// Generated by swagger2types

interface ApiResponse {
  /** @format int32 */
  code?: number;
  type?: string;
  message?: string;
}

interface Category {
  /** @format int64 */
  id?: number;
  name?: string;
}

interface Pet {
  /** @format int64 */
  id?: number;
  category?: Category;
  /** @example "doggie" */
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /** pet status in the store */
  status?: "available" | "pending" | "sold";
}

interface Tag {
  /** @format int64 */
  id?: number;
  name?: string;
}

interface Order {
  /** @format int64 */
  id?: number;
  /** @format int64 */
  petId?: number;
  /** @format int32 */
  quantity?: number;
  /** @format date-time */
  shipDate?: string;
  /** Order Status */
  status?: "placed" | "approved" | "delivered";
  complete?: boolean;
}

interface User {
  /** @format int64 */
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   * @format int32
   */
  userStatus?: number;
}

type Routes = {
  ["POST /pet/${petId}/uploadImage"]: {
    Request: {
      method?: "POST";
      path?: "/pet/${petId}/uploadImage";
      typedPath: `/pet/${number}/uploadImage`;
      params: {
        /**
         * ID of pet to update
         * @format int64
         */
        petId: number;
      };
      headers?: never;
      query?: never;
      body: {
        /** Additional data to pass to server */
        additionalMetadata?: string;
        /** file to upload */
        file?: File;
      };
    };
    Response: ApiResponse;
  };
  ["POST /pet"]: {
    Request: {
      method?: "POST";
      path?: "/pet";
      typedPath: `/pet`;
      params?: never;
      headers?: never;
      query?: never;
      body: Pet;
    };
    Response: any;
  };
  ["PUT /pet"]: {
    Request: {
      method?: "PUT";
      path?: "/pet";
      typedPath: `/pet`;
      params?: never;
      headers?: never;
      query?: never;
      body: Pet;
    };
    Response: any;
  };
  ["GET /pet/findByStatus"]: {
    Request: {
      method?: "GET";
      path?: "/pet/findByStatus";
      typedPath: `/pet/findByStatus`;
      params?: never;
      headers?: never;
      query: {
        /** Status values that need to be considered for filter */
        status: ("available" | "pending" | "sold")[];
      };
      body?: never;
    };
    Response: Pet[];
  };
  ["GET /pet/findByTags"]: {
    Request: {
      method?: "GET";
      path?: "/pet/findByTags";
      typedPath: `/pet/findByTags`;
      params?: never;
      headers?: never;
      query: {
        /** Tags to filter by */
        tags: string[];
      };
      body?: never;
    };
    Response: Pet[];
  };
  ["GET /pet/${petId}"]: {
    Request: {
      method?: "GET";
      path?: "/pet/${petId}";
      typedPath: `/pet/${number}`;
      params: {
        /**
         * ID of pet to return
         * @format int64
         */
        petId: number;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: Pet;
  };
  ["POST /pet/${petId}"]: {
    Request: {
      method?: "POST";
      path?: "/pet/${petId}";
      typedPath: `/pet/${number}`;
      params: {
        /**
         * ID of pet that needs to be updated
         * @format int64
         */
        petId: number;
      };
      headers?: never;
      query?: never;
      body: {
        /** Updated name of the pet */
        name?: string;
        /** Updated status of the pet */
        status?: string;
      };
    };
    Response: any;
  };
  ["DELETE /pet/${petId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/pet/${petId}";
      typedPath: `/pet/${number}`;
      params: {
        /**
         * Pet id to delete
         * @format int64
         */
        petId: number;
      };
      headers: {
        api_key?: string;
      };
      query?: never;
      body?: never;
    };
    Response: any;
  };
  ["GET /store/inventory"]: {
    Request: {
      method?: "GET";
      path?: "/store/inventory";
      typedPath: `/store/inventory`;
      params?: never;
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: Record<string, number>;
  };
  ["POST /store/order"]: {
    Request: {
      method?: "POST";
      path?: "/store/order";
      typedPath: `/store/order`;
      params?: never;
      headers?: never;
      query?: never;
      body: Order;
    };
    Response: Order;
  };
  ["GET /store/order/${orderId}"]: {
    Request: {
      method?: "GET";
      path?: "/store/order/${orderId}";
      typedPath: `/store/order/${number}`;
      params: {
        /**
         * ID of pet that needs to be fetched
         * @format int64
         * @min 1
         * @max 10
         */
        orderId: number;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: Order;
  };
  ["DELETE /store/order/${orderId}"]: {
    Request: {
      method?: "DELETE";
      path?: "/store/order/${orderId}";
      typedPath: `/store/order/${number}`;
      params: {
        /**
         * ID of the order that needs to be deleted
         * @format int64
         * @min 1
         */
        orderId: number;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: any;
  };
  ["POST /user/createWithList"]: {
    Request: {
      method?: "POST";
      path?: "/user/createWithList";
      typedPath: `/user/createWithList`;
      params?: never;
      headers?: never;
      query?: never;
      body: User[];
    };
    Response: void;
  };
  ["GET /user/${username}"]: {
    Request: {
      method?: "GET";
      path?: "/user/${username}";
      typedPath: `/user/${string}`;
      params: {
        /** The name that needs to be fetched. Use user1 for testing.  */
        username: string;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: User;
  };
  ["PUT /user/${username}"]: {
    Request: {
      method?: "PUT";
      path?: "/user/${username}";
      typedPath: `/user/${string}`;
      params: {
        /** name that need to be updated */
        username: string;
      };
      headers?: never;
      query?: never;
      body: User;
    };
    Response: any;
  };
  ["DELETE /user/${username}"]: {
    Request: {
      method?: "DELETE";
      path?: "/user/${username}";
      typedPath: `/user/${string}`;
      params: {
        /** The name that needs to be deleted */
        username: string;
      };
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: any;
  };
  ["GET /user/login"]: {
    Request: {
      method?: "GET";
      path?: "/user/login";
      typedPath: `/user/login`;
      params?: never;
      headers?: never;
      query: {
        /** The user name for login */
        username: string;
        /** The password for login in clear text */
        password: string;
      };
      body?: never;
    };
    Response: string;
  };
  ["GET /user/logout"]: {
    Request: {
      method?: "GET";
      path?: "/user/logout";
      typedPath: `/user/logout`;
      params?: never;
      headers?: never;
      query?: never;
      body?: never;
    };
    Response: void;
  };
  ["POST /user/createWithArray"]: {
    Request: {
      method?: "POST";
      path?: "/user/createWithArray";
      typedPath: `/user/createWithArray`;
      params?: never;
      headers?: never;
      query?: never;
      body: User[];
    };
    Response: void;
  };
  ["POST /user"]: {
    Request: {
      method?: "POST";
      path?: "/user";
      typedPath: `/user`;
      params?: never;
      headers?: never;
      query?: never;
      body: User;
    };
    Response: void;
  };
};

export type { Routes };
