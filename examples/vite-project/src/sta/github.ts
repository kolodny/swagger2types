/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Root {
  /** @format uri-template */
  current_user_url: string;
  /** @format uri-template */
  current_user_authorizations_html_url: string;
  /** @format uri-template */
  authorizations_url: string;
  /** @format uri-template */
  code_search_url: string;
  /** @format uri-template */
  commit_search_url: string;
  /** @format uri-template */
  emails_url: string;
  /** @format uri-template */
  emojis_url: string;
  /** @format uri-template */
  events_url: string;
  /** @format uri-template */
  feeds_url: string;
  /** @format uri-template */
  followers_url: string;
  /** @format uri-template */
  following_url: string;
  /** @format uri-template */
  gists_url: string;
  /**
   * @deprecated
   * @format uri-template
   */
  hub_url?: string;
  /** @format uri-template */
  issue_search_url: string;
  /** @format uri-template */
  issues_url: string;
  /** @format uri-template */
  keys_url: string;
  /** @format uri-template */
  label_search_url: string;
  /** @format uri-template */
  notifications_url: string;
  /** @format uri-template */
  organization_url: string;
  /** @format uri-template */
  organization_repositories_url: string;
  /** @format uri-template */
  organization_teams_url: string;
  /** @format uri-template */
  public_gists_url: string;
  /** @format uri-template */
  rate_limit_url: string;
  /** @format uri-template */
  repository_url: string;
  /** @format uri-template */
  repository_search_url: string;
  /** @format uri-template */
  current_user_repositories_url: string;
  /** @format uri-template */
  starred_url: string;
  /** @format uri-template */
  starred_gists_url: string;
  /** @format uri-template */
  topic_search_url?: string;
  /** @format uri-template */
  user_url: string;
  /** @format uri-template */
  user_organizations_url: string;
  /** @format uri-template */
  user_repositories_url: string;
  /** @format uri-template */
  user_search_url: string;
}

/** The package's language or package management ecosystem. */
export type SecurityAdvisoryEcosystems =
  | "rubygems"
  | "npm"
  | "pip"
  | "maven"
  | "nuget"
  | "composer"
  | "go"
  | "rust"
  | "erlang"
  | "actions"
  | "pub"
  | "other"
  | "swift";

/** A vulnerability describing the product and its affected versions within a GitHub Security Advisory. */
export interface Vulnerability {
  /** The name of the package affected by the vulnerability. */
  package: {
    /** The package's language or package management ecosystem. */
    ecosystem: SecurityAdvisoryEcosystems;
    /** The unique package name within its ecosystem. */
    name: string | null;
  };
  /** The range of the package versions affected by the vulnerability. */
  vulnerable_version_range: string | null;
  /** The package version that resolves the vulnerability. */
  first_patched_version: string | null;
  /** The functions in the package that are affected by the vulnerability. */
  vulnerable_functions: string[] | null;
}

export type CvssSeverities = {
  cvss_v3?: {
    /** The CVSS 3 vector string. */
    vector_string: string | null;
    /**
     * The CVSS 3 score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
  cvss_v4?: {
    /** The CVSS 4 vector string. */
    vector_string: string | null;
    /**
     * The CVSS 4 score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
};

/** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
export type SecurityAdvisoryEpss = {
  /**
   * @min 0
   * @max 100
   */
  percentage?: number;
  /**
   * @min 0
   * @max 100
   */
  percentile?: number;
} | null;

/**
 * Simple User
 * A GitHub user.
 */
export interface SimpleUser {
  name?: string | null;
  email?: string | null;
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "public" */
  user_view_type?: string;
}

/** The type of credit the user is receiving. */
export type SecurityAdvisoryCreditTypes =
  | "analyst"
  | "finder"
  | "reporter"
  | "coordinator"
  | "remediation_developer"
  | "remediation_reviewer"
  | "remediation_verifier"
  | "tool"
  | "sponsor"
  | "other";

/** A GitHub Security Advisory. */
export interface GlobalAdvisory {
  /** The GitHub Security Advisory ID. */
  ghsa_id: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id: string | null;
  /** The API URL for the advisory. */
  url: string;
  /**
   * The URL for the advisory.
   * @format uri
   */
  html_url: string;
  /**
   * The API URL for the repository advisory.
   * @format uri
   */
  repository_advisory_url: string | null;
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory entails.
   * @maxLength 65535
   */
  description: string | null;
  /** The type of advisory. */
  type: "reviewed" | "unreviewed" | "malware";
  /** The severity of the advisory. */
  severity: "critical" | "high" | "medium" | "low" | "unknown";
  /**
   * The URL of the advisory's source code.
   * @format uri
   */
  source_code_location: string | null;
  identifiers:
    | {
        /** The type of identifier. */
        type: "CVE" | "GHSA";
        /** The identifier value. */
        value: string;
      }[]
    | null;
  references: string[] | null;
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   * @format date-time
   */
  published_at: string;
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   * @format date-time
   */
  updated_at: string;
  /**
   * The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
   * @format date-time
   */
  github_reviewed_at: string | null;
  /**
   * The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
   * This field is only populated when the advisory is imported from the National Vulnerability Database.
   * @format date-time
   */
  nvd_published_at: string | null;
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @format date-time
   */
  withdrawn_at: string | null;
  /** The products and respective version ranges affected by the advisory. */
  vulnerabilities: Vulnerability[] | null;
  cvss: {
    /** The CVSS vector. */
    vector_string: string | null;
    /**
     * The CVSS score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
  cvss_severities?: CvssSeverities;
  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
  epss?: SecurityAdvisoryEpss;
  cwes:
    | {
        /** The Common Weakness Enumeration (CWE) identifier. */
        cwe_id: string;
        /** The name of the CWE. */
        name: string;
      }[]
    | null;
  /** The users who contributed to the advisory. */
  credits:
    | {
        /** A GitHub user. */
        user: SimpleUser;
        /** The type of credit the user is receiving. */
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
}

/**
 * Basic Error
 * Basic Error
 */
export interface BasicError {
  message?: string;
  documentation_url?: string;
  url?: string;
  status?: string;
}

/**
 * Validation Error Simple
 * Validation Error Simple
 */
export interface ValidationErrorSimple {
  message: string;
  documentation_url: string;
  errors?: string[];
}

/**
 * Enterprise
 * An enterprise on GitHub.
 */
export interface Enterprise {
  /** A short description of the enterprise. */
  description?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   * @format uri
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @format date-time
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /** @format uri */
  avatar_url: string;
}

/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id: string;
  /** @example ""Iv1.25b5d1e65ffc4022"" */
  client_id?: string;
  owner: SimpleUser | Enterprise;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /** @example "The description of the app." */
  description: string | null;
  /**
   * @format uri
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @format uri
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   * @example {"issues":"read","deployments":"write"}
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [key: string]: any;
  };
  /**
   * The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
   * @example ["label","deployment"]
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
   * @example 5
   */
  installations_count?: number;
};

/**
 * The URL to which the payloads will be delivered.
 * @format uri
 * @example "https://example.com/webhook"
 */
export type WebhookConfigUrl = string;

/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 * @example ""json""
 */
export type WebhookConfigContentType = string;

/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 * @example ""********""
 */
export type WebhookConfigSecret = string;

/** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
export type WebhookConfigInsecureSsl = string | number;

/**
 * Webhook Configuration
 * Configuration object of the webhook
 */
export interface WebhookConfig {
  /** The URL to which the payloads will be delivered. */
  url?: WebhookConfigUrl;
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
  content_type?: WebhookConfigContentType;
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
  secret?: WebhookConfigSecret;
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
  insecure_ssl?: WebhookConfigInsecureSsl;
}

/**
 * Simple webhook delivery
 * Delivery made by a webhook, without request and response information.
 */
export interface HookDeliveryItem {
  /**
   * Unique identifier of the webhook delivery.
   * @format int64
   * @example 42
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   */
  guid: string;
  /**
   * Time when the webhook delivery occurred.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  delivered_at: string;
  /**
   * Whether the webhook delivery is a redelivery.
   * @example false
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   */
  duration: number;
  /**
   * Describes the response returned after attempting the delivery.
   * @example "failed to connect"
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @format int64
   * @example 123
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @format int64
   * @example 123
   */
  repository_id: number | null;
  /**
   * Time when the webhook delivery was throttled.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  throttled_at?: string | null;
}

/**
 * Scim Error
 * Scim Error
 */
export interface ScimError {
  message?: string | null;
  documentation_url?: string | null;
  detail?: string | null;
  status?: number;
  scimType?: string | null;
  schemas?: string[];
}

/**
 * Validation Error
 * Validation Error
 */
export interface ValidationError {
  message: string;
  documentation_url: string;
  errors?: {
    resource?: string;
    field?: string;
    message?: string;
    code: string;
    index?: number;
    value?: string | null | number | null | string[] | null;
  }[];
}

/**
 * Webhook delivery
 * Delivery made by a webhook.
 */
export interface HookDelivery {
  /**
   * Unique identifier of the delivery.
   * @example 42
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   */
  guid: string;
  /**
   * Time when the delivery was delivered.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  delivered_at: string;
  /**
   * Whether the delivery is a redelivery.
   * @example false
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   */
  duration: number;
  /**
   * Description of the status of the attempted delivery
   * @example "failed to connect"
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @example 123
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @example 123
   */
  repository_id: number | null;
  /**
   * Time when the webhook delivery was throttled.
   * @format date-time
   * @example "2021-05-12T20:33:44Z"
   */
  throttled_at?: string | null;
  /**
   * The URL target of the delivery.
   * @example "https://www.example.com"
   */
  url?: string;
  request: {
    /** The request headers sent with the webhook delivery. */
    headers: Record<string, any>;
    /** The webhook payload. */
    payload: Record<string, any>;
  };
  response: {
    /** The response headers received when the delivery was made. */
    headers: Record<string, any>;
    /** The response payload received. */
    payload: string | null;
  };
}

/**
 * Integration Installation Request
 * Request to install an integration on a target
 */
export interface IntegrationInstallationRequest {
  /**
   * Unique identifier of the request installation.
   * @example 42
   */
  id: number;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id?: string;
  account: SimpleUser | Enterprise;
  /** A GitHub user. */
  requester: SimpleUser;
  /**
   * @format date-time
   * @example "2022-07-08T16:18:44-04:00"
   */
  created_at: string;
}

/**
 * App Permissions
 * The permissions granted to the user access token.
 * @example {"contents":"read","issues":"read","deployments":"write","single_file":"read"}
 */
export interface AppPermissions {
  /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. */
  actions?: "read" | "write";
  /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. */
  administration?: "read" | "write";
  /** The level of permission to grant the access token for checks on code. */
  checks?: "read" | "write";
  /** The level of permission to grant the access token to create, edit, delete, and list Codespaces. */
  codespaces?: "read" | "write";
  /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. */
  contents?: "read" | "write";
  /** The level of permission to grant the access token to manage Dependabot secrets. */
  dependabot_secrets?: "read" | "write";
  /** The level of permission to grant the access token for deployments and deployment statuses. */
  deployments?: "read" | "write";
  /** The level of permission to grant the access token for managing repository environments. */
  environments?: "read" | "write";
  /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. */
  issues?: "read" | "write";
  /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. */
  metadata?: "read" | "write";
  /** The level of permission to grant the access token for packages published to GitHub Packages. */
  packages?: "read" | "write";
  /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. */
  pages?: "read" | "write";
  /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. */
  pull_requests?: "read" | "write";
  /** The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property. */
  repository_custom_properties?: "read" | "write";
  /** The level of permission to grant the access token to manage the post-receive hooks for a repository. */
  repository_hooks?: "read" | "write";
  /** The level of permission to grant the access token to manage repository projects, columns, and cards. */
  repository_projects?: "read" | "write" | "admin";
  /** The level of permission to grant the access token to view and manage secret scanning alerts. */
  secret_scanning_alerts?: "read" | "write";
  /** The level of permission to grant the access token to manage repository secrets. */
  secrets?: "read" | "write";
  /** The level of permission to grant the access token to view and manage security events like code scanning alerts. */
  security_events?: "read" | "write";
  /** The level of permission to grant the access token to manage just a single file. */
  single_file?: "read" | "write";
  /** The level of permission to grant the access token for commit statuses. */
  statuses?: "read" | "write";
  /** The level of permission to grant the access token to manage Dependabot alerts. */
  vulnerability_alerts?: "read" | "write";
  /** The level of permission to grant the access token to update GitHub Actions workflow files. */
  workflows?: "write";
  /** The level of permission to grant the access token for organization teams and members. */
  members?: "read" | "write";
  /** The level of permission to grant the access token to manage access to an organization. */
  organization_administration?: "read" | "write";
  /** The level of permission to grant the access token for custom repository roles management. */
  organization_custom_roles?: "read" | "write";
  /** The level of permission to grant the access token for custom organization roles management. */
  organization_custom_org_roles?: "read" | "write";
  /** The level of permission to grant the access token for custom property management. */
  organization_custom_properties?: "read" | "write" | "admin";
  /** The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change. */
  organization_copilot_seat_management?: "write";
  /** The level of permission to grant the access token to view and manage announcement banners for an organization. */
  organization_announcement_banners?: "read" | "write";
  /** The level of permission to grant the access token to view events triggered by an activity in an organization. */
  organization_events?: "read";
  /** The level of permission to grant the access token to manage the post-receive hooks for an organization. */
  organization_hooks?: "read" | "write";
  /** The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization. */
  organization_personal_access_tokens?: "read" | "write";
  /** The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization. */
  organization_personal_access_token_requests?: "read" | "write";
  /** The level of permission to grant the access token for viewing an organization's plan. */
  organization_plan?: "read";
  /** The level of permission to grant the access token to manage organization projects and projects public preview (where available). */
  organization_projects?: "read" | "write" | "admin";
  /** The level of permission to grant the access token for organization packages published to GitHub Packages. */
  organization_packages?: "read" | "write";
  /** The level of permission to grant the access token to manage organization secrets. */
  organization_secrets?: "read" | "write";
  /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. */
  organization_self_hosted_runners?: "read" | "write";
  /** The level of permission to grant the access token to view and manage users blocked by the organization. */
  organization_user_blocking?: "read" | "write";
  /** The level of permission to grant the access token to manage team discussions and related comments. */
  team_discussions?: "read" | "write";
  /** The level of permission to grant the access token to manage the email addresses belonging to a user. */
  email_addresses?: "read" | "write";
  /** The level of permission to grant the access token to manage the followers belonging to a user. */
  followers?: "read" | "write";
  /** The level of permission to grant the access token to manage git SSH keys. */
  git_ssh_keys?: "read" | "write";
  /** The level of permission to grant the access token to view and manage GPG keys belonging to a user. */
  gpg_keys?: "read" | "write";
  /** The level of permission to grant the access token to view and manage interaction limits on a repository. */
  interaction_limits?: "read" | "write";
  /** The level of permission to grant the access token to manage the profile settings belonging to a user. */
  profile?: "write";
  /** The level of permission to grant the access token to list and manage repositories a user is starring. */
  starring?: "read" | "write";
}

/**
 * Simple User
 * A GitHub user.
 */
export type NullableSimpleUser = {
  name?: string | null;
  email?: string | null;
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "public" */
  user_view_type?: string;
};

/**
 * Installation
 * Installation
 */
export interface Installation {
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  account: SimpleUser | Enterprise | null;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: "all" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/app/installations/1/access_tokens"
   */
  access_tokens_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/installation/repositories"
   */
  repositories_url: string;
  /**
   * @format uri
   * @example "https://github.com/organizations/github/settings/installations/1"
   */
  html_url: string;
  /** @example 1 */
  app_id: number;
  /** @example "Iv1.ab1112223334445c" */
  client_id?: string;
  /** The ID of the user or organization this token is being scoped to. */
  target_id: number;
  /** @example "Organization" */
  target_type: string;
  /** The permissions granted to the user access token. */
  permissions: AppPermissions;
  events: string[];
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @example "config.yaml" */
  single_file_name: string | null;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
  /** @example "github-actions" */
  app_slug: string;
  /** A GitHub user. */
  suspended_by: NullableSimpleUser;
  /** @format date-time */
  suspended_at: string | null;
  /** @example ""test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"" */
  contact_email?: string | null;
}

/**
 * License Simple
 * License Simple
 */
export type NullableLicenseSimple = {
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /** @example "MIT" */
  spdx_id: string | null;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /** @format uri */
  html_url?: string;
};

/**
 * Repository
 * A repository on GitHub.
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @deprecated
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
  /** The status of the code search index for this repository */
  code_search_index_status?: {
    lexical_search_ok?: boolean;
    lexical_commit_sha?: string;
  };
}

/**
 * Installation Token
 * Authentication token for a GitHub App installed on a user or org.
 */
export interface InstallationToken {
  token: string;
  expires_at: string;
  /** The permissions granted to the user access token. */
  permissions?: AppPermissions;
  repository_selection?: "all" | "selected";
  repositories?: Repository[];
  /** @example "README.md" */
  single_file?: string;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
}

/** Scoped Installation */
export type NullableScopedInstallation = {
  /** The permissions granted to the user access token. */
  permissions: AppPermissions;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: "all" | "selected";
  /** @example "config.yaml" */
  single_file_name: string | null;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repositories_url: string;
  /** A GitHub user. */
  account: SimpleUser;
};

/**
 * Authorization
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface Authorization {
  /** @format int64 */
  id: number;
  /** @format uri */
  url: string;
  /** A list of scopes that this authorization is in. */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  hashed_token: string | null;
  app: {
    client_id: string;
    name: string;
    /** @format uri */
    url: string;
  };
  note: string | null;
  /** @format uri */
  note_url: string | null;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  created_at: string;
  fingerprint: string | null;
  /** A GitHub user. */
  user?: NullableSimpleUser;
  installation?: NullableScopedInstallation;
  /** @format date-time */
  expires_at: string | null;
}

/**
 * Simple Classroom Repository
 * A GitHub repository view for Classroom
 */
export interface SimpleClassroomRepository {
  /**
   * A unique identifier of the repository.
   * @example 1296269
   */
  id: number;
  /**
   * The full, globally unique name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /** Whether the repository is private. */
  private: boolean;
  /**
   * The default branch for the repository.
   * @example "main"
   */
  default_branch: string;
}

/**
 * Organization Simple for Classroom
 * A GitHub organization.
 */
export interface SimpleClassroomOrganization {
  /** @example 1 */
  id: number;
  /** @example "github" */
  login: string;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/github"
   */
  html_url: string;
  /** @example "Github - Code thigns happen here" */
  name: string | null;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
}

/**
 * Classroom
 * A GitHub Classroom classroom
 */
export interface Classroom {
  /**
   * Unique identifier of the classroom.
   * @example 42
   */
  id: number;
  /**
   * The name of the classroom.
   * @example "Programming Elixir"
   */
  name: string;
  /**
   * Whether classroom is archived.
   * @example false
   */
  archived: boolean;
  /** A GitHub organization. */
  organization: SimpleClassroomOrganization;
  /**
   * The URL of the classroom on GitHub Classroom.
   * @example "https://classroom.github.com/classrooms/1-programming-elixir"
   */
  url: string;
}

/**
 * Classroom Assignment
 * A GitHub Classroom assignment
 */
export interface ClassroomAssignment {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;
  /**
   * Assignment title.
   * @example "Intro to Binaries"
   */
  title: string;
  /**
   * Whether it's a group assignment or individual assignment.
   * @example "individual"
   */
  type: "individual" | "group";
  /**
   * The link that a student can use to accept the assignment.
   * @example "https://classroom.github.com/a/Lx7jiUgx"
   */
  invite_link: string;
  /**
   * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;
  /**
   * Sluggified name of the assignment.
   * @example "intro-to-binaries"
   */
  slug: string;
  /**
   * Whether students are admins on created repository when a student accepts the assignment.
   * @example true
   */
  students_are_repo_admins: boolean;
  /**
   * Whether feedback pull request will be created when a student accepts the assignment.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;
  /**
   * The maximum allowable teams for the assignment.
   * @example 0
   */
  max_teams: number | null;
  /**
   * The maximum allowable members per team.
   * @example 0
   */
  max_members: number | null;
  /**
   * The selected editor for the assignment.
   * @example "codespaces"
   */
  editor: string;
  /**
   * The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;
  /**
   * The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;
  /**
   * The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;
  /**
   * The programming language used in the assignment.
   * @example "elixir"
   */
  language: string;
  /**
   * The time at which the assignment is due.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  deadline: string | null;
  /** A GitHub repository view for Classroom */
  starter_code_repository: SimpleClassroomRepository;
  /** A GitHub Classroom classroom */
  classroom: Classroom;
}

/**
 * Simple Classroom User
 * A GitHub user simplified for Classroom.
 */
export interface SimpleClassroomUser {
  /** @example 1 */
  id: number;
  /** @example "octocat" */
  login: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
}

/**
 * Simple Classroom
 * A GitHub Classroom classroom
 */
export interface SimpleClassroom {
  /**
   * Unique identifier of the classroom.
   * @example 42
   */
  id: number;
  /**
   * The name of the classroom.
   * @example "Programming Elixir"
   */
  name: string;
  /**
   * Returns whether classroom is archived or not.
   * @example false
   */
  archived: boolean;
  /**
   * The url of the classroom on GitHub Classroom.
   * @example "https://classroom.github.com/classrooms/1-programming-elixir"
   */
  url: string;
}

/**
 * Simple Classroom Assignment
 * A GitHub Classroom assignment
 */
export interface SimpleClassroomAssignment {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;
  /**
   * Assignment title.
   * @example "Intro to Binaries"
   */
  title: string;
  /**
   * Whether it's a Group Assignment or Individual Assignment.
   * @example "individual"
   */
  type: "individual" | "group";
  /**
   * The link that a student can use to accept the assignment.
   * @example "https://classroom.github.com/a/Lx7jiUgx"
   */
  invite_link: string;
  /**
   * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;
  /**
   * Sluggified name of the assignment.
   * @example "intro-to-binaries"
   */
  slug: string;
  /**
   * Whether students are admins on created repository on accepted assignment.
   * @example true
   */
  students_are_repo_admins: boolean;
  /**
   * Whether feedback pull request will be created on assignment acceptance.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;
  /**
   * The maximum allowable teams for the assignment.
   * @example 0
   */
  max_teams?: number | null;
  /**
   * The maximum allowable members per team.
   * @example 0
   */
  max_members?: number | null;
  /**
   * The selected editor for the assignment.
   * @example "codespaces"
   */
  editor: string;
  /**
   * The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;
  /**
   * The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;
  /**
   * The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;
  /**
   * The programming language used in the assignment.
   * @example "elixir"
   */
  language: string;
  /**
   * The time at which the assignment is due.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  deadline: string | null;
  /** A GitHub Classroom classroom */
  classroom: SimpleClassroom;
}

/**
 * Classroom Accepted Assignment
 * A GitHub Classroom accepted assignment
 */
export interface ClassroomAcceptedAssignment {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment has been submitted.
   * @example true
   */
  submitted: boolean;
  /**
   * Whether a submission passed.
   * @example true
   */
  passing: boolean;
  /**
   * Count of student commits.
   * @example 5
   */
  commit_count: number;
  /**
   * Most recent grade.
   * @example "10/10"
   */
  grade: string;
  students: SimpleClassroomUser[];
  /** A GitHub repository view for Classroom */
  repository: SimpleClassroomRepository;
  /** A GitHub Classroom assignment */
  assignment: SimpleClassroomAssignment;
}

/**
 * Classroom Assignment Grade
 * Grade for a student or groups GitHub Classroom assignment
 */
export interface ClassroomAssignmentGrade {
  /** Name of the assignment */
  assignment_name: string;
  /** URL of the assignment */
  assignment_url: string;
  /** URL of the starter code for the assignment */
  starter_code_url: string;
  /** GitHub username of the student */
  github_username: string;
  /** Roster identifier of the student */
  roster_identifier: string;
  /** Name of the student's assignment repository */
  student_repository_name: string;
  /** URL of the student's assignment repository */
  student_repository_url: string;
  /** Timestamp of the student's assignment submission */
  submission_timestamp: string;
  /** Number of points awarded to the student */
  points_awarded: number;
  /** Number of points available for the assignment */
  points_available: number;
  /** If a group assignment, name of the group the student is in */
  group_name?: string;
}

/**
 * Code Of Conduct
 * Code Of Conduct
 */
export interface CodeOfConduct {
  /** @example "contributor_covenant" */
  key: string;
  /** @example "Contributor Covenant" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/codes_of_conduct/contributor_covenant"
   */
  url: string;
  /**
   * @example "# Contributor Covenant Code of Conduct
   *
   * ## Our Pledge
   *
   * In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
   *
   * ## Our Standards
   *
   * Examples of behavior that contributes to creating a positive environment include:
   *
   * * Using welcoming and inclusive language
   * * Being respectful of differing viewpoints and experiences
   * * Gracefully accepting constructive criticism
   * * Focusing on what is best for the community
   * * Showing empathy towards other community members
   *
   * Examples of unacceptable behavior by participants include:
   *
   * * The use of sexualized language or imagery and unwelcome sexual attention or advances
   * * Trolling, insulting/derogatory comments, and personal or political attacks
   * * Public or private harassment
   * * Publishing others' private information, such as a physical or electronic address, without explicit permission
   * * Other conduct which could reasonably be considered inappropriate in a professional setting
   *
   * ## Our Responsibilities
   *
   * Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
   *                   to any instances of unacceptable behavior.
   *
   * Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
   *
   * ## Scope
   *
   * This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
   *                   posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
   *
   * ## Enforcement
   *
   * Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
   *
   * Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
   *
   * ## Attribution
   *
   * This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).
   * "
   */
  body?: string;
  /** @format uri */
  html_url: string | null;
}

/** A code security configuration */
export interface CodeSecurityConfiguration {
  /** The ID of the code security configuration */
  id?: number;
  /** The name of the code security configuration. Must be unique within the organization. */
  name?: string;
  /** The type of the code security configuration. */
  target_type?: "global" | "organization" | "enterprise";
  /** A description of the code security configuration */
  description?: string;
  /** The enablement status of GitHub Advanced Security */
  advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
  /** The enablement status of Dependency Graph */
  dependency_graph?: "enabled" | "disabled" | "not_set";
  /** The enablement status of Automatic dependency submission */
  dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
  /** Feature options for Automatic dependency submission */
  dependency_graph_autosubmit_action_options?: {
    /** Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
    labeled_runners?: boolean;
  };
  /** The enablement status of Dependabot alerts */
  dependabot_alerts?: "enabled" | "disabled" | "not_set";
  /** The enablement status of Dependabot security updates */
  dependabot_security_updates?: "enabled" | "disabled" | "not_set";
  /** Feature options for code scanning */
  code_scanning_options?: object | null;
  /** The enablement status of code scanning default setup */
  code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
  /** Feature options for code scanning default setup */
  code_scanning_default_setup_options?: {
    /** Whether to use labeled runners or standard GitHub runners. */
    runner_type?: "standard" | "labeled" | "not_set" | null;
    /** The label of the runner to use for code scanning when runner_type is 'labeled'. */
    runner_label?: string | null;
  };
  /** The enablement status of code scanning delegated alert dismissal */
  code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning */
  secret_scanning?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning push protection */
  secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning delegated bypass */
  secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
  /** Feature options for secret scanning delegated bypass */
  secret_scanning_delegated_bypass_options?: {
    /** The bypass reviewers for secret scanning delegated bypass */
    reviewers?: {
      /** The ID of the team or role selected as a bypass reviewer */
      reviewer_id: number;
      /** The type of the bypass reviewer */
      reviewer_type: "TEAM" | "ROLE";
    }[];
  };
  /** The enablement status of secret scanning validity checks */
  secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning non-provider patterns */
  secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
  /** The enablement status of Copilot secret scanning */
  secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
  /** The enablement status of secret scanning delegated alert dismissal */
  secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
  /** The enablement status of private vulnerability reporting */
  private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
  /** The enforcement status for a security configuration */
  enforcement?: "enforced" | "unenforced";
  /**
   * The URL of the configuration
   * @format uri
   */
  url?: string;
  /**
   * The URL of the configuration
   * @format uri
   */
  html_url?: string;
  /** @format date-time */
  created_at?: string;
  /** @format date-time */
  updated_at?: string;
}

/** Feature options for code scanning default setup */
export type CodeScanningDefaultSetupOptions = {
  /** Whether to use labeled runners or standard GitHub runners. */
  runner_type?: "standard" | "labeled" | "not_set";
  /** The label of the runner to use for code scanning default setup when runner_type is 'labeled'. */
  runner_label?: string | null;
};

/** A list of default code security configurations */
export type CodeSecurityDefaultConfigurations = {
  /** The visibility of newly created repositories for which the code security configuration will be applied to by default */
  default_for_new_repos?: "public" | "private_and_internal" | "all";
  /** A code security configuration */
  configuration?: CodeSecurityConfiguration;
}[];

/**
 * Simple Repository
 * A GitHub repository.
 */
export interface SimpleRepository {
  /**
   * A unique identifier of the repository.
   * @format int64
   * @example 1296269
   */
  id: number;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Whether the repository is private. */
  private: boolean;
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The repository description.
   * @example "This your first repo!"
   */
  description: string | null;
  /** Whether the repository is a fork. */
  fork: boolean;
  /**
   * The URL to get more information about the repository from the GitHub API.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * A template for the API URL to download the repository as an archive.
   * @example "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * The API URL to list the downloads on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * The API URL to list the forks of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * The API URL to list the hooks on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
}

/** Repositories associated with a code security configuration and attachment status */
export interface CodeSecurityConfigurationRepositories {
  /** The attachment status of the code security configuration on the repository. */
  status?:
    | "attached"
    | "attaching"
    | "detached"
    | "removed"
    | "enforced"
    | "failed"
    | "updating"
    | "removed_by_enterprise";
  /** A GitHub repository. */
  repository?: SimpleRepository;
}

/** The security alert number. */
export type AlertNumber = number;

/** Details for the vulnerable package. */
export interface DependabotAlertPackage {
  /** The package's language or package management ecosystem. */
  ecosystem: string;
  /** The unique package name within its ecosystem. */
  name: string;
}

/** Details pertaining to one vulnerable version range for the advisory. */
export interface DependabotAlertSecurityVulnerability {
  /** Details for the vulnerable package. */
  package: DependabotAlertPackage;
  /** The severity of the vulnerability. */
  severity: "low" | "medium" | "high" | "critical";
  /** Conditions that identify vulnerable versions of this vulnerability's package. */
  vulnerable_version_range: string;
  /** Details pertaining to the package version that patches this vulnerability. */
  first_patched_version: {
    /** The package version that patches this vulnerability. */
    identifier: string;
  } | null;
}

/** Details for the GitHub Security Advisory. */
export interface DependabotAlertSecurityAdvisory {
  /** The unique GitHub Security Advisory ID assigned to the advisory. */
  ghsa_id: string;
  /** The unique CVE ID assigned to the advisory. */
  cve_id: string | null;
  /**
   * A short, plain text summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /** A long-form Markdown-supported description of the advisory. */
  description: string;
  /** Vulnerable version range information for the advisory. */
  vulnerabilities: DependabotAlertSecurityVulnerability[];
  /** The severity of the advisory. */
  severity: "low" | "medium" | "high" | "critical";
  /** Details for the advisory pertaining to the Common Vulnerability Scoring System. */
  cvss: {
    /**
     * The overall CVSS score of the advisory.
     * @min 0
     * @max 10
     */
    score: number;
    /** The full CVSS vector string for the advisory. */
    vector_string: string | null;
  };
  cvss_severities?: CvssSeverities;
  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
  epss?: SecurityAdvisoryEpss;
  /** Details for the advisory pertaining to Common Weakness Enumeration. */
  cwes: {
    /** The unique CWE ID. */
    cwe_id: string;
    /** The short, plain text name of the CWE. */
    name: string;
  }[];
  /** Values that identify this advisory among security information sources. */
  identifiers: {
    /** The type of advisory identifier. */
    type: "CVE" | "GHSA";
    /** The value of the advisory identifer. */
    value: string;
  }[];
  /** Links to additional advisory information. */
  references: {
    /**
     * The URL of the reference.
     * @format uri
     */
    url: string;
  }[];
  /**
   * The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  published_at: string;
  /**
   * The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  updated_at: string;
  /**
   * The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  withdrawn_at: string | null;
}

/**
 * The REST API URL of the alert resource.
 * @format uri
 */
export type AlertUrl = string;

/**
 * The GitHub URL of the alert resource.
 * @format uri
 */
export type AlertHtmlUrl = string;

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type AlertCreatedAt = string;

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type AlertUpdatedAt = string;

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type AlertDismissedAt = string | null;

/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type AlertFixedAt = string | null;

/**
 * The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type AlertAutoDismissedAt = string | null;

/** A Dependabot alert. */
export interface DependabotAlertWithRepository {
  /** The security alert number. */
  number: AlertNumber;
  /** The state of the Dependabot alert. */
  state: "auto_dismissed" | "dismissed" | "fixed" | "open";
  /** Details for the vulnerable dependency. */
  dependency: {
    /** Details for the vulnerable package. */
    package?: DependabotAlertPackage;
    /** The full path to the dependency manifest file, relative to the root of the repository. */
    manifest_path?: string;
    /** The execution scope of the vulnerable dependency. */
    scope?: "development" | "runtime" | null;
    /**
     * The vulnerable dependency's relationship to your project.
     *
     * > [!NOTE]
     * > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
     */
    relationship?: "unknown" | "direct" | "transitive" | null;
  };
  /** Details for the GitHub Security Advisory. */
  security_advisory: DependabotAlertSecurityAdvisory;
  /** Details pertaining to one vulnerable version range for the advisory. */
  security_vulnerability: DependabotAlertSecurityVulnerability;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at: AlertUpdatedAt;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The reason that the alert was dismissed. */
  dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | null;
  /**
   * An optional comment associated with the alert's dismissal.
   * @maxLength 280
   */
  dismissed_comment: string | null;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at: AlertFixedAt;
  /** The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  auto_dismissed_at?: AlertAutoDismissedAt;
  /** A GitHub repository. */
  repository: SimpleRepository;
}

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type NullableAlertUpdatedAt = string | null;

/** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
export type SecretScanningAlertState = "open" | "resolved";

/** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
export type SecretScanningAlertResolution = "false_positive" | "wont_fix" | "revoked" | "used_in_tests";

/** Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
export interface SecretScanningLocationCommit {
  /**
   * The file path in the repository
   * @example "/example/secrets.txt"
   */
  path: string;
  /** Line number at which the secret starts in the file */
  start_line: number;
  /** Line number at which the secret ends in the file */
  end_line: number;
  /** The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
  start_column: number;
  /** The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
  end_column: number;
  /**
   * SHA-1 hash ID of the associated blob
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  blob_sha: string;
  /** The API URL to get the associated blob resource */
  blob_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  commit_sha: string;
  /** The API URL to get the associated commit resource */
  commit_url: string;
}

/** Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki. */
export interface SecretScanningLocationWikiCommit {
  /**
   * The file path of the wiki page
   * @example "/example/Home.md"
   */
  path: string;
  /** Line number at which the secret starts in the file */
  start_line: number;
  /** Line number at which the secret ends in the file */
  end_line: number;
  /** The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII. */
  start_column: number;
  /** The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII. */
  end_column: number;
  /**
   * SHA-1 hash ID of the associated blob
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  blob_sha: string;
  /**
   * The GitHub URL to get the associated wiki page
   * @example "https://github.com/octocat/Hello-World/wiki/Home/302c0b7e200761c9dd9b57e57db540ee0b4293a5"
   */
  page_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   * @example "302c0b7e200761c9dd9b57e57db540ee0b4293a5"
   */
  commit_sha: string;
  /**
   * The GitHub URL to get the associated wiki commit
   * @example "https://github.com/octocat/Hello-World/wiki/_compare/302c0b7e200761c9dd9b57e57db540ee0b4293a5"
   */
  commit_url: string;
}

/** Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue. */
export interface SecretScanningLocationIssueTitle {
  /**
   * The API URL to get the issue where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_title_url: string;
}

/** Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue. */
export interface SecretScanningLocationIssueBody {
  /**
   * The API URL to get the issue where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_body_url: string;
}

/** Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue. */
export interface SecretScanningLocationIssueComment {
  /**
   * The API URL to get the issue comment where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"
   */
  issue_comment_url: string;
}

/** Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion. */
export interface SecretScanningLocationDiscussionTitle {
  /**
   * The URL to the discussion where the secret was detected.
   * @format uri
   * @example "https://github.com/community/community/discussions/39082"
   */
  discussion_title_url: string;
}

/** Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion. */
export interface SecretScanningLocationDiscussionBody {
  /**
   * The URL to the discussion where the secret was detected.
   * @format uri
   * @example "https://github.com/community/community/discussions/39082#discussion-4566270"
   */
  discussion_body_url: string;
}

/** Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion. */
export interface SecretScanningLocationDiscussionComment {
  /**
   * The API URL to get the discussion comment where the secret was detected.
   * @format uri
   * @example "https://github.com/community/community/discussions/39082#discussioncomment-4158232"
   */
  discussion_comment_url: string;
}

/** Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request. */
export interface SecretScanningLocationPullRequestTitle {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846"
   */
  pull_request_title_url: string;
}

/** Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request. */
export interface SecretScanningLocationPullRequestBody {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846"
   */
  pull_request_body_url: string;
}

/** Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request. */
export interface SecretScanningLocationPullRequestComment {
  /**
   * The API URL to get the pull request comment where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"
   */
  pull_request_comment_url: string;
}

/** Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request. */
export interface SecretScanningLocationPullRequestReview {
  /**
   * The API URL to get the pull request review where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846/reviews/80"
   */
  pull_request_review_url: string;
}

/** Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request. */
export interface SecretScanningLocationPullRequestReviewComment {
  /**
   * The API URL to get the pull request review comment where the secret was detected.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/12"
   */
  pull_request_review_comment_url: string;
}

/** Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request. */
export type NullableSecretScanningFirstDetectedLocation =
  | SecretScanningLocationCommit
  | SecretScanningLocationWikiCommit
  | SecretScanningLocationIssueTitle
  | SecretScanningLocationIssueBody
  | SecretScanningLocationIssueComment
  | SecretScanningLocationDiscussionTitle
  | SecretScanningLocationDiscussionBody
  | SecretScanningLocationDiscussionComment
  | SecretScanningLocationPullRequestTitle
  | SecretScanningLocationPullRequestBody
  | SecretScanningLocationPullRequestComment
  | SecretScanningLocationPullRequestReview
  | SecretScanningLocationPullRequestReviewComment
  | null;

export interface OrganizationSecretScanningAlert {
  /** The security alert number. */
  number?: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at?: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: NullableAlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
  locations_url?: string;
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
  state?: SecretScanningAlertState;
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** A GitHub user. */
  resolved_by?: NullableSimpleUser;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /** The secret that was detected. */
  secret?: string;
  /** A GitHub repository. */
  repository?: SimpleRepository;
  /** Whether push protection was bypassed for the detected secret. */
  push_protection_bypassed?: boolean | null;
  /** A GitHub user. */
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  /** A GitHub user. */
  push_protection_bypass_request_reviewer?: NullableSimpleUser;
  /** An optional comment when reviewing a push protection bypass. */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /** An optional comment when requesting a push protection bypass. */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
  push_protection_bypass_request_html_url?: string | null;
  /** The comment that was optionally added when this alert was closed */
  resolution_comment?: string | null;
  /** The token status as of the latest validity check. */
  validity?: "active" | "inactive" | "unknown";
  /** Whether the secret was publicly leaked. */
  publicly_leaked?: boolean | null;
  /** Whether the detected secret was found in multiple repositories in the same organization or enterprise. */
  multi_repo?: boolean | null;
  /** A boolean value representing whether or not alert is base64 encoded */
  is_base64_encoded?: boolean | null;
  /** Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request. */
  first_location_detected?: NullableSecretScanningFirstDetectedLocation;
  /** A boolean value representing whether or not the token in the alert was detected in more than one location. */
  has_more_locations?: boolean;
}

/**
 * Actor
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login?: string;
  gravatar_id: string | null;
  /** @format uri */
  url: string;
  /** @format uri */
  avatar_url: string;
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export type NullableMilestone = {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /** @example 1002604 */
  id: number;
  /** @example "MDk6TWlsZXN0b25lMTAwMjYwNA==" */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /**
   * The state of the milestone.
   * @default "open"
   * @example "open"
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /** @example "Tracking milestone for version 1.0" */
  description: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /** @example 4 */
  open_issues: number;
  /** @example 8 */
  closed_issues: number;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: string | null;
};

/**
 * Issue Type
 * The type of issue.
 */
export type IssueType = {
  /** The unique identifier of the issue type. */
  id: number;
  /** The node identifier of the issue type. */
  node_id: string;
  /** The name of the issue type. */
  name: string;
  /** The description of the issue type. */
  description: string | null;
  /** The color of the issue type. */
  color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
  /**
   * The time the issue type created.
   * @format date-time
   */
  created_at?: string;
  /**
   * The time the issue type last updated.
   * @format date-time
   */
  updated_at?: string;
  /** The enabled state of the issue type. */
  is_enabled?: boolean;
};

/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type NullableIntegration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id: string;
  /** @example ""Iv1.25b5d1e65ffc4022"" */
  client_id?: string;
  owner: SimpleUser | Enterprise;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /** @example "The description of the app." */
  description: string | null;
  /**
   * @format uri
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @format uri
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   * @example {"issues":"read","deployments":"write"}
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [key: string]: any;
  };
  /**
   * The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
   * @example ["label","deployment"]
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
   * @example 5
   */
  installations_count?: number;
};

/**
 * author_association
 * How the author is associated with the repository.
 * @example "OWNER"
 */
export type AuthorAssociation =
  | "COLLABORATOR"
  | "CONTRIBUTOR"
  | "FIRST_TIMER"
  | "FIRST_TIME_CONTRIBUTOR"
  | "MANNEQUIN"
  | "MEMBER"
  | "NONE"
  | "OWNER";

/** Reaction Rollup */
export interface ReactionRollup {
  /** @format uri */
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/** Sub-issues Summary */
export interface SubIssuesSummary {
  total: number;
  completed: number;
  percent_completed: number;
}

/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface Issue {
  /** @format int64 */
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  /** @format uri */
  repository_url: string;
  labels_url: string;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * The reason for the current state
   * @example "not_planned"
   */
  state_reason?: "completed" | "reopened" | "not_planned" | null;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string | null;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example ["bug","registration"]
   */
  labels: (
    | string
    | {
        /** @format int64 */
        id?: number;
        node_id?: string;
        /** @format uri */
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  /** @format date-time */
  closed_at: string | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  draft?: boolean;
  /** A GitHub user. */
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  /** @format uri */
  timeline_url?: string;
  /** The type of issue. */
  type?: IssueType;
  /** A repository on GitHub. */
  repository?: Repository;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
  sub_issues_summary?: SubIssuesSummary;
}

/**
 * Issue Comment
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   * @format int64
   * @example 42
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  /** @format uri */
  html_url: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /** @format uri */
  issue_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
}

/**
 * Event
 * Event
 */
export interface Event {
  id: string;
  type: string | null;
  /** Actor */
  actor: Actor;
  repo: {
    id: number;
    name: string;
    /** @format uri */
    url: string;
  };
  /** Actor */
  org?: Actor;
  payload: {
    action?: string;
    /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    issue?: Issue;
    /** Comments provide a way for people to collaborate on an issue. */
    comment?: IssueComment;
    pages?: {
      page_name?: string;
      title?: string;
      summary?: string | null;
      action?: string;
      sha?: string;
      html_url?: string;
    }[];
  };
  public: boolean;
  /** @format date-time */
  created_at: string | null;
}

/**
 * Link With Type
 * Hypermedia Link with Type
 */
export interface LinkWithType {
  href: string;
  type: string;
}

/**
 * Feed
 * Feed
 */
export interface Feed {
  /** @example "https://github.com/timeline" */
  timeline_url: string;
  /** @example "https://github.com/{user}" */
  user_url: string;
  /** @example "https://github.com/octocat" */
  current_user_public_url?: string;
  /** @example "https://github.com/octocat.private?token=abc123" */
  current_user_url?: string;
  /** @example "https://github.com/octocat.private.actor?token=abc123" */
  current_user_actor_url?: string;
  /** @example "https://github.com/octocat-org" */
  current_user_organization_url?: string;
  /** @example ["https://github.com/organizations/github/octocat.private.atom?token=abc123"] */
  current_user_organization_urls?: string[];
  /** @example "https://github.com/security-advisories" */
  security_advisories_url?: string;
  /**
   * A feed of discussions for a given repository.
   * @example "https://github.com/{user}/{repo}/discussions"
   */
  repository_discussions_url?: string;
  /**
   * A feed of discussions for a given repository and category.
   * @example "https://github.com/{user}/{repo}/discussions/categories/{category}"
   */
  repository_discussions_category_url?: string;
  _links: {
    /** Hypermedia Link with Type */
    timeline: LinkWithType;
    /** Hypermedia Link with Type */
    user: LinkWithType;
    /** Hypermedia Link with Type */
    security_advisories?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_public?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_actor?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    /** Hypermedia Link with Type */
    repository_discussions?: LinkWithType;
    /** Hypermedia Link with Type */
    repository_discussions_category?: LinkWithType;
  };
}

/**
 * Base Gist
 * Base Gist
 */
export interface BaseGist {
  /** @format uri */
  url: string;
  /** @format uri */
  forks_url: string;
  /** @format uri */
  commits_url: string;
  id: string;
  node_id: string;
  /** @format uri */
  git_pull_url: string;
  /** @format uri */
  git_push_url: string;
  /** @format uri */
  html_url: string;
  files: Record<
    string,
    {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      /**
       * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @default "utf-8"
       */
      encoding?: string;
    }
  >;
  public: boolean;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  description: string | null;
  comments: number;
  comments_enabled?: boolean;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @format uri */
  comments_url: string;
  /** A GitHub user. */
  owner?: SimpleUser;
  truncated?: boolean;
  forks?: any[];
  history?: any[];
}

/**
 * Public User
 * Public User
 */
export interface PublicUser {
  login: string;
  /** @format int64 */
  id: number;
  user_view_type?: string;
  node_id: string;
  /** @format uri */
  avatar_url: string;
  gravatar_id: string | null;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  /** @format uri */
  subscriptions_url: string;
  /** @format uri */
  organizations_url: string;
  /** @format uri */
  repos_url: string;
  events_url: string;
  /** @format uri */
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  /** @format email */
  email: string | null;
  /** @format email */
  notification_email?: string | null;
  hireable: boolean | null;
  bio: string | null;
  twitter_username?: string | null;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  /** @example 1 */
  private_gists?: number;
  /** @example 2 */
  total_private_repos?: number;
  /** @example 2 */
  owned_private_repos?: number;
  /** @example 1 */
  disk_usage?: number;
  /** @example 3 */
  collaborators?: number;
}

/**
 * Gist History
 * Gist History
 */
export interface GistHistory {
  /** A GitHub user. */
  user?: NullableSimpleUser;
  version?: string;
  /** @format date-time */
  committed_at?: string;
  change_status?: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  /** @format uri */
  url?: string;
}

/**
 * Gist Simple
 * Gist Simple
 */
export interface GistSimple {
  /** @deprecated */
  forks?:
    | {
        id?: string;
        /** @format uri */
        url?: string;
        /** Public User */
        user?: PublicUser;
        /** @format date-time */
        created_at?: string;
        /** @format date-time */
        updated_at?: string;
      }[]
    | null;
  /** @deprecated */
  history?: GistHistory[] | null;
  /**
   * Gist
   * Gist
   */
  fork_of?: {
    /** @format uri */
    url: string;
    /** @format uri */
    forks_url: string;
    /** @format uri */
    commits_url: string;
    id: string;
    node_id: string;
    /** @format uri */
    git_pull_url: string;
    /** @format uri */
    git_push_url: string;
    /** @format uri */
    html_url: string;
    files: Record<
      string,
      {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
      }
    >;
    public: boolean;
    /** @format date-time */
    created_at: string;
    /** @format date-time */
    updated_at: string;
    description: string | null;
    comments: number;
    comments_enabled?: boolean;
    /** A GitHub user. */
    user: NullableSimpleUser;
    /** @format uri */
    comments_url: string;
    /** A GitHub user. */
    owner?: NullableSimpleUser;
    truncated?: boolean;
    forks?: any[];
    history?: any[];
  };
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: Record<
    string,
    {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      /**
       * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @default "utf-8"
       */
      encoding?: string;
    } | null
  >;
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string | null;
  comments?: number;
  comments_enabled?: boolean;
  user?: string | null;
  comments_url?: string;
  /** A GitHub user. */
  owner?: SimpleUser;
  truncated?: boolean;
}

/**
 * Gist Comment
 * A comment made to a gist.
 */
export interface GistComment {
  /** @example 1 */
  id: number;
  /** @example "MDExOkdpc3RDb21tZW50MQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"
   */
  url: string;
  /**
   * The comment text.
   * @maxLength 65535
   * @example "Body of the attachment"
   */
  body: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2011-04-18T23:23:56Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-18T23:23:56Z"
   */
  updated_at: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
}

/**
 * Gist Commit
 * Gist Commit
 */
export interface GistCommit {
  /**
   * @format uri
   * @example "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
   */
  url: string;
  /** @example "57a7f021a713b1c5a6a199b54cc514735d2d462f" */
  version: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  change_status: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  /**
   * @format date-time
   * @example "2010-04-14T02:15:15Z"
   */
  committed_at: string;
}

/**
 * Gitignore Template
 * Gitignore Template
 */
export interface GitignoreTemplate {
  /** @example "C" */
  name: string;
  /**
   * @example "# Object files
   * *.o
   *
   * # Libraries
   * *.lib
   * *.a
   *
   * # Shared objects (inc. Windows DLLs)
   * *.dll
   * *.so
   * *.so.*
   * *.dylib
   *
   * # Executables
   * *.exe
   * *.out
   * *.app
   * "
   */
  source: string;
}

/**
 * License Simple
 * License Simple
 */
export interface LicenseSimple {
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /** @example "MIT" */
  spdx_id: string | null;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /** @format uri */
  html_url?: string;
}

/**
 * License
 * License
 */
export interface License {
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /** @example "MIT" */
  spdx_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /**
   * @format uri
   * @example "http://choosealicense.com/licenses/mit/"
   */
  html_url: string;
  /** @example "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty." */
  description: string;
  /** @example "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders." */
  implementation: string;
  /** @example ["commercial-use","modifications","distribution","sublicense","private-use"] */
  permissions: string[];
  /** @example ["include-copyright"] */
  conditions: string[];
  /** @example ["no-liability"] */
  limitations: string[];
  /**
   * @example "
   *
   * The MIT License (MIT)
   *
   * Copyright (c) [year] [fullname]
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   * "
   */
  body: string;
  /** @example true */
  featured: boolean;
}

/**
 * Marketplace Listing Plan
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  /**
   * @format uri
   * @example "https://api.github.com/marketplace_listing/plans/1313"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/marketplace_listing/plans/1313/accounts"
   */
  accounts_url: string;
  /** @example 1313 */
  id: number;
  /** @example 3 */
  number: number;
  /** @example "Pro" */
  name: string;
  /** @example "A professional-grade CI solution" */
  description: string;
  /** @example 1099 */
  monthly_price_in_cents: number;
  /** @example 11870 */
  yearly_price_in_cents: number;
  /** @example "FLAT_RATE" */
  price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
  /** @example true */
  has_free_trial: boolean;
  unit_name: string | null;
  /** @example "published" */
  state: string;
  /** @example ["Up to 25 private repositories","11 concurrent builds"] */
  bullets: string[];
}

/**
 * Marketplace Purchase
 * Marketplace Purchase
 */
export interface MarketplacePurchase {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email?: string;
  email?: string | null;
  marketplace_pending_change?: {
    is_installed?: boolean;
    effective_date?: string;
    unit_count?: number | null;
    id?: number;
    /** Marketplace Listing Plan */
    plan?: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle?: string;
    next_billing_date?: string | null;
    is_installed?: boolean;
    unit_count?: number | null;
    on_free_trial?: boolean;
    free_trial_ends_on?: string | null;
    updated_at?: string;
    /** Marketplace Listing Plan */
    plan?: MarketplaceListingPlan;
  };
}

/**
 * Api Overview
 * Api Overview
 */
export interface ApiOverview {
  /** @example true */
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints?: {
    SHA256_RSA?: string;
    SHA256_DSA?: string;
    SHA256_ECDSA?: string;
    SHA256_ED25519?: string;
  };
  /** @example ["ssh-ed25519 ABCDEFGHIJKLMNOPQRSTUVWXYZ"] */
  ssh_keys?: string[];
  /** @example ["192.0.2.1"] */
  hooks?: string[];
  /** @example ["192.0.2.1"] */
  github_enterprise_importer?: string[];
  /** @example ["192.0.2.1"] */
  web?: string[];
  /** @example ["192.0.2.1"] */
  api?: string[];
  /** @example ["192.0.2.1"] */
  git?: string[];
  /** @example ["192.0.2.1"] */
  packages?: string[];
  /** @example ["192.0.2.1"] */
  pages?: string[];
  /** @example ["192.0.2.1"] */
  importer?: string[];
  /** @example ["192.0.2.1"] */
  actions?: string[];
  /** @example ["192.0.2.1"] */
  actions_macos?: string[];
  /** @example ["192.0.2.1"] */
  codespaces?: string[];
  /** @example ["192.0.2.1"] */
  dependabot?: string[];
  /** @example ["192.0.2.1"] */
  copilot?: string[];
  domains?: {
    website?: string[];
    codespaces?: string[];
    copilot?: string[];
    packages?: string[];
    actions?: string[];
    actions_inbound?: {
      full_domains?: string[];
      wildcard_domains?: string[];
    };
    artifact_attestations?: {
      /** @example ["example"] */
      trust_domain?: string;
      services?: string[];
    };
  };
}

export type SecurityAndAnalysis = {
  advanced_security?: {
    status?: "enabled" | "disabled";
  };
  code_security?: {
    status?: "enabled" | "disabled";
  };
  /** Enable or disable Dependabot security updates for the repository. */
  dependabot_security_updates?: {
    /** The enablement status of Dependabot security updates for the repository. */
    status?: "enabled" | "disabled";
  };
  secret_scanning?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_push_protection?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_non_provider_patterns?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_ai_detection?: {
    status?: "enabled" | "disabled";
  };
} | null;

/**
 * Minimal Repository
 * Minimal Repository
 */
export interface MinimalRepository {
  /**
   * @format int64
   * @example 1296269
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "Hello-World" */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  git_url?: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  ssh_url?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: string | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };
  /** @example "admin" */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  /** Code Of Conduct */
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  /** @example 0 */
  forks?: number;
  /** @example 0 */
  open_issues?: number;
  /** @example 0 */
  watchers?: number;
  allow_forking?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysis;
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
}

/**
 * Thread
 * Thread
 */
export interface Thread {
  id: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string | null;
  url: string;
  /** @example "https://api.github.com/notifications/threads/2/subscription" */
  subscription_url: string;
}

/**
 * Thread Subscription
 * Thread Subscription
 */
export interface ThreadSubscription {
  /** @example true */
  subscribed: boolean;
  ignored: boolean;
  reason: string | null;
  /**
   * @format date-time
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/notifications/threads/1/subscription"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/notifications/threads/1"
   */
  thread_url?: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/1"
   */
  repository_url?: string;
}

/**
 * Organization Simple
 * A GitHub organization.
 */
export interface OrganizationSimple {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
}

/**
 * Simple Repository
 * A GitHub repository.
 */
export type NullableSimpleRepository = {
  /**
   * A unique identifier of the repository.
   * @format int64
   * @example 1296269
   */
  id: number;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Whether the repository is private. */
  private: boolean;
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The repository description.
   * @example "This your first repo!"
   */
  description: string | null;
  /** Whether the repository is a fork. */
  fork: boolean;
  /**
   * The URL to get more information about the repository from the GitHub API.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * A template for the API URL to download the repository as an archive.
   * @example "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * The API URL to list the downloads on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * The API URL to list the forks of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * The API URL to list the hooks on the repository.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
};

/**
 * Dependabot Repository Access Details
 * Information about repositories that Dependabot is able to access in an organization
 */
export interface DependabotRepositoryAccessDetails {
  /**
   * The default repository access level for Dependabot updates.
   * @example "internal"
   */
  default_level?: "public" | "internal" | null;
  accessible_repositories?: NullableSimpleRepository[];
}

export interface BillingUsageReport {
  usageItems?: {
    /** Date of the usage line item. */
    date: string;
    /** Product name. */
    product: string;
    /** SKU name. */
    sku: string;
    /** Quantity of the usage line item. */
    quantity: number;
    /** Unit type of the usage line item. */
    unitType: string;
    /** Price per unit of the usage line item. */
    pricePerUnit: number;
    /** Gross amount of the usage line item. */
    grossAmount: number;
    /** Discount amount of the usage line item. */
    discountAmount: number;
    /** Net amount of the usage line item. */
    netAmount: number;
    /** Name of the organization. */
    organizationName: string;
    /** Name of the repository. */
    repositoryName?: string;
  }[];
}

/**
 * Organization Full
 * Organization Full
 */
export interface OrganizationFull {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
  /** @example "github" */
  name?: string;
  /** @example "GitHub" */
  company?: string;
  /**
   * @format uri
   * @example "https://github.com/blog"
   */
  blog?: string;
  /** @example "San Francisco" */
  location?: string;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email?: string;
  /** @example "github" */
  twitter_username?: string | null;
  /** @example true */
  is_verified?: boolean;
  /** @example true */
  has_organization_projects: boolean;
  /** @example true */
  has_repository_projects: boolean;
  /** @example 2 */
  public_repos: number;
  /** @example 1 */
  public_gists: number;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /** @example "Organization" */
  type: string;
  /** @example 100 */
  total_private_repos?: number;
  /** @example 100 */
  owned_private_repos?: number;
  /** @example 81 */
  private_gists?: number | null;
  /** @example 10000 */
  disk_usage?: number | null;
  /**
   * The number of collaborators on private repositories.
   *
   * This field may be null if the number of private repositories is over 50,000.
   * @example 8
   */
  collaborators?: number | null;
  /**
   * @format email
   * @example "org@example.com"
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /**
   * The default branch for repositories created in this organization.
   * @example "main"
   */
  default_repository_branch?: string | null;
  /** @example true */
  members_can_create_repositories?: boolean | null;
  /** @example true */
  two_factor_requirement_enabled?: boolean | null;
  /** @example "all" */
  members_allowed_repository_creation_type?: string;
  /** @example true */
  members_can_create_public_repositories?: boolean;
  /** @example true */
  members_can_create_private_repositories?: boolean;
  /** @example true */
  members_can_create_internal_repositories?: boolean;
  /** @example true */
  members_can_create_pages?: boolean;
  /** @example true */
  members_can_create_public_pages?: boolean;
  /** @example true */
  members_can_create_private_pages?: boolean;
  /** @example true */
  members_can_delete_repositories?: boolean;
  /** @example true */
  members_can_change_repo_visibility?: boolean;
  /** @example true */
  members_can_invite_outside_collaborators?: boolean;
  /** @example true */
  members_can_delete_issues?: boolean;
  /** @example true */
  display_commenter_full_name_setting_enabled?: boolean;
  /** @example true */
  readers_can_create_discussions?: boolean;
  /** @example true */
  members_can_create_teams?: boolean;
  /** @example true */
  members_can_view_dependency_insights?: boolean;
  /** @example false */
  members_can_fork_private_repositories?: boolean | null;
  /** @example false */
  web_commit_signoff_required?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  advanced_security_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  dependency_graph_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  secret_scanning_enabled_for_new_repositories?: boolean;
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   * @example false
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
  /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   * @example false
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;
  /**
   * An optional URL string to display to contributors who are blocked from pushing a secret.
   * @example "https://github.com/test-org/test-repo/blob/main/README.md"
   */
  secret_scanning_push_protection_custom_link?: string | null;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  archived_at: string | null;
  /**
   * Controls whether or not deploy keys may be added and used for repositories in the organization.
   * @example false
   */
  deploy_keys_enabled_for_repositories?: boolean;
}

export interface ActionsCacheUsageOrgEnterprise {
  /** The count of active caches across all repositories of an enterprise or an organization. */
  total_active_caches_count: number;
  /** The total size in bytes of all active cache items across all repositories of an enterprise or an organization. */
  total_active_caches_size_in_bytes: number;
}

/**
 * Actions Cache Usage by repository
 * GitHub Actions Cache Usage by repository.
 */
export interface ActionsCacheUsageByRepository {
  /**
   * The repository owner and name for the cache usage being shown.
   * @example "octo-org/Hello-World"
   */
  full_name: string;
  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   * @example 2322142
   */
  active_caches_size_in_bytes: number;
  /**
   * The number of active caches in the repository.
   * @example 3
   */
  active_caches_count: number;
}

/**
 * GitHub-hosted runner image details.
 * Provides details of a hosted runner image
 */
export type NullableActionsHostedRunnerPoolImage = {
  /**
   * The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
   * @example "ubuntu-20.04"
   */
  id: string;
  /**
   * Image size in GB.
   * @example 86
   */
  size_gb: number;
  /**
   * Display name for this image.
   * @example 20.04
   */
  display_name: string;
  /** The image provider. */
  source: "github" | "partner" | "custom";
} | null;

/**
 * Github-owned VM details.
 * Provides details of a particular machine spec.
 */
export interface ActionsHostedRunnerMachineSpec {
  /**
   * The ID used for the `size` parameter when creating a new runner.
   * @example "8-core"
   */
  id: string;
  /**
   * The number of cores.
   * @example 8
   */
  cpu_cores: number;
  /**
   * The available RAM for the machine spec.
   * @example 32
   */
  memory_gb: number;
  /**
   * The available SSD storage for the machine spec.
   * @example 300
   */
  storage_gb: number;
}

/**
 * Public IP for a GitHub-hosted larger runners.
 * Provides details of Public IP for a GitHub-hosted larger runners
 */
export interface PublicIp {
  /**
   * Whether public IP is enabled.
   * @example true
   */
  enabled?: boolean;
  /**
   * The prefix for the public IP.
   * @example "20.80.208.150"
   */
  prefix?: string;
  /**
   * The length of the IP prefix.
   * @example 28
   */
  length?: number;
}

/**
 * GitHub-hosted hosted runner
 * A Github-hosted hosted runner.
 */
export interface ActionsHostedRunner {
  /**
   * The unique identifier of the hosted runner.
   * @example 5
   */
  id: number;
  /**
   * The name of the hosted runner.
   * @example "my-github-hosted-runner"
   */
  name: string;
  /**
   * The unique identifier of the group that the hosted runner belongs to.
   * @example 2
   */
  runner_group_id?: number;
  /** Provides details of a hosted runner image */
  image_details: NullableActionsHostedRunnerPoolImage;
  /** Provides details of a particular machine spec. */
  machine_size_details: ActionsHostedRunnerMachineSpec;
  /**
   * The status of the runner.
   * @example "Ready"
   */
  status: "Ready" | "Provisioning" | "Shutdown" | "Deleting" | "Stuck";
  /**
   * The operating system of the image.
   * @example "linux-x64"
   */
  platform: string;
  /**
   * The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
   * @default 10
   * @example 5
   */
  maximum_runners?: number;
  /**
   * Whether public IP is enabled for the hosted runners.
   * @example true
   */
  public_ip_enabled: boolean;
  /** The public IP ranges when public IP is enabled for the hosted runners. */
  public_ips?: PublicIp[];
  /**
   * The time at which the runner was last used, in ISO 8601 format.
   * @format date-time
   * @example "2022-10-09T23:39:01Z"
   */
  last_active_on?: string | null;
}

/**
 * GitHub-hosted runner image details.
 * Provides details of a hosted runner image
 */
export interface ActionsHostedRunnerImage {
  /**
   * The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
   * @example "ubuntu-20.04"
   */
  id: string;
  /**
   * The operating system of the image.
   * @example "linux-x64"
   */
  platform: string;
  /**
   * Image size in GB.
   * @example 86
   */
  size_gb: number;
  /**
   * Display name for this image.
   * @example 20.04
   */
  display_name: string;
  /** The image provider. */
  source: "github" | "partner" | "custom";
}

export interface ActionsHostedRunnerLimits {
  /**
   * Static public IP Limits for GitHub-hosted Hosted Runners.
   * Provides details of static public IP limits for GitHub-hosted Hosted Runners
   */
  public_ips: {
    /**
     * The maximum number of static public IP addresses that can be used for Hosted Runners.
     * @example 50
     */
    maximum: number;
    /**
     * The current number of static public IP addresses in use by Hosted Runners.
     * @example 17
     */
    current_usage: number;
  };
}

/**
 * Actions OIDC Subject customization
 * Actions OIDC Subject customization
 */
export interface OidcCustomSub {
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
  include_claim_keys: string[];
}

/**
 * Empty Object
 * An object without any properties.
 */
export type EmptyObject = object;

/** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
export type EnabledRepositories = "all" | "none" | "selected";

/** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
export type AllowedActions = "all" | "local_only" | "selected";

/** The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
export type SelectedActionsUrl = string;

export interface ActionsOrganizationPermissions {
  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
  enabled_repositories: EnabledRepositories;
  /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
  selected_repositories_url?: string;
  /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
  allowed_actions?: AllowedActions;
  /** The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
  selected_actions_url?: SelectedActionsUrl;
}

export interface SelectedActions {
  /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
  github_owned_allowed?: boolean;
  /** Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators. */
  verified_allowed?: boolean;
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
   *
   * > [!NOTE]
   * > The `patterns_allowed` setting only applies to public repositories.
   */
  patterns_allowed?: string[];
}

/** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
export type ActionsDefaultWorkflowPermissions = "read" | "write";

/** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
export type ActionsCanApprovePullRequestReviews = boolean;

export interface ActionsGetDefaultWorkflowPermissions {
  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
  default_workflow_permissions: ActionsDefaultWorkflowPermissions;
  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews;
}

export interface ActionsSetDefaultWorkflowPermissions {
  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
  default_workflow_permissions?: ActionsDefaultWorkflowPermissions;
  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
  can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews;
}

export interface RunnerGroupsOrg {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
  selected_repositories_url?: string;
  runners_url: string;
  hosted_runners_url?: string;
  /** The identifier of a hosted compute network configuration. */
  network_configuration_id?: string;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  allows_public_repositories: boolean;
  /**
   * If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
   * @default false
   */
  workflow_restrictions_read_only?: boolean;
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
  restricted_to_workflows?: boolean;
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
  selected_workflows?: string[];
}

/**
 * Self hosted runner label
 * A label for a self hosted runner
 */
export interface RunnerLabel {
  /** Unique identifier of the label. */
  id?: number;
  /** Name of the label. */
  name: string;
  /** The type of label. Read-only labels are applied automatically when the runner is configured. */
  type?: "read-only" | "custom";
}

/**
 * Self hosted runners
 * A self hosted runner
 */
export interface Runner {
  /**
   * The ID of the runner.
   * @example 5
   */
  id: number;
  /**
   * The ID of the runner group.
   * @example 1
   */
  runner_group_id?: number;
  /**
   * The name of the runner.
   * @example "iMac"
   */
  name: string;
  /**
   * The Operating System of the runner.
   * @example "macos"
   */
  os: string;
  /**
   * The status of the runner.
   * @example "online"
   */
  status: string;
  busy: boolean;
  labels: RunnerLabel[];
  ephemeral?: boolean;
}

/**
 * Runner Application
 * Runner Application
 */
export interface RunnerApplication {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
  /** A short lived bearer token used to download the runner, if needed. */
  temp_download_token?: string;
  sha256_checksum?: string;
}

/**
 * Authentication Token
 * Authentication Token
 */
export interface AuthenticationToken {
  /**
   * The token used for authentication
   * @example "v1.1f699f1069f60xxx"
   */
  token: string;
  /**
   * The time this token expires
   * @format date-time
   * @example "2016-07-11T22:14:10Z"
   */
  expires_at: string;
  /** @example {"issues":"read","deployments":"write"} */
  permissions?: object;
  /** The repositories this token has access to */
  repositories?: Repository[];
  /** @example "config.yaml" */
  single_file?: string | null;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection?: "all" | "selected";
}

/**
 * Actions Secret for an Organization
 * Secrets for GitHub Actions for an organization.
 */
export interface OrganizationActionsSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** Visibility of a secret */
  visibility: "all" | "private" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * ActionsPublicKey
 * The public key used for setting Actions Secrets.
 */
export interface ActionsPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /** @example 2 */
  id?: number;
  /** @example "https://api.github.com/user/keys/2" */
  url?: string;
  /** @example "ssh-rsa AAAAB3NzaC1yc2EAAA" */
  title?: string;
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
}

/**
 * Actions Variable for an Organization
 * Organization variable for GitHub Actions.
 */
export interface OrganizationActionsVariable {
  /**
   * The name of the variable.
   * @example "USERNAME"
   */
  name: string;
  /**
   * The value of the variable.
   * @example "octocat"
   */
  value: string;
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  created_at: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  updated_at: string;
  /** Visibility of a variable */
  visibility: "all" | "private" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/variables/USERNAME/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * Campaign state
 * Indicates whether a campaign is open or closed
 */
export type CampaignState = "open" | "closed";

/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
export type NullableTeamSimple = {
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** @example "justice-league" */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
};

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  /** @format uri */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  members_url: string;
  /** @format uri */
  repositories_url: string;
  /** Groups of organization members that gives permissions on specified repositories. */
  parent: NullableTeamSimple;
}

/**
 * Campaign summary
 * The campaign metadata and alert stats.
 */
export interface CampaignSummary {
  /** The number of the newly created campaign */
  number: number;
  /**
   * The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /** The campaign name */
  name?: string;
  /** The campaign description */
  description: string;
  /** The campaign managers */
  managers: SimpleUser[];
  /** The campaign team managers */
  team_managers?: Team[];
  /**
   * The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  published_at?: string;
  /**
   * The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  ends_at: string;
  /**
   * The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
   * @format date-time
   */
  closed_at?: string | null;
  /** Indicates whether a campaign is open or closed */
  state: CampaignState;
  /**
   * The contact link of the campaign.
   * @format uri
   */
  contact_link: string | null;
  alert_stats?: {
    /** The number of open alerts */
    open_count: number;
    /** The number of closed alerts */
    closed_count: number;
    /** The number of in-progress alerts */
    in_progress_count: number;
  };
}

/** The name of the tool used to generate the code scanning analysis. */
export type CodeScanningAnalysisToolName = string;

/** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
export type CodeScanningAnalysisToolGuid = string | null;

/** State of a code scanning alert. */
export type CodeScanningAlertStateQuery = "open" | "closed" | "dismissed" | "fixed";

/** Severity of a code scanning alert. */
export type CodeScanningAlertSeverity = "critical" | "high" | "medium" | "low" | "warning" | "note" | "error";

/**
 * The REST API URL for fetching the list of instances for an alert.
 * @format uri
 */
export type AlertInstancesUrl = string;

/** State of a code scanning alert. */
export type CodeScanningAlertState = "open" | "dismissed" | "fixed";

/** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
export type CodeScanningAlertDismissedReason = "false positive" | "won't fix" | "used in tests";

/**
 * The dismissal comment associated with the dismissal of the alert.
 * @maxLength 280
 */
export type CodeScanningAlertDismissedComment = string | null;

export interface CodeScanningAlertRuleSummary {
  /** A unique identifier for the rule used to detect the alert. */
  id?: string | null;
  /** The name of the rule used to detect the alert. */
  name?: string;
  /** The severity of the alert. */
  severity?: "none" | "note" | "warning" | "error" | null;
  /** The security severity of the alert. */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;
  /** A short description of the rule used to detect the alert. */
  description?: string;
  /** A description of the rule used to detect the alert. */
  full_description?: string;
  /** A set of tags applicable for the rule. */
  tags?: string[] | null;
  /** Detailed documentation for the rule as GitHub Flavored Markdown. */
  help?: string | null;
  /** A link to the documentation for the rule used to detect the alert. */
  help_uri?: string | null;
}

/** The version of the tool used to generate the code scanning analysis. */
export type CodeScanningAnalysisToolVersion = string | null;

export interface CodeScanningAnalysisTool {
  /** The name of the tool used to generate the code scanning analysis. */
  name?: CodeScanningAnalysisToolName;
  /** The version of the tool used to generate the code scanning analysis. */
  version?: CodeScanningAnalysisToolVersion;
  /** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
  guid?: CodeScanningAnalysisToolGuid;
}

/**
 * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
 * `refs/heads/<branch name>` or simply `<branch name>`.
 */
export type CodeScanningRef = string;

/** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
export type CodeScanningAnalysisAnalysisKey = string;

/** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
export type CodeScanningAlertEnvironment = string;

/** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
export type CodeScanningAnalysisCategory = string;

/** Describe a region within a file for the alert. */
export interface CodeScanningAlertLocation {
  path?: string;
  start_line?: number;
  end_line?: number;
  start_column?: number;
  end_column?: number;
}

/** A classification of the file. For example to identify it as generated. */
export type CodeScanningAlertClassification = "source" | "generated" | "test" | "library";

export interface CodeScanningAlertInstance {
  /**
   * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
   * `refs/heads/<branch name>` or simply `<branch name>`.
   */
  ref?: CodeScanningRef;
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
  environment?: CodeScanningAlertEnvironment;
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
  category?: CodeScanningAnalysisCategory;
  /** State of a code scanning alert. */
  state?: CodeScanningAlertState;
  commit_sha?: string;
  message?: {
    text?: string;
  };
  /** Describe a region within a file for the alert. */
  location?: CodeScanningAlertLocation;
  html_url?: string;
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassification[];
}

export interface CodeScanningOrganizationAlertItems {
  /** The security alert number. */
  number: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: AlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The REST API URL for fetching the list of instances for an alert. */
  instances_url: AlertInstancesUrl;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at?: AlertFixedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The dismissal comment associated with the dismissal of the alert. */
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  /** A GitHub repository. */
  repository: SimpleRepository;
  /** A GitHub user. */
  dismissal_approved_by?: NullableSimpleUser;
}

/**
 * Codespace machine
 * A description of the machine powering a codespace.
 */
export type NullableCodespaceMachine = {
  /**
   * The name of the machine.
   * @example "standardLinux"
   */
  name: string;
  /**
   * The display name of the machine includes cores, memory, and storage.
   * @example "4 cores, 16 GB RAM, 64 GB storage"
   */
  display_name: string;
  /**
   * The operating system of the machine.
   * @example "linux"
   */
  operating_system: string;
  /**
   * How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;
  /**
   * How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;
  /**
   * How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example "ready"
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
};

/**
 * Codespace
 * A codespace.
 */
export interface Codespace {
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /**
   * Automatically generated name of this codespace.
   * @example "monalisa-octocat-hello-world-g4wpq6h95q"
   */
  name: string;
  /**
   * Display name for this codespace.
   * @example "bookish space pancake"
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   * @example "26a7c758-7299-4a73-b978-5a92a7ae98a0"
   */
  environment_id: string | null;
  /** A GitHub user. */
  owner: SimpleUser;
  /** A GitHub user. */
  billable_owner: SimpleUser;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** A description of the machine powering a codespace. */
  machine: NullableCodespaceMachine;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   * @example ".devcontainer/example/devcontainer.json"
   */
  devcontainer_path?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   * @example false
   */
  prebuild: boolean | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * Last known time this codespace was started.
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  last_used_at: string;
  /**
   * State of this codespace.
   * @example "Available"
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";
  /**
   * API URL for this codespace.
   * @format uri
   */
  url: string;
  /** Details about the codespace's git repository. */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     * @example 0
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     * @example 0
     */
    behind?: number;
    /** Whether the local repository has unpushed changes. */
    has_unpushed_changes?: boolean;
    /** Whether the local repository has uncommitted changes. */
    has_uncommitted_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example "main"
     */
    ref?: string;
  };
  /**
   * The initally assigned location of a new codespace.
   * @example "WestUs2"
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * URL to access this codespace on the web.
   * @format uri
   */
  web_url: string;
  /**
   * API URL to access available alternate machine types for this codespace.
   * @format uri
   */
  machines_url: string;
  /**
   * API URL to start this codespace.
   * @format uri
   */
  start_url: string;
  /**
   * API URL to stop this codespace.
   * @format uri
   */
  stop_url: string;
  /**
   * API URL to publish this codespace to a new repository.
   * @format uri
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   * @format uri
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /** The privacy settings a user can select from when forwarding a port. */
    allowed_port_privacy_settings?: string[] | null;
  };
  /** Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
  pending_operation?: boolean | null;
  /** Text to show user when codespace is disabled by a pending operation */
  pending_operation_disabled_reason?: string | null;
  /** Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
  idle_timeout_notice?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @format date-time
   * @example "2011-01-26T20:01:12Z"
   */
  retention_expires_at?: string | null;
  /**
   * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   * @example "you've used 100% of your spending limit for Codespaces"
   */
  last_known_stop_notice?: string | null;
}

/**
 * Codespaces Secret
 * Secrets for a GitHub Codespace.
 */
export interface CodespacesOrgSecret {
  /**
   * The name of the secret
   * @example "SECRET_NAME"
   */
  name: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /** The type of repositories in the organization that the secret is visible to */
  visibility: "all" | "private" | "selected";
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   * @format uri
   * @example "https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * CodespacesPublicKey
 * The public key used for setting Codespaces secrets.
 */
export interface CodespacesPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /** @example 2 */
  id?: number;
  /** @example "https://api.github.com/user/keys/2" */
  url?: string;
  /** @example "ssh-rsa AAAAB3NzaC1yc2EAAA" */
  title?: string;
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
}

/**
 * Copilot Seat Breakdown
 * The breakdown of Copilot Business seats for the organization.
 */
export interface CopilotOrganizationSeatBreakdown {
  /** The total number of seats being billed for the organization as of the current billing cycle. */
  total?: number;
  /** Seats added during the current billing cycle. */
  added_this_cycle?: number;
  /** The number of seats that are pending cancellation at the end of the current billing cycle. */
  pending_cancellation?: number;
  /** The number of users who have been invited to receive a Copilot seat through this organization. */
  pending_invitation?: number;
  /** The number of seats that have used Copilot during the current billing cycle. */
  active_this_cycle?: number;
  /** The number of seats that have not used Copilot during the current billing cycle. */
  inactive_this_cycle?: number;
}

/**
 * Copilot Organization Details
 * Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
 */
export interface CopilotOrganizationDetails {
  /** The breakdown of Copilot Business seats for the organization. */
  seat_breakdown: CopilotOrganizationSeatBreakdown;
  /** The organization policy for allowing or blocking suggestions matching public code (duplication detection filter). */
  public_code_suggestions: "allow" | "block" | "unconfigured";
  /** The organization policy for allowing or disallowing Copilot Chat in the IDE. */
  ide_chat?: "enabled" | "disabled" | "unconfigured";
  /** The organization policy for allowing or disallowing Copilot features on GitHub.com. */
  platform_chat?: "enabled" | "disabled" | "unconfigured";
  /** The organization policy for allowing or disallowing Copilot in the CLI. */
  cli?: "enabled" | "disabled" | "unconfigured";
  /** The mode of assigning new seats. */
  seat_management_setting: "assign_all" | "assign_selected" | "disabled" | "unconfigured";
  /** The Copilot plan of the organization, or the parent enterprise, when applicable. */
  plan_type?: "business" | "enterprise";
  [key: string]: any;
}

/**
 * Organization Simple
 * A GitHub organization.
 */
export type NullableOrganizationSimple = {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
};

/**
 * Enterprise Team
 * Group of enterprise owners and/or members
 */
export interface EnterpriseTeam {
  /** @format int64 */
  id: number;
  name: string;
  description?: string;
  slug: string;
  /** @format uri */
  url: string;
  /** @example "disabled | all" */
  sync_to_organizations?: string;
  /** @example "disabled | all" */
  organization_selection_type?: string;
  /** @example "62ab9291-fae2-468e-974b-7e45096d5021" */
  group_id?: string | null;
  /** @example "Justice League" */
  group_name?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/dc/teams/justice-league"
   */
  html_url: string;
  members_url: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Copilot Business Seat Detail
 * Information about a Copilot Business seat assignment for a user, team, or organization.
 */
export interface CopilotSeatDetails {
  /** A GitHub user. */
  assignee?: NullableSimpleUser;
  /** A GitHub organization. */
  organization?: NullableOrganizationSimple;
  /** The team through which the assignee is granted access to GitHub Copilot, if applicable. */
  assigning_team?: Team | EnterpriseTeam | null;
  /**
   * The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
   * @format date
   */
  pending_cancellation_date?: string | null;
  /**
   * Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
   * @format date-time
   */
  last_activity_at?: string | null;
  /** Last editor that was used by the user for a GitHub Copilot completion. */
  last_activity_editor?: string | null;
  /**
   * Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
   * @format date-time
   */
  created_at: string;
  /**
   * **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
   * @deprecated
   * @format date-time
   */
  updated_at?: string;
  /** The Copilot plan of the organization, or the parent enterprise, when applicable. */
  plan_type?: "business" | "enterprise" | "unknown";
}

/** Usage metrics for Copilot editor code completions in the IDE. */
export type CopilotIdeCodeCompletions = {
  /** Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances. */
  total_engaged_users?: number;
  /** Code completion metrics for active languages. */
  languages?: {
    /** Name of the language used for Copilot code completion suggestions. */
    name?: string;
    /** Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances. */
    total_engaged_users?: number;
  }[];
  editors?: {
    /** Name of the given editor. */
    name?: string;
    /** Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances. */
    total_engaged_users?: number;
    /** List of model metrics for custom models and the default model. */
    models?: {
      /** Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'. */
      name?: string;
      /** Indicates whether a model is custom or default. */
      is_custom_model?: boolean;
      /** The training date for the custom model. */
      custom_model_training_date?: string | null;
      /** Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances. */
      total_engaged_users?: number;
      /** Code completion metrics for active languages, for the given editor. */
      languages?: {
        /** Name of the language used for Copilot code completion suggestions, for the given editor. */
        name?: string;
        /** Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances. */
        total_engaged_users?: number;
        /** The number of Copilot code suggestions generated for the given editor, for the given language. */
        total_code_suggestions?: number;
        /** The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances. */
        total_code_acceptances?: number;
        /** The number of lines of code suggested by Copilot code completions for the given editor, for the given language. */
        total_code_lines_suggested?: number;
        /** The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language. */
        total_code_lines_accepted?: number;
      }[];
    }[];
    [key: string]: any;
  }[];
  [key: string]: any;
};

/** Usage metrics for Copilot Chat in the IDE. */
export type CopilotIdeChat = {
  /** Total number of users who prompted Copilot Chat in the IDE. */
  total_engaged_users?: number;
  editors?: {
    /** Name of the given editor. */
    name?: string;
    /** The number of users who prompted Copilot Chat in the specified editor. */
    total_engaged_users?: number;
    /** List of model metrics for custom models and the default model. */
    models?: {
      /** Name of the model used for Copilot Chat. If the default model is used will appear as 'default'. */
      name?: string;
      /** Indicates whether a model is custom or default. */
      is_custom_model?: boolean;
      /** The training date for the custom model. */
      custom_model_training_date?: string | null;
      /** The number of users who prompted Copilot Chat in the given editor and model. */
      total_engaged_users?: number;
      /** The total number of chats initiated by users in the given editor and model. */
      total_chats?: number;
      /** The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor. */
      total_chat_insertion_events?: number;
      /** The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor. */
      total_chat_copy_events?: number;
    }[];
  }[];
  [key: string]: any;
};

/** Usage metrics for Copilot Chat in GitHub.com */
export type CopilotDotcomChat = {
  /** Total number of users who prompted Copilot Chat on github.com at least once. */
  total_engaged_users?: number;
  /** List of model metrics for a custom models and the default model. */
  models?: {
    /** Name of the model used for Copilot Chat. If the default model is used will appear as 'default'. */
    name?: string;
    /** Indicates whether a model is custom or default. */
    is_custom_model?: boolean;
    /** The training date for the custom model (if applicable). */
    custom_model_training_date?: string | null;
    /** Total number of users who prompted Copilot Chat on github.com at least once for each model. */
    total_engaged_users?: number;
    /** Total number of chats initiated by users on github.com. */
    total_chats?: number;
  }[];
  [key: string]: any;
};

/** Usage metrics for Copilot for pull requests. */
export type CopilotDotcomPullRequests = {
  /** The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once. */
  total_engaged_users?: number;
  /** Repositories in which users used Copilot for Pull Requests to generate pull request summaries */
  repositories?: {
    /** Repository name */
    name?: string;
    /** The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository. */
    total_engaged_users?: number;
    /** List of model metrics for custom models and the default model. */
    models?: {
      /** Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'. */
      name?: string;
      /** Indicates whether a model is custom or default. */
      is_custom_model?: boolean;
      /** The training date for the custom model. */
      custom_model_training_date?: string | null;
      /** The number of pull request summaries generated using Copilot for Pull Requests in the given repository. */
      total_pr_summaries_created?: number;
      /** The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model. */
      total_engaged_users?: number;
    }[];
  }[];
  [key: string]: any;
};

/**
 * Copilot Usage Metrics
 * Copilot usage metrics for a given day.
 */
export interface CopilotUsageMetricsDay {
  /**
   * The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
   * @format date
   */
  date: string;
  /** The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint. */
  total_active_users?: number;
  /** The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint. */
  total_engaged_users?: number;
  /** Usage metrics for Copilot editor code completions in the IDE. */
  copilot_ide_code_completions?: CopilotIdeCodeCompletions;
  /** Usage metrics for Copilot Chat in the IDE. */
  copilot_ide_chat?: CopilotIdeChat;
  /** Usage metrics for Copilot Chat in GitHub.com */
  copilot_dotcom_chat?: CopilotDotcomChat;
  /** Usage metrics for Copilot for pull requests. */
  copilot_dotcom_pull_requests?: CopilotDotcomPullRequests;
  [key: string]: any;
}

/**
 * Dependabot Secret for an Organization
 * Secrets for GitHub Dependabot for an organization.
 */
export interface OrganizationDependabotSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** Visibility of a secret */
  visibility: "all" | "private" | "selected";
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
}

/**
 * DependabotPublicKey
 * The public key used for setting Dependabot Secrets.
 */
export interface DependabotPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
}

/**
 * Minimal Repository
 * Minimal Repository
 */
export type NullableMinimalRepository = {
  /**
   * @format int64
   * @example 1296269
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "Hello-World" */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  git_url?: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  ssh_url?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: string | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };
  /** @example "admin" */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  /** Code Of Conduct */
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  /** @example 0 */
  forks?: number;
  /** @example 0 */
  open_issues?: number;
  /** @example 0 */
  watchers?: number;
  allow_forking?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysis;
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
};

/**
 * Package
 * A software package
 */
export interface Package {
  /**
   * Unique identifier of the package.
   * @example 1
   */
  id: number;
  /**
   * The name of the package.
   * @example "super-linter"
   */
  name: string;
  /** @example "docker" */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /** @example "https://api.github.com/orgs/github/packages/container/super-linter" */
  url: string;
  /** @example "https://github.com/orgs/github/packages/container/package/super-linter" */
  html_url: string;
  /**
   * The number of versions of the package.
   * @example 1
   */
  version_count: number;
  /** @example "private" */
  visibility: "private" | "public";
  /** A GitHub user. */
  owner?: NullableSimpleUser;
  /** Minimal Repository */
  repository?: NullableMinimalRepository;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Organization Invitation
 * Organization Invitation
 */
export interface OrganizationInvitation {
  /** @format int64 */
  id: number;
  login: string | null;
  email: string | null;
  role: string;
  created_at: string;
  failed_at?: string | null;
  failed_reason?: string | null;
  /** A GitHub user. */
  inviter: SimpleUser;
  team_count: number;
  /** @example ""MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"" */
  node_id: string;
  /** @example ""https://api.github.com/organizations/16/invitations/1/teams"" */
  invitation_teams_url: string;
  /** @example ""member"" */
  invitation_source?: string;
}

/**
 * Org Hook
 * Org Hook
 */
export interface OrgHook {
  /** @example 1 */
  id: number;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1/deliveries"
   */
  deliveries_url?: string;
  /** @example "web" */
  name: string;
  /** @example ["push","pull_request"] */
  events: string[];
  /** @example true */
  active: boolean;
  config: {
    /** @example ""http://example.com/2"" */
    url?: string;
    /** @example ""0"" */
    insecure_ssl?: string;
    /** @example ""form"" */
    content_type?: string;
    /** @example ""********"" */
    secret?: string;
  };
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  type: string;
}

/**
 * Route Stats
 * API Insights usage route stats for an actor
 */
export type ApiInsightsRouteStats = {
  /** The HTTP method */
  http_method?: string;
  /** The API path's route template */
  api_route?: string;
  /**
   * The total number of requests within the queried time period
   * @format int64
   */
  total_request_count?: number;
  /**
   * The total number of requests that were rate limited within the queried time period
   * @format int64
   */
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];

/**
 * Subject Stats
 * API Insights usage subject stats for an organization
 */
export type ApiInsightsSubjectStats = {
  subject_type?: string;
  subject_name?: string;
  /** @format int64 */
  subject_id?: number;
  total_request_count?: number;
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];

/**
 * Summary Stats
 * API Insights usage summary stats for an organization
 */
export interface ApiInsightsSummaryStats {
  /**
   * The total number of requests within the queried time period
   * @format int64
   */
  total_request_count?: number;
  /**
   * The total number of requests that were rate limited within the queried time period
   * @format int64
   */
  rate_limited_request_count?: number;
}

/**
 * Time Stats
 * API Insights usage time stats for an organization
 */
export type ApiInsightsTimeStats = {
  timestamp?: string;
  /** @format int64 */
  total_request_count?: number;
  /** @format int64 */
  rate_limited_request_count?: number;
}[];

/**
 * User Stats
 * API Insights usage stats for a user
 */
export type ApiInsightsUserStats = {
  actor_type?: string;
  actor_name?: string;
  /** @format int64 */
  actor_id?: number;
  /** @format int64 */
  integration_id?: number | null;
  /** @format int64 */
  oauth_application_id?: number | null;
  total_request_count?: number;
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 * @example "collaborators_only"
 */
export type InteractionGroup = "existing_users" | "contributors_only" | "collaborators_only";

/**
 * Interaction Limits
 * Interaction limit settings.
 */
export interface InteractionLimitResponse {
  /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. */
  limit: InteractionGroup;
  /** @example "repository" */
  origin: string;
  /**
   * @format date-time
   * @example "2018-08-17T04:18:39Z"
   */
  expires_at: string;
}

/**
 * The duration of the interaction restriction. Default: `one_day`.
 * @example "one_month"
 */
export type InteractionExpiry = "one_day" | "three_days" | "one_week" | "one_month" | "six_months";

/**
 * Interaction Restrictions
 * Limit interactions to a specific type of user for a specified duration
 */
export interface InteractionLimit {
  /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. */
  limit: InteractionGroup;
  /** The duration of the interaction restriction. Default: `one_day`. */
  expiry?: InteractionExpiry;
}

export interface OrganizationCreateIssueType {
  /** Name of the issue type. */
  name: string;
  /** Whether or not the issue type is enabled at the organization level. */
  is_enabled: boolean;
  /** Description of the issue type. */
  description?: string | null;
  /** Color for the issue type. */
  color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
}

export interface OrganizationUpdateIssueType {
  /** Name of the issue type. */
  name: string;
  /** Whether or not the issue type is enabled at the organization level. */
  is_enabled: boolean;
  /** Description of the issue type. */
  description?: string | null;
  /** Color for the issue type. */
  color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple" | null;
}

/**
 * Org Membership
 * Org Membership
 */
export interface OrgMembership {
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/memberships/defunkt"
   */
  url: string;
  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   * @example "active"
   */
  state: "active" | "pending";
  /**
   * The user's membership type in the organization.
   * @example "admin"
   */
  role: "admin" | "member" | "billing_manager";
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat"
   */
  organization_url: string;
  /** A GitHub organization. */
  organization: OrganizationSimple;
  /** A GitHub user. */
  user: NullableSimpleUser;
  permissions?: {
    can_create_repository: boolean;
  };
}

/**
 * Migration
 * A migration.
 */
export interface Migration {
  /**
   * @format int64
   * @example 79
   */
  id: number;
  /** A GitHub user. */
  owner: NullableSimpleUser;
  /** @example "0b989ba4-242f-11e5-81e1-c7b6966d2516" */
  guid: string;
  /** @example "pending" */
  state: string;
  /** @example true */
  lock_repositories: boolean;
  exclude_metadata: boolean;
  exclude_git_data: boolean;
  exclude_attachments: boolean;
  exclude_releases: boolean;
  exclude_owner_projects: boolean;
  org_metadata_only: boolean;
  /** The repositories included in the migration. Only returned for export migrations. */
  repositories: Repository[];
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octo-org/migrations/79"
   */
  url: string;
  /**
   * @format date-time
   * @example "2015-07-06T15:33:38-07:00"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2015-07-06T15:33:38-07:00"
   */
  updated_at: string;
  node_id: string;
  /** @format uri */
  archive_url?: string;
  /** Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
  exclude?: string[];
}

/**
 * Organization Role
 * Organization roles
 */
export interface OrganizationRole {
  /**
   * The unique identifier of the role.
   * @format int64
   */
  id: number;
  /** The name of the role. */
  name: string;
  /** A short description about who this role is for or what permissions it grants. */
  description?: string | null;
  /** The system role from which this role inherits permissions. */
  base_role?: "read" | "triage" | "write" | "maintain" | "admin" | null;
  /** Source answers the question, "where did this role come from?" */
  source?: "Organization" | "Enterprise" | "Predefined" | null;
  /** A list of permissions included in this role. */
  permissions: string[];
  /** A GitHub user. */
  organization: NullableSimpleUser;
  /**
   * The date and time the role was created.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time the role was last updated.
   * @format date-time
   */
  updated_at: string;
}

/**
 * A Role Assignment for a Team
 * The Relationship a Team has with a role.
 */
export interface TeamRoleAssignment {
  /**
   * Determines if the team has a direct, indirect, or mixed relationship to a role
   * @example "direct"
   */
  assignment?: "direct" | "indirect" | "mixed";
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  /** @format uri */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  members_url: string;
  /** @format uri */
  repositories_url: string;
  /** Groups of organization members that gives permissions on specified repositories. */
  parent: NullableTeamSimple;
}

/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** @example "justice-league" */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
}

/**
 * A Role Assignment for a User
 * The Relationship a User has with a role.
 */
export interface UserRoleAssignment {
  /**
   * Determines if the user has a direct, indirect, or mixed relationship to a role
   * @example "direct"
   */
  assignment?: "direct" | "indirect" | "mixed";
  /** Team the user has gotten the role through */
  inherited_from?: TeamSimple[];
  name?: string | null;
  email?: string | null;
  /** @example "octocat" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "public" */
  user_view_type?: string;
}

/**
 * Package Version
 * A version of a software package
 */
export interface PackageVersion {
  /**
   * Unique identifier of the package version.
   * @example 1
   */
  id: number;
  /**
   * The name of the package version.
   * @example "latest"
   */
  name: string;
  /** @example "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068" */
  url: string;
  /** @example "https://github.com/orgs/github/packages/container/package/super-linter" */
  package_html_url: string;
  /** @example "https://github.com/orgs/github/packages/container/super-linter/786068" */
  html_url?: string;
  /** @example "MIT" */
  license?: string;
  description?: string;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  deleted_at?: string;
  /** Package Version Metadata */
  metadata?: {
    /** @example "docker" */
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
    /** Container Metadata */
    container?: {
      tags: string[];
    };
    /** Docker Metadata */
    docker?: {
      tag?: string[];
    };
  };
}

/**
 * Simple Organization Programmatic Access Grant Request
 * Minimal representation of an organization programmatic access grant request for enumerations
 */
export interface OrganizationProgrammaticAccessGrantRequest {
  /** Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests. */
  id: number;
  /** Reason for requesting access. */
  reason: string | null;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Type of repository selection requested. */
  repository_selection: "none" | "all" | "subset";
  /** URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`. */
  repositories_url: string;
  /** Permissions requested, categorized by type of permission. */
  permissions: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Date and time when the request for access was created. */
  created_at: string;
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
  token_id: number;
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
  token_name: string;
  /** Whether the associated fine-grained personal access token has expired. */
  token_expired: boolean;
  /** Date and time when the associated fine-grained personal access token expires. */
  token_expires_at: string | null;
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
  token_last_used_at: string | null;
}

/**
 * Organization Programmatic Access Grant
 * Minimal representation of an organization programmatic access grant for enumerations
 */
export interface OrganizationProgrammaticAccessGrant {
  /** Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token. */
  id: number;
  /** A GitHub user. */
  owner: SimpleUser;
  /** Type of repository selection requested. */
  repository_selection: "none" | "all" | "subset";
  /** URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`. */
  repositories_url: string;
  /** Permissions requested, categorized by type of permission. */
  permissions: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Date and time when the fine-grained personal access token was approved to access the organization. */
  access_granted_at: string;
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
  token_id: number;
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
  token_name: string;
  /** Whether the associated fine-grained personal access token has expired. */
  token_expired: boolean;
  /** Date and time when the associated fine-grained personal access token expires. */
  token_expires_at: string | null;
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
  token_last_used_at: string | null;
}

/**
 * Organization private registry
 * Private registry configuration for an organization
 */
export interface OrgPrivateRegistryConfiguration {
  /**
   * The name of the private registry configuration.
   * @example "MAVEN_REPOSITORY_SECRET"
   */
  name: string;
  /** The registry type. */
  registry_type: "maven_repository" | "nuget_feed" | "goproxy_server";
  /**
   * The username to use when authenticating with the private registry.
   * @example "monalisa"
   */
  username?: string | null;
  /** Which type of organization repositories have access to the private registry. */
  visibility: "all" | "private" | "selected";
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Organization private registry
 * Private registry configuration for an organization
 */
export interface OrgPrivateRegistryConfigurationWithSelectedRepositories {
  /**
   * The name of the private registry configuration.
   * @example "MAVEN_REPOSITORY_SECRET"
   */
  name: string;
  /** The registry type. */
  registry_type: "maven_repository" | "nuget_feed" | "goproxy_server";
  /**
   * The username to use when authenticating with the private registry.
   * @example "monalisa"
   */
  username?: string;
  /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
  visibility: "all" | "private" | "selected";
  /** An array of repository IDs that can access the organization private registry when `visibility` is set to `selected`. */
  selected_repository_ids?: number[];
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Project
 * Projects are a way to organize columns and cards of work.
 */
export interface Project {
  /**
   * @format uri
   * @example "https://api.github.com/repos/api-playground/projects-test"
   */
  owner_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/1002604"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/api-playground/projects-test/projects/12"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/1002604/columns"
   */
  columns_url: string;
  /** @example 1002604 */
  id: number;
  /** @example "MDc6UHJvamVjdDEwMDI2MDQ=" */
  node_id: string;
  /**
   * Name of the project
   * @example "Week One Sprint"
   */
  name: string;
  /**
   * Body of the project
   * @example "This project represents the sprint of the first week in January"
   */
  body: string | null;
  /** @example 1 */
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
  organization_permission?: "read" | "write" | "admin" | "none";
  /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
  private?: boolean;
}

/**
 * Organization Custom Property
 * Custom property defined on an organization
 */
export interface CustomProperty {
  /** The name of the property */
  property_name: string;
  /**
   * The URL that can be used to fetch, update, or delete info about this property via the API.
   * @format uri
   */
  url?: string;
  /**
   * The source type of the property
   * @example "organization"
   */
  source_type?: "organization" | "enterprise";
  /**
   * The type of the value for the property
   * @example "single_select"
   */
  value_type: "string" | "single_select" | "multi_select" | "true_false";
  /** Whether the property is required. */
  required?: boolean;
  /** Default value of the property */
  default_value?: string | string[] | null;
  /** Short description of the property */
  description?: string | null;
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   * @maxItems 200
   */
  allowed_values?: string[] | null;
  /**
   * Who can edit the values of the property
   * @example "org_actors"
   */
  values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
}

/**
 * Custom Property Set Payload
 * Custom property set payload
 */
export interface CustomPropertySetPayload {
  /**
   * The type of the value for the property
   * @example "single_select"
   */
  value_type: "string" | "single_select" | "multi_select" | "true_false";
  /** Whether the property is required. */
  required?: boolean;
  /** Default value of the property */
  default_value?: string | string[] | null;
  /** Short description of the property */
  description?: string | null;
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   * @maxItems 200
   */
  allowed_values?: string[] | null;
  /**
   * Who can edit the values of the property
   * @example "org_actors"
   */
  values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
}

/**
 * Custom Property Value
 * Custom property name and associated value
 */
export interface CustomPropertyValue {
  /** The name of the property */
  property_name: string;
  /** The value assigned to the property */
  value: string | string[] | null;
}

/**
 * Organization Repository Custom Property Values
 * List of custom property values for a repository
 */
export interface OrgRepoCustomPropertyValues {
  /** @example 1296269 */
  repository_id: number;
  /** @example "Hello-World" */
  repository_name: string;
  /** @example "octocat/Hello-World" */
  repository_full_name: string;
  /** List of custom property names and associated values */
  properties: CustomPropertyValue[];
}

/**
 * Repository
 * A repository on GitHub.
 */
export type NullableRepository = {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @deprecated
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
  /** The status of the code search index for this repository */
  code_search_index_status?: {
    lexical_search_ok?: boolean;
    lexical_commit_sha?: string;
  };
};

/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
export interface CodeOfConductSimple {
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   */
  url: string;
  /** @example "citizen_code_of_conduct" */
  key: string;
  /** @example "Citizen Code of Conduct" */
  name: string;
  /**
   * @format uri
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   */
  html_url: string | null;
}

/**
 * Full Repository
 * Full Repository
 */
export interface FullRepository {
  /**
   * @format int64
   * @example 1296269
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "Hello-World" */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** A GitHub user. */
  owner: SimpleUser;
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /** @example "master" */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /** @example true */
  is_template?: boolean;
  /** @example ["octocat","atom","electron","API"] */
  topics?: string[];
  /** @example true */
  has_issues: boolean;
  /** @example true */
  has_projects: boolean;
  /** @example true */
  has_wiki: boolean;
  has_pages: boolean;
  /** @example true */
  has_downloads?: boolean;
  /** @example true */
  has_discussions: boolean;
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @example "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  /** @example true */
  allow_rebase_merge?: boolean;
  /** A repository on GitHub. */
  template_repository?: NullableRepository;
  temp_clone_token?: string | null;
  /** @example true */
  allow_squash_merge?: boolean;
  /** @example false */
  allow_auto_merge?: boolean;
  /** @example false */
  delete_branch_on_merge?: boolean;
  /** @example true */
  allow_merge_commit?: boolean;
  /** @example true */
  allow_update_branch?: boolean;
  /** @example false */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   * @example "PR_TITLE"
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   * @example "PR_BODY"
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @example "PR_TITLE"
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   * @example "PR_BODY"
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /** @example true */
  allow_forking?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
  /** @example 42 */
  subscribers_count: number;
  /** @example 0 */
  network_count: number;
  /** License Simple */
  license: NullableLicenseSimple;
  /** A GitHub user. */
  organization?: NullableSimpleUser;
  /** A repository on GitHub. */
  parent?: Repository;
  /** A repository on GitHub. */
  source?: Repository;
  forks: number;
  master_branch?: string;
  open_issues: number;
  watchers: number;
  /**
   * Whether anonymous git access is allowed.
   * @default true
   */
  anonymous_access_enabled?: boolean;
  /** Code of Conduct Simple */
  code_of_conduct?: CodeOfConductSimple;
  security_and_analysis?: SecurityAndAnalysis;
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
}

/** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
export type RepositoryRuleEnforcement = "disabled" | "active" | "evaluate";

/**
 * Repository Ruleset Bypass Actor
 * An actor that can bypass rules in a ruleset
 */
export interface RepositoryRulesetBypassActor {
  /** The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories. */
  actor_id?: number | null;
  /** The type of actor that can bypass a ruleset. */
  actor_type: "Integration" | "OrganizationAdmin" | "RepositoryRole" | "Team" | "DeployKey";
  /**
   * When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
   * @default "always"
   */
  bypass_mode?: "always" | "pull_request";
}

/**
 * Repository ruleset conditions for ref names
 * Parameters for a repository ruleset ref name condition
 */
export interface RepositoryRulesetConditions {
  ref_name?: {
    /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
    include?: string[];
    /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
    exclude?: string[];
  };
}

/**
 * Repository ruleset conditions for repository names
 * Parameters for a repository name condition
 */
export interface RepositoryRulesetConditionsRepositoryNameTarget {
  repository_name: {
    /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
    include?: string[];
    /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
    exclude?: string[];
    /** Whether renaming of target repositories is prevented. */
    protected?: boolean;
  };
}

/**
 * Repository ruleset conditions for repository IDs
 * Parameters for a repository ID condition
 */
export interface RepositoryRulesetConditionsRepositoryIdTarget {
  repository_id: {
    /** The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. */
    repository_ids?: number[];
  };
}

/**
 * Repository ruleset property targeting definition
 * Parameters for a targeting a repository property
 */
export interface RepositoryRulesetConditionsRepositoryPropertySpec {
  /** The name of the repository property to target */
  name: string;
  /** The values to match for the repository property */
  property_values: string[];
  /** The source of the repository property. Defaults to 'custom' if not specified. */
  source?: "custom" | "system";
}

/**
 * Repository ruleset conditions for repository properties
 * Parameters for a repository property condition
 */
export interface RepositoryRulesetConditionsRepositoryPropertyTarget {
  repository_property: {
    /** The repository properties and values to include. All of these properties must match for the condition to pass. */
    include?: RepositoryRulesetConditionsRepositoryPropertySpec[];
    /** The repository properties and values to exclude. The condition will not pass if any of these properties match. */
    exclude?: RepositoryRulesetConditionsRepositoryPropertySpec[];
  };
}

/**
 * Organization ruleset conditions
 * Conditions for an organization ruleset.
 * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
 * The push rulesets conditions object does not require the `ref_name` property.
 * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
 */
export type OrgRulesetConditions =
  | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryNameTarget)
  | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryIdTarget)
  | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryPropertyTarget);

/**
 * creation
 * Only allow users with bypass permission to create matching refs.
 */
export interface RepositoryRuleCreation {
  type: "creation";
}

/**
 * update
 * Only allow users with bypass permission to update matching refs.
 */
export interface RepositoryRuleUpdate {
  type: "update";
  parameters?: {
    /** Branch can pull changes from its upstream repository */
    update_allows_fetch_and_merge: boolean;
  };
}

/**
 * deletion
 * Only allow users with bypass permissions to delete matching refs.
 */
export interface RepositoryRuleDeletion {
  type: "deletion";
}

/**
 * required_linear_history
 * Prevent merge commits from being pushed to matching refs.
 */
export interface RepositoryRuleRequiredLinearHistory {
  type: "required_linear_history";
}

/**
 * merge_queue
 * Merges must be performed via a merge queue.
 */
export interface RepositoryRuleMergeQueue {
  type: "merge_queue";
  parameters?: {
    /**
     * Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
     * @min 1
     * @max 360
     */
    check_response_timeout_minutes: number;
    /** When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. */
    grouping_strategy: "ALLGREEN" | "HEADGREEN";
    /**
     * Limit the number of queued pull requests requesting checks and workflow runs at the same time.
     * @min 0
     * @max 100
     */
    max_entries_to_build: number;
    /**
     * The maximum number of PRs that will be merged together in a group.
     * @min 0
     * @max 100
     */
    max_entries_to_merge: number;
    /** Method to use when merging changes from queued pull requests. */
    merge_method: "MERGE" | "SQUASH" | "REBASE";
    /**
     * The minimum number of PRs that will be merged together in a group.
     * @min 0
     * @max 100
     */
    min_entries_to_merge: number;
    /**
     * The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
     * @min 0
     * @max 360
     */
    min_entries_to_merge_wait_minutes: number;
  };
}

/**
 * required_deployments
 * Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 */
export interface RepositoryRuleRequiredDeployments {
  type: "required_deployments";
  parameters?: {
    /** The environments that must be successfully deployed to before branches can be merged. */
    required_deployment_environments: string[];
  };
}

/**
 * required_signatures
 * Commits pushed to matching refs must have verified signatures.
 */
export interface RepositoryRuleRequiredSignatures {
  type: "required_signatures";
}

/**
 * Reviewer
 * A required reviewing team
 */
export interface RepositoryRuleParamsReviewer {
  /** ID of the reviewer which must review changes to matching files. */
  id: number;
  /** The type of the reviewer */
  type: "Team";
}

/**
 * RequiredReviewerConfiguration
 * A reviewing team, and file patterns describing which files they must approve changes to.
 */
export interface RepositoryRuleParamsRequiredReviewerConfiguration {
  /** Array of file patterns. Pull requests which change matching files must be approved by the specified team. File patterns use the same syntax as `.gitignore` files. */
  file_patterns: string[];
  /** Minimum number of approvals required from the specified team. If set to zero, the team will be added to the pull request but approval is optional. */
  minimum_approvals: number;
  /** A required reviewing team */
  reviewer: RepositoryRuleParamsReviewer;
}

/**
 * pull_request
 * Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
 */
export interface RepositoryRulePullRequest {
  type: "pull_request";
  parameters?: {
    /** Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled. */
    allowed_merge_methods?: ("merge" | "squash" | "rebase")[];
    /** Automatically request review from Copilot for new pull requests, if the author has access to Copilot code review. */
    automatic_copilot_code_review_enabled?: boolean;
    /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
    dismiss_stale_reviews_on_push: boolean;
    /** Require an approving review in pull requests that modify files that have a designated code owner. */
    require_code_owner_review: boolean;
    /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
    require_last_push_approval: boolean;
    /**
     * The number of approving reviews that are required before a pull request can be merged.
     * @min 0
     * @max 10
     */
    required_approving_review_count: number;
    /** All conversations on code must be resolved before a pull request can be merged. */
    required_review_thread_resolution: boolean;
  };
}

/**
 * StatusCheckConfiguration
 * Required status check
 */
export interface RepositoryRuleParamsStatusCheckConfiguration {
  /** The status check context name that must be present on the commit. */
  context: string;
  /** The optional integration ID that this status check must originate from. */
  integration_id?: number;
}

/**
 * required_status_checks
 * Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
 */
export interface RepositoryRuleRequiredStatusChecks {
  type: "required_status_checks";
  parameters?: {
    /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
    do_not_enforce_on_create?: boolean;
    /** Status checks that are required. */
    required_status_checks: RepositoryRuleParamsStatusCheckConfiguration[];
    /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
    strict_required_status_checks_policy: boolean;
  };
}

/**
 * non_fast_forward
 * Prevent users with push access from force pushing to refs.
 */
export interface RepositoryRuleNonFastForward {
  type: "non_fast_forward";
}

/**
 * commit_message_pattern
 * Parameters to be used for the commit_message_pattern rule
 */
export interface RepositoryRuleCommitMessagePattern {
  type: "commit_message_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * commit_author_email_pattern
 * Parameters to be used for the commit_author_email_pattern rule
 */
export interface RepositoryRuleCommitAuthorEmailPattern {
  type: "commit_author_email_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * committer_email_pattern
 * Parameters to be used for the committer_email_pattern rule
 */
export interface RepositoryRuleCommitterEmailPattern {
  type: "committer_email_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * branch_name_pattern
 * Parameters to be used for the branch_name_pattern rule
 */
export interface RepositoryRuleBranchNamePattern {
  type: "branch_name_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * tag_name_pattern
 * Parameters to be used for the tag_name_pattern rule
 */
export interface RepositoryRuleTagNamePattern {
  type: "tag_name_pattern";
  parameters?: {
    /** How this rule will appear to users. */
    name?: string;
    /** If true, the rule will fail if the pattern matches. */
    negate?: boolean;
    /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex";
    /** The pattern to match with. */
    pattern: string;
  };
}

/**
 * file_path_restriction
 * Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
 */
export interface RepositoryRuleFilePathRestriction {
  type: "file_path_restriction";
  parameters?: {
    /** The file paths that are restricted from being pushed to the commit graph. */
    restricted_file_paths: string[];
  };
}

/**
 * max_file_path_length
 * Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
 */
export interface RepositoryRuleMaxFilePathLength {
  type: "max_file_path_length";
  parameters?: {
    /**
     * The maximum amount of characters allowed in file paths.
     * @min 1
     * @max 32767
     */
    max_file_path_length: number;
  };
}

/**
 * file_extension_restriction
 * Prevent commits that include files with specified file extensions from being pushed to the commit graph.
 */
export interface RepositoryRuleFileExtensionRestriction {
  type: "file_extension_restriction";
  parameters?: {
    /** The file extensions that are restricted from being pushed to the commit graph. */
    restricted_file_extensions: string[];
  };
}

/**
 * max_file_size
 * Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
 */
export interface RepositoryRuleMaxFileSize {
  type: "max_file_size";
  parameters?: {
    /**
     * The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
     * @min 1
     * @max 100
     */
    max_file_size: number;
  };
}

/**
 * RestrictedCommits
 * Restricted commit
 */
export interface RepositoryRuleParamsRestrictedCommits {
  /** Full or abbreviated commit hash to reject */
  oid: string;
  /** Reason for restriction */
  reason?: string;
}

/**
 * WorkflowFileReference
 * A workflow that must run for this rule to pass
 */
export interface RepositoryRuleParamsWorkflowFileReference {
  /** The path to the workflow file */
  path: string;
  /** The ref (branch or tag) of the workflow file to use */
  ref?: string;
  /** The ID of the repository where the workflow is defined */
  repository_id: number;
  /** The commit SHA of the workflow file to use */
  sha?: string;
}

/**
 * workflows
 * Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 */
export interface RepositoryRuleWorkflows {
  type: "workflows";
  parameters?: {
    /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
    do_not_enforce_on_create?: boolean;
    /** Workflows that must pass for this rule to pass. */
    workflows: RepositoryRuleParamsWorkflowFileReference[];
  };
}

/**
 * CodeScanningTool
 * A tool that must provide code scanning results for this rule to pass.
 */
export interface RepositoryRuleParamsCodeScanningTool {
  /** The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  alerts_threshold: "none" | "errors" | "errors_and_warnings" | "all";
  /** The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
  security_alerts_threshold: "none" | "critical" | "high_or_higher" | "medium_or_higher" | "all";
  /** The name of a code scanning tool */
  tool: string;
}

/**
 * code_scanning
 * Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
 */
export interface RepositoryRuleCodeScanning {
  type: "code_scanning";
  parameters?: {
    /** Tools that must provide code scanning results for this rule to pass. */
    code_scanning_tools: RepositoryRuleParamsCodeScanningTool[];
  };
}

/**
 * Repository Rule
 * A repository rule.
 */
export type RepositoryRule =
  | RepositoryRuleCreation
  | RepositoryRuleUpdate
  | RepositoryRuleDeletion
  | RepositoryRuleRequiredLinearHistory
  | RepositoryRuleMergeQueue
  | RepositoryRuleRequiredDeployments
  | RepositoryRuleRequiredSignatures
  | RepositoryRulePullRequest
  | RepositoryRuleRequiredStatusChecks
  | RepositoryRuleNonFastForward
  | RepositoryRuleCommitMessagePattern
  | RepositoryRuleCommitAuthorEmailPattern
  | RepositoryRuleCommitterEmailPattern
  | RepositoryRuleBranchNamePattern
  | RepositoryRuleTagNamePattern
  | RepositoryRuleFilePathRestriction
  | RepositoryRuleMaxFilePathLength
  | RepositoryRuleFileExtensionRestriction
  | RepositoryRuleMaxFileSize
  | RepositoryRuleWorkflows
  | RepositoryRuleCodeScanning;

/**
 * Repository ruleset
 * A set of rules to apply when specified conditions are met.
 */
export interface RepositoryRuleset {
  /** The ID of the ruleset */
  id: number;
  /** The name of the ruleset */
  name: string;
  /** The target of the ruleset */
  target?: "branch" | "tag" | "push" | "repository";
  /** The type of the source of the ruleset */
  source_type?: "Repository" | "Organization" | "Enterprise";
  /** The name of the source */
  source: string;
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
  enforcement: RepositoryRuleEnforcement;
  /** The actors that can bypass the rules in this ruleset */
  bypass_actors?: RepositoryRulesetBypassActor[];
  /**
   * The bypass type of the user making the API request for this ruleset. This field is only returned when
   * querying the repository-level endpoint.
   */
  current_user_can_bypass?: "always" | "pull_requests_only" | "never";
  node_id?: string;
  _links?: {
    self?: {
      /** The URL of the ruleset */
      href?: string;
    };
    html?: {
      /** The html URL of the ruleset */
      href?: string;
    } | null;
  };
  conditions?: RepositoryRulesetConditions | OrgRulesetConditions | null;
  rules?: RepositoryRule[];
  /** @format date-time */
  created_at?: string;
  /** @format date-time */
  updated_at?: string;
}

/**
 * Rule Suites
 * Response
 */
export type RuleSuites = {
  /** The unique identifier of the rule insight. */
  id?: number;
  /** The number that identifies the user. */
  actor_id?: number;
  /** The handle for the GitHub user account. */
  actor_name?: string;
  /** The first commit sha before the push evaluation. */
  before_sha?: string;
  /** The last commit sha in the push evaluation. */
  after_sha?: string;
  /** The ref name that the evaluation ran on. */
  ref?: string;
  /** The ID of the repository associated with the rule evaluation. */
  repository_id?: number;
  /** The name of the repository without the `.git` extension. */
  repository_name?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string;
  /** The result of the rule evaluations for rules with the `active` enforcement status. */
  result?: "pass" | "fail" | "bypass";
  /** The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. */
  evaluation_result?: "pass" | "fail" | "bypass";
}[];

/**
 * Rule Suite
 * Response
 */
export interface RuleSuite {
  /** The unique identifier of the rule insight. */
  id?: number;
  /** The number that identifies the user. */
  actor_id?: number | null;
  /** The handle for the GitHub user account. */
  actor_name?: string | null;
  /** The first commit sha before the push evaluation. */
  before_sha?: string;
  /** The last commit sha in the push evaluation. */
  after_sha?: string;
  /** The ref name that the evaluation ran on. */
  ref?: string;
  /** The ID of the repository associated with the rule evaluation. */
  repository_id?: number;
  /** The name of the repository without the `.git` extension. */
  repository_name?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string;
  /** The result of the rule evaluations for rules with the `active` enforcement status. */
  result?: "pass" | "fail" | "bypass";
  /** The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run. */
  evaluation_result?: "pass" | "fail" | "bypass" | null;
  /** Details on the evaluated rules. */
  rule_evaluations?: {
    rule_source?: {
      /** The type of rule source. */
      type?: string;
      /** The ID of the rule source. */
      id?: number | null;
      /** The name of the rule source. */
      name?: string | null;
    };
    /** The enforcement level of this rule source. */
    enforcement?: "active" | "evaluate" | "deleted ruleset";
    /** The result of the evaluation of the individual rule. */
    result?: "pass" | "fail";
    /** The type of rule. */
    rule_type?: string;
    /** The detailed failure message for the rule. Null if the rule passed. */
    details?: string | null;
  }[];
}

/**
 * Ruleset version
 * The historical version of a ruleset
 */
export interface RulesetVersion {
  /** The ID of the previous version of the ruleset */
  version_id: number;
  /** The actor who updated the ruleset */
  actor: {
    id?: number;
    type?: string;
  };
  /** @format date-time */
  updated_at: string;
}

export type RulesetVersionWithState = RulesetVersion & {
  /** The state of the ruleset version */
  state: object;
};

/** A product affected by the vulnerability detailed in a repository security advisory. */
export interface RepositoryAdvisoryVulnerability {
  /** The name of the package affected by the vulnerability. */
  package: {
    /** The package's language or package management ecosystem. */
    ecosystem: SecurityAdvisoryEcosystems;
    /** The unique package name within its ecosystem. */
    name: string | null;
  };
  /** The range of the package versions affected by the vulnerability. */
  vulnerable_version_range: string | null;
  /** The package version(s) that resolve the vulnerability. */
  patched_versions: string | null;
  /** The functions in the package that are affected. */
  vulnerable_functions: string[] | null;
}

/** A credit given to a user for a repository security advisory. */
export interface RepositoryAdvisoryCredit {
  /** A GitHub user. */
  user: SimpleUser;
  /** The type of credit the user is receiving. */
  type: SecurityAdvisoryCreditTypes;
  /** The state of the user's acceptance of the credit. */
  state: "accepted" | "declined" | "pending";
}

/** A repository security advisory. */
export interface RepositoryAdvisory {
  /** The GitHub Security Advisory ID. */
  ghsa_id: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id: string | null;
  /**
   * The API URL for the advisory.
   * @format uri
   */
  url: string;
  /**
   * The URL for the advisory.
   * @format uri
   */
  html_url: string;
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory entails.
   * @maxLength 65535
   */
  description: string | null;
  /** The severity of the advisory. */
  severity: "critical" | "high" | "medium" | "low" | null;
  /** The author of the advisory. */
  author: SimpleUser | null;
  /** The publisher of the advisory. */
  publisher: SimpleUser | null;
  identifiers: {
    /** The type of identifier. */
    type: "CVE" | "GHSA";
    /** The identifier value. */
    value: string;
  }[];
  /** The state of the advisory. */
  state: "published" | "closed" | "withdrawn" | "draft" | "triage";
  /**
   * The date and time of when the advisory was created, in ISO 8601 format.
   * @format date-time
   */
  created_at: string | null;
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   * @format date-time
   */
  updated_at: string | null;
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   * @format date-time
   */
  published_at: string | null;
  /**
   * The date and time of when the advisory was closed, in ISO 8601 format.
   * @format date-time
   */
  closed_at: string | null;
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @format date-time
   */
  withdrawn_at: string | null;
  submission: {
    /** Whether a private vulnerability report was accepted by the repository's administrators. */
    accepted: boolean;
  } | null;
  vulnerabilities: RepositoryAdvisoryVulnerability[] | null;
  cvss: {
    /** The CVSS vector. */
    vector_string: string | null;
    /**
     * The CVSS score.
     * @min 0
     * @max 10
     */
    score: number | null;
  };
  cvss_severities?: CvssSeverities;
  cwes:
    | {
        /** The Common Weakness Enumeration (CWE) identifier. */
        cwe_id: string;
        /** The name of the CWE. */
        name: string;
      }[]
    | null;
  /** A list of only the CWE IDs. */
  cwe_ids: string[] | null;
  credits:
    | {
        /** The username of the user credited. */
        login?: string;
        /** The type of credit the user is receiving. */
        type?: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  credits_detailed: RepositoryAdvisoryCredit[] | null;
  /** A list of users that collaborate on the advisory. */
  collaborating_users: SimpleUser[] | null;
  /** A list of teams that collaborate on the advisory. */
  collaborating_teams: Team[] | null;
  /** A temporary private fork of the advisory's repository for collaborating on a fix. */
  private_fork: SimpleRepository | null;
}

export interface ActionsBillingUsage {
  /** The sum of the free and paid GitHub Actions minutes used. */
  total_minutes_used: number;
  /** The total paid GitHub Actions minutes used. */
  total_paid_minutes_used: number;
  /** The amount of free GitHub Actions minutes available. */
  included_minutes: number;
  minutes_used_breakdown: {
    /** Total minutes used on Ubuntu runner machines. */
    UBUNTU?: number;
    /** Total minutes used on macOS runner machines. */
    MACOS?: number;
    /** Total minutes used on Windows runner machines. */
    WINDOWS?: number;
    /** Total minutes used on Ubuntu 4 core runner machines. */
    ubuntu_4_core?: number;
    /** Total minutes used on Ubuntu 8 core runner machines. */
    ubuntu_8_core?: number;
    /** Total minutes used on Ubuntu 16 core runner machines. */
    ubuntu_16_core?: number;
    /** Total minutes used on Ubuntu 32 core runner machines. */
    ubuntu_32_core?: number;
    /** Total minutes used on Ubuntu 64 core runner machines. */
    ubuntu_64_core?: number;
    /** Total minutes used on Windows 4 core runner machines. */
    windows_4_core?: number;
    /** Total minutes used on Windows 8 core runner machines. */
    windows_8_core?: number;
    /** Total minutes used on Windows 16 core runner machines. */
    windows_16_core?: number;
    /** Total minutes used on Windows 32 core runner machines. */
    windows_32_core?: number;
    /** Total minutes used on Windows 64 core runner machines. */
    windows_64_core?: number;
    /** Total minutes used on macOS 12 core runner machines. */
    macos_12_core?: number;
    /** Total minutes used on all runner machines. */
    total?: number;
  };
}

export interface PackagesBillingUsage {
  /** Sum of the free and paid storage space (GB) for GitHuub Packages. */
  total_gigabytes_bandwidth_used: number;
  /** Total paid storage space (GB) for GitHuub Packages. */
  total_paid_gigabytes_bandwidth_used: number;
  /** Free storage space (GB) for GitHub Packages. */
  included_gigabytes_bandwidth: number;
}

export interface CombinedBillingUsage {
  /** Numbers of days left in billing cycle. */
  days_left_in_billing_cycle: number;
  /** Estimated storage space (GB) used in billing cycle. */
  estimated_paid_storage_for_month: number;
  /** Estimated sum of free and paid storage space (GB) used in billing cycle. */
  estimated_storage_for_month: number;
}

/**
 * Hosted compute network configuration
 * A hosted compute network configuration.
 */
export interface NetworkConfiguration {
  /**
   * The unique identifier of the network configuration.
   * @example "123ABC456DEF789"
   */
  id: string;
  /**
   * The name of the network configuration.
   * @example "my-network-configuration"
   */
  name: string;
  /** The hosted compute service the network configuration supports. */
  compute_service?: "none" | "actions" | "codespaces";
  /**
   * The unique identifier of each network settings in the configuration.
   * @example "123ABC456DEF789"
   */
  network_settings_ids?: string[];
  /**
   * The time at which the network configuration was created, in ISO 8601 format.
   * @format date-time
   * @example "2024-04-26T11:31:07Z"
   */
  created_on: string | null;
}

/**
 * Hosted compute network settings resource
 * A hosted compute network settings resource.
 */
export interface NetworkSettings {
  /**
   * The unique identifier of the network settings resource.
   * @example "220F78DACB92BBFBC5E6F22DE1CCF52309D"
   */
  id: string;
  /**
   * The identifier of the network configuration that is using this settings resource.
   * @example "934E208B3EE0BD60CF5F752C426BFB53562"
   */
  network_configuration_id?: string;
  /**
   * The name of the network settings resource.
   * @example "my-network-settings"
   */
  name: string;
  /**
   * The subnet this network settings resource is configured for.
   * @example "/subscriptions/14839728-3ad9-43ab-bd2b-fa6ad0f75e2a/resourceGroups/my-rg/providers/Microsoft.Network/virtualNetworks/my-vnet/subnets/my-subnet"
   */
  subnet_id: string;
  /**
   * The location of the subnet this network settings resource is configured for.
   * @example "eastus"
   */
  region: string;
}

/**
 * Team Organization
 * Team Organization
 */
export interface TeamOrganization {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
  /** @example "github" */
  name?: string;
  /** @example "GitHub" */
  company?: string;
  /**
   * @format uri
   * @example "https://github.com/blog"
   */
  blog?: string;
  /** @example "San Francisco" */
  location?: string;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email?: string;
  /** @example "github" */
  twitter_username?: string | null;
  /** @example true */
  is_verified?: boolean;
  /** @example true */
  has_organization_projects: boolean;
  /** @example true */
  has_repository_projects: boolean;
  /** @example 2 */
  public_repos: number;
  /** @example 1 */
  public_gists: number;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /** @example "Organization" */
  type: string;
  /** @example 100 */
  total_private_repos?: number;
  /** @example 100 */
  owned_private_repos?: number;
  /** @example 81 */
  private_gists?: number | null;
  /** @example 10000 */
  disk_usage?: number | null;
  /** @example 8 */
  collaborators?: number | null;
  /**
   * @format email
   * @example "org@example.com"
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /** @example true */
  members_can_create_repositories?: boolean | null;
  /** @example true */
  two_factor_requirement_enabled?: boolean | null;
  /** @example "all" */
  members_allowed_repository_creation_type?: string;
  /** @example true */
  members_can_create_public_repositories?: boolean;
  /** @example true */
  members_can_create_private_repositories?: boolean;
  /** @example true */
  members_can_create_internal_repositories?: boolean;
  /** @example true */
  members_can_create_pages?: boolean;
  /** @example true */
  members_can_create_public_pages?: boolean;
  /** @example true */
  members_can_create_private_pages?: boolean;
  /** @example false */
  members_can_fork_private_repositories?: boolean | null;
  /** @example false */
  web_commit_signoff_required?: boolean;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  archived_at: string | null;
}

/**
 * Full Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamFull {
  /**
   * Unique identifier of the team
   * @example 42
   */
  id: number;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * Name of the team
   * @example "Developers"
   */
  name: string;
  /** @example "justice-league" */
  slug: string;
  /** @example "A great team." */
  description: string | null;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: "closed" | "secret";
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: "notifications_enabled" | "notifications_disabled";
  /**
   * Permission that the team will have for its repositories
   * @example "push"
   */
  permission: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** Groups of organization members that gives permissions on specified repositories. */
  parent?: NullableTeamSimple;
  /** @example 3 */
  members_count: number;
  /** @example 10 */
  repos_count: number;
  /**
   * @format date-time
   * @example "2017-07-14T16:53:42Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2017-08-17T12:37:15Z"
   */
  updated_at: string;
  /** Team Organization */
  organization: TeamOrganization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
}

/**
 * Team Discussion
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamDiscussion {
  /** A GitHub user. */
  author: NullableSimpleUser;
  /**
   * The main text of the discussion.
   * @example "Please suggest improvements to our workflow in comments."
   */
  body: string;
  /** @example "<p>Hi! This is an area for us to collaborate as a team</p>" */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /** @example 0 */
  comments_count: number;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1/comments"
   */
  comments_url: string;
  /**
   * @format date-time
   * @example "2018-01-25T18:56:31Z"
   */
  created_at: string;
  /** @format date-time */
  last_edited_at: string | null;
  /**
   * @format uri
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1"
   */
  html_url: string;
  /** @example "MDE0OlRlYW1EaXNjdXNzaW9uMQ==" */
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   * @example 42
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   * @example true
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization owners.
   * @example true
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027"
   */
  team_url: string;
  /**
   * The title of the discussion.
   * @example "How can we improve our workflow?"
   */
  title: string;
  /**
   * @format date-time
   * @example "2018-01-25T18:56:31Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1"
   */
  url: string;
  reactions?: ReactionRollup;
}

/**
 * Team Discussion Comment
 * A reply to a discussion within a team.
 */
export interface TeamDiscussionComment {
  /** A GitHub user. */
  author: NullableSimpleUser;
  /**
   * The main text of the comment.
   * @example "I agree with this suggestion."
   */
  body: string;
  /** @example "<p>Do you like apples?</p>" */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /**
   * @format date-time
   * @example "2018-01-15T23:53:58Z"
   */
  created_at: string;
  /** @format date-time */
  last_edited_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1"
   */
  discussion_url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1"
   */
  html_url: string;
  /** @example "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=" */
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   * @example 42
   */
  number: number;
  /**
   * @format date-time
   * @example "2018-01-15T23:53:58Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1"
   */
  url: string;
  reactions?: ReactionRollup;
}

/**
 * Reaction
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  /** @example 1 */
  id: number;
  /** @example "MDg6UmVhY3Rpb24x" */
  node_id: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * The reaction to use
   * @example "heart"
   */
  content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /**
   * @format date-time
   * @example "2016-05-20T20:09:31Z"
   */
  created_at: string;
}

/**
 * Team Membership
 * Team Membership
 */
export interface TeamMembership {
  /** @format uri */
  url: string;
  /**
   * The role of the user in the team.
   * @default "member"
   * @example "member"
   */
  role: "member" | "maintainer";
  /** The state of the user's membership in the team. */
  state: "active" | "pending";
}

/**
 * Team Project
 * A team's access to a project.
 */
export interface TeamProject {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string | null;
  number: number;
  state: string;
  /** A GitHub user. */
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /** The organization permission for this project. Only present when owner is an organization. */
  organization_permission?: string;
  /** Whether the project is private or not. Only present when owner is an organization. */
  private?: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}

/**
 * Team Repository
 * A team's access to a repository.
 */
export interface TeamRepository {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** @example "admin" */
  role_name?: string;
  /** A GitHub user. */
  owner: NullableSimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /** @example 108 */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   * @default false
   * @example false
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   * @example false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
}

/**
 * Project Card
 * Project cards represent a scope of work.
 */
export interface ProjectCard {
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/cards/1478"
   */
  url: string;
  /**
   * The project card's ID
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDExOlByb2plY3RDYXJkMTQ3OA==" */
  node_id: string;
  /** @example "Add payload for delete Project column" */
  note: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2016-09-05T14:21:06Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:20:22Z"
   */
  updated_at: string;
  /**
   * Whether or not the card is archived
   * @example false
   */
  archived?: boolean;
  column_name?: string;
  project_id?: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367"
   */
  column_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/api-playground/projects-test/issues/3"
   */
  content_url?: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
}

/**
 * Project Column
 * Project columns contain cards of work.
 */
export interface ProjectColumn {
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367/cards"
   */
  cards_url: string;
  /**
   * The unique identifier of the project column
   * @example 42
   */
  id: number;
  /** @example "MDEzOlByb2plY3RDb2x1bW4zNjc=" */
  node_id: string;
  /**
   * Name of the project column
   * @example "Remaining tasks"
   */
  name: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:18:44Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:22:28Z"
   */
  updated_at: string;
}

/**
 * Project Collaborator Permission
 * Project Collaborator Permission
 */
export interface ProjectCollaboratorPermission {
  permission: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
}

/** Rate Limit */
export interface RateLimit {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
}

/**
 * Rate Limit Overview
 * Rate Limit Overview
 */
export interface RateLimitOverview {
  resources: {
    core: RateLimit;
    graphql?: RateLimit;
    search: RateLimit;
    code_search?: RateLimit;
    source_import?: RateLimit;
    integration_manifest?: RateLimit;
    code_scanning_upload?: RateLimit;
    actions_runner_registration?: RateLimit;
    scim?: RateLimit;
    dependency_snapshots?: RateLimit;
    dependency_sbom?: RateLimit;
    code_scanning_autofix?: RateLimit;
  };
  rate: RateLimit;
}

/**
 * Artifact
 * An artifact
 */
export interface Artifact {
  /** @example 5 */
  id: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /**
   * The name of the artifact.
   * @example "AdventureWorks.Framework"
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   * @example 12345
   */
  size_in_bytes: number;
  /** @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5" */
  url: string;
  /** @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip" */
  archive_download_url: string;
  /** Whether or not the artifact has expired. */
  expired: boolean;
  /** @format date-time */
  created_at: string | null;
  /** @format date-time */
  expires_at: string | null;
  /** @format date-time */
  updated_at: string | null;
  /**
   * The SHA256 digest of the artifact. This field will only be populated on artifacts uploaded with upload-artifact v4 or newer. For older versions, this field will be null.
   * @example "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c"
   */
  digest?: string | null;
  workflow_run?: {
    /** @example 10 */
    id?: number;
    /** @example 42 */
    repository_id?: number;
    /** @example 42 */
    head_repository_id?: number;
    /** @example "main" */
    head_branch?: string;
    /** @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d" */
    head_sha?: string;
  } | null;
}

/**
 * Repository actions caches
 * Repository actions caches
 */
export interface ActionsCacheList {
  /**
   * Total number of caches
   * @example 2
   */
  total_count: number;
  /** Array of caches */
  actions_caches: {
    /** @example 2 */
    id?: number;
    /** @example "refs/heads/main" */
    ref?: string;
    /** @example "Linux-node-958aff96db2d75d67787d1e634ae70b659de937b" */
    key?: string;
    /** @example "73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0" */
    version?: string;
    /**
     * @format date-time
     * @example "2019-01-24T22:45:36.000Z"
     */
    last_accessed_at?: string;
    /**
     * @format date-time
     * @example "2019-01-24T22:45:36.000Z"
     */
    created_at?: string;
    /** @example 1024 */
    size_in_bytes?: number;
  }[];
}

/**
 * Job
 * Information of a job execution in a workflow run
 */
export interface Job {
  /**
   * The id of the job.
   * @example 21
   */
  id: number;
  /**
   * The id of the associated workflow run.
   * @example 5
   */
  run_id: number;
  /** @example "https://api.github.com/repos/github/hello-world/actions/runs/5" */
  run_url: string;
  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  /**
   * The SHA of the commit that is being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://api.github.com/repos/github/hello-world/actions/jobs/21" */
  url: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string | null;
  /**
   * The phase of the lifecycle that the job is currently in.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
  /**
   * The outcome of the job.
   * @example "success"
   */
  conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
  /**
   * The time that the job created, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  created_at: string;
  /**
   * The time that the job started, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  started_at: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  completed_at: string | null;
  /**
   * The name of the job.
   * @example "test-coverage"
   */
  name: string;
  /** Steps in this job. */
  steps?: {
    /**
     * The phase of the lifecycle that the job is currently in.
     * @example "queued"
     */
    status: "queued" | "in_progress" | "completed";
    /**
     * The outcome of the job.
     * @example "success"
     */
    conclusion: string | null;
    /**
     * The name of the job.
     * @example "test-coverage"
     */
    name: string;
    /** @example 1 */
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     * @format date-time
     * @example "2019-08-08T08:00:00-07:00"
     */
    started_at?: string | null;
    /**
     * The time that the job finished, in ISO 8601 format.
     * @format date-time
     * @example "2019-08-08T08:00:00-07:00"
     */
    completed_at?: string | null;
  }[];
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  check_run_url: string;
  /**
   * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
   * @example ["self-hosted","foo","bar"]
   */
  labels: string[];
  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 1
   */
  runner_id: number | null;
  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example "my runner"
   */
  runner_name: string | null;
  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 2
   */
  runner_group_id: number | null;
  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example "my runner group"
   */
  runner_group_name: string | null;
  /**
   * The name of the workflow.
   * @example "Build"
   */
  workflow_name: string | null;
  /**
   * The name of the current branch.
   * @example "main"
   */
  head_branch: string | null;
}

/**
 * Actions OIDC subject customization for a repository
 * Actions OIDC subject customization for a repository
 */
export interface OidcCustomSubRepo {
  /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
  use_default: boolean;
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
  include_claim_keys?: string[];
}

/**
 * Actions Secret
 * Set secrets for GitHub Actions.
 */
export interface ActionsSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/** Actions Variable */
export interface ActionsVariable {
  /**
   * The name of the variable.
   * @example "USERNAME"
   */
  name: string;
  /**
   * The value of the variable.
   * @example "octocat"
   */
  value: string;
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  created_at: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   * @example "2019-01-24T22:45:36.000Z"
   */
  updated_at: string;
}

/** Whether GitHub Actions is enabled on the repository. */
export type ActionsEnabled = boolean;

export interface ActionsRepositoryPermissions {
  /** Whether GitHub Actions is enabled on the repository. */
  enabled: ActionsEnabled;
  /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
  allowed_actions?: AllowedActions;
  /** The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`. */
  selected_actions_url?: SelectedActionsUrl;
}

export interface ActionsWorkflowAccessToRepository {
  /**
   * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   *
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
   */
  access_level: "none" | "user" | "organization";
}

/**
 * Referenced workflow
 * A workflow referenced/reused by the initial caller workflow
 */
export interface ReferencedWorkflow {
  path: string;
  sha: string;
  ref?: string;
}

/** Pull Request Minimal */
export interface PullRequestMinimal {
  /** @format int64 */
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      /** @format int64 */
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      /** @format int64 */
      id: number;
      url: string;
      name: string;
    };
  };
}

/**
 * Simple Commit
 * A commit.
 */
export type NullableSimpleCommit = {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  id: string;
  /** SHA for the commit's tree */
  tree_id: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  /**
   * Timestamp of the commit
   * @format date-time
   * @example "2014-08-09T08:02:04+12:00"
   */
  timestamp: string;
  /** Information about the Git author */
  author: {
    /**
     * Name of the commit's author
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's author
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
  /** Information about the Git committer */
  committer: {
    /**
     * Name of the commit's committer
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's committer
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
};

/**
 * Workflow Run
 * An invocation of a workflow
 */
export interface WorkflowRun {
  /**
   * The ID of the workflow run.
   * @example 5
   */
  id: number;
  /**
   * The name of the workflow run.
   * @example "Build"
   */
  name?: string | null;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /**
   * The ID of the associated check suite.
   * @example 42
   */
  check_suite_id?: number;
  /**
   * The node ID of the associated check suite.
   * @example "MDEwOkNoZWNrU3VpdGU0Mg=="
   */
  check_suite_node_id?: string;
  /** @example "master" */
  head_branch: string | null;
  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * The full path of the workflow
   * @example "octocat/octo-repo/.github/workflows/ci.yml@main"
   */
  path: string;
  /**
   * The auto incrementing run number for the workflow run.
   * @example 106
   */
  run_number: number;
  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  referenced_workflows?: ReferencedWorkflow[] | null;
  /** @example "push" */
  event: string;
  /** @example "completed" */
  status: string | null;
  /** @example "neutral" */
  conclusion: string | null;
  /**
   * The ID of the parent workflow.
   * @example 5
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   */
  url: string;
  /** @example "https://github.com/github/hello-world/suites/4" */
  html_url: string;
  /** Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run. */
  pull_requests: PullRequestMinimal[] | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** A GitHub user. */
  actor?: SimpleUser;
  /** A GitHub user. */
  triggering_actor?: SimpleUser;
  /**
   * The start time of the latest run. Resets on re-run.
   * @format date-time
   */
  run_started_at?: string;
  /**
   * The URL to the jobs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   * @example "https://api.github.com/repos/github/hello-world/check-suites/12"
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
   */
  rerun_url: string;
  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"
   */
  previous_attempt_url?: string | null;
  /**
   * The URL to the workflow.
   * @example "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
   */
  workflow_url: string;
  /** A commit. */
  head_commit: NullableSimpleCommit;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** Minimal Repository */
  head_repository: MinimalRepository;
  /** @example 5 */
  head_repository_id?: number;
  /**
   * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
   * @example "Simple Workflow"
   */
  display_title: string;
}

/**
 * Environment Approval
 * An entry in the reviews log for environment deployments
 */
export interface EnvironmentApprovals {
  /** The list of environments that were approved or rejected */
  environments: {
    /**
     * The id of the environment.
     * @example 56780428
     */
    id?: number;
    /** @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg=" */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     */
    name?: string;
    /** @example "https://api.github.com/repos/github/hello-world/environments/staging" */
    url?: string;
    /** @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging" */
    html_url?: string;
    /**
     * The time that the environment was created, in ISO 8601 format.
     * @format date-time
     * @example "2020-11-23T22:00:40Z"
     */
    created_at?: string;
    /**
     * The time that the environment was last updated, in ISO 8601 format.
     * @format date-time
     * @example "2020-11-23T22:00:40Z"
     */
    updated_at?: string;
  }[];
  /**
   * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
   * @example "approved"
   */
  state: "approved" | "rejected" | "pending";
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * The comment submitted with the deployment review
   * @example "Ship it!"
   */
  comment: string;
}

export interface ReviewCustomGatesCommentRequired {
  /** The name of the environment to approve or reject. */
  environment_name: string;
  /** Comment associated with the pending deployment protection rule. **Required when state is not provided.** */
  comment: string;
}

export interface ReviewCustomGatesStateRequired {
  /** The name of the environment to approve or reject. */
  environment_name: string;
  /** Whether to approve or reject deployment to the specified environments. */
  state: "approved" | "rejected";
  /** Optional comment to include with the review. */
  comment?: string;
}

/**
 * The type of reviewer.
 * @example "User"
 */
export type DeploymentReviewerType = "User" | "Team";

/**
 * Pending Deployment
 * Details of a deployment that is waiting for protection rules to pass
 */
export interface PendingDeployment {
  environment: {
    /**
     * The id of the environment.
     * @format int64
     * @example 56780428
     */
    id?: number;
    /** @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg=" */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     */
    name?: string;
    /** @example "https://api.github.com/repos/github/hello-world/environments/staging" */
    url?: string;
    /** @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging" */
    html_url?: string;
  };
  /**
   * The set duration of the wait timer
   * @example 30
   */
  wait_timer: number;
  /**
   * The time that the wait timer began.
   * @format date-time
   * @example "2020-11-23T22:00:40Z"
   */
  wait_timer_started_at: string | null;
  /**
   * Whether the currently authenticated user can approve the deployment
   * @example true
   */
  current_user_can_approve: boolean;
  /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
  reviewers: {
    /** The type of reviewer. */
    type?: DeploymentReviewerType;
    reviewer?: SimpleUser | Team;
  }[];
}

/**
 * Deployment
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export interface Deployment {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOkRlcGxveW1lbnQx" */
  node_id: string;
  /** @example "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d" */
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   * @example "topic-branch"
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  payload: Record<string, any> | string;
  /** @example "staging" */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /** @example "Deploy request from hubot" */
  description: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * Workflow Run Usage
 * Workflow Run Usage
 */
export interface WorkflowRunUsage {
  billable: {
    UBUNTU?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    MACOS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    WINDOWS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
  };
  run_duration_ms?: number;
}

/**
 * Workflow
 * A GitHub Actions workflow
 */
export interface Workflow {
  /** @example 5 */
  id: number;
  /** @example "MDg6V29ya2Zsb3cxMg==" */
  node_id: string;
  /** @example "CI" */
  name: string;
  /** @example "ruby.yaml" */
  path: string;
  /** @example "active" */
  state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  updated_at: string;
  /** @example "https://api.github.com/repos/actions/setup-ruby/workflows/5" */
  url: string;
  /** @example "https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml" */
  html_url: string;
  /** @example "https://github.com/actions/setup-ruby/workflows/CI/badge.svg" */
  badge_url: string;
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  deleted_at?: string;
}

/**
 * Workflow Usage
 * Workflow Usage
 */
export interface WorkflowUsage {
  billable: {
    UBUNTU?: {
      total_ms?: number;
    };
    MACOS?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
}

/**
 * Activity
 * Activity
 */
export interface Activity {
  /** @example 1296269 */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The SHA of the commit before the activity.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  before: string;
  /**
   * The SHA of the commit after the activity.
   * @example "827efc6d56897b048c772eb4087f854f46256132"
   */
  after: string;
  /**
   * The full Git reference, formatted as `refs/heads/<branch name>`.
   * @example "refs/heads/main"
   */
  ref: string;
  /**
   * The time when the activity occurred.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  timestamp: string;
  /**
   * The type of the activity that was performed.
   * @example "force_push"
   */
  activity_type: "push" | "force_push" | "branch_deletion" | "branch_creation" | "pr_merge" | "merge_queue_merge";
  /** A GitHub user. */
  actor: NullableSimpleUser;
}

/**
 * Autolink reference
 * An autolink reference.
 */
export interface Autolink {
  /** @example 3 */
  id: number;
  /**
   * The prefix of a key that is linkified.
   * @example "TICKET-"
   */
  key_prefix: string;
  /**
   * A template for the target URL that is generated if a key was found.
   * @example "https://example.com/TICKET?query=<num>"
   */
  url_template: string;
  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
   * @example true
   */
  is_alphanumeric: boolean;
}

/**
 * Check Dependabot security updates
 * Check Dependabot security updates
 */
export interface CheckAutomatedSecurityFixes {
  /**
   * Whether Dependabot security updates are enabled for the repository.
   * @example true
   */
  enabled: boolean;
  /**
   * Whether Dependabot security updates are paused for the repository.
   * @example false
   */
  paused: boolean;
}

/**
 * Protected Branch Required Status Check
 * Protected Branch Required Status Check
 */
export interface ProtectedBranchRequiredStatusCheck {
  url?: string;
  enforcement_level?: string;
  contexts: string[];
  checks: {
    context: string;
    app_id: number | null;
  }[];
  contexts_url?: string;
  strict?: boolean;
}

/**
 * Protected Branch Admin Enforced
 * Protected Branch Admin Enforced
 */
export interface ProtectedBranchAdminEnforced {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
   */
  url: string;
  /** @example true */
  enabled: boolean;
}

/**
 * Protected Branch Pull Request Review
 * Protected Branch Pull Request Review
 */
export interface ProtectedBranchPullRequestReview {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
   */
  url?: string;
  dismissal_restrictions?: {
    /** The list of users with review dismissal access. */
    users?: SimpleUser[];
    /** The list of teams with review dismissal access. */
    teams?: Team[];
    /** The list of apps with review dismissal access. */
    apps?: Integration[];
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"" */
    url?: string;
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"" */
    users_url?: string;
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"" */
    teams_url?: string;
  };
  /** Allow specific users, teams, or apps to bypass pull request requirements. */
  bypass_pull_request_allowances?: {
    /** The list of users allowed to bypass pull request requirements. */
    users?: SimpleUser[];
    /** The list of teams allowed to bypass pull request requirements. */
    teams?: Team[];
    /** The list of apps allowed to bypass pull request requirements. */
    apps?: Integration[];
  };
  /** @example true */
  dismiss_stale_reviews: boolean;
  /** @example true */
  require_code_owner_reviews: boolean;
  /**
   * @min 0
   * @max 6
   * @example 2
   */
  required_approving_review_count?: number;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   * @default false
   * @example true
   */
  require_last_push_approval?: boolean;
}

/**
 * Branch Restriction Policy
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  /** @format uri */
  url: string;
  /** @format uri */
  users_url: string;
  /** @format uri */
  teams_url: string;
  /** @format uri */
  apps_url: string;
  users: {
    login?: string;
    /** @format int64 */
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
    user_view_type?: string;
  }[];
  teams: {
    id?: number;
    node_id?: string;
    url?: string;
    html_url?: string;
    name?: string;
    slug?: string;
    description?: string | null;
    privacy?: string;
    notification_setting?: string;
    permission?: string;
    members_url?: string;
    repositories_url?: string;
    parent?: string | null;
  }[];
  apps: {
    id?: number;
    slug?: string;
    node_id?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      url?: string;
      repos_url?: string;
      events_url?: string;
      hooks_url?: string;
      issues_url?: string;
      members_url?: string;
      public_members_url?: string;
      avatar_url?: string;
      description?: string;
      /** @example """" */
      gravatar_id?: string;
      /** @example ""https://github.com/testorg-ea8ec76d71c3af4b"" */
      html_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"" */
      followers_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"" */
      following_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"" */
      gists_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"" */
      starred_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"" */
      subscriptions_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"" */
      organizations_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"" */
      received_events_url?: string;
      /** @example ""Organization"" */
      type?: string;
      /** @example false */
      site_admin?: boolean;
      /** @example "public" */
      user_view_type?: string;
    };
    name?: string;
    client_id?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      metadata?: string;
      contents?: string;
      issues?: string;
      single_file?: string;
    };
    events?: string[];
  }[];
}

/**
 * Branch Protection
 * Branch Protection
 */
export interface BranchProtection {
  url?: string;
  enabled?: boolean;
  /** Protected Branch Required Status Check */
  required_status_checks?: ProtectedBranchRequiredStatusCheck;
  /** Protected Branch Admin Enforced */
  enforce_admins?: ProtectedBranchAdminEnforced;
  /** Protected Branch Pull Request Review */
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  /** Branch Restriction Policy */
  restrictions?: BranchRestrictionPolicy;
  required_linear_history?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  allow_deletions?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  /** @example ""branch/with/protection"" */
  name?: string;
  /** @example ""https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"" */
  protection_url?: string;
  required_signatures?: {
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
    /** @example true */
    enabled: boolean;
  };
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lock_branch?: {
    /** @default false */
    enabled?: boolean;
  };
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  allow_fork_syncing?: {
    /** @default false */
    enabled?: boolean;
  };
}

/**
 * Short Branch
 * Short Branch
 */
export interface ShortBranch {
  name: string;
  commit: {
    sha: string;
    /** @format uri */
    url: string;
  };
  protected: boolean;
  /** Branch Protection */
  protection?: BranchProtection;
  /** @format uri */
  protection_url?: string;
}

/**
 * Git User
 * Metaproperties for Git author/committer information.
 */
export type NullableGitUser = {
  /** @example ""Chris Wanstrath"" */
  name?: string;
  /** @example ""chris@ozmm.org"" */
  email?: string;
  /** @example ""2007-10-29T02:42:39.000-07:00"" */
  date?: string;
} | null;

/** Verification */
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string | null;
  signature: string | null;
  verified_at: string | null;
}

/**
 * Diff Entry
 * Diff Entry
 */
export interface DiffEntry {
  /** @example "bbcd538c8e72b8c175046e27cc8f907076331401" */
  sha: string;
  /** @example "file1.txt" */
  filename: string;
  /** @example "added" */
  status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
  /** @example 103 */
  additions: number;
  /** @example 21 */
  deletions: number;
  /** @example 124 */
  changes: number;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  blob_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  raw_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  contents_url: string;
  /** @example "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test" */
  patch?: string;
  /** @example "file.txt" */
  previous_filename?: string;
}

/**
 * Commit
 * Commit
 */
export interface Commit {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  url: string;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  sha: string;
  /** @example "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
   */
  comments_url: string;
  commit: {
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
     */
    url: string;
    /** Metaproperties for Git author/committer information. */
    author: NullableGitUser;
    /** Metaproperties for Git author/committer information. */
    committer: NullableGitUser;
    /** @example "Fix all the bugs" */
    message: string;
    /** @example 0 */
    comment_count: number;
    tree: {
      /** @example "827efc6d56897b048c772eb4087f854f46256132" */
      sha: string;
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
       */
      url: string;
    };
    verification?: Verification;
  };
  author: SimpleUser | EmptyObject | null;
  committer: SimpleUser | EmptyObject | null;
  parents: {
    /** @example "7638417db6d59f3c431d3e1f261cc637155684cd" */
    sha: string;
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    url: string;
    /**
     * @format uri
     * @example "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    html_url?: string;
  }[];
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  files?: DiffEntry[];
}

/**
 * Branch With Protection
 * Branch With Protection
 */
export interface BranchWithProtection {
  name: string;
  /** Commit */
  commit: Commit;
  _links: {
    html: string;
    /** @format uri */
    self: string;
  };
  protected: boolean;
  /** Branch Protection */
  protection: BranchProtection;
  /** @format uri */
  protection_url: string;
  /** @example ""mas*"" */
  pattern?: string;
  /** @example 1 */
  required_approving_review_count?: number;
}

/**
 * Status Check Policy
 * Status Check Policy
 */
export interface StatusCheckPolicy {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
   */
  url: string;
  /** @example true */
  strict: boolean;
  /** @example ["continuous-integration/travis-ci"] */
  contexts: string[];
  checks: {
    /** @example "continuous-integration/travis-ci" */
    context: string;
    app_id: number | null;
  }[];
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
   */
  contexts_url: string;
}

/**
 * Protected Branch
 * Branch protections protect branches
 */
export interface ProtectedBranch {
  /** @format uri */
  url: string;
  /** Status Check Policy */
  required_status_checks?: StatusCheckPolicy;
  required_pull_request_reviews?: {
    /** @format uri */
    url: string;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it.
     * @default false
     */
    require_last_push_approval?: boolean;
    dismissal_restrictions?: {
      /** @format uri */
      url: string;
      /** @format uri */
      users_url: string;
      /** @format uri */
      teams_url: string;
      users: SimpleUser[];
      teams: Team[];
      apps?: Integration[];
    };
    bypass_pull_request_allowances?: {
      users: SimpleUser[];
      teams: Team[];
      apps?: Integration[];
    };
  };
  required_signatures?: {
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
    /** @example true */
    enabled: boolean;
  };
  enforce_admins?: {
    /** @format uri */
    url: string;
    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  /** Branch Restriction Policy */
  restrictions?: BranchRestrictionPolicy;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lock_branch?: {
    /** @default false */
    enabled?: boolean;
  };
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  allow_fork_syncing?: {
    /** @default false */
    enabled?: boolean;
  };
}

/**
 * Deployment
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export interface DeploymentSimple {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   */
  id: number;
  /** @example "MDEwOkRlcGxveW1lbnQx" */
  node_id: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  /** @example "staging" */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /** @example "Deploy request from hubot" */
  description: string | null;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * CheckRun
 * A check performed on the code of a given code change
 */
export interface CheckRun {
  /**
   * The id of the check.
   * @format int64
   * @example 21
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  /** @example "42" */
  external_id: string | null;
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  url: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string | null;
  /** @example "https://example.com" */
  details_url: string | null;
  /**
   * The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
  /** @example "neutral" */
  conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: string | null;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: string | null;
  output: {
    title: string | null;
    summary: string | null;
    text: string | null;
    annotations_count: number;
    /** @format uri */
    annotations_url: string;
  };
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  check_suite: {
    id: number;
  } | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app: NullableIntegration;
  /** Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check. */
  pull_requests: PullRequestMinimal[];
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
  deployment?: DeploymentSimple;
}

/**
 * Check Annotation
 * Check Annotation
 */
export interface CheckAnnotation {
  /** @example "README.md" */
  path: string;
  /** @example 2 */
  start_line: number;
  /** @example 2 */
  end_line: number;
  /** @example 5 */
  start_column: number | null;
  /** @example 10 */
  end_column: number | null;
  /** @example "warning" */
  annotation_level: string | null;
  /** @example "Spell Checker" */
  title: string | null;
  /** @example "Check your spelling for 'banaas'." */
  message: string | null;
  /** @example "Do you mean 'bananas' or 'banana'?" */
  raw_details: string | null;
  blob_href: string;
}

/**
 * Simple Commit
 * A commit.
 */
export interface SimpleCommit {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  id: string;
  /** SHA for the commit's tree */
  tree_id: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  /**
   * Timestamp of the commit
   * @format date-time
   * @example "2014-08-09T08:02:04+12:00"
   */
  timestamp: string;
  /** Information about the Git author */
  author: {
    /**
     * Name of the commit's author
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's author
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
  /** Information about the Git committer */
  committer: {
    /**
     * Name of the commit's committer
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's committer
     * @format email
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
}

/**
 * CheckSuite
 * A suite of checks performed on the code of a given code change
 */
export interface CheckSuite {
  /**
   * @format int64
   * @example 5
   */
  id: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /** @example "master" */
  head_branch: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
   * @example "completed"
   */
  status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending" | null;
  /** @example "neutral" */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "startup_failure"
    | "stale"
    | null;
  /** @example "https://api.github.com/repos/github/hello-world/check-suites/5" */
  url: string | null;
  /** @example "146e867f55c26428e5f9fade55a9bbf5e95a7912" */
  before: string | null;
  /** @example "d6fde92930d4715a2b49857d24b940956b26d2d3" */
  after: string | null;
  pull_requests: PullRequestMinimal[] | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app: NullableIntegration;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** @format date-time */
  created_at: string | null;
  /** @format date-time */
  updated_at: string | null;
  /** A commit. */
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
}

/**
 * Check Suite Preference
 * Check suite configuration preferences for a repository.
 */
export interface CheckSuitePreference {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  /** Minimal Repository */
  repository: MinimalRepository;
}

export interface CodeScanningAlertItems {
  /** The security alert number. */
  number: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: AlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The REST API URL for fetching the list of instances for an alert. */
  instances_url: AlertInstancesUrl;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at?: AlertFixedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The dismissal comment associated with the dismissal of the alert. */
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  /** A GitHub user. */
  dismissal_approved_by?: NullableSimpleUser;
}

export interface CodeScanningAlertRule {
  /** A unique identifier for the rule used to detect the alert. */
  id?: string | null;
  /** The name of the rule used to detect the alert. */
  name?: string;
  /** The severity of the alert. */
  severity?: "none" | "note" | "warning" | "error" | null;
  /** The security severity of the alert. */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;
  /** A short description of the rule used to detect the alert. */
  description?: string;
  /** A description of the rule used to detect the alert. */
  full_description?: string;
  /** A set of tags applicable for the rule. */
  tags?: string[] | null;
  /** Detailed documentation for the rule as GitHub Flavored Markdown. */
  help?: string | null;
  /** A link to the documentation for the rule used to detect the alert. */
  help_uri?: string | null;
}

export interface CodeScanningAlert {
  /** The security alert number. */
  number: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: AlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The REST API URL for fetching the list of instances for an alert. */
  instances_url: AlertInstancesUrl;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at?: AlertFixedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The dismissal comment associated with the dismissal of the alert. */
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  /** A GitHub user. */
  dismissal_approved_by?: NullableSimpleUser;
}

/** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
export type CodeScanningAlertSetState = "open" | "dismissed";

/** If `true`, attempt to create an alert dismissal request. */
export type CodeScanningAlertCreateRequest = boolean;

/** The status of an autofix. */
export type CodeScanningAutofixStatus = "pending" | "error" | "success" | "outdated";

/** The description of an autofix. */
export type CodeScanningAutofixDescription = string | null;

/**
 * The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type CodeScanningAutofixStartedAt = string;

export interface CodeScanningAutofix {
  /** The status of an autofix. */
  status: CodeScanningAutofixStatus;
  /** The description of an autofix. */
  description: CodeScanningAutofixDescription;
  /** The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  started_at: CodeScanningAutofixStartedAt;
}

/** Commit an autofix for a code scanning alert */
export type CodeScanningAutofixCommits = {
  /** The Git reference of target branch for the commit. Branch needs to already exist.  For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
  target_ref?: string;
  /** Commit message to be used. */
  message?: string;
} | null;

export interface CodeScanningAutofixCommitsResponse {
  /** The Git reference of target branch for the commit. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
  target_ref?: string;
  /** SHA of commit with autofix. */
  sha?: string;
}

/**
 * An identifier for the upload.
 * @example "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
 */
export type CodeScanningAnalysisSarifId = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 * @minLength 40
 * @maxLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
export type CodeScanningAnalysisCommitSha = string;

/** Identifies the variable values associated with the environment in which this analysis was performed. */
export type CodeScanningAnalysisEnvironment = string;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
export type CodeScanningAnalysisCreatedAt = string;

/**
 * The REST API URL of the analysis resource.
 * @format uri
 */
export type CodeScanningAnalysisUrl = string;

export interface CodeScanningAnalysis {
  /**
   * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
   * `refs/heads/<branch name>` or simply `<branch name>`.
   */
  ref: CodeScanningRef;
  /** The SHA of the commit to which the analysis you are uploading relates. */
  commit_sha: CodeScanningAnalysisCommitSha;
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  analysis_key: CodeScanningAnalysisAnalysisKey;
  /** Identifies the variable values associated with the environment in which this analysis was performed. */
  environment: CodeScanningAnalysisEnvironment;
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
  category?: CodeScanningAnalysisCategory;
  /** @example "error reading field xyz" */
  error: string;
  /** The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: CodeScanningAnalysisCreatedAt;
  /** The total number of results in the analysis. */
  results_count: number;
  /** The total number of rules used in the analysis. */
  rules_count: number;
  /** Unique identifier for this analysis. */
  id: number;
  /** The REST API URL of the analysis resource. */
  url: CodeScanningAnalysisUrl;
  /** An identifier for the upload. */
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  deletable: boolean;
  /**
   * Warning generated when processing the analysis
   * @example "123 results were ignored"
   */
  warning: string;
}

/**
 * Analysis deletion
 * Successful deletion of a code scanning analysis
 */
export interface CodeScanningAnalysisDeletion {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   * @format uri
   */
  next_analysis_url: string | null;
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   * @format uri
   */
  confirm_delete_url: string | null;
}

/**
 * CodeQL Database
 * A CodeQL database.
 */
export interface CodeScanningCodeqlDatabase {
  /** The ID of the CodeQL database. */
  id: number;
  /** The name of the CodeQL database. */
  name: string;
  /** The language of the CodeQL database. */
  language: string;
  /** A GitHub user. */
  uploader: SimpleUser;
  /** The MIME type of the CodeQL database file. */
  content_type: string;
  /** The size of the CodeQL database file in bytes. */
  size: number;
  /**
   * The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /**
   * The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
   * @format uri
   */
  url: string;
  /** The commit SHA of the repository at the time the CodeQL database was created. */
  commit_oid?: string | null;
}

/** The language targeted by the CodeQL query */
export type CodeScanningVariantAnalysisLanguage =
  | "cpp"
  | "csharp"
  | "go"
  | "java"
  | "javascript"
  | "python"
  | "ruby"
  | "rust"
  | "swift";

/**
 * Repository Identifier
 * Repository Identifier
 */
export interface CodeScanningVariantAnalysisRepository {
  /**
   * A unique identifier of the repository.
   * @example 1296269
   */
  id: number;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /** Whether the repository is private. */
  private: boolean;
  /** @example 80 */
  stargazers_count: number;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
}

/** The new status of the CodeQL variant analysis repository task. */
export type CodeScanningVariantAnalysisStatus =
  | "pending"
  | "in_progress"
  | "succeeded"
  | "failed"
  | "canceled"
  | "timed_out";

export interface CodeScanningVariantAnalysisSkippedRepoGroup {
  /**
   * The total number of repositories that were skipped for this reason.
   * @example 2
   */
  repository_count: number;
  /** A list of repositories that were skipped. This list may not include all repositories that were skipped. This is only available when the repository was found and the user has access to it. */
  repositories: CodeScanningVariantAnalysisRepository[];
}

/**
 * Variant Analysis
 * A run of a CodeQL query against one or more repositories.
 */
export interface CodeScanningVariantAnalysis {
  /** The ID of the variant analysis. */
  id: number;
  /** A GitHub repository. */
  controller_repo: SimpleRepository;
  /** A GitHub user. */
  actor: SimpleUser;
  /** The language targeted by the CodeQL query */
  query_language: CodeScanningVariantAnalysisLanguage;
  /** The download url for the query pack. */
  query_pack_url: string;
  /**
   * The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at?: string;
  /**
   * The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at?: string;
  /**
   * The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
   * @format date-time
   */
  completed_at?: string | null;
  status: "in_progress" | "succeeded" | "failed" | "cancelled";
  /** The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started. */
  actions_workflow_run_id?: number;
  /** The reason for a failure of the variant analysis. This is only available if the variant analysis has failed. */
  failure_reason?: "no_repos_queried" | "actions_workflow_run_failed" | "internal_error";
  scanned_repositories?: {
    /** Repository Identifier */
    repository: CodeScanningVariantAnalysisRepository;
    /** The new status of the CodeQL variant analysis repository task. */
    analysis_status: CodeScanningVariantAnalysisStatus;
    /** The number of results in the case of a successful analysis. This is only available for successful analyses. */
    result_count?: number;
    /** The size of the artifact. This is only available for successful analyses. */
    artifact_size_in_bytes?: number;
    /** The reason of the failure of this repo task. This is only available if the repository task has failed. */
    failure_message?: string;
  }[];
  /** Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis. */
  skipped_repositories?: {
    access_mismatch_repos: CodeScanningVariantAnalysisSkippedRepoGroup;
    not_found_repos: {
      /**
       * The total number of repositories that were skipped for this reason.
       * @example 2
       */
      repository_count: number;
      /** A list of full repository names that were skipped. This list may not include all repositories that were skipped. */
      repository_full_names: string[];
    };
    no_codeql_db_repos: CodeScanningVariantAnalysisSkippedRepoGroup;
    over_limit_repos: CodeScanningVariantAnalysisSkippedRepoGroup;
  };
}

export interface CodeScanningVariantAnalysisRepoTask {
  /** A GitHub repository. */
  repository: SimpleRepository;
  /** The new status of the CodeQL variant analysis repository task. */
  analysis_status: CodeScanningVariantAnalysisStatus;
  /** The size of the artifact. This is only available for successful analyses. */
  artifact_size_in_bytes?: number;
  /** The number of results in the case of a successful analysis. This is only available for successful analyses. */
  result_count?: number;
  /** The reason of the failure of this repo task. This is only available if the repository task has failed. */
  failure_message?: string;
  /** The SHA of the commit the CodeQL database was built against. This is only available for successful analyses. */
  database_commit_sha?: string;
  /** The source location prefix to use. This is only available for successful analyses. */
  source_location_prefix?: string;
  /** The URL of the artifact. This is only available for successful analyses. */
  artifact_url?: string;
}

/** Configuration for code scanning default setup. */
export interface CodeScanningDefaultSetup {
  /** Code scanning default setup has been configured or not. */
  state?: "configured" | "not-configured";
  /** Languages to be analyzed. */
  languages?: (
    | "actions"
    | "c-cpp"
    | "csharp"
    | "go"
    | "java-kotlin"
    | "javascript-typescript"
    | "javascript"
    | "python"
    | "ruby"
    | "typescript"
    | "swift"
  )[];
  /** Runner type to be used. */
  runner_type?: "standard" | "labeled" | null;
  /**
   * Runner label to be used if the runner type is labeled.
   * @example "code-scanning"
   */
  runner_label?: string | null;
  /** CodeQL query suite to be used. */
  query_suite?: "default" | "extended";
  /** Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input. */
  threat_model?: "remote" | "remote_and_local";
  /**
   * Timestamp of latest configuration update.
   * @format date-time
   * @example "2023-12-06T14:20:20.000Z"
   */
  updated_at?: string | null;
  /** The frequency of the periodic analysis. */
  schedule?: "weekly" | null;
}

/** Configuration for code scanning default setup. */
export interface CodeScanningDefaultSetupUpdate {
  /** The desired state of code scanning default setup. */
  state?: "configured" | "not-configured";
  /** Runner type to be used. */
  runner_type?: "standard" | "labeled";
  /**
   * Runner label to be used if the runner type is labeled.
   * @example "code-scanning"
   */
  runner_label?: string | null;
  /** CodeQL query suite to be used. */
  query_suite?: "default" | "extended";
  /** Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input. */
  threat_model?: "remote" | "remote_and_local";
  /** CodeQL languages to be analyzed. */
  languages?: (
    | "actions"
    | "c-cpp"
    | "csharp"
    | "go"
    | "java-kotlin"
    | "javascript-typescript"
    | "python"
    | "ruby"
    | "swift"
  )[];
}

/**
 * You can use `run_url` to track the status of the run. This includes a property status and conclusion.
 * You should not rely on this always being an actions workflow run object.
 */
export interface CodeScanningDefaultSetupUpdateResponse {
  /** ID of the corresponding run. */
  run_id?: number;
  /** URL of the corresponding run. */
  run_url?: string;
}

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 * @pattern ^refs/(heads|tags|pull)/.*$
 * @example "refs/heads/main"
 */
export type CodeScanningRefFull = string;

/** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */
export type CodeScanningAnalysisSarifFile = string;

export interface CodeScanningSarifsReceipt {
  /** An identifier for the upload. */
  id?: CodeScanningAnalysisSarifId;
  /**
   * The REST API URL for checking the status of the upload.
   * @format uri
   */
  url?: string;
}

export interface CodeScanningSarifsStatus {
  /** `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed. */
  processing_status?: "pending" | "complete" | "failed";
  /**
   * The REST API URL for getting the analyses associated with the upload.
   * @format uri
   */
  analyses_url?: string | null;
  /** Any errors that ocurred during processing of the delivery. */
  errors?: string[] | null;
}

/** Code security configuration associated with a repository and attachment status */
export interface CodeSecurityConfigurationForRepository {
  /** The attachment status of the code security configuration on the repository. */
  status?:
    | "attached"
    | "attaching"
    | "detached"
    | "removed"
    | "enforced"
    | "failed"
    | "updating"
    | "removed_by_enterprise";
  /** A code security configuration */
  configuration?: CodeSecurityConfiguration;
}

/**
 * CODEOWNERS errors
 * A list of errors found in a repo's CODEOWNERS file
 */
export interface CodeownersErrors {
  errors: {
    /**
     * The line number where this errors occurs.
     * @example 7
     */
    line: number;
    /**
     * The column number where this errors occurs.
     * @example 3
     */
    column: number;
    /**
     * The contents of the line where the error occurs.
     * @example "* user"
     */
    source?: string;
    /**
     * The type of error.
     * @example "Invalid owner"
     */
    kind: string;
    /**
     * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
     * @example "The pattern `/` will never match anything, did you mean `*` instead?"
     */
    suggestion?: string | null;
    /**
     * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     * @example "Invalid owner on line 7:
     *
     *   * user
     *     ^"
     */
    message: string;
    /**
     * The path of the file where the error occured.
     * @example ".github/CODEOWNERS"
     */
    path: string;
  }[];
}

/**
 * Codespace machine
 * A description of the machine powering a codespace.
 */
export interface CodespaceMachine {
  /**
   * The name of the machine.
   * @example "standardLinux"
   */
  name: string;
  /**
   * The display name of the machine includes cores, memory, and storage.
   * @example "4 cores, 16 GB RAM, 64 GB storage"
   */
  display_name: string;
  /**
   * The operating system of the machine.
   * @example "linux"
   */
  operating_system: string;
  /**
   * How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;
  /**
   * How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;
  /**
   * How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example "ready"
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
}

/**
 * Codespaces Permissions Check
 * Permission check result for a given devcontainer config.
 */
export interface CodespacesPermissionsCheckForDevcontainer {
  /**
   * Whether the user has accepted the permissions defined by the devcontainer config
   * @example true
   */
  accepted: boolean;
}

/**
 * Codespaces Secret
 * Set repository secrets for GitHub Codespaces.
 */
export interface RepoCodespacesSecret {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Collaborator
 * Collaborator
 */
export interface Collaborator {
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };
  /** @example "admin" */
  role_name: string;
  /** @example "public" */
  user_view_type?: string;
}

/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
export interface RepositoryInvitation {
  /**
   * Unique identifier of the repository invitation.
   * @format int64
   * @example 42
   */
  id: number;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** A GitHub user. */
  invitee: NullableSimpleUser;
  /** A GitHub user. */
  inviter: NullableSimpleUser;
  /**
   * The permission associated with the invitation.
   * @example "read"
   */
  permissions: "read" | "write" | "admin" | "triage" | "maintain";
  /**
   * @format date-time
   * @example "2016-06-13T14:52:50-05:00"
   */
  created_at: string;
  /** Whether or not the invitation has expired */
  expired?: boolean;
  /**
   * URL for the repository invitation
   * @example "https://api.github.com/user/repository-invitations/1"
   */
  url: string;
  /** @example "https://github.com/octocat/Hello-World/invitations" */
  html_url: string;
  node_id: string;
}

/**
 * Collaborator
 * Collaborator
 */
export type NullableCollaborator = {
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };
  /** @example "admin" */
  role_name: string;
  /** @example "public" */
  user_view_type?: string;
};

/**
 * Repository Collaborator Permission
 * Repository Collaborator Permission
 */
export interface RepositoryCollaboratorPermission {
  permission: string;
  /** @example "admin" */
  role_name: string;
  /** Collaborator */
  user: NullableCollaborator;
}

/**
 * Commit Comment
 * Commit Comment
 */
export interface CommitComment {
  /** @format uri */
  html_url: string;
  /** @format uri */
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string | null;
  position: number | null;
  line: number | null;
  commit_id: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
}

/**
 * Branch Short
 * Branch Short
 */
export interface BranchShort {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
}

/**
 * Link
 * Hypermedia Link
 */
export interface Link {
  href: string;
}

/**
 * Auto merge
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  /** A GitHub user. */
  enabled_by: SimpleUser;
  /** The merge method to use. */
  merge_method: "merge" | "squash" | "rebase";
  /** Title for the merge commit message. */
  commit_title: string;
  /** Commit message for the merge commit. */
  commit_message: string;
} | null;

/**
 * Pull Request Simple
 * Pull Request Simple
 */
export interface PullRequestSimple {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDExOlB1bGxSZXF1ZXN0MQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /** @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}" */
  review_comment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /** @example 1347 */
  number: number;
  /** @example "open" */
  state: string;
  /** @example true */
  locked: boolean;
  /** @example "new-feature" */
  title: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @example "Please pull these awesome changes" */
  body: string | null;
  labels: {
    /** @format int64 */
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  /** @example "too heated" */
  active_lock_reason?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: string | null;
  /** @example "e5bd3914e2e596debea16f433f57875b5b90bcd6" */
  merge_commit_sha: string | null;
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: Team[] | null;
  head: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: NullableSimpleUser;
  };
  base: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: NullableSimpleUser;
  };
  _links: {
    /** Hypermedia Link */
    comments: Link;
    /** Hypermedia Link */
    commits: Link;
    /** Hypermedia Link */
    statuses: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    issue: Link;
    /** Hypermedia Link */
    review_comments: Link;
    /** Hypermedia Link */
    review_comment: Link;
    /** Hypermedia Link */
    self: Link;
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** The status of auto merging a pull request. */
  auto_merge: AutoMerge;
  /**
   * Indicates whether or not the pull request is a draft.
   * @example false
   */
  draft?: boolean;
}

/** Simple Commit Status */
export interface SimpleCommitStatus {
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  context: string;
  /** @format uri */
  target_url: string | null;
  required?: boolean | null;
  /** @format uri */
  avatar_url: string | null;
  /** @format uri */
  url: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Combined Commit Status
 * Combined Commit Status
 */
export interface CombinedCommitStatus {
  state: string;
  statuses: SimpleCommitStatus[];
  sha: string;
  total_count: number;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** @format uri */
  commit_url: string;
  /** @format uri */
  url: string;
}

/**
 * Status
 * The status of a commit.
 */
export interface Status {
  url: string;
  avatar_url: string | null;
  id: number;
  node_id: string;
  state: string;
  description: string | null;
  target_url: string | null;
  context: string;
  created_at: string;
  updated_at: string;
  /** A GitHub user. */
  creator: NullableSimpleUser;
}

/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
export type NullableCodeOfConductSimple = {
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   */
  url: string;
  /** @example "citizen_code_of_conduct" */
  key: string;
  /** @example "Citizen Code of Conduct" */
  name: string;
  /**
   * @format uri
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   */
  html_url: string | null;
};

/** Community Health File */
export type NullableCommunityHealthFile = {
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
} | null;

/**
 * Community Profile
 * Community Profile
 */
export interface CommunityProfile {
  /** @example 100 */
  health_percentage: number;
  /** @example "My first repository on GitHub!" */
  description: string | null;
  /** @example "example.com" */
  documentation: string | null;
  files: {
    /** Code of Conduct Simple */
    code_of_conduct: NullableCodeOfConductSimple;
    code_of_conduct_file: NullableCommunityHealthFile;
    /** License Simple */
    license: NullableLicenseSimple;
    contributing: NullableCommunityHealthFile;
    readme: NullableCommunityHealthFile;
    issue_template: NullableCommunityHealthFile;
    pull_request_template: NullableCommunityHealthFile;
  };
  /**
   * @format date-time
   * @example "2017-02-28T19:09:29Z"
   */
  updated_at: string | null;
  /** @example true */
  content_reports_enabled?: boolean;
}

/**
 * Commit Comparison
 * Commit Comparison
 */
export interface CommitComparison {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/master...topic"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17"
   */
  permalink_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.diff"
   */
  diff_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.patch"
   */
  patch_url: string;
  /** Commit */
  base_commit: Commit;
  /** Commit */
  merge_base_commit: Commit;
  /** @example "ahead" */
  status: "diverged" | "ahead" | "behind" | "identical";
  /** @example 4 */
  ahead_by: number;
  /** @example 5 */
  behind_by: number;
  /** @example 6 */
  total_commits: number;
  commits: Commit[];
  files?: DiffEntry[];
}

/**
 * Content Tree
 * Content Tree
 */
export interface ContentTree {
  type: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  content?: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  entries?: {
    type: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    /** @format uri */
    url: string;
    /** @format uri */
    git_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    download_url: string | null;
    _links: {
      /** @format uri */
      git: string | null;
      /** @format uri */
      html: string | null;
      /** @format uri */
      self: string;
    };
  }[];
  encoding?: string;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}

/**
 * Content Directory
 * A list of directory items
 */
export type ContentDirectory = {
  type: "dir" | "file" | "submodule" | "symlink";
  size: number;
  name: string;
  path: string;
  content?: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}[];

/**
 * Content File
 * Content File
 */
export interface ContentFile {
  type: "file";
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** @example ""actual/actual.md"" */
  target?: string;
  /** @example ""git://example.com/defunkt/dotjs.git"" */
  submodule_git_url?: string;
}

/**
 * Symlink Content
 * An object describing a symlink
 */
export interface ContentSymlink {
  type: "symlink";
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}

/**
 * Submodule Content
 * An object describing a submodule
 */
export interface ContentSubmodule {
  type: "submodule";
  /** @format uri */
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  download_url: string | null;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
}

/**
 * File Commit
 * File Commit
 */
export interface FileCommit {
  content: {
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    url?: string;
    html_url?: string;
    git_url?: string;
    download_url?: string;
    type?: string;
    _links?: {
      self?: string;
      git?: string;
      html?: string;
    };
  } | null;
  commit: {
    sha?: string;
    node_id?: string;
    url?: string;
    html_url?: string;
    author?: {
      date?: string;
      name?: string;
      email?: string;
    };
    committer?: {
      date?: string;
      name?: string;
      email?: string;
    };
    message?: string;
    tree?: {
      url?: string;
      sha?: string;
    };
    parents?: {
      url?: string;
      html_url?: string;
      sha?: string;
    }[];
    verification?: {
      verified?: boolean;
      reason?: string;
      signature?: string | null;
      payload?: string | null;
      verified_at?: string | null;
    };
  };
}

/** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
export type SecretScanningPushProtectionBypassPlaceholderId = string;

/** Repository rule violation was detected */
export interface RepositoryRuleViolationError {
  message?: string;
  documentation_url?: string;
  status?: string;
  metadata?: {
    secret_scanning?: {
      bypass_placeholders?: {
        /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
        placeholder_id?: SecretScanningPushProtectionBypassPlaceholderId;
        token_type?: string;
      }[];
    };
  };
}

/**
 * Contributor
 * Contributor
 */
export interface Contributor {
  login?: string;
  id?: number;
  node_id?: string;
  /** @format uri */
  avatar_url?: string;
  gravatar_id?: string | null;
  /** @format uri */
  url?: string;
  /** @format uri */
  html_url?: string;
  /** @format uri */
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  repos_url?: string;
  events_url?: string;
  /** @format uri */
  received_events_url?: string;
  type: string;
  site_admin?: boolean;
  contributions: number;
  email?: string;
  name?: string;
  user_view_type?: string;
}

/** A Dependabot alert. */
export interface DependabotAlert {
  /** The security alert number. */
  number: AlertNumber;
  /** The state of the Dependabot alert. */
  state: "auto_dismissed" | "dismissed" | "fixed" | "open";
  /** Details for the vulnerable dependency. */
  dependency: {
    /** Details for the vulnerable package. */
    package?: DependabotAlertPackage;
    /** The full path to the dependency manifest file, relative to the root of the repository. */
    manifest_path?: string;
    /** The execution scope of the vulnerable dependency. */
    scope?: "development" | "runtime" | null;
    /**
     * The vulnerable dependency's relationship to your project.
     *
     * > [!NOTE]
     * > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
     */
    relationship?: "unknown" | "direct" | "transitive" | null;
  };
  /** Details for the GitHub Security Advisory. */
  security_advisory: DependabotAlertSecurityAdvisory;
  /** Details pertaining to one vulnerable version range for the advisory. */
  security_vulnerability: DependabotAlertSecurityVulnerability;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at: AlertUpdatedAt;
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  dismissed_at: AlertDismissedAt;
  /** A GitHub user. */
  dismissed_by: NullableSimpleUser;
  /** The reason that the alert was dismissed. */
  dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | null;
  /**
   * An optional comment associated with the alert's dismissal.
   * @maxLength 280
   */
  dismissed_comment: string | null;
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  fixed_at: AlertFixedAt;
  /** The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  auto_dismissed_at?: AlertAutoDismissedAt;
}

/**
 * Dependabot Secret
 * Set secrets for Dependabot.
 */
export interface DependabotSecret {
  /**
   * The name of the secret.
   * @example "MY_ARTIFACTORY_PASSWORD"
   */
  name: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Dependency Graph Diff
 * A diff of the dependencies between two commits.
 */
export type DependencyGraphDiff = {
  change_type: "added" | "removed";
  /** @example "path/to/package-lock.json" */
  manifest: string;
  /** @example "npm" */
  ecosystem: string;
  /** @example "@actions/core" */
  name: string;
  /** @example "1.0.0" */
  version: string;
  /** @example "pkg:/npm/%40actions/core@1.1.0" */
  package_url: string | null;
  /** @example "MIT" */
  license: string | null;
  /** @example "https://github.com/github/actions" */
  source_repository_url: string | null;
  vulnerabilities: {
    /** @example "critical" */
    severity: string;
    /** @example "GHSA-rf4j-j272-fj86" */
    advisory_ghsa_id: string;
    /** @example "A summary of the advisory." */
    advisory_summary: string;
    /** @example "https://github.com/advisories/GHSA-rf4j-j272-fj86" */
    advisory_url: string;
  }[];
  /** Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment. */
  scope: "unknown" | "runtime" | "development";
}[];

/**
 * Dependency Graph SPDX SBOM
 * A schema for the SPDX JSON format returned by the Dependency Graph.
 */
export interface DependencyGraphSpdxSbom {
  sbom: {
    /**
     * The SPDX identifier for the SPDX document.
     * @example "SPDXRef-DOCUMENT"
     */
    SPDXID: string;
    /**
     * The version of the SPDX specification that this document conforms to.
     * @example "SPDX-2.3"
     */
    spdxVersion: string;
    /**
     * An optional comment about the SPDX document.
     * @example "Exact versions could not be resolved for some packages. For more information: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/"
     */
    comment?: string;
    creationInfo: {
      /**
       * The date and time the SPDX document was created.
       * @example "2021-11-03T00:00:00Z"
       */
      created: string;
      /** The tools that were used to generate the SPDX document. */
      creators: string[];
    };
    /**
     * The name of the SPDX document.
     * @example "github/github"
     */
    name: string;
    /**
     * The license under which the SPDX document is licensed.
     * @example "CC0-1.0"
     */
    dataLicense: string;
    /**
     * The namespace for the SPDX document.
     * @example "https://spdx.org/spdxdocs/protobom/15e41dd2-f961-4f4d-b8dc-f8f57ad70d57"
     */
    documentNamespace: string;
    packages: {
      /**
       * A unique SPDX identifier for the package.
       * @example "SPDXRef-Package"
       */
      SPDXID?: string;
      /**
       * The name of the package.
       * @example "github/github"
       */
      name?: string;
      /**
       * The version of the package. If the package does not have an exact version specified,
       * a version range is given.
       * @example "1.0.0"
       */
      versionInfo?: string;
      /**
       * The location where the package can be downloaded,
       * or NOASSERTION if this has not been determined.
       * @example "NOASSERTION"
       */
      downloadLocation?: string;
      /**
       * Whether the package's file content has been subjected to
       * analysis during the creation of the SPDX document.
       * @example false
       */
      filesAnalyzed?: boolean;
      /**
       * The license of the package as determined while creating the SPDX document.
       * @example "MIT"
       */
      licenseConcluded?: string;
      /**
       * The license of the package as declared by its author, or NOASSERTION if this information
       * was not available when the SPDX document was created.
       * @example "NOASSERTION"
       */
      licenseDeclared?: string;
      /**
       * The distribution source of this package, or NOASSERTION if this was not determined.
       * @example "NOASSERTION"
       */
      supplier?: string;
      /**
       * The copyright holders of the package, and any dates present with those notices, if available.
       * @example "Copyright (c) 1985 GitHub.com"
       */
      copyrightText?: string;
      externalRefs?: {
        /**
         * The category of reference to an external resource this reference refers to.
         * @example "PACKAGE-MANAGER"
         */
        referenceCategory: string;
        /**
         * A locator for the particular external resource this reference refers to.
         * @example "pkg:gem/rails@6.0.1"
         */
        referenceLocator: string;
        /**
         * The category of reference to an external resource this reference refers to.
         * @example "purl"
         */
        referenceType: string;
      }[];
    }[];
    relationships?: {
      /**
       * The type of relationship between the two SPDX elements.
       * @example "DEPENDS_ON"
       */
      relationshipType?: string;
      /** The SPDX identifier of the package that is the source of the relationship. */
      spdxElementId?: string;
      /** The SPDX identifier of the package that is the target of the relationship. */
      relatedSpdxElement?: string;
    }[];
  };
}

/**
 * metadata
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export type Metadata = Record<string, string | number | boolean | null>;

export interface Dependency {
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   * @pattern ^pkg
   * @example "pkg:/npm/%40actions/http-client@1.0.11"
   */
  package_url?: string;
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
  metadata?: Metadata;
  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   * @example "direct"
   */
  relationship?: "direct" | "indirect";
  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   * @example "runtime"
   */
  scope?: "runtime" | "development";
  /**
   * Array of package-url (PURLs) of direct child dependencies.
   * @example "@actions/http-client"
   */
  dependencies?: string[];
}

export interface Manifest {
  /**
   * The name of the manifest.
   * @example "package-lock.json"
   */
  name: string;
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     * @example "/src/build/package-lock.json"
     */
    source_location?: string;
  };
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
  metadata?: Metadata;
  /** A collection of resolved package dependencies. */
  resolved?: Record<string, Dependency>;
}

/**
 * snapshot
 * Create a new snapshot of a repository's dependencies.
 */
export interface Snapshot {
  /** The version of the repository snapshot submission. */
  version: number;
  job: {
    /**
     * The external ID of the job.
     * @example "5622a2b0-63f6-4732-8c34-a1ab27e102a11"
     */
    id: string;
    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     * @example "yourworkflowname_yourjobname"
     */
    correlator: string;
    /**
     * The url for the job.
     * @example "http://example.com/build"
     */
    html_url?: string;
  };
  /**
   * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
   * @minLength 40
   * @maxLength 40
   * @example "ddc951f4b1293222421f2c8df679786153acf689"
   */
  sha: string;
  /**
   * The repository branch that triggered this snapshot.
   * @pattern ^refs/
   * @example "refs/heads/main"
   */
  ref: string;
  /** A description of the detector used. */
  detector: {
    /**
     * The name of the detector used.
     * @example "docker buildtime detector"
     */
    name: string;
    /**
     * The version of the detector used.
     * @example "1.0.0"
     */
    version: string;
    /**
     * The url of the detector used.
     * @example "http://example.com/docker-buildtimer-detector"
     */
    url: string;
  };
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
  metadata?: Metadata;
  /** A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies. */
  manifests?: Record<string, Manifest>;
  /**
   * The time at which the snapshot was scanned.
   * @format date-time
   * @example "2020-06-13T14:52:50-05:00"
   */
  scanned: string;
}

/**
 * Deployment Status
 * The status of a deployment.
 */
export interface DeploymentStatus {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
   */
  url: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDE2OkRlcGxveW1lbnRTdGF0dXMx" */
  node_id: string;
  /**
   * The state of the status.
   * @example "success"
   */
  state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /**
   * A short description of the status.
   * @maxLength 140
   * @default ""
   * @example "Deployment finished successfully."
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   * @default ""
   * @example "production"
   */
  environment?: string;
  /**
   * Closing down notice: the URL to associate with this status.
   * @format uri
   * @default ""
   * @example "https://example.com/deployment/42/output"
   */
  target_url: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/42"
   */
  deployment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * The URL for accessing your environment.
   * @format uri
   * @default ""
   * @example "https://staging.example.com/"
   */
  environment_url?: string;
  /**
   * The URL to associate with this status.
   * @format uri
   * @default ""
   * @example "https://example.com/deployment/42/output"
   */
  log_url?: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 * @example 30
 */
export type WaitTimer = number;

/** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
export type DeploymentBranchPolicySettings = {
  /** Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
  protected_branches: boolean;
  /** Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
  custom_branch_policies: boolean;
} | null;

/**
 * Environment
 * Details of a deployment environment
 */
export interface Environment {
  /**
   * The id of the environment.
   * @format int64
   * @example 56780428
   */
  id: number;
  /** @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg=" */
  node_id: string;
  /**
   * The name of the environment.
   * @example "staging"
   */
  name: string;
  /** @example "https://api.github.com/repos/github/hello-world/environments/staging" */
  url: string;
  /** @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging" */
  html_url: string;
  /**
   * The time that the environment was created, in ISO 8601 format.
   * @format date-time
   * @example "2020-11-23T22:00:40Z"
   */
  created_at: string;
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   * @format date-time
   * @example "2020-11-23T22:00:40Z"
   */
  updated_at: string;
  /** Built-in deployment protection rules for the environment. */
  protection_rules?: (
    | {
        /** @example 3515 */
        id: number;
        /** @example "MDQ6R2F0ZTM1MTU=" */
        node_id: string;
        /** @example "wait_timer" */
        type: string;
        /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
        wait_timer?: WaitTimer;
      }
    | {
        /** @example 3755 */
        id: number;
        /** @example "MDQ6R2F0ZTM3NTU=" */
        node_id: string;
        /**
         * Whether deployments to this environment can be approved by the user who created the deployment.
         * @example false
         */
        prevent_self_review?: boolean;
        /** @example "required_reviewers" */
        type: string;
        /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
        reviewers?: {
          /** The type of reviewer. */
          type?: DeploymentReviewerType;
          reviewer?: SimpleUser | Team;
        }[];
      }
    | {
        /** @example 3515 */
        id: number;
        /** @example "MDQ6R2F0ZTM1MTU=" */
        node_id: string;
        /** @example "branch_policy" */
        type: string;
      }
  )[];
  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
  deployment_branch_policy?: DeploymentBranchPolicySettings;
}

/**
 * Whether or not a user who created the job is prevented from approving their own job.
 * @example false
 */
export type PreventSelfReview = boolean;

/**
 * Deployment branch policy
 * Details of a deployment branch or tag policy.
 */
export interface DeploymentBranchPolicy {
  /**
   * The unique identifier of the branch or tag policy.
   * @example 361471
   */
  id?: number;
  /** @example "MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=" */
  node_id?: string;
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   * @example "release/*"
   */
  name?: string;
  /**
   * Whether this rule targets a branch or tag.
   * @example "branch"
   */
  type?: "branch" | "tag";
}

/** Deployment branch and tag policy name pattern */
export interface DeploymentBranchPolicyNamePatternWithType {
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   * @example "release/*"
   */
  name: string;
  /**
   * Whether this rule targets a branch or tag
   * @example "branch"
   */
  type?: "branch" | "tag";
}

/** Deployment branch policy name pattern */
export interface DeploymentBranchPolicyNamePattern {
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   * @example "release/*"
   */
  name: string;
}

/**
 * Custom deployment protection rule app
 * A GitHub App that is providing a custom deployment protection rule.
 */
export interface CustomDeploymentRuleApp {
  /**
   * The unique identifier of the deployment protection rule integration.
   * @example 3515
   */
  id: number;
  /**
   * The slugified name of the deployment protection rule integration.
   * @example "my-custom-app"
   */
  slug: string;
  /**
   * The URL for the endpoint to get details about the app.
   * @example "https://api.github.com/apps/custom-app-slug"
   */
  integration_url: string;
  /**
   * The node ID for the deployment protection rule integration.
   * @example "MDQ6R2F0ZTM1MTU="
   */
  node_id: string;
}

/**
 * Deployment protection rule
 * Deployment protection rule
 */
export interface DeploymentProtectionRule {
  /**
   * The unique identifier for the deployment protection rule.
   * @example 3515
   */
  id: number;
  /**
   * The node ID for the deployment protection rule.
   * @example "MDQ6R2F0ZTM1MTU="
   */
  node_id: string;
  /**
   * Whether the deployment protection rule is enabled for the environment.
   * @example true
   */
  enabled: boolean;
  /** A GitHub App that is providing a custom deployment protection rule. */
  app: CustomDeploymentRuleApp;
}

/**
 * Short Blob
 * Short Blob
 */
export interface ShortBlob {
  url: string;
  sha: string;
}

/**
 * Blob
 * Blob
 */
export interface Blob {
  content: string;
  encoding: string;
  /** @format uri */
  url: string;
  sha: string;
  size: number | null;
  node_id: string;
  highlighted_content?: string;
}

/**
 * Git Commit
 * Low-level Git commit operations within a repository
 */
export interface GitCommit {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  node_id: string;
  /** @format uri */
  url: string;
  /** Identifying information for the git-user */
  author: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /** Identifying information for the git-user */
  committer: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
    /** @format uri */
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
    verified_at: string | null;
  };
  /** @format uri */
  html_url: string;
}

/**
 * Git Reference
 * Git references within a repository
 */
export interface GitRef {
  ref: string;
  node_id: string;
  /** @format uri */
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     * @minLength 40
     * @maxLength 40
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
}

/**
 * Git Tag
 * Metadata for a Git tag
 */
export interface GitTag {
  /** @example "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==" */
  node_id: string;
  /**
   * Name of the tag
   * @example "v0.0.1"
   */
  tag: string;
  /** @example "940bd336248efae0f9ee5bc7b2d5c985887b16ac" */
  sha: string;
  /**
   * URL for the tag
   * @format uri
   * @example "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   */
  url: string;
  /**
   * Message describing the purpose of the tag
   * @example "Initial public release"
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    /** @format uri */
    url: string;
  };
  verification?: Verification;
}

/**
 * Git Tree
 * The hierarchy between files in a Git repository.
 */
export interface GitTree {
  sha: string;
  /** @format uri */
  url?: string;
  truncated: boolean;
  /**
   * Objects specifying a tree structure
   * @example [{"path":"file.rb","mode":"100644","type":"blob","size":30,"sha":"44b4fc6d56897b048c772eb4087f854f46256132","url":"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"}]
   */
  tree: {
    /** @example "test/file.rb" */
    path: string;
    /** @example "040000" */
    mode: string;
    /** @example "tree" */
    type: string;
    /** @example "23f6827669e43831def8a7ad935069c8bd418261" */
    sha: string;
    /** @example 12 */
    size?: number;
    /** @example "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261" */
    url?: string;
  }[];
}

/** Hook Response */
export interface HookResponse {
  code: number | null;
  status: string | null;
  message: string | null;
}

/**
 * Webhook
 * Webhooks for repositories.
 */
export interface Hook {
  type: string;
  /**
   * Unique identifier of the webhook.
   * @example 42
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   * @example "web"
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   * @example true
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   * @example ["push","pull_request"]
   */
  events: string[];
  /** Configuration object of the webhook */
  config: WebhookConfig;
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/test"
   */
  test_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries"
   */
  deliveries_url?: string;
  last_response: HookResponse;
}

/**
 * Import
 * A repository import from an external source.
 */
export interface Import {
  vcs: string | null;
  use_lfs?: boolean;
  /** The URL of the originating repository. */
  vcs_url: string;
  svc_root?: string;
  tfvc_project?: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  failed_step?: string | null;
  error_message?: string | null;
  import_percent?: number | null;
  commit_count?: number | null;
  push_percent?: number | null;
  has_large_files?: boolean;
  large_files_size?: number;
  large_files_count?: number;
  project_choices?: {
    vcs?: string;
    tfvc_project?: string;
    human_name?: string;
  }[];
  message?: string;
  authors_count?: number | null;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  authors_url: string;
  /** @format uri */
  repository_url: string;
  svn_root?: string;
}

/**
 * Porter Author
 * Porter Author
 */
export interface PorterAuthor {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  /** @format uri */
  url: string;
  /** @format uri */
  import_url: string;
}

/**
 * Porter Large File
 * Porter Large File
 */
export interface PorterLargeFile {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
}

/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type NullableIssue = {
  /** @format int64 */
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  /** @format uri */
  repository_url: string;
  labels_url: string;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * The reason for the current state
   * @example "not_planned"
   */
  state_reason?: "completed" | "reopened" | "not_planned" | null;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string | null;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example ["bug","registration"]
   */
  labels: (
    | string
    | {
        /** @format int64 */
        id?: number;
        node_id?: string;
        /** @format uri */
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  /** @format date-time */
  closed_at: string | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  draft?: boolean;
  /** A GitHub user. */
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  /** @format uri */
  timeline_url?: string;
  /** The type of issue. */
  type?: IssueType;
  /** A repository on GitHub. */
  repository?: Repository;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
  sub_issues_summary?: SubIssuesSummary;
};

/**
 * Issue Event Label
 * Issue Event Label
 */
export interface IssueEventLabel {
  name: string | null;
  color: string | null;
}

/** Issue Event Dismissed Review */
export interface IssueEventDismissedReview {
  state: string;
  review_id: number;
  dismissal_message: string | null;
  dismissal_commit_id?: string | null;
}

/**
 * Issue Event Milestone
 * Issue Event Milestone
 */
export interface IssueEventMilestone {
  title: string;
}

/**
 * Issue Event Project Card
 * Issue Event Project Card
 */
export interface IssueEventProjectCard {
  /** @format uri */
  url: string;
  id: number;
  /** @format uri */
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name?: string;
}

/**
 * Issue Event Rename
 * Issue Event Rename
 */
export interface IssueEventRename {
  from: string;
  to: string;
}

/**
 * Issue Event
 * Issue Event
 */
export interface IssueEvent {
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDEwOklzc3VlRXZlbnQx" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
   */
  url: string;
  /** A GitHub user. */
  actor: NullableSimpleUser;
  /** @example "closed" */
  event: string;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_id: string | null;
  /** @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_url: string | null;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  issue?: NullableIssue;
  /** Issue Event Label */
  label?: IssueEventLabel;
  /** A GitHub user. */
  assignee?: NullableSimpleUser;
  /** A GitHub user. */
  assigner?: NullableSimpleUser;
  /** A GitHub user. */
  review_requester?: NullableSimpleUser;
  /** A GitHub user. */
  requested_reviewer?: NullableSimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  dismissed_review?: IssueEventDismissedReview;
  /** Issue Event Milestone */
  milestone?: IssueEventMilestone;
  /** Issue Event Project Card */
  project_card?: IssueEventProjectCard;
  /** Issue Event Rename */
  rename?: IssueEventRename;
  /** How the author is associated with the repository. */
  author_association?: AuthorAssociation;
  lock_reason?: string | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
}

/**
 * Labeled Issue Event
 * Labeled Issue Event
 */
export interface LabeledIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;
    color: string;
  };
}

/**
 * Unlabeled Issue Event
 * Unlabeled Issue Event
 */
export interface UnlabeledIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;
    color: string;
  };
}

/**
 * Assigned Issue Event
 * Assigned Issue Event
 */
export interface AssignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: Integration;
  /** A GitHub user. */
  assignee: SimpleUser;
  /** A GitHub user. */
  assigner: SimpleUser;
}

/**
 * Unassigned Issue Event
 * Unassigned Issue Event
 */
export interface UnassignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  assignee: SimpleUser;
  /** A GitHub user. */
  assigner: SimpleUser;
}

/**
 * Milestoned Issue Event
 * Milestoned Issue Event
 */
export interface MilestonedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
}

/**
 * Demilestoned Issue Event
 * Demilestoned Issue Event
 */
export interface DemilestonedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
}

/**
 * Renamed Issue Event
 * Renamed Issue Event
 */
export interface RenamedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  rename: {
    from: string;
    to: string;
  };
}

/**
 * Review Requested Issue Event
 * Review Requested Issue Event
 */
export interface ReviewRequestedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  review_requester: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  /** A GitHub user. */
  requested_reviewer?: SimpleUser;
}

/**
 * Review Request Removed Issue Event
 * Review Request Removed Issue Event
 */
export interface ReviewRequestRemovedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  review_requester: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  /** A GitHub user. */
  requested_reviewer?: SimpleUser;
}

/**
 * Review Dismissed Issue Event
 * Review Dismissed Issue Event
 */
export interface ReviewDismissedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  dismissed_review: {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: string;
  };
}

/**
 * Locked Issue Event
 * Locked Issue Event
 */
export interface LockedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** @example ""off-topic"" */
  lock_reason: string | null;
}

/**
 * Added to Project Issue Event
 * Added to Project Issue Event
 */
export interface AddedToProjectIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Moved Column in Project Issue Event
 * Moved Column in Project Issue Event
 */
export interface MovedColumnInProjectIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Removed from Project Issue Event
 * Removed from Project Issue Event
 */
export interface RemovedFromProjectIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Converted Note to Issue Issue Event
 * Converted Note to Issue Issue Event
 */
export interface ConvertedNoteToIssueIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    /** @format uri */
    url: string;
    project_id: number;
    /** @format uri */
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
}

/**
 * Issue Event for Issue
 * Issue Event for Issue
 */
export type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;

/**
 * Label
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  /**
   * Unique identifier for the label.
   * @format int64
   * @example 208045946
   */
  id: number;
  /** @example "MDU6TGFiZWwyMDgwNDU5NDY=" */
  node_id: string;
  /**
   * URL for the label
   * @format uri
   * @example "https://api.github.com/repositories/42/labels/bug"
   */
  url: string;
  /**
   * The name of the label.
   * @example "bug"
   */
  name: string;
  /**
   * Optional description of the label, such as its purpose.
   * @example "Something isn't working"
   */
  description: string | null;
  /**
   * 6-character hex code, without the leading #, identifying the color
   * @example "FFFFFF"
   */
  color: string;
  /**
   * Whether this label comes by default in a new repository.
   * @example true
   */
  default: boolean;
}

/**
 * Timeline Comment Event
 * Timeline Comment Event
 */
export interface TimelineCommentEvent {
  event: string;
  /** A GitHub user. */
  actor: SimpleUser;
  /**
   * Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  /** @format uri */
  html_url: string;
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /** @format uri */
  issue_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
}

/**
 * Timeline Cross Referenced Event
 * Timeline Cross Referenced Event
 */
export interface TimelineCrossReferencedEvent {
  event: string;
  /** A GitHub user. */
  actor?: SimpleUser;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  source: {
    type?: string;
    /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    issue?: Issue;
  };
}

/**
 * Timeline Committed Event
 * Timeline Committed Event
 */
export interface TimelineCommittedEvent {
  event?: string;
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  node_id: string;
  /** @format uri */
  url: string;
  /** Identifying information for the git-user */
  author: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /** Identifying information for the git-user */
  committer: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
    /** @format uri */
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
    verified_at: string | null;
  };
  /** @format uri */
  html_url: string;
}

/**
 * Timeline Reviewed Event
 * Timeline Reviewed Event
 */
export interface TimelineReviewedEvent {
  event: string;
  /**
   * Unique identifier of the review
   * @example 42
   */
  id: number;
  /** @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=" */
  node_id: string;
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string | null;
  /** @example "CHANGES_REQUESTED" */
  state: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /** @format date-time */
  submitted_at?: string;
  /**
   * A commit SHA for the review.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
}

/**
 * Pull Request Review Comment
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullRequestReviewComment {
  /**
   * URL for the pull request review comment
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   * @format int64
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * The ID of the pull request review comment.
   * @format int64
   * @example 1
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   * @example "config/database.yaml"
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
   * @example 1
   */
  position?: number;
  /**
   * The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
   * @example 4
   */
  original_position?: number;
  /**
   * The SHA of the commit to which the comment applies.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   * @example 8
   */
  in_reply_to_id?: number;
  /** A GitHub user. */
  user: SimpleUser;
  /**
   * The text of the comment.
   * @example "We should probably include a check for null values here."
   */
  body: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  _links: {
    self: {
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
       */
      href: string;
    };
    html: {
      /**
       * @format uri
       * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
       */
      href: string;
    };
    pull_request: {
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
       */
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";
  /** The level at which the comment is targeted, can be a diff line or a file. */
  subject_type?: "line" | "file";
  reactions?: ReactionRollup;
  /** @example ""<p>comment body</p>"" */
  body_html?: string;
  /** @example ""comment body"" */
  body_text?: string;
}

/**
 * Timeline Line Commented Event
 * Timeline Line Commented Event
 */
export interface TimelineLineCommentedEvent {
  event?: string;
  node_id?: string;
  comments?: PullRequestReviewComment[];
}

/**
 * Timeline Commit Commented Event
 * Timeline Commit Commented Event
 */
export interface TimelineCommitCommentedEvent {
  event?: string;
  node_id?: string;
  commit_id?: string;
  comments?: CommitComment[];
}

/**
 * Timeline Assigned Issue Event
 * Timeline Assigned Issue Event
 */
export interface TimelineAssignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  assignee: SimpleUser;
}

/**
 * Timeline Unassigned Issue Event
 * Timeline Unassigned Issue Event
 */
export interface TimelineUnassignedIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  /** A GitHub user. */
  assignee: SimpleUser;
}

/**
 * State Change Issue Event
 * State Change Issue Event
 */
export interface StateChangeIssueEvent {
  id: number;
  node_id: string;
  url: string;
  /** A GitHub user. */
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: NullableIntegration;
  state_reason?: string | null;
}

/**
 * Timeline Event
 * Timeline Event
 */
export type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent
  | StateChangeIssueEvent;

/**
 * Deploy Key
 * An SSH key granting access to a single repository.
 */
export interface DeployKey {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
  added_by?: string | null;
  last_used?: string | null;
  enabled?: boolean;
}

/**
 * Language
 * Language
 */
export type Language = Record<string, number>;

/**
 * License Content
 * License Content
 */
export interface LicenseContent {
  name: string;
  path: string;
  sha: string;
  size: number;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string | null;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  download_url: string | null;
  type: string;
  content: string;
  encoding: string;
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** License Simple */
  license: NullableLicenseSimple;
}

/**
 * Merged upstream
 * Results of a successful merge upstream request
 */
export interface MergedUpstream {
  message?: string;
  merge_type?: "merge" | "fast-forward" | "none";
  base_branch?: string;
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /** @example 1002604 */
  id: number;
  /** @example "MDk6TWlsZXN0b25lMTAwMjYwNA==" */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /**
   * The state of the milestone.
   * @default "open"
   * @example "open"
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /** @example "Tracking milestone for version 1.0" */
  description: string | null;
  /** A GitHub user. */
  creator: NullableSimpleUser;
  /** @example 4 */
  open_issues: number;
  /** @example 8 */
  closed_issues: number;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: string | null;
}

/** Pages Source Hash */
export interface PagesSourceHash {
  branch: string;
  path: string;
}

/** Pages Https Certificate */
export interface PagesHttpsCertificate {
  /** @example "approved" */
  state:
    | "new"
    | "authorization_created"
    | "authorization_pending"
    | "authorized"
    | "authorization_revoked"
    | "issued"
    | "uploaded"
    | "approved"
    | "errored"
    | "bad_authz"
    | "destroy_pending"
    | "dns_changed";
  /** @example "Certificate is approved" */
  description: string;
  /**
   * Array of the domain set and its alternate name (if it is configured)
   * @example ["example.com","www.example.com"]
   */
  domains: string[];
  /** @format date */
  expires_at?: string;
}

/**
 * GitHub Pages
 * The configuration for GitHub Pages for a repository.
 */
export interface Page {
  /**
   * The API address for accessing this Page resource.
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages"
   */
  url: string;
  /**
   * The status of the most recent build of the Page.
   * @example "built"
   */
  status: "built" | "building" | "errored" | null;
  /**
   * The Pages site's custom domain
   * @example "example.com"
   */
  cname: string | null;
  /**
   * The state if the domain is verified
   * @example "pending"
   */
  protected_domain_state?: "pending" | "verified" | "unverified" | null;
  /**
   * The timestamp when a pending domain becomes unverified.
   * @format date-time
   */
  pending_domain_unverified_at?: string | null;
  /**
   * Whether the Page has a custom 404 page.
   * @default false
   * @example false
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   * @format uri
   * @example "https://example.com"
   */
  html_url?: string;
  /**
   * The process in which the Page will be built.
   * @example "legacy"
   */
  build_type?: "legacy" | "workflow" | null;
  source?: PagesSourceHash;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   * @example true
   */
  public: boolean;
  https_certificate?: PagesHttpsCertificate;
  /**
   * Whether https is enabled on the domain
   * @example true
   */
  https_enforced?: boolean;
}

/**
 * Page Build
 * Page Build
 */
export interface PageBuild {
  /** @format uri */
  url: string;
  status: string;
  error: {
    message: string | null;
  };
  /** A GitHub user. */
  pusher: NullableSimpleUser;
  commit: string;
  duration: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Page Build Status
 * Page Build Status
 */
export interface PageBuildStatus {
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages/builds/latest"
   */
  url: string;
  /** @example "queued" */
  status: string;
}

/**
 * GitHub Pages
 * The GitHub Pages deployment status.
 */
export interface PageDeployment {
  /** The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit. */
  id: number | string;
  /**
   * The URI to monitor GitHub Pages deployment status.
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251"
   */
  status_url: string;
  /**
   * The URI to the deployed GitHub Pages.
   * @format uri
   * @example "hello-world.github.io"
   */
  page_url: string;
  /**
   * The URI to the deployed GitHub Pages preview.
   * @format uri
   * @example "monalisa-1231a2312sa32-23sda74.drafts.github.io"
   */
  preview_url?: string;
}

/** GitHub Pages deployment status */
export interface PagesDeploymentStatus {
  /** The current status of the deployment. */
  status?:
    | "deployment_in_progress"
    | "syncing_files"
    | "finished_file_sync"
    | "updating_pages"
    | "purging_cdn"
    | "deployment_cancelled"
    | "deployment_failed"
    | "deployment_content_failed"
    | "deployment_attempt_error"
    | "deployment_lost"
    | "succeed";
}

/**
 * Pages Health Check Status
 * Pages Health Check Status
 */
export interface PagesHealthCheck {
  domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
  alt_domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
}

/**
 * Pull Request
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export interface PullRequest {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /** @example "MDExOlB1bGxSZXF1ZXN0MQ==" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /** @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}" */
  review_comment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   * @example 42
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   * @example "open"
   */
  state: "open" | "closed";
  /** @example true */
  locked: boolean;
  /**
   * The title of the pull request.
   * @example "Amazing new feature"
   */
  title: string;
  /** A GitHub user. */
  user: SimpleUser;
  /** @example "Please pull these awesome changes" */
  body: string | null;
  labels: {
    /** @format int64 */
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string | null;
    color: string;
    default: boolean;
  }[];
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  /** @example "too heated" */
  active_lock_reason?: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: string | null;
  /** @example "e5bd3914e2e596debea16f433f57875b5b90bcd6" */
  merge_commit_sha: string | null;
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  head: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: SimpleUser;
  };
  base: {
    label: string;
    ref: string;
    /** A repository on GitHub. */
    repo: Repository;
    sha: string;
    /** A GitHub user. */
    user: SimpleUser;
  };
  _links: {
    /** Hypermedia Link */
    comments: Link;
    /** Hypermedia Link */
    commits: Link;
    /** Hypermedia Link */
    statuses: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    issue: Link;
    /** Hypermedia Link */
    review_comments: Link;
    /** Hypermedia Link */
    review_comment: Link;
    /** Hypermedia Link */
    self: Link;
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** The status of auto merging a pull request. */
  auto_merge: AutoMerge;
  /**
   * Indicates whether or not the pull request is a draft.
   * @example false
   */
  draft?: boolean;
  merged: boolean;
  /** @example true */
  mergeable: boolean | null;
  /** @example true */
  rebaseable?: boolean | null;
  /** @example "clean" */
  mergeable_state: string;
  /** A GitHub user. */
  merged_by: NullableSimpleUser;
  /** @example 10 */
  comments: number;
  /** @example 0 */
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   * @example true
   */
  maintainer_can_modify: boolean;
  /** @example 3 */
  commits: number;
  /** @example 100 */
  additions: number;
  /** @example 3 */
  deletions: number;
  /** @example 5 */
  changed_files: number;
}

/**
 * Pull Request Merge Result
 * Pull Request Merge Result
 */
export interface PullRequestMergeResult {
  sha: string;
  merged: boolean;
  message: string;
}

/**
 * Pull Request Review Request
 * Pull Request Review Request
 */
export interface PullRequestReviewRequest {
  users: SimpleUser[];
  teams: Team[];
}

/**
 * Pull Request Review
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullRequestReview {
  /**
   * Unique identifier of the review
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=" */
  node_id: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string;
  /** @example "CHANGES_REQUESTED" */
  state: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /** @format date-time */
  submitted_at?: string;
  /**
   * A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string | null;
  body_html?: string;
  body_text?: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
}

/**
 * Legacy Review Comment
 * Legacy Review Comment
 */
export interface ReviewComment {
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /**
   * @format int64
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * @format int64
   * @example 10
   */
  id: number;
  /** @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw" */
  node_id: string;
  /** @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..." */
  diff_hunk: string;
  /** @example "file1.txt" */
  path: string;
  /** @example 1 */
  position: number | null;
  /** @example 4 */
  original_position: number;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_id: string;
  /** @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840" */
  original_commit_id: string;
  /** @example 8 */
  in_reply_to_id?: number;
  /** A GitHub user. */
  user: NullableSimpleUser;
  /** @example "Great stuff" */
  body: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  _links: {
    /** Hypermedia Link */
    self: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    pull_request: Link;
  };
  body_text?: string;
  body_html?: string;
  reactions?: ReactionRollup;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The original first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /** The level at which the comment is targeted, can be a diff line or a file. */
  subject_type?: "line" | "file";
}

/**
 * Release Asset
 * Data related to a release.
 */
export interface ReleaseAsset {
  /** @format uri */
  url: string;
  /** @format uri */
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   * @example "Team Environment"
   */
  name: string;
  label: string | null;
  /** State of the release asset. */
  state: "uploaded" | "open";
  content_type: string;
  size: number;
  digest: string | null;
  download_count: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** A GitHub user. */
  uploader: NullableSimpleUser;
}

/**
 * Release
 * A release.
 */
export interface Release {
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  assets_url: string;
  upload_url: string;
  /** @format uri */
  tarball_url: string | null;
  /** @format uri */
  zipball_url: string | null;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   * @example "v1.0.0"
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   * @example "master"
   */
  target_commitish: string;
  name: string | null;
  body?: string | null;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   * @example false
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   * @example false
   */
  prerelease: boolean;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  published_at: string | null;
  /** A GitHub user. */
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html?: string;
  body_text?: string;
  mentions_count?: number;
  /**
   * The URL of the release discussion.
   * @format uri
   */
  discussion_url?: string;
  reactions?: ReactionRollup;
}

/**
 * Generated Release Notes Content
 * Generated name and body describing a release
 */
export interface ReleaseNotesContent {
  /**
   * The generated name of the release
   * @example "Release v1.0.0 is now available!"
   */
  name: string;
  /** The generated body describing the contents of the release supporting markdown formatting */
  body: string;
}

/**
 * repository ruleset data for rule
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export interface RepositoryRuleRulesetInfo {
  /** The type of source for the ruleset that includes this rule. */
  ruleset_source_type?: "Repository" | "Organization";
  /** The name of the source of the ruleset that includes this rule. */
  ruleset_source?: string;
  /** The ID of the ruleset that includes this rule. */
  ruleset_id?: number;
}

/**
 * Repository Rule
 * A repository rule with ruleset details.
 */
export type RepositoryRuleDetailed =
  | (RepositoryRuleCreation & RepositoryRuleRulesetInfo)
  | (RepositoryRuleUpdate & RepositoryRuleRulesetInfo)
  | (RepositoryRuleDeletion & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredLinearHistory & RepositoryRuleRulesetInfo)
  | (RepositoryRuleMergeQueue & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredDeployments & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredSignatures & RepositoryRuleRulesetInfo)
  | (RepositoryRulePullRequest & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredStatusChecks & RepositoryRuleRulesetInfo)
  | (RepositoryRuleNonFastForward & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitMessagePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitAuthorEmailPattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitterEmailPattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleBranchNamePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleTagNamePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleFilePathRestriction & RepositoryRuleRulesetInfo)
  | (RepositoryRuleMaxFilePathLength & RepositoryRuleRulesetInfo)
  | (RepositoryRuleFileExtensionRestriction & RepositoryRuleRulesetInfo)
  | (RepositoryRuleMaxFileSize & RepositoryRuleRulesetInfo)
  | (RepositoryRuleWorkflows & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCodeScanning & RepositoryRuleRulesetInfo);

export interface SecretScanningAlert {
  /** The security alert number. */
  number?: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at?: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: NullableAlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
  locations_url?: string;
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
  state?: SecretScanningAlertState;
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** A GitHub user. */
  resolved_by?: NullableSimpleUser;
  /** An optional comment to resolve an alert. */
  resolution_comment?: string | null;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /** The secret that was detected. */
  secret?: string;
  /** Whether push protection was bypassed for the detected secret. */
  push_protection_bypassed?: boolean | null;
  /** A GitHub user. */
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  /** A GitHub user. */
  push_protection_bypass_request_reviewer?: NullableSimpleUser;
  /** An optional comment when reviewing a push protection bypass. */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /** An optional comment when requesting a push protection bypass. */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
  push_protection_bypass_request_html_url?: string | null;
  /** The token status as of the latest validity check. */
  validity?: "active" | "inactive" | "unknown";
  /** Whether the detected secret was publicly leaked. */
  publicly_leaked?: boolean | null;
  /** Whether the detected secret was found in multiple repositories under the same organization or enterprise. */
  multi_repo?: boolean | null;
  /** A boolean value representing whether or not alert is base64 encoded */
  is_base64_encoded?: boolean | null;
  /** Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request. */
  first_location_detected?: NullableSecretScanningFirstDetectedLocation;
  /** A boolean value representing whether or not the token in the alert was detected in more than one location. */
  has_more_locations?: boolean;
}

/** An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
export type SecretScanningAlertResolutionComment = string | null;

export interface SecretScanningLocation {
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
   * @example "commit"
   */
  type?:
    | "commit"
    | "wiki_commit"
    | "issue_title"
    | "issue_body"
    | "issue_comment"
    | "discussion_title"
    | "discussion_body"
    | "discussion_comment"
    | "pull_request_title"
    | "pull_request_body"
    | "pull_request_comment"
    | "pull_request_review"
    | "pull_request_review_comment";
  details?:
    | SecretScanningLocationCommit
    | SecretScanningLocationWikiCommit
    | SecretScanningLocationIssueTitle
    | SecretScanningLocationIssueBody
    | SecretScanningLocationIssueComment
    | SecretScanningLocationDiscussionTitle
    | SecretScanningLocationDiscussionBody
    | SecretScanningLocationDiscussionComment
    | SecretScanningLocationPullRequestTitle
    | SecretScanningLocationPullRequestBody
    | SecretScanningLocationPullRequestComment
    | SecretScanningLocationPullRequestReview
    | SecretScanningLocationPullRequestReviewComment;
}

/** The reason for bypassing push protection. */
export type SecretScanningPushProtectionBypassReason = "false_positive" | "used_in_tests" | "will_fix_later";

export interface SecretScanningPushProtectionBypass {
  /** The reason for bypassing push protection. */
  reason?: SecretScanningPushProtectionBypassReason;
  /**
   * The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  expire_at?: string | null;
  /** The token type this bypass is for. */
  token_type?: string;
}

/** Information on a single scan performed by secret scanning on the repository */
export interface SecretScanningScan {
  /** The type of scan */
  type?: string;
  /** The state of the scan. Either "completed", "running", or "pending" */
  status?: string;
  /**
   * The time that the scan was completed. Empty if the scan is running
   * @format date-time
   */
  completed_at?: string | null;
  /**
   * The time that the scan was started. Empty if the scan is pending
   * @format date-time
   */
  started_at?: string | null;
}

export interface SecretScanningScanHistory {
  incremental_scans?: SecretScanningScan[];
  pattern_update_scans?: SecretScanningScan[];
  backfill_scans?: SecretScanningScan[];
  custom_pattern_backfill_scans?: (SecretScanningScan & {
    /** Name of the custom pattern for custom pattern scans */
    pattern_name?: string;
    /** Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise" */
    pattern_scope?: string;
  })[];
}

export interface RepositoryAdvisoryCreate {
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory impacts.
   * @maxLength 65535
   */
  description: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id?: string | null;
  /** A product affected by the vulnerability detailed in a repository security advisory. */
  vulnerabilities: {
    /** The name of the package affected by the vulnerability. */
    package: {
      /** The package's language or package management ecosystem. */
      ecosystem: SecurityAdvisoryEcosystems;
      /** The unique package name within its ecosystem. */
      name?: string | null;
    };
    /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range?: string | null;
    /** The package version(s) that resolve the vulnerability. */
    patched_versions?: string | null;
    /** The functions in the package that are affected. */
    vulnerable_functions?: string[] | null;
  }[];
  /** A list of Common Weakness Enumeration (CWE) IDs. */
  cwe_ids?: string[] | null;
  /** A list of users receiving credit for their participation in the security advisory. */
  credits?:
    | {
        /** The username of the user credited. */
        login: string;
        /** The type of credit the user is receiving. */
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  /** The severity of the advisory. You must choose between setting this field or `cvss_vector_string`. */
  severity?: "critical" | "high" | "medium" | "low" | null;
  /** The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
  cvss_vector_string?: string | null;
  /**
   * Whether to create a temporary private fork of the repository to collaborate on a fix.
   * @default false
   */
  start_private_fork?: boolean;
}

export interface PrivateVulnerabilityReportCreate {
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary: string;
  /**
   * A detailed description of what the advisory impacts.
   * @maxLength 65535
   */
  description: string;
  /** An array of products affected by the vulnerability detailed in a repository security advisory. */
  vulnerabilities?: {
    /** The name of the package affected by the vulnerability. */
    package: {
      /** The package's language or package management ecosystem. */
      ecosystem: SecurityAdvisoryEcosystems;
      /** The unique package name within its ecosystem. */
      name?: string | null;
    };
    /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range?: string | null;
    /** The package version(s) that resolve the vulnerability. */
    patched_versions?: string | null;
    /** The functions in the package that are affected. */
    vulnerable_functions?: string[] | null;
  }[];
  /** A list of Common Weakness Enumeration (CWE) IDs. */
  cwe_ids?: string[] | null;
  /** The severity of the advisory. You must choose between setting this field or `cvss_vector_string`. */
  severity?: "critical" | "high" | "medium" | "low" | null;
  /** The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
  cvss_vector_string?: string | null;
  /**
   * Whether to create a temporary private fork of the repository to collaborate on a fix.
   * @default false
   */
  start_private_fork?: boolean;
}

export interface RepositoryAdvisoryUpdate {
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
  summary?: string;
  /**
   * A detailed description of what the advisory impacts.
   * @maxLength 65535
   */
  description?: string;
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
  cve_id?: string | null;
  /** A product affected by the vulnerability detailed in a repository security advisory. */
  vulnerabilities?: {
    /** The name of the package affected by the vulnerability. */
    package: {
      /** The package's language or package management ecosystem. */
      ecosystem: SecurityAdvisoryEcosystems;
      /** The unique package name within its ecosystem. */
      name?: string | null;
    };
    /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range?: string | null;
    /** The package version(s) that resolve the vulnerability. */
    patched_versions?: string | null;
    /** The functions in the package that are affected. */
    vulnerable_functions?: string[] | null;
  }[];
  /** A list of Common Weakness Enumeration (CWE) IDs. */
  cwe_ids?: string[] | null;
  /** A list of users receiving credit for their participation in the security advisory. */
  credits?:
    | {
        /** The username of the user credited. */
        login: string;
        /** The type of credit the user is receiving. */
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  /** The severity of the advisory. You must choose between setting this field or `cvss_vector_string`. */
  severity?: "critical" | "high" | "medium" | "low" | null;
  /** The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. */
  cvss_vector_string?: string | null;
  /** The state of the advisory. */
  state?: "published" | "closed" | "draft";
  /** A list of usernames who have been granted write access to the advisory. */
  collaborating_users?: string[] | null;
  /** A list of team slugs which have been granted write access to the advisory. */
  collaborating_teams?: string[] | null;
}

/**
 * Stargazer
 * Stargazer
 */
export interface Stargazer {
  /** @format date-time */
  starred_at: string;
  /** A GitHub user. */
  user: NullableSimpleUser;
}

/**
 * Code Frequency Stat
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];

/**
 * Commit Activity
 * Commit Activity
 */
export interface CommitActivity {
  /** @example [0,3,26,20,39,1,0] */
  days: number[];
  /** @example 89 */
  total: number;
  /** @example 1336280400 */
  week: number;
}

/**
 * Contributor Activity
 * Contributor Activity
 */
export interface ContributorActivity {
  /** A GitHub user. */
  author: NullableSimpleUser;
  /** @example 135 */
  total: number;
  /** @example [{"w":"1367712000","a":6898,"d":77,"c":10}] */
  weeks: {
    w?: number;
    a?: number;
    d?: number;
    c?: number;
  }[];
}

/** Participation Stats */
export interface ParticipationStats {
  all: number[];
  owner: number[];
}

/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
export interface RepositorySubscription {
  /**
   * Determines if notifications should be received from this repository.
   * @example true
   */
  subscribed: boolean;
  /** Determines if all notifications should be blocked from this repository. */
  ignored: boolean;
  reason: string | null;
  /**
   * @format date-time
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/subscription"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
}

/**
 * Tag
 * Tag
 */
export interface Tag {
  /** @example "v0.1" */
  name: string;
  commit: {
    sha: string;
    /** @format uri */
    url: string;
  };
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/zipball/v0.1"
   */
  zipball_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/tarball/v0.1"
   */
  tarball_url: string;
  node_id: string;
}

/**
 * Tag protection
 * Tag protection
 */
export interface TagProtection {
  /** @example 2 */
  id?: number;
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
  /** @example "2011-01-26T19:01:12Z" */
  updated_at?: string;
  /** @example true */
  enabled?: boolean;
  /** @example "v1.*" */
  pattern: string;
}

/**
 * Topic
 * A topic aggregates entities that are related to a subject.
 */
export interface Topic {
  names: string[];
}

/** Traffic */
export interface Traffic {
  /** @format date-time */
  timestamp: string;
  uniques: number;
  count: number;
}

/**
 * Clone Traffic
 * Clone Traffic
 */
export interface CloneTraffic {
  /** @example 173 */
  count: number;
  /** @example 128 */
  uniques: number;
  clones: Traffic[];
}

/**
 * Content Traffic
 * Content Traffic
 */
export interface ContentTraffic {
  /** @example "/github/hubot" */
  path: string;
  /** @example "github/hubot: A customizable life embetterment robot." */
  title: string;
  /** @example 3542 */
  count: number;
  /** @example 2225 */
  uniques: number;
}

/**
 * Referrer Traffic
 * Referrer Traffic
 */
export interface ReferrerTraffic {
  /** @example "Google" */
  referrer: string;
  /** @example 4 */
  count: number;
  /** @example 3 */
  uniques: number;
}

/**
 * View Traffic
 * View Traffic
 */
export interface ViewTraffic {
  /** @example 14850 */
  count: number;
  /** @example 3782 */
  uniques: number;
  views: Traffic[];
}

/** Search Result Text Matches */
export type SearchResultTextMatches = {
  object_url?: string;
  object_type?: string | null;
  property?: string;
  fragment?: string;
  matches?: {
    text?: string;
    indices?: number[];
  }[];
}[];

/**
 * Code Search Result Item
 * Code Search Result Item
 */
export interface CodeSearchResultItem {
  name: string;
  path: string;
  sha: string;
  /** @format uri */
  url: string;
  /** @format uri */
  git_url: string;
  /** @format uri */
  html_url: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  score: number;
  file_size?: number;
  language?: string | null;
  /** @format date-time */
  last_modified_at?: string;
  /** @example ["73..77","77..78"] */
  line_numbers?: string[];
  text_matches?: SearchResultTextMatches;
}

/**
 * Commit Search Result Item
 * Commit Search Result Item
 */
export interface CommitSearchResultItem {
  /** @format uri */
  url: string;
  sha: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  comments_url: string;
  commit: {
    author: {
      name: string;
      email: string;
      /** @format date-time */
      date: string;
    };
    /** Metaproperties for Git author/committer information. */
    committer: NullableGitUser;
    comment_count: number;
    message: string;
    tree: {
      sha: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    url: string;
    verification?: Verification;
  };
  /** A GitHub user. */
  author: NullableSimpleUser;
  /** Metaproperties for Git author/committer information. */
  committer: NullableGitUser;
  parents: {
    url?: string;
    html_url?: string;
    sha?: string;
  }[];
  /** Minimal Repository */
  repository: MinimalRepository;
  score: number;
  node_id: string;
  text_matches?: SearchResultTextMatches;
}

/**
 * Issue Search Result Item
 * Issue Search Result Item
 */
export interface IssueSearchResultItem {
  /** @format uri */
  url: string;
  /** @format uri */
  repository_url: string;
  labels_url: string;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /** @format int64 */
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason?: string | null;
  assignees?: SimpleUser[] | null;
  /** A GitHub user. */
  user: NullableSimpleUser;
  labels: {
    /** @format int64 */
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
    description?: string | null;
  }[];
  /** Sub-issues Summary */
  sub_issues_summary?: {
    total: number;
    completed: number;
    percent_completed: number;
  };
  state: string;
  state_reason?: string | null;
  /** A GitHub user. */
  assignee: NullableSimpleUser;
  /** A collection of related issues and pull requests. */
  milestone: NullableMilestone;
  comments: number;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  closed_at: string | null;
  text_matches?: SearchResultTextMatches;
  pull_request?: {
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  body?: string;
  score: number;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  draft?: boolean;
  /** A repository on GitHub. */
  repository?: Repository;
  body_html?: string;
  body_text?: string;
  /** @format uri */
  timeline_url?: string;
  /** The type of issue. */
  type?: IssueType;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
}

/**
 * Label Search Result Item
 * Label Search Result Item
 */
export interface LabelSearchResultItem {
  id: number;
  node_id: string;
  /** @format uri */
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string | null;
  score: number;
  text_matches?: SearchResultTextMatches;
}

/**
 * Repo Search Result Item
 * Repo Search Result Item
 */
export interface RepoSearchResultItem {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  /** A GitHub user. */
  owner: NullableSimpleUser;
  private: boolean;
  /** @format uri */
  html_url: string;
  description: string | null;
  fork: boolean;
  /** @format uri */
  url: string;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  /** @format date-time */
  pushed_at: string;
  /** @format uri */
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  forks_count: number;
  open_issues_count: number;
  master_branch?: string;
  default_branch: string;
  score: number;
  /** @format uri */
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  /** @format uri */
  teams_url: string;
  /** @format uri */
  hooks_url: string;
  issue_events_url: string;
  /** @format uri */
  events_url: string;
  assignees_url: string;
  branches_url: string;
  /** @format uri */
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  /** @format uri */
  languages_url: string;
  /** @format uri */
  stargazers_url: string;
  /** @format uri */
  contributors_url: string;
  /** @format uri */
  subscribers_url: string;
  /** @format uri */
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  /** @format uri */
  merges_url: string;
  archive_url: string;
  /** @format uri */
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  /** @format uri */
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  /** @format uri */
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics?: string[];
  /** @format uri */
  mirror_url: string | null;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  has_discussions?: boolean;
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /** The repository visibility: public, private, or internal. */
  visibility?: string;
  /** License Simple */
  license: NullableLicenseSimple;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  text_matches?: SearchResultTextMatches;
  temp_clone_token?: string;
  allow_merge_commit?: boolean;
  allow_squash_merge?: boolean;
  allow_rebase_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  allow_forking?: boolean;
  is_template?: boolean;
  /** @example false */
  web_commit_signoff_required?: boolean;
}

/**
 * Topic Search Result Item
 * Topic Search Result Item
 */
export interface TopicSearchResultItem {
  name: string;
  display_name: string | null;
  short_description: string | null;
  description: string | null;
  created_by: string | null;
  released: string | null;
  /** @format date-time */
  created_at: string;
  /** @format date-time */
  updated_at: string;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count?: number | null;
  /** @format uri */
  logo_url?: string | null;
  text_matches?: SearchResultTextMatches;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
}

/**
 * User Search Result Item
 * User Search Result Item
 */
export interface UserSearchResultItem {
  login: string;
  /** @format int64 */
  id: number;
  node_id: string;
  /** @format uri */
  avatar_url: string;
  gravatar_id: string | null;
  /** @format uri */
  url: string;
  /** @format uri */
  html_url: string;
  /** @format uri */
  followers_url: string;
  /** @format uri */
  subscriptions_url: string;
  /** @format uri */
  organizations_url: string;
  /** @format uri */
  repos_url: string;
  /** @format uri */
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos?: number;
  public_gists?: number;
  followers?: number;
  following?: number;
  /** @format date-time */
  created_at?: string;
  /** @format date-time */
  updated_at?: string;
  name?: string | null;
  bio?: string | null;
  /** @format email */
  email?: string | null;
  location?: string | null;
  site_admin: boolean;
  hireable?: boolean | null;
  text_matches?: SearchResultTextMatches;
  blog?: string | null;
  company?: string | null;
  /** @format date-time */
  suspended_at?: string | null;
  user_view_type?: string;
}

/**
 * Private User
 * Private User
 */
export interface PrivateUser {
  /** @example "octocat" */
  login: string;
  /**
   * @format int64
   * @example 1
   */
  id: number;
  user_view_type?: string;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /** @example "User" */
  type: string;
  site_admin: boolean;
  /** @example "monalisa octocat" */
  name: string | null;
  /** @example "GitHub" */
  company: string | null;
  /** @example "https://github.com/blog" */
  blog: string | null;
  /** @example "San Francisco" */
  location: string | null;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email: string | null;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  notification_email?: string | null;
  hireable: boolean | null;
  /** @example "There once was..." */
  bio: string | null;
  /** @example "monalisa" */
  twitter_username?: string | null;
  /** @example 2 */
  public_repos: number;
  /** @example 1 */
  public_gists: number;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  updated_at: string;
  /** @example 81 */
  private_gists: number;
  /** @example 100 */
  total_private_repos: number;
  /** @example 100 */
  owned_private_repos: number;
  /** @example 10000 */
  disk_usage: number;
  /** @example 8 */
  collaborators: number;
  /** @example true */
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  business_plus?: boolean;
  ldap_dn?: string;
}

/**
 * Codespaces Secret
 * Secrets for a GitHub Codespace.
 */
export interface CodespacesSecret {
  /**
   * The name of the secret
   * @example "SECRET_NAME"
   */
  name: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  created_at: string;
  /**
   * The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
  updated_at: string;
  /** The type of repositories in the organization that the secret is visible to */
  visibility: "all" | "private" | "selected";
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   * @format uri
   * @example "https://api.github.com/user/secrets/SECRET_NAME/repositories"
   */
  selected_repositories_url: string;
}

/**
 * CodespacesUserPublicKey
 * The public key used for setting user Codespaces' Secrets.
 */
export interface CodespacesUserPublicKey {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
}

/**
 * Fetches information about an export of a codespace.
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
export interface CodespaceExportDetails {
  /**
   * State of the latest export
   * @example "succeeded | failed | in_progress"
   */
  state?: string | null;
  /**
   * Completion time of the last export operation
   * @format date-time
   * @example "2021-01-01T19:01:12Z"
   */
  completed_at?: string | null;
  /**
   * Name of the exported branch
   * @example "codespace-monalisa-octocat-hello-world-g4wpq6h95q"
   */
  branch?: string | null;
  /**
   * Git commit SHA of the exported branch
   * @example "fd95a81ca01e48ede9f39c799ecbcef817b8a3b2"
   */
  sha?: string | null;
  /**
   * Id for the export details
   * @example "latest"
   */
  id?: string;
  /**
   * Url for fetching export details
   * @example "https://api.github.com/user/codespaces/:name/exports/latest"
   */
  export_url?: string;
  /**
   * Web url for the exported branch
   * @example "https://github.com/octocat/hello-world/tree/:branch"
   */
  html_url?: string | null;
}

/**
 * Codespace
 * A codespace.
 */
export interface CodespaceWithFullRepository {
  /**
   * @format int64
   * @example 1
   */
  id: number;
  /**
   * Automatically generated name of this codespace.
   * @example "monalisa-octocat-hello-world-g4wpq6h95q"
   */
  name: string;
  /**
   * Display name for this codespace.
   * @example "bookish space pancake"
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   * @example "26a7c758-7299-4a73-b978-5a92a7ae98a0"
   */
  environment_id: string | null;
  /** A GitHub user. */
  owner: SimpleUser;
  /** A GitHub user. */
  billable_owner: SimpleUser;
  /** Full Repository */
  repository: FullRepository;
  /** A description of the machine powering a codespace. */
  machine: NullableCodespaceMachine;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   * @example ".devcontainer/example/devcontainer.json"
   */
  devcontainer_path?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   * @example false
   */
  prebuild: boolean | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * Last known time this codespace was started.
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  last_used_at: string;
  /**
   * State of this codespace.
   * @example "Available"
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";
  /**
   * API URL for this codespace.
   * @format uri
   */
  url: string;
  /** Details about the codespace's git repository. */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     * @example 0
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     * @example 0
     */
    behind?: number;
    /** Whether the local repository has unpushed changes. */
    has_unpushed_changes?: boolean;
    /** Whether the local repository has uncommitted changes. */
    has_uncommitted_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example "main"
     */
    ref?: string;
  };
  /**
   * The initally assigned location of a new codespace.
   * @example "WestUs2"
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * URL to access this codespace on the web.
   * @format uri
   */
  web_url: string;
  /**
   * API URL to access available alternate machine types for this codespace.
   * @format uri
   */
  machines_url: string;
  /**
   * API URL to start this codespace.
   * @format uri
   */
  start_url: string;
  /**
   * API URL to stop this codespace.
   * @format uri
   */
  stop_url: string;
  /**
   * API URL to publish this codespace to a new repository.
   * @format uri
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   * @format uri
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /** The privacy settings a user can select from when forwarding a port. */
    allowed_port_privacy_settings?: string[] | null;
  };
  /** Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
  pending_operation?: boolean | null;
  /** Text to show user when codespace is disabled by a pending operation */
  pending_operation_disabled_reason?: string | null;
  /** Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
  idle_timeout_notice?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @format date-time
   * @example "2011-01-26T20:01:12Z"
   */
  retention_expires_at?: string | null;
}

/**
 * Email
 * Email
 */
export interface Email {
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email: string;
  /** @example true */
  primary: boolean;
  /** @example true */
  verified: boolean;
  /** @example "public" */
  visibility: string | null;
}

/**
 * GPG Key
 * A unique encryption key
 */
export interface GpgKey {
  /**
   * @format int64
   * @example 3
   */
  id: number;
  /** @example "Octocat's GPG Key" */
  name?: string | null;
  primary_key_id: number | null;
  /** @example "3262EFF25BA0D270" */
  key_id: string;
  /** @example "xsBNBFayYZ..." */
  public_key: string;
  /** @example [{"email":"octocat@users.noreply.github.com","verified":true}] */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /** @example [{"id":4,"primary_key_id":3,"key_id":"4A595D4C72EE49C7","public_key":"zsBNBFayYZ...","emails":[],"can_sign":false,"can_encrypt_comms":true,"can_encrypt_storage":true,"can_certify":false,"created_at":"2016-03-24T11:31:04-06:00","expires_at":null,"revoked":false}] */
  subkeys: {
    /** @format int64 */
    id?: number;
    primary_key_id?: number;
    key_id?: string;
    public_key?: string;
    emails?: {
      email?: string;
      verified?: boolean;
    }[];
    subkeys?: any[];
    can_sign?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_certify?: boolean;
    created_at?: string;
    expires_at?: string | null;
    raw_key?: string | null;
    revoked?: boolean;
  }[];
  /** @example true */
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /** @example true */
  can_certify: boolean;
  /**
   * @format date-time
   * @example "2016-03-24T11:31:04-06:00"
   */
  created_at: string;
  /** @format date-time */
  expires_at: string | null;
  /** @example true */
  revoked: boolean;
  raw_key: string | null;
}

/**
 * Key
 * Key
 */
export interface Key {
  key: string;
  /** @format int64 */
  id: number;
  url: string;
  title: string;
  /** @format date-time */
  created_at: string;
  verified: boolean;
  read_only: boolean;
}

/** Marketplace Account */
export interface MarketplaceAccount {
  /** @format uri */
  url: string;
  id: number;
  type: string;
  node_id?: string;
  login: string;
  /** @format email */
  email?: string | null;
  /** @format email */
  organization_billing_email?: string | null;
}

/**
 * User Marketplace Purchase
 * User Marketplace Purchase
 */
export interface UserMarketplacePurchase {
  /** @example "monthly" */
  billing_cycle: string;
  /**
   * @format date-time
   * @example "2017-11-11T00:00:00Z"
   */
  next_billing_date: string | null;
  unit_count: number | null;
  /** @example true */
  on_free_trial: boolean;
  /**
   * @format date-time
   * @example "2017-11-11T00:00:00Z"
   */
  free_trial_ends_on: string | null;
  /**
   * @format date-time
   * @example "2017-11-02T01:12:12Z"
   */
  updated_at: string | null;
  account: MarketplaceAccount;
  /** Marketplace Listing Plan */
  plan: MarketplaceListingPlan;
}

/**
 * Social account
 * Social media account
 */
export interface SocialAccount {
  /** @example "linkedin" */
  provider: string;
  /** @example "https://www.linkedin.com/company/github/" */
  url: string;
}

/**
 * SSH Signing Key
 * A public SSH key used to sign Git commits
 */
export interface SshSigningKey {
  key: string;
  id: number;
  title: string;
  /** @format date-time */
  created_at: string;
}

/**
 * Starred Repository
 * Starred Repository
 */
export interface StarredRepository {
  /** @format date-time */
  starred_at: string;
  /** A repository on GitHub. */
  repo: Repository;
}

/**
 * Hovercard
 * Hovercard
 */
export interface Hovercard {
  contexts: {
    message: string;
    octicon: string;
  }[];
}

/**
 * Key Simple
 * Key Simple
 */
export interface KeySimple {
  id: number;
  key: string;
  /** @format date-time */
  created_at?: string;
}

export interface BillingUsageReportUser {
  usageItems?: {
    /** Date of the usage line item. */
    date: string;
    /** Product name. */
    product: string;
    /** SKU name. */
    sku: string;
    /** Quantity of the usage line item. */
    quantity: number;
    /** Unit type of the usage line item. */
    unitType: string;
    /** Price per unit of the usage line item. */
    pricePerUnit: number;
    /** Gross amount of the usage line item. */
    grossAmount: number;
    /** Discount amount of the usage line item. */
    discountAmount: number;
    /** Net amount of the usage line item. */
    netAmount: number;
    /** Name of the repository. */
    repositoryName?: string;
  }[];
}

/**
 * Enterprise
 * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
 * on an enterprise account or an organization that's part of an enterprise account. For more information,
 * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
 */
export interface EnterpriseWebhooks {
  /** A short description of the enterprise. */
  description?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   * @format uri
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @format date-time
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /** @format uri */
  avatar_url: string;
}

/**
 * Simple Installation
 * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
 * for and sent to a GitHub App. For more information,
 * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
 */
export interface SimpleInstallation {
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  /**
   * The global node ID of the installation.
   * @example "MDQ6VXNlcjU4MzIzMQ=="
   */
  node_id: string;
}

/**
 * Organization Simple
 * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
 * organization, or when the event occurs from activity in a repository owned by an organization.
 */
export interface OrganizationSimpleWebhooks {
  /** @example "github" */
  login: string;
  /** @example 1 */
  id: number;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
}

/**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
export interface RepositoryWebhooks {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  /** A GitHub user. */
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
}

/**
 * branch protection rule
 * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
 */
export interface WebhooksRule {
  admin_enforced: boolean;
  allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
  allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
  authorized_actor_names: string[];
  authorized_actors_only: boolean;
  authorized_dismissal_actors_only: boolean;
  create_protected?: boolean;
  /** @format date-time */
  created_at: string;
  dismiss_stale_reviews_on_push: boolean;
  id: number;
  ignore_approvals_from_contributors: boolean;
  linear_history_requirement_enforcement_level: "off" | "non_admins" | "everyone";
  /** The enforcement level of the branch lock setting. `off` means the branch is not locked, `non_admins` means the branch is read-only for non_admins, and `everyone` means the branch is read-only for everyone. */
  lock_branch_enforcement_level: "off" | "non_admins" | "everyone";
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks. */
  lock_allows_fork_sync?: boolean;
  merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
  name: string;
  pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
  repository_id: number;
  require_code_owner_review: boolean;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  require_last_push_approval?: boolean;
  required_approving_review_count: number;
  required_conversation_resolution_level: "off" | "non_admins" | "everyone";
  required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
  required_status_checks: string[];
  required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
  signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
  strict_required_status_checks_policy: boolean;
  /** @format date-time */
  updated_at: string;
}

/** A suite of checks performed on the code of a given code change */
export interface SimpleCheckSuite {
  /** @example "d6fde92930d4715a2b49857d24b940956b26d2d3" */
  after?: string | null;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app?: Integration;
  /** @example "146e867f55c26428e5f9fade55a9bbf5e95a7912" */
  before?: string | null;
  /** @example "neutral" */
  conclusion?:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "stale"
    | "startup_failure"
    | null;
  /** @format date-time */
  created_at?: string;
  /** @example "master" */
  head_branch?: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha?: string;
  /** @example 5 */
  id?: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id?: string;
  pull_requests?: PullRequestMinimal[];
  /** Minimal Repository */
  repository?: MinimalRepository;
  /** @example "completed" */
  status?: "queued" | "in_progress" | "completed" | "pending" | "waiting";
  /** @format date-time */
  updated_at?: string;
  /** @example "https://api.github.com/repos/github/hello-world/check-suites/5" */
  url?: string;
}

/**
 * CheckRun
 * A check performed on the code of a given code change
 */
export interface CheckRunWithSimpleCheckSuite {
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  app: Integration;
  /** A suite of checks performed on the code of a given code change */
  check_suite: SimpleCheckSuite;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: string | null;
  /** @example "neutral" */
  conclusion:
    | "waiting"
    | "pending"
    | "startup_failure"
    | "stale"
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
  deployment?: DeploymentSimple;
  /** @example "https://example.com" */
  details_url: string;
  /** @example "42" */
  external_id: string;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string;
  /**
   * The id of the check.
   * @example 21
   */
  id: number;
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  output: {
    annotations_count: number;
    /** @format uri */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed" | "pending";
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  url: string;
}

/** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
export type WebhooksCodeScanningCommitOid = string;

/** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
export type WebhooksCodeScanningRef = string;

/** The pusher type for the event. Can be either `user` or a deploy key. */
export type WebhooksDeployPusherType = string;

/** The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
export type WebhooksRef0 = string;

/** The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
export interface WebhooksDeployKey {
  added_by?: string | null;
  created_at: string;
  id: number;
  key: string;
  last_used?: string | null;
  read_only: boolean;
  title: string;
  /** @format uri */
  url: string;
  verified: boolean;
  enabled?: boolean;
}

/** Workflow */
export type WebhooksWorkflow = {
  /** @format uri */
  badge_url: string;
  /** @format date-time */
  created_at: string;
  /** @format uri */
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  path: string;
  state: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
} | null;

export interface WebhooksApprover {
  avatar_url?: string;
  events_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string;
  html_url?: string;
  id?: number;
  login?: string;
  node_id?: string;
  organizations_url?: string;
  received_events_url?: string;
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  subscriptions_url?: string;
  type?: string;
  url?: string;
  user_view_type?: string;
}

export type WebhooksReviewers = {
  /** User */
  reviewer?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
  };
  type?: "User";
}[];

export interface WebhooksWorkflowJobRun {
  conclusion: any;
  created_at: string;
  environment: string;
  html_url: string;
  id: number;
  name: any;
  status: string;
  updated_at: string;
}

/** User */
export type WebhooksUser = {
  /** @format uri */
  avatar_url?: string;
  deleted?: boolean;
  email?: string | null;
  /** @format uri-template */
  events_url?: string;
  /** @format uri */
  followers_url?: string;
  /** @format uri-template */
  following_url?: string;
  /** @format uri-template */
  gists_url?: string;
  gravatar_id?: string;
  /** @format uri */
  html_url?: string;
  /** @format int64 */
  id: number;
  login: string;
  name?: string;
  node_id?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  received_events_url?: string;
  /** @format uri */
  repos_url?: string;
  site_admin?: boolean;
  /** @format uri-template */
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  type?: "Bot" | "User" | "Organization";
  /** @format uri */
  url?: string;
  user_view_type?: string;
};

export interface WebhooksAnswer {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  child_comment_count: number;
  /** @format date-time */
  created_at: string;
  discussion_id: number;
  html_url: string;
  id: number;
  node_id: string;
  parent_id: any;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  repository_url: string;
  /** @format date-time */
  updated_at: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Discussion
 * A Discussion in a repository.
 */
export interface Discussion {
  active_lock_reason: string | null;
  answer_chosen_at: string | null;
  /** User */
  answer_chosen_by: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  answer_html_url: string | null;
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  category: {
    /** @format date-time */
    created_at: string;
    description: string;
    emoji: string;
    id: number;
    is_answerable: boolean;
    name: string;
    node_id?: string;
    repository_id: number;
    slug: string;
    updated_at: string;
  };
  comments: number;
  /** @format date-time */
  created_at: string;
  html_url: string;
  id: number;
  locked: boolean;
  node_id: string;
  number: number;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  repository_url: string;
  /**
   * The current state of the discussion.
   * `converting` means that the discussion is being converted from an issue.
   * `transferring` means that the discussion is being transferred from another repository.
   */
  state: "open" | "closed" | "locked" | "converting" | "transferring";
  /**
   * The reason for the current state
   * @example "resolved"
   */
  state_reason: "resolved" | "outdated" | "duplicate" | "reopened" | null;
  timeline_url?: string;
  title: string;
  /** @format date-time */
  updated_at: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  labels?: Label[];
}

export interface WebhooksComment {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  body: string;
  child_comment_count: number;
  created_at: string;
  discussion_id: number;
  html_url: string;
  id: number;
  node_id: string;
  parent_id: number | null;
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  repository_url: string;
  updated_at: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** Label */
export interface WebhooksLabel {
  /** 6-character hex code, without the leading #, identifying the color */
  color: string;
  default: boolean;
  description: string | null;
  id: number;
  /** The name of the label. */
  name: string;
  node_id: string;
  /**
   * URL for the label
   * @format uri
   */
  url: string;
}

/** An array of repository objects that the installation can access. */
export type WebhooksRepositories = {
  full_name: string;
  /** Unique identifier of the repository */
  id: number;
  /** The name of the repository. */
  name: string;
  node_id: string;
  /** Whether the repository is private or public. */
  private: boolean;
}[];

/** An array of repository objects, which were added to the installation. */
export type WebhooksRepositoriesAdded = {
  full_name: string;
  /** Unique identifier of the repository */
  id: number;
  /** The name of the repository. */
  name: string;
  node_id: string;
  /** Whether the repository is private or public. */
  private: boolean;
}[];

/** Describe whether all repositories have been selected or there's a selection involved */
export type WebhooksRepositorySelection = "all" | "selected";

/**
 * issue comment
 * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
 */
export interface WebhooksIssueComment {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** Contents of the issue comment */
  body: string;
  /** @format date-time */
  created_at: string;
  /** @format uri */
  html_url: string;
  /**
   * Unique identifier of the issue comment
   * @format int64
   */
  id: number;
  /** @format uri */
  issue_url: string;
  node_id: string;
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
  performed_via_github_app: Integration;
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue comment
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** The changes to the comment. */
export interface WebhooksChanges {
  body?: {
    /** The previous version of the body. */
    from: string;
  };
}

/**
 * Issue
 * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
 */
export interface WebhooksIssue {
  active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
  /** User */
  assignee?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  assignees: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  }[];
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** Contents of the issue */
  body: string | null;
  /** @format date-time */
  closed_at: string | null;
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format date-time */
  created_at: string;
  draft?: boolean;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /** @format int64 */
  id: number;
  labels?: {
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /** The name of the label. */
    name: string;
    node_id: string;
    /**
     * URL for the label
     * @format uri
     */
    url: string;
  }[];
  /** @format uri-template */
  labels_url: string;
  locked?: boolean;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    /** @format date-time */
    closed_at: string | null;
    closed_issues: number;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    /** @format date-time */
    due_on: string | null;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    labels_url: string;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    open_issues: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  node_id: string;
  number: number;
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: {
    /** @format date-time */
    created_at: string | null;
    description: string | null;
    /** The list of events for the GitHub app */
    events?: (
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "content_reference"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_review"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "milestone"
      | "organization"
      | "org_block"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_dispatch"
      | "secret_scanning_alert"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_dispatch"
      | "workflow_run"
      | "reminder"
      | "pull_request_review_thread"
    )[];
    /** @format uri */
    external_url: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the GitHub app */
    id: number | null;
    /** The name of the GitHub app */
    name: string;
    node_id: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The set of permissions for the GitHub app */
    permissions?: {
      actions?: "read" | "write";
      administration?: "read" | "write";
      checks?: "read" | "write";
      content_references?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      discussions?: "read" | "write";
      emails?: "read" | "write";
      environments?: "read" | "write";
      issues?: "read" | "write";
      keys?: "read" | "write";
      members?: "read" | "write";
      metadata?: "read" | "write";
      organization_administration?: "read" | "write";
      organization_hooks?: "read" | "write";
      organization_packages?: "read" | "write";
      organization_plan?: "read" | "write";
      organization_projects?: "read" | "write" | "admin";
      organization_secrets?: "read" | "write";
      organization_self_hosted_runners?: "read" | "write";
      organization_user_blocking?: "read" | "write";
      packages?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      secret_scanning_alerts?: "read" | "write";
      secrets?: "read" | "write";
      security_events?: "read" | "write";
      security_scanning_alert?: "read" | "write";
      single_file?: "read" | "write";
      statuses?: "read" | "write";
      team_discussions?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
      workflows?: "read" | "write";
    };
    /** The slug name of the GitHub app */
    slug?: string;
    /** @format date-time */
    updated_at: string | null;
  };
  pull_request?: {
    /** @format uri */
    diff_url?: string;
    /** @format uri */
    html_url?: string;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url?: string;
    /** @format uri */
    url?: string;
  };
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** @format uri */
  repository_url: string;
  /** Sub-issues Summary */
  sub_issues_summary?: {
    total: number;
    completed: number;
    percent_completed: number;
  };
  /** State of the issue; either 'open' or 'closed' */
  state?: "open" | "closed";
  state_reason?: string | null;
  /** @format uri */
  timeline_url?: string;
  /** Title of the issue */
  title: string;
  /** The type of issue. */
  type?: IssueType;
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export interface WebhooksMilestone {
  /** @format date-time */
  closed_at: string | null;
  closed_issues: number;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  description: string | null;
  /** @format date-time */
  due_on: string | null;
  /** @format uri */
  html_url: string;
  id: number;
  /** @format uri */
  labels_url: string;
  node_id: string;
  /** The number of the milestone. */
  number: number;
  open_issues: number;
  /** The state of the milestone. */
  state: "open" | "closed";
  /** The title of the milestone. */
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Issue
 * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
 */
export interface WebhooksIssue2 {
  active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
  /** User */
  assignee?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  assignees: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  }[];
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** Contents of the issue */
  body: string | null;
  /** @format date-time */
  closed_at: string | null;
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format date-time */
  created_at: string;
  draft?: boolean;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  /** @format int64 */
  id: number;
  labels?: {
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /** The name of the label. */
    name: string;
    node_id: string;
    /**
     * URL for the label
     * @format uri
     */
    url: string;
  }[];
  /** @format uri-template */
  labels_url: string;
  locked?: boolean;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    /** @format date-time */
    closed_at: string | null;
    closed_issues: number;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    /** @format date-time */
    due_on: string | null;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    labels_url: string;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    open_issues: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  node_id: string;
  number: number;
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  performed_via_github_app?: {
    /** @format date-time */
    created_at: string | null;
    description: string | null;
    /** The list of events for the GitHub app */
    events?: (
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "content_reference"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_review"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "milestone"
      | "organization"
      | "org_block"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_dispatch"
      | "secret_scanning_alert"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_dispatch"
      | "workflow_run"
    )[];
    /** @format uri */
    external_url: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the GitHub app */
    id: number | null;
    /** The name of the GitHub app */
    name: string;
    node_id: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The set of permissions for the GitHub app */
    permissions?: {
      actions?: "read" | "write";
      administration?: "read" | "write";
      checks?: "read" | "write";
      content_references?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      discussions?: "read" | "write";
      emails?: "read" | "write";
      environments?: "read" | "write";
      issues?: "read" | "write";
      keys?: "read" | "write";
      members?: "read" | "write";
      metadata?: "read" | "write";
      organization_administration?: "read" | "write";
      organization_hooks?: "read" | "write";
      organization_packages?: "read" | "write";
      organization_plan?: "read" | "write";
      organization_projects?: "read" | "write";
      organization_secrets?: "read" | "write";
      organization_self_hosted_runners?: "read" | "write";
      organization_user_blocking?: "read" | "write";
      packages?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      secret_scanning_alerts?: "read" | "write";
      secrets?: "read" | "write";
      security_events?: "read" | "write";
      security_scanning_alert?: "read" | "write";
      single_file?: "read" | "write";
      statuses?: "read" | "write";
      team_discussions?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
      workflows?: "read" | "write";
    };
    /** The slug name of the GitHub app */
    slug?: string;
    /** @format date-time */
    updated_at: string | null;
  };
  pull_request?: {
    /** @format uri */
    diff_url?: string;
    /** @format uri */
    html_url?: string;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url?: string;
    /** @format uri */
    url?: string;
  };
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** @format uri */
  repository_url: string;
  /** Sub-issues Summary */
  sub_issues_summary?: {
    total: number;
    completed: number;
    percent_completed: number;
  };
  /** State of the issue; either 'open' or 'closed' */
  state?: "open" | "closed";
  state_reason?: string | null;
  /** @format uri */
  timeline_url?: string;
  /** Title of the issue */
  title: string;
  /** The type of issue. */
  type?: IssueType;
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** User */
export type WebhooksUserMannequin = {
  /** @format uri */
  avatar_url?: string;
  deleted?: boolean;
  email?: string | null;
  /** @format uri-template */
  events_url?: string;
  /** @format uri */
  followers_url?: string;
  /** @format uri-template */
  following_url?: string;
  /** @format uri-template */
  gists_url?: string;
  gravatar_id?: string;
  /** @format uri */
  html_url?: string;
  id: number;
  login: string;
  name?: string;
  node_id?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  received_events_url?: string;
  /** @format uri */
  repos_url?: string;
  site_admin?: boolean;
  /** @format uri-template */
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  type?: "Bot" | "User" | "Organization" | "Mannequin";
  /** @format uri */
  url?: string;
  user_view_type?: string;
};

/** Marketplace Purchase */
export interface WebhooksMarketplacePurchase {
  account: {
    id: number;
    login: string;
    node_id: string;
    organization_billing_email: string | null;
    type: string;
  };
  billing_cycle: string;
  free_trial_ends_on: string | null;
  next_billing_date: string | null;
  on_free_trial: boolean;
  plan: {
    bullets: (string | null)[];
    description: string;
    has_free_trial: boolean;
    id: number;
    monthly_price_in_cents: number;
    name: string;
    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
    unit_name: string | null;
    yearly_price_in_cents: number;
  };
  unit_count: number;
}

/** Marketplace Purchase */
export interface WebhooksPreviousMarketplacePurchase {
  account: {
    id: number;
    login: string;
    node_id: string;
    organization_billing_email: string | null;
    type: string;
  };
  billing_cycle: string;
  free_trial_ends_on: any;
  next_billing_date?: string | null;
  on_free_trial: boolean;
  plan: {
    bullets: string[];
    description: string;
    has_free_trial: boolean;
    id: number;
    monthly_price_in_cents: number;
    name: string;
    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
    unit_name: string | null;
    yearly_price_in_cents: number;
  };
  unit_count: number;
}

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface WebhooksTeam {
  deleted?: boolean;
  /** Description of the team */
  description?: string | null;
  /** @format uri */
  html_url?: string;
  /** Unique identifier of the team */
  id: number;
  /** @format uri-template */
  members_url?: string;
  /** Name of the team */
  name: string;
  node_id?: string;
  parent?: {
    /** Description of the team */
    description: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the team */
    id: number;
    /** @format uri-template */
    members_url: string;
    /** Name of the team */
    name: string;
    node_id: string;
    /** Permission that the team will have for its repositories */
    permission: string;
    privacy: "open" | "closed" | "secret";
    /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting: "notifications_enabled" | "notifications_disabled";
    /** @format uri */
    repositories_url: string;
    slug: string;
    /**
     * URL for the team
     * @format uri
     */
    url: string;
  };
  /** Permission that the team will have for its repositories */
  permission?: string;
  privacy?: "open" | "closed" | "secret";
  notification_setting?: "notifications_enabled" | "notifications_disabled";
  /** @format uri */
  repositories_url?: string;
  slug?: string;
  /**
   * URL for the team
   * @format uri
   */
  url?: string;
}

/**
 * Merge Group
 * A group of pull requests that the merge queue has grouped together to be merged.
 */
export interface MergeGroup {
  /** The SHA of the merge group. */
  head_sha: string;
  /** The full ref of the merge group. */
  head_ref: string;
  /** The SHA of the merge group's parent commit. */
  base_sha: string;
  /** The full ref of the branch the merge group will be merged into. */
  base_ref: string;
  /** A commit. */
  head_commit: SimpleCommit;
}

/**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
export type NullableRepositoryWebhooks = {
  /**
   * Unique identifier of the repository
   * @format int64
   * @example 42
   */
  id: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** License Simple */
  license: NullableLicenseSimple;
  /** A GitHub user. */
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /** A GitHub user. */
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  fork: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /** @example 9 */
  forks_count: number;
  /** @example 80 */
  stargazers_count: number;
  /** @example 80 */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /** @example 0 */
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
  custom_properties?: Record<string, any>;
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @default false
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   * @example false
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   * @example false
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /** Whether to allow forking this repo */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** Whether anonymous git access is enabled for this repository */
  anonymous_access_enabled?: boolean;
};

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export interface WebhooksMilestone3 {
  /** @format date-time */
  closed_at: string | null;
  closed_issues: number;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  description: string | null;
  /** @format date-time */
  due_on: string | null;
  /** @format uri */
  html_url: string;
  id: number;
  /** @format uri */
  labels_url: string;
  node_id: string;
  /** The number of the milestone. */
  number: number;
  open_issues: number;
  /** The state of the milestone. */
  state: "open" | "closed";
  /** The title of the milestone. */
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Membership
 * The membership between the user and the organization. Not present when the action is `member_invited`.
 */
export interface WebhooksMembership {
  /** @format uri */
  organization_url: string;
  role: string;
  state: string;
  /** @format uri */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Personal Access Token Request
 * Details of a Personal Access Token Request.
 */
export interface PersonalAccessTokenRequest {
  /** Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls. */
  id: number;
  /** A GitHub user. */
  owner: SimpleUser;
  /** New requested permissions, categorized by type of permission. */
  permissions_added: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Requested permissions that elevate access for a previously approved request for access, categorized by type of permission. */
  permissions_upgraded: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`. */
  permissions_result: {
    organization?: Record<string, string>;
    repository?: Record<string, string>;
    other?: Record<string, string>;
  };
  /** Type of repository selection requested. */
  repository_selection: "none" | "all" | "subset";
  /** The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
  repository_count: number | null;
  /** An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
  repositories:
    | {
        full_name: string;
        /** Unique identifier of the repository */
        id: number;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** Whether the repository is private or public. */
        private: boolean;
      }[]
    | null;
  /** Date and time when the request for access was created. */
  created_at: string;
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
  token_id: number;
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
  token_name: string;
  /** Whether the associated fine-grained personal access token has expired. */
  token_expired: boolean;
  /** Date and time when the associated fine-grained personal access token expires. */
  token_expires_at: string | null;
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
  token_last_used_at: string | null;
}

/** Project Card */
export interface WebhooksProjectCard {
  after_id?: number | null;
  /** Whether or not the card is archived */
  archived: boolean;
  column_id: number;
  /** @format uri */
  column_url: string;
  /** @format uri */
  content_url?: string;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** The project card's ID */
  id: number;
  node_id: string;
  note: string | null;
  /** @format uri */
  project_url: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/** Project */
export interface WebhooksProject {
  /** Body of the project */
  body: string | null;
  /** @format uri */
  columns_url: string;
  /** @format date-time */
  created_at: string;
  /** User */
  creator: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** @format uri */
  html_url: string;
  id: number;
  /** Name of the project */
  name: string;
  node_id: string;
  number: number;
  /** @format uri */
  owner_url: string;
  /** State of the project; either 'open' or 'closed' */
  state: "open" | "closed";
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/** Project Column */
export interface WebhooksProjectColumn {
  after_id?: number | null;
  /** @format uri */
  cards_url: string;
  /** @format date-time */
  created_at: string;
  /** The unique identifier of the project column */
  id: number;
  /** Name of the project column */
  name: string;
  node_id: string;
  /** @format uri */
  project_url: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Projects v2 Project
 * A projects v2 project
 */
export interface ProjectsV2 {
  id: number;
  node_id: string;
  /** A GitHub user. */
  owner: SimpleUser;
  /** A GitHub user. */
  creator: SimpleUser;
  title: string;
  description: string | null;
  public: boolean;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  closed_at: string | null;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: string;
  number: number;
  short_description: string | null;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  deleted_at: string | null;
  /** A GitHub user. */
  deleted_by: NullableSimpleUser;
}

export interface WebhooksProjectChanges {
  archived_at?: {
    /** @format date-time */
    from?: string | null;
    /** @format date-time */
    to?: string | null;
  };
}

/**
 * Projects v2 Item Content Type
 * The type of content tracked in a project item
 */
export type ProjectsV2ItemContentType = "Issue" | "PullRequest" | "DraftIssue";

/**
 * Projects v2 Item
 * An item belonging to a project
 */
export interface ProjectsV2Item {
  id: number;
  node_id?: string;
  project_node_id?: string;
  content_node_id: string;
  /** The type of content tracked in a project item */
  content_type: ProjectsV2ItemContentType;
  /** A GitHub user. */
  creator?: SimpleUser;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  archived_at: string | null;
}

/**
 * Projects v2 Single Select Option
 * An option for a single select field
 */
export interface ProjectsV2SingleSelectOption {
  id: string;
  name: string;
  color?: string | null;
  description?: string | null;
}

/**
 * Projects v2 Iteration Setting
 * An iteration setting for an iteration field
 */
export interface ProjectsV2IterationSetting {
  id: string;
  title: string;
  duration?: number | null;
  start_date?: string | null;
}

/**
 * Projects v2 Status Update
 * An status update belonging to a project
 */
export interface ProjectsV2StatusUpdate {
  id: number;
  node_id: string;
  project_node_id?: string;
  /** A GitHub user. */
  creator?: SimpleUser;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: string;
  status?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
  /**
   * @format date
   * @example "2022-04-28"
   */
  start_date?: string;
  /**
   * @format date
   * @example "2022-04-28"
   */
  target_date?: string;
  /**
   * Body of the status update
   * @example "The project is off to a great start!"
   */
  body?: string | null;
}

/** The pull request number. */
export type WebhooksNumber = number;

export type PullRequestWebhook = PullRequest & {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
  allow_auto_merge?: boolean;
  /** Whether to allow updating the pull request's branch. */
  allow_update_branch?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged.
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /**
   * The default value for a merge commit message.
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
  /**
   * The default value for a merge commit title.
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
  /**
   * The default value for a squash merge commit message:
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
  /**
   * The default value for a squash merge commit title:
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.**
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;
};

/** Pull Request */
export interface WebhooksPullRequest5 {
  _links: {
    /** Link */
    comments: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    commits: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    html: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    issue: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    review_comment: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    review_comments: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    self: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    statuses: {
      /** @format uri-template */
      href: string;
    };
  };
  active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
  additions?: number;
  /** User */
  assignee: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  assignees: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
  }[];
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
  auto_merge: {
    /** Commit message for the merge commit. */
    commit_message: string | null;
    /** Title for the merge commit message. */
    commit_title: string | null;
    /** User */
    enabled_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase";
  };
  base: {
    label: string;
    ref: string;
    /**
     * Repository
     * A git repository
     */
    repo: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       * @default false
       */
      has_discussions: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /**
       * The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       */
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
      /**
       * The default value for a merge commit title.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       */
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      /**
       * The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       */
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
      /**
       * The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       */
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      /**
       * Whether a squash merge commit can use the pull request title as default.
       * @default false
       */
      use_squash_pr_title_as_default?: boolean;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require contributors to sign off on web-based commits */
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  body: string | null;
  changed_files?: number;
  /** @format date-time */
  closed_at: string | null;
  comments?: number;
  /** @format uri */
  comments_url: string;
  commits?: number;
  /** @format uri */
  commits_url: string;
  /** @format date-time */
  created_at: string;
  deletions?: number;
  /** @format uri */
  diff_url: string;
  /** Indicates whether or not the pull request is a draft. */
  draft: boolean;
  head: {
    label: string;
    ref: string;
    /**
     * Repository
     * A git repository
     */
    repo: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       * @default false
       */
      has_discussions: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /**
       * The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       */
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
      /**
       * The default value for a merge commit title.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       */
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      /**
       * The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       */
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
      /**
       * The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       */
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      /**
       * Whether a squash merge commit can use the pull request title as default.
       * @default false
       */
      use_squash_pr_title_as_default?: boolean;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require contributors to sign off on web-based commits */
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** @format uri */
  html_url: string;
  id: number;
  /** @format uri */
  issue_url: string;
  labels: {
    /** 6-character hex code, without the leading #, identifying the color */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /** The name of the label. */
    name: string;
    node_id: string;
    /**
     * URL for the label
     * @format uri
     */
    url: string;
  }[];
  locked: boolean;
  /** Indicates whether maintainers can modify the pull request. */
  maintainer_can_modify?: boolean;
  merge_commit_sha: string | null;
  mergeable?: boolean | null;
  mergeable_state?: string;
  merged?: boolean | null;
  /** @format date-time */
  merged_at: string | null;
  /** User */
  merged_by?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    /** @format date-time */
    closed_at: string | null;
    closed_issues: number;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    /** @format date-time */
    due_on: string | null;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    labels_url: string;
    node_id: string;
    /** The number of the milestone. */
    number: number;
    open_issues: number;
    /** The state of the milestone. */
    state: "open" | "closed";
    /** The title of the milestone. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  node_id: string;
  /** Number uniquely identifying the pull request within its repository. */
  number: number;
  /** @format uri */
  patch_url: string;
  rebaseable?: boolean | null;
  requested_reviewers: (
    | {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      }
    | {
        deleted?: boolean;
        /** Description of the team */
        description?: string | null;
        /** @format uri */
        html_url?: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url?: string;
        /** Name of the team */
        name: string;
        node_id?: string;
        parent?: {
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        };
        /** Permission that the team will have for its repositories */
        permission?: string;
        privacy?: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         * @format uri
         */
        url?: string;
      }
  )[];
  requested_teams: {
    deleted?: boolean;
    /** Description of the team */
    description?: string | null;
    /** @format uri */
    html_url?: string;
    /** Unique identifier of the team */
    id: number;
    /** @format uri-template */
    members_url?: string;
    /** Name of the team */
    name: string;
    node_id?: string;
    parent?: {
      /** Description of the team */
      description: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url: string;
      /** Name of the team */
      name: string;
      node_id: string;
      /** Permission that the team will have for its repositories */
      permission: string;
      privacy: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       * @format uri
       */
      url: string;
    };
    /** Permission that the team will have for its repositories */
    permission?: string;
    privacy?: "open" | "closed" | "secret";
    /** @format uri */
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     * @format uri
     */
    url?: string;
  }[];
  /** @format uri-template */
  review_comment_url: string;
  review_comments?: number;
  /** @format uri */
  review_comments_url: string;
  /** State of this Pull Request. Either `open` or `closed`. */
  state: "open" | "closed";
  /** @format uri */
  statuses_url: string;
  /** The title of the pull request. */
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization" | "Mannequin";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/**
 * Pull Request Review Comment
 * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
 */
export interface WebhooksReviewComment {
  _links: {
    /** Link */
    html: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    pull_request: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    self: {
      /** @format uri-template */
      href: string;
    };
  };
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** The text of the comment. */
  body: string;
  /** The SHA of the commit to which the comment applies. */
  commit_id: string;
  /** @format date-time */
  created_at: string;
  /** The diff of the line that the comment refers to. */
  diff_hunk: string;
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
  html_url: string;
  /** The ID of the pull request review comment. */
  id: number;
  /** The comment ID to reply to. */
  in_reply_to_id?: number;
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
  line: number | null;
  /** The node ID of the pull request review comment. */
  node_id: string;
  /** The SHA of the original commit to which the comment applies. */
  original_commit_id: string;
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
  original_line: number;
  /** The index of the original line in the diff to which the comment applies. */
  original_position: number;
  /** The first line of the range for a multi-line comment. */
  original_start_line: number | null;
  /** The relative path of the file to which the comment applies. */
  path: string;
  /** The line index in the diff to which the comment applies. */
  position: number | null;
  /** The ID of the pull request review to which the comment belongs. */
  pull_request_review_id: number | null;
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
  pull_request_url: string;
  /** Reactions */
  reactions: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** The side of the first line of the range for a multi-line comment. */
  side: "LEFT" | "RIGHT";
  /** The first line of the range for a multi-line comment. */
  start_line: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side: "LEFT" | "RIGHT" | null;
  /** The level at which the comment is targeted, can be a diff line or a file. */
  subject_type?: "line" | "file";
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the pull request review comment
   * @format uri
   */
  url: string;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

/** The review that was affected. */
export interface WebhooksReview {
  _links: {
    /** Link */
    html: {
      /** @format uri-template */
      href: string;
    };
    /** Link */
    pull_request: {
      /** @format uri-template */
      href: string;
    };
  };
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  /** The text of the review. */
  body: string | null;
  /** A commit SHA for the review. */
  commit_id: string;
  /** @format uri */
  html_url: string;
  /** Unique identifier of the review */
  id: number;
  node_id: string;
  /** @format uri */
  pull_request_url: string;
  state: string;
  /** @format date-time */
  submitted_at: string | null;
  /** User */
  user: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    /** @format int64 */
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
}

export type WebhooksNullableString = string | null;

/**
 * Release
 * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
 */
export interface WebhooksRelease {
  assets: {
    /** @format uri */
    browser_download_url: string;
    content_type: string;
    /** @format date-time */
    created_at: string;
    download_count: number;
    id: number;
    label: string | null;
    /** The file name of the asset. */
    name: string;
    node_id: string;
    size: number;
    digest: string | null;
    /** State of the release asset. */
    state: "uploaded";
    /** @format date-time */
    updated_at: string;
    /** User */
    uploader?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    url: string;
  }[];
  /** @format uri */
  assets_url: string;
  /** User */
  author: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  body: string | null;
  /** @format date-time */
  created_at: string | null;
  /** @format uri */
  discussion_url?: string;
  /** Whether the release is a draft or published */
  draft: boolean;
  /** @format uri */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /** Whether the release is identified as a prerelease or a full release. */
  prerelease: boolean;
  /** @format date-time */
  published_at: string | null;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** The name of the tag. */
  tag_name: string;
  /** @format uri */
  tarball_url: string | null;
  /** Specifies the commitish value that determines where the Git tag is created from. */
  target_commitish: string;
  /** @format uri-template */
  upload_url: string;
  /** @format uri */
  url: string;
  /** @format uri */
  zipball_url: string | null;
}

/**
 * Release
 * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
 */
export interface WebhooksRelease1 {
  assets: {
    /** @format uri */
    browser_download_url: string;
    content_type: string;
    /** @format date-time */
    created_at: string;
    download_count: number;
    id: number;
    label: string | null;
    /** The file name of the asset. */
    name: string;
    node_id: string;
    size: number;
    digest: string | null;
    /** State of the release asset. */
    state: "uploaded";
    /** @format date-time */
    updated_at: string;
    /** User */
    uploader?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    url: string;
  }[];
  /** @format uri */
  assets_url: string;
  /** User */
  author: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  body: string | null;
  /** @format date-time */
  created_at: string | null;
  /** @format uri */
  discussion_url?: string;
  /** Whether the release is a draft or published */
  draft: boolean;
  /** @format uri */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /** Whether the release is identified as a prerelease or a full release. */
  prerelease: boolean;
  /** @format date-time */
  published_at: string | null;
  /** Reactions */
  reactions?: {
    "+1": number;
    "-1": number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    /** @format uri */
    url: string;
  };
  /** The name of the tag. */
  tag_name: string;
  /** @format uri */
  tarball_url: string | null;
  /** Specifies the commitish value that determines where the Git tag is created from. */
  target_commitish: string;
  /** @format uri-template */
  upload_url: string;
  /** @format uri */
  url: string;
  /** @format uri */
  zipball_url: string | null;
}

/**
 * Repository Vulnerability Alert Alert
 * The security alert of the vulnerable dependency.
 */
export interface WebhooksAlert {
  affected_package_name: string;
  affected_range: string;
  created_at: string;
  dismiss_reason?: string;
  dismissed_at?: string;
  /** User */
  dismisser?: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
  };
  external_identifier: string;
  /** @format uri */
  external_reference: string | null;
  fix_reason?: string;
  /** @format date-time */
  fixed_at?: string;
  fixed_in?: string;
  ghsa_id: string;
  id: number;
  node_id: string;
  number: number;
  severity: string;
  state: "open";
}

/** The reason for resolving the alert. */
export type SecretScanningAlertResolutionWebhook =
  | "false_positive"
  | "wont_fix"
  | "revoked"
  | "used_in_tests"
  | "pattern_deleted"
  | "pattern_edited";

export interface SecretScanningAlertWebhook {
  /** The security alert number. */
  number?: AlertNumber;
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  created_at?: AlertCreatedAt;
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
  updated_at?: NullableAlertUpdatedAt;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
  locations_url?: string;
  /** The reason for resolving the alert. */
  resolution?: SecretScanningAlertResolutionWebhook;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** A GitHub user. */
  resolved_by?: NullableSimpleUser;
  /** An optional comment to resolve an alert. */
  resolution_comment?: string | null;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;
  /** The token status as of the latest validity check. */
  validity?: "active" | "inactive" | "unknown";
  /** Whether push protection was bypassed for the detected secret. */
  push_protection_bypassed?: boolean | null;
  /** A GitHub user. */
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  push_protection_bypassed_at?: string | null;
  /** A GitHub user. */
  push_protection_bypass_request_reviewer?: NullableSimpleUser;
  /** An optional comment when reviewing a push protection bypass. */
  push_protection_bypass_request_reviewer_comment?: string | null;
  /** An optional comment when requesting a push protection bypass. */
  push_protection_bypass_request_comment?: string | null;
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
  push_protection_bypass_request_html_url?: string | null;
  /** Whether the detected secret was publicly leaked. */
  publicly_leaked?: boolean | null;
  /** Whether the detected secret was found in multiple repositories in the same organization or business. */
  multi_repo?: boolean | null;
}

/** The details of the security advisory, including summary, description, and severity. */
export interface WebhooksSecurityAdvisory {
  cvss: {
    score: number;
    vector_string: string | null;
  };
  cvss_severities?: CvssSeverities;
  cwes: {
    cwe_id: string;
    name: string;
  }[];
  description: string;
  ghsa_id: string;
  identifiers: {
    type: string;
    value: string;
  }[];
  published_at: string;
  references: {
    /** @format uri */
    url: string;
  }[];
  severity: string;
  summary: string;
  updated_at: string;
  vulnerabilities: {
    first_patched_version: {
      identifier: string;
    } | null;
    package: {
      ecosystem: string;
      name: string;
    };
    severity: string;
    vulnerable_version_range: string;
  }[];
  withdrawn_at: string | null;
}

export interface WebhooksSponsorship {
  created_at: string;
  maintainer?: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
    user_view_type?: string;
  };
  node_id: string;
  privacy_level: string;
  /** User */
  sponsor: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** User */
  sponsorable: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /**
   * Sponsorship Tier
   * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
   */
  tier: {
    created_at: string;
    description: string;
    is_custom_ammount?: boolean;
    is_custom_amount?: boolean;
    is_one_time: boolean;
    monthly_price_in_cents: number;
    monthly_price_in_dollars: number;
    name: string;
    node_id: string;
  };
}

/** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
export type WebhooksEffectiveDate = string;

export interface WebhooksChanges8 {
  tier: {
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    from: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
}

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface WebhooksTeam1 {
  deleted?: boolean;
  /** Description of the team */
  description?: string | null;
  /** @format uri */
  html_url?: string;
  /** Unique identifier of the team */
  id: number;
  /** @format uri-template */
  members_url?: string;
  /** Name of the team */
  name: string;
  node_id?: string;
  parent?: {
    /** Description of the team */
    description: string | null;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the team */
    id: number;
    /** @format uri-template */
    members_url: string;
    /** Name of the team */
    name: string;
    node_id: string;
    /** Permission that the team will have for its repositories */
    permission: string;
    privacy: "open" | "closed" | "secret";
    /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting: "notifications_enabled" | "notifications_disabled";
    /** @format uri */
    repositories_url: string;
    slug: string;
    /**
     * URL for the team
     * @format uri
     */
    url: string;
  };
  /** Permission that the team will have for its repositories */
  permission?: string;
  privacy?: "open" | "closed" | "secret";
  /** Whether team members will receive notifications when their team is @mentioned */
  notification_setting?: "notifications_enabled" | "notifications_disabled";
  /** @format uri */
  repositories_url?: string;
  slug?: string;
  /**
   * URL for the team
   * @format uri
   */
  url?: string;
}

/** branch protection configuration disabled event */
export interface WebhookBranchProtectionConfigurationDisabled {
  action: "disabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection configuration enabled event */
export interface WebhookBranchProtectionConfigurationEnabled {
  action: "enabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection rule created event */
export interface WebhookBranchProtectionRuleCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
  rule: WebhooksRule;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection rule deleted event */
export interface WebhookBranchProtectionRuleDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
  rule: WebhooksRule;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** branch protection rule edited event */
export interface WebhookBranchProtectionRuleEdited {
  action: "edited";
  /** If the action was `edited`, the changes to the rule. */
  changes?: {
    admin_enforced?: {
      from: boolean | null;
    };
    authorized_actor_names?: {
      from: string[];
    };
    authorized_actors_only?: {
      from: boolean | null;
    };
    authorized_dismissal_actors_only?: {
      from: boolean | null;
    };
    linear_history_requirement_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    lock_branch_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    lock_allows_fork_sync?: {
      from: boolean | null;
    };
    pull_request_reviews_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
    require_last_push_approval?: {
      from: boolean | null;
    };
    required_status_checks?: {
      from: string[];
    };
    required_status_checks_enforcement_level?: {
      from: "off" | "non_admins" | "everyone";
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
  rule: WebhooksRule;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Check Run Completed Event */
export interface WebhookCheckRunCompleted {
  action?: "completed";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Completed Event
 * The check_run.completed webhook encoded with URL encoding
 */
export interface WebhookCheckRunCompletedFormEncoded {
  /** A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** Check Run Created Event */
export interface WebhookCheckRunCreated {
  action?: "created";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Created Event
 * The check_run.created webhook encoded with URL encoding
 */
export interface WebhookCheckRunCreatedFormEncoded {
  /** A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** Check Run Requested Action Event */
export interface WebhookCheckRunRequestedAction {
  action: "requested_action";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The action requested by the user. */
  requested_action?: {
    /** The integrator reference of the action requested by the user. */
    identifier?: string;
  };
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Requested Action Event
 * The check_run.requested_action webhook encoded with URL encoding
 */
export interface WebhookCheckRunRequestedActionFormEncoded {
  /** A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** Check Run Re-Requested Event */
export interface WebhookCheckRunRerequested {
  action?: "rerequested";
  /** A check performed on the code of a given code change */
  check_run: CheckRunWithSimpleCheckSuite;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * Check Run Re-Requested Event
 * The check_run.rerequested webhook encoded with URL encoding
 */
export interface WebhookCheckRunRerequestedFormEncoded {
  /** A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** check_suite completed event */
export interface WebhookCheckSuiteCompleted {
  action: "completed";
  /** The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "merge_group"
        | "pull_request_review_thread"
        | "workflow_job"
        | "merge_queue_entry"
        | "security_and_analysis"
        | "projects_v2_item"
        | "secret_scanning_alert_location"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The client ID of the GitHub app */
      client_id?: string | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    before: string | null;
    /** @format uri */
    check_runs_url: string;
    /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`. */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    /** The head branch name the changes are on. */
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | null;
    /** @format date-time */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** check_suite requested event */
export interface WebhookCheckSuiteRequested {
  action: "requested";
  /** The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "workflow_job"
        | "merge_queue_entry"
        | "security_and_analysis"
        | "secret_scanning_alert_location"
        | "projects_v2_item"
        | "merge_group"
        | "repository_import"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** Client ID of the GitHub app */
      client_id?: string | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    before: string | null;
    /** @format uri */
    check_runs_url: string;
    /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | null;
    /** @format date-time */
    created_at: string;
    /** The head branch name the changes are on. */
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    /** @format date-time */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** check_suite rerequested event */
export interface WebhookCheckSuiteRerequested {
  action: "rerequested";
  /** The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite). */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "workflow_job"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The Client ID for the GitHub app */
      client_id?: string | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    before: string | null;
    /** @format uri */
    check_runs_url: string;
    /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    /** The head branch name the changes are on. */
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** The SHA of the head commit that is being checked. */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    /** @format date-time */
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert appeared_in_branch event */
export interface WebhookCodeScanningAlertAppearedInBranch {
  action: "appeared_in_branch";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    dismissed_at: string | null;
    /** User */
    dismissed_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | "fixed" | null;
    tool: {
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert closed_by_user event */
export interface WebhookCodeScanningAlertClosedByUser {
  action: "closed_by_user";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    dismissed_at: string;
    /** User */
    dismissed_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. */
    state: "dismissed" | "fixed";
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
    /** User */
    dismissal_approved_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert created event */
export interface WebhookCodeScanningAlertCreated {
  action: "created";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string | null;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: any;
    dismissed_by: any;
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: any;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    instances_url?: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | null;
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    updated_at?: string | null;
    /** @format uri */
    url: string;
    dismissal_approved_by?: any;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert fixed event */
export interface WebhookCodeScanningAlertFixed {
  action: "fixed";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    dismissed_at: string | null;
    /** User */
    dismissed_by: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests" | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** @format uri */
    instances_url?: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "fixed" | null;
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert reopened event */
export interface WebhookCodeScanningAlertReopened {
  action: "reopened";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: string | null;
    dismissed_by: object | null;
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: string | null;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      full_description?: string;
      help?: string | null;
      /** A link to the documentation for the rule used to detect the alert. */
      help_uri?: string | null;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      name?: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
      tags?: string[] | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | "fixed" | null;
    tool: {
      guid?: string | null;
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: string | null;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: string | null;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** code_scanning_alert reopened_by_user event */
export interface WebhookCodeScanningAlertReopenedByUser {
  action: "reopened_by_user";
  /** The code scanning alert involved in the event. */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @format date-time
     */
    created_at: string;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: any;
    dismissed_by: any;
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: any;
    /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: any;
    /**
     * The GitHub URL of the alert resource.
     * @format uri
     */
    html_url: string;
    /** Alert Instance */
    most_recent_instance?: {
      /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
      analysis_key: string;
      /** Identifies the configuration under which the analysis was executed. */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /** The full Git reference, formatted as `refs/heads/<branch name>`. */
      ref: string;
      /** State of a code scanning alert. */
      state: "open" | "dismissed" | "fixed";
    } | null;
    /** The code scanning alert number. */
    number: number;
    rule: {
      /** A short description of the rule used to detect the alert. */
      description: string;
      /** A unique identifier for the rule used to detect the alert. */
      id: string;
      /** The severity of the alert. */
      severity: "none" | "note" | "warning" | "error" | null;
    };
    /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "fixed" | null;
    tool: {
      /** The name of the tool used to generate the code scanning analysis alert. */
      name: string;
      /** The version of the tool used to detect the alert. */
      version: string | null;
    };
    /** @format uri */
    url: string;
  };
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  commit_oid: WebhooksCodeScanningCommitOid;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  ref: WebhooksCodeScanningRef;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** commit_comment created event */
export interface WebhookCommitCommentCreated {
  /** The action performed. Can be `created`. */
  action: "created";
  /** The [commit comment](${externalDocsUpapp/api/description/components/schemas/webhooks/issue-comment-created.yamlrl}/rest/commits/comments#get-a-commit-comment) resource. */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** The text of the comment. */
    body: string;
    /** The SHA of the commit to which the comment applies. */
    commit_id: string;
    created_at: string;
    /** @format uri */
    html_url: string;
    /** The ID of the commit comment. */
    id: number;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null;
    /** The node ID of the commit comment. */
    node_id: string;
    /** The relative path of the file to which the comment applies. */
    path: string | null;
    /** The line index in the diff to which the comment applies. */
    position: number | null;
    /** Reactions */
    reactions?: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** create event */
export interface WebhookCreate {
  /** The repository's current description. */
  description: string | null;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The name of the repository's default branch (usually `main`). */
  master_branch: string;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The pusher type for the event. Can be either `user` or a deploy key. */
  pusher_type: WebhooksDeployPusherType;
  /** The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
  ref: WebhooksRef0;
  /** The type of Git ref object created in the repository. */
  ref_type: "tag" | "branch";
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** custom property created event */
export interface WebhookCustomPropertyCreated {
  action: "created";
  /** Custom property defined on an organization */
  definition: CustomProperty;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** custom property deleted event */
export interface WebhookCustomPropertyDeleted {
  action: "deleted";
  definition: {
    /** The name of the property that was deleted. */
    property_name: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** custom property promoted to business event */
export interface WebhookCustomPropertyPromotedToEnterprise {
  action: "promote_to_enterprise";
  /** Custom property defined on an organization */
  definition: CustomProperty;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** custom property updated event */
export interface WebhookCustomPropertyUpdated {
  action: "updated";
  /** Custom property defined on an organization */
  definition: CustomProperty;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Custom property values updated event */
export interface WebhookCustomPropertyValuesUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  /** The new custom property values for the repository. */
  new_property_values: CustomPropertyValue[];
  /** The old custom property values for the repository. */
  old_property_values: CustomPropertyValue[];
}

/** delete event */
export interface WebhookDelete {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The pusher type for the event. Can be either `user` or a deploy key. */
  pusher_type: WebhooksDeployPusherType;
  /** The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource. */
  ref: WebhooksRef0;
  /** The type of Git ref object deleted in the repository. */
  ref_type: "tag" | "branch";
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert auto-dismissed event */
export interface WebhookDependabotAlertAutoDismissed {
  action: "auto_dismissed";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert auto-reopened event */
export interface WebhookDependabotAlertAutoReopened {
  action: "auto_reopened";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert created event */
export interface WebhookDependabotAlertCreated {
  action: "created";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert dismissed event */
export interface WebhookDependabotAlertDismissed {
  action: "dismissed";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert fixed event */
export interface WebhookDependabotAlertFixed {
  action: "fixed";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert reintroduced event */
export interface WebhookDependabotAlertReintroduced {
  action: "reintroduced";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Dependabot alert reopened event */
export interface WebhookDependabotAlertReopened {
  action: "reopened";
  /** A Dependabot alert. */
  alert: DependabotAlert;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** deploy_key created event */
export interface WebhookDeployKeyCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
  key: WebhooksDeployKey;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** deploy_key deleted event */
export interface WebhookDeployKeyDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
  key: WebhooksDeployKey;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** deployment created event */
export interface WebhookDeploymentCreated {
  action: "created";
  /**
   * Deployment
   * The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: object | string;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "workflow_job"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "secret_scanning_alert_location"
        | "merge_group"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    production_environment?: boolean;
    ref: string;
    /** @format uri */
    repository_url: string;
    sha: string;
    /** @format uri */
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: any;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  };
}

/** deployment protection rule requested event */
export interface WebhookDeploymentProtectionRuleRequested {
  action?: "requested";
  /** The name of the environment that has the deployment protection rule. */
  environment?: string;
  /** The event that triggered the deployment protection rule. */
  event?: string;
  /**
   * The URL to review the deployment protection rule.
   * @format uri
   */
  deployment_callback_url?: string;
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
  pull_requests?: PullRequest[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A GitHub user. */
  sender?: SimpleUser;
}

export interface WebhookDeploymentReviewApproved {
  action: "approved";
  approver?: WebhooksApprover;
  comment?: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  reviewers?: WebhooksReviewers;
  /** A GitHub user. */
  sender: SimpleUser;
  since: string;
  workflow_job_run?: WebhooksWorkflowJobRun;
  workflow_job_runs?: {
    conclusion?: any;
    created_at?: string;
    environment?: string;
    html_url?: string;
    id?: number;
    name?: string | null;
    status?: string;
    updated_at?: string;
  }[];
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: object | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  };
}

export interface WebhookDeploymentReviewRejected {
  action: "rejected";
  approver?: WebhooksApprover;
  comment?: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  reviewers?: WebhooksReviewers;
  /** A GitHub user. */
  sender: SimpleUser;
  since: string;
  workflow_job_run?: WebhooksWorkflowJobRun;
  workflow_job_runs?: {
    conclusion?: string | null;
    created_at?: string;
    environment?: string;
    html_url?: string;
    id?: number;
    name?: string | null;
    status?: string;
    updated_at?: string;
  }[];
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string;
    head_commit?: object | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
    display_title: string;
  };
}

export interface WebhookDeploymentReviewRequested {
  action: "requested";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  environment: string;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  requestor: WebhooksUser;
  reviewers: {
    /** User */
    reviewer?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login?: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    type?: "User" | "Team";
  }[];
  /** A GitHub user. */
  sender: SimpleUser;
  since: string;
  workflow_job_run: {
    conclusion: any;
    created_at: string;
    environment: string;
    html_url: string;
    id: number;
    name: string | null;
    status: string;
    updated_at: string;
  };
  /** Deployment Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string;
    head_commit?: object | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
        user_view_type?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
    display_title: string;
  };
}

/** deployment_status created event */
export interface WebhookDeploymentStatusCreated {
  action: "created";
  check_run?: {
    /** @format date-time */
    completed_at: string | null;
    /** The result of the completed check run. This value will be `null` until the check run has completed. */
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | null;
    /** @format uri */
    details_url: string;
    external_id: string;
    /** The SHA of the commit that is being checked. */
    head_sha: string;
    /** @format uri */
    html_url: string;
    /** The id of the check. */
    id: number;
    /** The name of the check run. */
    name: string;
    node_id: string;
    /** @format date-time */
    started_at: string;
    /** The current status of the check run. Can be `queued`, `in_progress`, or `completed`. */
    status: "queued" | "in_progress" | "completed" | "waiting" | "pending";
    /** @format uri */
    url: string;
  };
  /**
   * Deployment
   * The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: string | object | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "merge_queue_entry"
        | "workflow_job"
        | "pull_request_review_thread"
        | "secret_scanning_alert_location"
        | "merge_group"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    production_environment?: boolean;
    ref: string;
    /** @format uri */
    repository_url: string;
    sha: string;
    /** @format uri */
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /** The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses). */
  deployment_status: {
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format uri */
    deployment_url: string;
    /** The optional human-readable description added to the status. */
    description: string;
    environment: string;
    /** @format uri */
    environment_url?: string;
    id: number;
    /** @format uri */
    log_url?: string;
    node_id: string;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "merge_queue_entry"
        | "workflow_job"
        | "merge_group"
        | "secret_scanning_alert_location"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    /** @format uri */
    repository_url: string;
    /** The new state. Can be `pending`, `success`, `failure`, or `error`. */
    state: string;
    /** The optional link added to the status. */
    target_url: string;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow?: WebhooksWorkflow;
  /** Deployment Workflow Run */
  workflow_run?: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: any;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    workflow_url?: string;
  };
}

/** discussion answered event */
export interface WebhookDiscussionAnswered {
  action: "answered";
  answer: WebhooksAnswer;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion category changed event */
export interface WebhookDiscussionCategoryChanged {
  action: "category_changed";
  changes: {
    category: {
      from: {
        /** @format date-time */
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
    };
  };
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion closed event */
export interface WebhookDiscussionClosed {
  action: "closed";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion_comment created event */
export interface WebhookDiscussionCommentCreated {
  action: "created";
  comment: WebhooksComment;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion_comment deleted event */
export interface WebhookDiscussionCommentDeleted {
  action: "deleted";
  comment: WebhooksComment;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion_comment edited event */
export interface WebhookDiscussionCommentEdited {
  action: "edited";
  changes: {
    body: {
      from: string;
    };
  };
  comment: WebhooksComment;
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion created event */
export interface WebhookDiscussionCreated {
  action: "created";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion deleted event */
export interface WebhookDiscussionDeleted {
  action: "deleted";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion edited event */
export interface WebhookDiscussionEdited {
  action: "edited";
  changes?: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion labeled event */
export interface WebhookDiscussionLabeled {
  action: "labeled";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion locked event */
export interface WebhookDiscussionLocked {
  action: "locked";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion pinned event */
export interface WebhookDiscussionPinned {
  action: "pinned";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion reopened event */
export interface WebhookDiscussionReopened {
  action: "reopened";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion transferred event */
export interface WebhookDiscussionTransferred {
  action: "transferred";
  changes: {
    /** A Discussion in a repository. */
    new_discussion: Discussion;
    /**
     * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
     * when the event occurs from activity in a repository.
     */
    new_repository: RepositoryWebhooks;
  };
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion unanswered event */
export interface WebhookDiscussionUnanswered {
  action: "unanswered";
  /** A Discussion in a repository. */
  discussion: Discussion;
  old_answer: WebhooksAnswer;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** discussion unlabeled event */
export interface WebhookDiscussionUnlabeled {
  action: "unlabeled";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion unlocked event */
export interface WebhookDiscussionUnlocked {
  action: "unlocked";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** discussion unpinned event */
export interface WebhookDiscussionUnpinned {
  action: "unpinned";
  /** A Discussion in a repository. */
  discussion: Discussion;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/**
 * fork event
 * A user forks a repository.
 */
export interface WebhookFork {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource. */
  forkee: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
    /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean;
  } & {
    allow_forking?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    deployments_url?: string;
    description?: string | null;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: true;
    forks?: number;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string | null;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: any;
    languages_url?: string;
    license?: object | null;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: any;
    name?: string;
    node_id?: string;
    notifications_url?: string;
    open_issues?: number;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    private?: boolean;
    public?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    topics?: any[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers?: number;
    watchers_count?: number;
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** github_app_authorization revoked event */
export interface WebhookGithubAppAuthorizationRevoked {
  action: "revoked";
  /** A GitHub user. */
  sender: SimpleUser;
}

/** gollum event */
export interface WebhookGollum {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The pages that were updated. */
  pages: {
    /** The action that was performed on the page. Can be `created` or `edited`. */
    action: "created" | "edited";
    /**
     * Points to the HTML wiki page.
     * @format uri
     */
    html_url: string;
    /** The name of the page. */
    page_name: string;
    /** The latest commit SHA of the page. */
    sha: string;
    summary: string | null;
    /** The current page title. */
    title: string;
  }[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation created event */
export interface WebhookInstallationCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: WebhooksUser;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation deleted event */
export interface WebhookInstallationDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation new_permissions_accepted event */
export interface WebhookInstallationNewPermissionsAccepted {
  action: "new_permissions_accepted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation_repositories added event */
export interface WebhookInstallationRepositoriesAdded {
  action: "added";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects, which were added to the installation. */
  repositories_added: WebhooksRepositoriesAdded;
  /** An array of repository objects, which were removed from the installation. */
  repositories_removed: {
    full_name?: string;
    /** Unique identifier of the repository */
    id?: number;
    /** The name of the repository. */
    name?: string;
    node_id?: string;
    /** Whether the repository is private or public. */
    private?: boolean;
  }[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: WebhooksRepositorySelection;
  requester: WebhooksUser;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation_repositories removed event */
export interface WebhookInstallationRepositoriesRemoved {
  action: "removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects, which were added to the installation. */
  repositories_added: WebhooksRepositoriesAdded;
  /** An array of repository objects, which were removed from the installation. */
  repositories_removed: {
    full_name: string;
    /** Unique identifier of the repository */
    id: number;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** Whether the repository is private or public. */
    private: boolean;
  }[];
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: WebhooksRepositorySelection;
  requester: WebhooksUser;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** installation suspend event */
export interface WebhookInstallationSuspend {
  action: "suspend";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

export interface WebhookInstallationTargetRenamed {
  account: {
    archived_at?: string | null;
    avatar_url: string;
    created_at?: string;
    description?: any;
    events_url?: string;
    followers?: number;
    followers_url?: string;
    following?: number;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    hooks_url?: string;
    html_url: string;
    id: number;
    is_verified?: boolean;
    issues_url?: string;
    login?: string;
    members_url?: string;
    name?: string;
    node_id: string;
    organizations_url?: string;
    public_gists?: number;
    public_members_url?: string;
    public_repos?: number;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    slug?: string;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    updated_at?: string;
    url?: string;
    website_url?: any;
    user_view_type?: string;
  };
  action: "renamed";
  changes: {
    login?: {
      from: string;
    };
    slug?: {
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  target_type: string;
}

/** installation unsuspend event */
export interface WebhookInstallationUnsuspend {
  action: "unsuspend";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Installation */
  installation: Installation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** An array of repository objects that the installation can access. */
  repositories?: WebhooksRepositories;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  requester?: any;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issue_comment created event */
export interface WebhookIssueCommentCreated {
  action: "created";
  /**
   * issue comment
   * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
   */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue comment */
    body: string;
    /** @format date-time */
    created_at: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the issue comment
     * @format int64
     */
    id: number;
    /** @format uri */
    issue_url: string;
    node_id: string;
    /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    performed_via_github_app: NullableIntegration;
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue comment
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issue_comment deleted event */
export interface WebhookIssueCommentDeleted {
  action: "deleted";
  /** The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself. */
  comment: WebhooksIssueComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issue_comment edited event */
export interface WebhookIssueCommentEdited {
  action: "edited";
  /** The changes to the comment. */
  changes: WebhooksChanges;
  /** The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself. */
  comment: WebhooksIssueComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues assigned event */
export interface WebhookIssuesAssigned {
  /** The action that was performed. */
  action: "assigned";
  assignee?: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues closed event */
export interface WebhookIssuesClosed {
  /** The action that was performed. */
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "reminder"
        | "pull_request_review_thread"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  } & {
    active_lock_reason?: string | null;
    assignee?: object | null;
    assignees?: (object | null)[];
    author_association?: string;
    body?: string | null;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (object | null)[];
    labels_url?: string;
    locked?: boolean;
    milestone?: object | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: object | null;
    reactions?: {
      "+1"?: number;
      "-1"?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: "closed" | "open";
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      /** @format int64 */
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues deleted event */
export interface WebhookIssuesDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues demilestoned event */
export interface WebhookIssuesDemilestoned {
  action: "demilestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** A collection of related issues and pull requests. */
  milestone?: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues edited event */
export interface WebhookIssuesEdited {
  action: "edited";
  /** The changes to the issue. */
  changes: {
    body?: {
      /** The previous version of the body. */
      from: string;
    };
    title?: {
      /** The previous version of the title. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** The type of issue. */
    type?: IssueType;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  label?: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues labeled event */
export interface WebhookIssuesLabeled {
  action: "labeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** The type of issue. */
    type?: IssueType;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  label?: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues locked event */
export interface WebhookIssuesLocked {
  action: "locked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked: true;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
        | "security_and_analysis"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** The type of issue. */
    type?: IssueType;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues milestoned event */
export interface WebhookIssuesMilestoned {
  action: "milestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues opened event */
export interface WebhookIssuesOpened {
  action: "opened";
  changes?: {
    /**
     * Issue
     * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
     */
    old_issue: {
      active_lock_reason?: "resolved" | "off-topic" | "too heated" | "spam" | null;
      /** User */
      assignee?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      assignees?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      }[];
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association?:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** Contents of the issue */
      body?: string | null;
      /** @format date-time */
      closed_at?: string | null;
      comments?: number;
      /** @format uri */
      comments_url?: string;
      /** @format date-time */
      created_at?: string;
      draft?: boolean;
      /** @format uri */
      events_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      labels?: {
        /** 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /** The name of the label. */
        name: string;
        node_id: string;
        /**
         * URL for the label
         * @format uri
         */
        url: string;
      }[];
      /** @format uri-template */
      labels_url?: string;
      locked?: boolean;
      /**
       * Milestone
       * A collection of related issues and pull requests.
       */
      milestone?: {
        /** @format date-time */
        closed_at: string | null;
        closed_issues: number;
        /** @format date-time */
        created_at: string;
        /** User */
        creator: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        description: string | null;
        /** @format date-time */
        due_on: string | null;
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        labels_url: string;
        node_id: string;
        /** The number of the milestone. */
        number: number;
        open_issues: number;
        /** The state of the milestone. */
        state: "open" | "closed";
        /** The title of the milestone. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
      };
      node_id?: string;
      number: number;
      /**
       * App
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        /** @format date-time */
        created_at: string | null;
        description: string | null;
        /** The list of events for the GitHub app */
        events?: (
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "content_reference"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_review"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "milestone"
          | "organization"
          | "org_block"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_dispatch"
          | "secret_scanning_alert"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_dispatch"
          | "workflow_run"
        )[];
        /** @format uri */
        external_url: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the GitHub app */
        id: number | null;
        /** The name of the GitHub app */
        name: string;
        node_id: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /** The set of permissions for the GitHub app */
        permissions?: {
          actions?: "read" | "write";
          administration?: "read" | "write";
          checks?: "read" | "write";
          content_references?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          discussions?: "read" | "write";
          emails?: "read" | "write";
          environments?: "read" | "write";
          issues?: "read" | "write";
          keys?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_packages?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_secrets?: "read" | "write";
          organization_self_hosted_runners?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          packages?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          secret_scanning_alerts?: "read" | "write";
          secrets?: "read" | "write";
          security_events?: "read" | "write";
          security_scanning_alert?: "read" | "write";
          single_file?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
          workflows?: "read" | "write";
        };
        /** The slug name of the GitHub app */
        slug?: string;
        /** @format date-time */
        updated_at: string | null;
      };
      pull_request?: {
        /** @format uri */
        diff_url?: string;
        /** @format uri */
        html_url?: string;
        /** @format date-time */
        merged_at?: string | null;
        /** @format uri */
        patch_url?: string;
        /** @format uri */
        url?: string;
      };
      /** Reactions */
      reactions?: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** @format uri */
      repository_url?: string;
      /** Sub-issues Summary */
      sub_issues_summary?: {
        total: number;
        completed: number;
        percent_completed: number;
      };
      /** State of the issue; either 'open' or 'closed' */
      state?: "open" | "closed";
      state_reason?: string | null;
      /** @format uri */
      timeline_url?: string;
      /** Title of the issue */
      title?: string;
      /** @format date-time */
      updated_at?: string;
      /**
       * URL for the issue
       * @format uri
       */
      url?: string;
      /** User */
      user?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The type of issue. */
      type?: IssueType;
    };
    /**
     * Repository
     * A git repository
     */
    old_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
      custom_properties?: Record<string, any>;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /** Whether the repository has discussions enabled. */
      has_discussions?: boolean;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require commit signoff. */
      web_commit_signoff_required?: boolean;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "security_and_analysis"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues pinned event */
export interface WebhookIssuesPinned {
  action: "pinned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue2;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues reopened event */
export interface WebhookIssuesReopened {
  action: "reopened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
        | "pull_request_review_thread"
        | "reminder"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write" | "admin";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write" | "admin";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The type of issue. */
    type?: IssueType;
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues transferred event */
export interface WebhookIssuesTransferred {
  action: "transferred";
  changes: {
    /**
     * Issue
     * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
     */
    new_issue: {
      active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
      /** User */
      assignee?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      assignees: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      }[];
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** Contents of the issue */
      body: string | null;
      /** @format date-time */
      closed_at: string | null;
      comments: number;
      /** @format uri */
      comments_url: string;
      /** @format date-time */
      created_at: string;
      draft?: boolean;
      /** @format uri */
      events_url: string;
      /** @format uri */
      html_url: string;
      /** @format int64 */
      id: number;
      labels?: {
        /** 6-character hex code, without the leading #, identifying the color */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /** The name of the label. */
        name: string;
        node_id: string;
        /**
         * URL for the label
         * @format uri
         */
        url: string;
      }[];
      /** @format uri-template */
      labels_url: string;
      locked?: boolean;
      /**
       * Milestone
       * A collection of related issues and pull requests.
       */
      milestone: {
        /** @format date-time */
        closed_at: string | null;
        closed_issues: number;
        /** @format date-time */
        created_at: string;
        /** User */
        creator: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        description: string | null;
        /** @format date-time */
        due_on: string | null;
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        labels_url: string;
        node_id: string;
        /** The number of the milestone. */
        number: number;
        open_issues: number;
        /** The state of the milestone. */
        state: "open" | "closed";
        /** The title of the milestone. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
      };
      node_id: string;
      number: number;
      /**
       * App
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        /** @format date-time */
        created_at: string | null;
        description: string | null;
        /** The list of events for the GitHub app */
        events?: (
          | "branch_protection_rule"
          | "check_run"
          | "check_suite"
          | "code_scanning_alert"
          | "commit_comment"
          | "content_reference"
          | "create"
          | "delete"
          | "deployment"
          | "deployment_review"
          | "deployment_status"
          | "deploy_key"
          | "discussion"
          | "discussion_comment"
          | "fork"
          | "gollum"
          | "issues"
          | "issue_comment"
          | "label"
          | "member"
          | "membership"
          | "milestone"
          | "organization"
          | "org_block"
          | "page_build"
          | "project"
          | "project_card"
          | "project_column"
          | "public"
          | "pull_request"
          | "pull_request_review"
          | "pull_request_review_comment"
          | "push"
          | "registry_package"
          | "release"
          | "repository"
          | "repository_dispatch"
          | "secret_scanning_alert"
          | "star"
          | "status"
          | "team"
          | "team_add"
          | "watch"
          | "workflow_dispatch"
          | "workflow_run"
        )[];
        /** @format uri */
        external_url: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the GitHub app */
        id: number | null;
        /** The name of the GitHub app */
        name: string;
        node_id: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /** The set of permissions for the GitHub app */
        permissions?: {
          actions?: "read" | "write";
          administration?: "read" | "write";
          checks?: "read" | "write";
          content_references?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          discussions?: "read" | "write";
          emails?: "read" | "write";
          environments?: "read" | "write";
          issues?: "read" | "write";
          keys?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_packages?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_secrets?: "read" | "write";
          organization_self_hosted_runners?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          packages?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          secret_scanning_alerts?: "read" | "write";
          secrets?: "read" | "write";
          security_events?: "read" | "write";
          security_scanning_alert?: "read" | "write";
          single_file?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
          workflows?: "read" | "write";
        };
        /** The slug name of the GitHub app */
        slug?: string;
        /** @format date-time */
        updated_at: string | null;
      };
      pull_request?: {
        /** @format uri */
        diff_url?: string;
        /** @format uri */
        html_url?: string;
        /** @format date-time */
        merged_at?: string | null;
        /** @format uri */
        patch_url?: string;
        /** @format uri */
        url?: string;
      };
      /** Reactions */
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** @format uri */
      repository_url: string;
      /** Sub-issues Summary */
      sub_issues_summary?: {
        total: number;
        completed: number;
        percent_completed: number;
      };
      /** State of the issue; either 'open' or 'closed' */
      state?: "open" | "closed";
      state_reason?: string | null;
      /** @format uri */
      timeline_url?: string;
      /** Title of the issue */
      title: string;
      /** The type of issue. */
      type?: IssueType;
      /** @format date-time */
      updated_at: string;
      /**
       * URL for the issue
       * @format uri
       */
      url: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /**
     * Repository
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       * @default false
       */
      allow_auto_merge?: boolean;
      /** Whether to allow private forks */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @default true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @default true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @default true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      /** @format uri-template */
      archive_url: string;
      /**
       * Whether the repository is archived.
       * @default false
       */
      archived: boolean;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri */
      clone_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      created_at: number | string;
      /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
      custom_properties?: Record<string, any>;
      /** The default branch of the repository. */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       * @default false
       */
      delete_branch_on_merge?: boolean;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** Returns whether or not this repository is disabled. */
      disabled?: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @default true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @default true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @default true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @default true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       * @default false
       */
      has_discussions: boolean;
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /**
       * Unique identifier of the repository
       * @format int64
       */
      id: number;
      is_template?: boolean;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      /** License */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      public?: boolean;
      /** @format uri-template */
      pulls_url: string;
      pushed_at: number | string | null;
      /** @format uri-template */
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      topics: string[];
      /** @format uri-template */
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      /** Whether to require contributors to sign off on web-based commits */
      web_commit_signoff_required?: boolean;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue2;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues typed event */
export interface WebhookIssuesTyped {
  action: "typed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /** The type of issue. */
  type: IssueType;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unassigned event */
export interface WebhookIssuesUnassigned {
  /** The action that was performed. */
  action: "unassigned";
  assignee?: WebhooksUserMannequin;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unlabeled event */
export interface WebhookIssuesUnlabeled {
  action: "unlabeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  label?: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unlocked event */
export interface WebhookIssuesUnlocked {
  action: "unlocked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Contents of the issue */
    body: string | null;
    /** @format date-time */
    closed_at: string | null;
    comments: number;
    /** @format uri */
    comments_url: string;
    /** @format date-time */
    created_at: string;
    draft?: boolean;
    /** @format uri */
    events_url: string;
    /** @format uri */
    html_url: string;
    /** @format int64 */
    id: number;
    labels?: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    /** @format uri-template */
    labels_url: string;
    locked: false;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      /** @format date-time */
      created_at: string | null;
      description: string | null;
      /** The list of events for the GitHub app */
      events?: (
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "content_reference"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_review"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "milestone"
        | "organization"
        | "org_block"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_dispatch"
        | "secret_scanning_alert"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_dispatch"
        | "workflow_run"
      )[];
      /** @format uri */
      external_url: string | null;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the GitHub app */
      id: number | null;
      /** The name of the GitHub app */
      name: string;
      node_id: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The set of permissions for the GitHub app */
      permissions?: {
        actions?: "read" | "write";
        administration?: "read" | "write";
        checks?: "read" | "write";
        content_references?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        discussions?: "read" | "write";
        emails?: "read" | "write";
        environments?: "read" | "write";
        issues?: "read" | "write";
        keys?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_packages?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_secrets?: "read" | "write";
        organization_self_hosted_runners?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        packages?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        secret_scanning_alerts?: "read" | "write";
        secrets?: "read" | "write";
        security_events?: "read" | "write";
        security_scanning_alert?: "read" | "write";
        single_file?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
        workflows?: "read" | "write";
      };
      /** The slug name of the GitHub app */
      slug?: string;
      /** @format date-time */
      updated_at: string | null;
    };
    pull_request?: {
      /** @format uri */
      diff_url?: string;
      /** @format uri */
      html_url?: string;
      /** @format date-time */
      merged_at?: string | null;
      /** @format uri */
      patch_url?: string;
      /** @format uri */
      url?: string;
    };
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    repository_url: string;
    /** Sub-issues Summary */
    sub_issues_summary?: {
      total: number;
      completed: number;
      percent_completed: number;
    };
    /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed";
    state_reason?: string | null;
    /** @format uri */
    timeline_url?: string;
    /** Title of the issue */
    title: string;
    /** The type of issue. */
    type?: IssueType;
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the issue
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues unpinned event */
export interface WebhookIssuesUnpinned {
  action: "unpinned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue2;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** issues untyped event */
export interface WebhookIssuesUntyped {
  action: "untyped";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself. */
  issue: WebhooksIssue;
  /** The type of issue. */
  type: IssueType;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** label created event */
export interface WebhookLabelCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** label deleted event */
export interface WebhookLabelDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** label edited event */
export interface WebhookLabelEdited {
  action: "edited";
  /** The changes to the label if the action was `edited`. */
  changes?: {
    color?: {
      /** The previous version of the color if the action was `edited`. */
      from: string;
    };
    description?: {
      /** The previous version of the description if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The previous version of the name if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label: WebhooksLabel;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase cancelled event */
export interface WebhookMarketplacePurchaseCancelled {
  action: "cancelled";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  previous_marketplace_purchase?: WebhooksPreviousMarketplacePurchase;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase changed event */
export interface WebhookMarketplacePurchaseChanged {
  action: "changed";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Marketplace Purchase */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean | null;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase pending_change event */
export interface WebhookMarketplacePurchasePendingChange {
  action: "pending_change";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Marketplace Purchase */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase pending_change_cancelled event */
export interface WebhookMarketplacePurchasePendingChangeCancelled {
  action: "pending_change_cancelled";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** Marketplace Purchase */
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: any;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  previous_marketplace_purchase?: WebhooksPreviousMarketplacePurchase;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** marketplace_purchase purchased event */
export interface WebhookMarketplacePurchasePurchased {
  action: "purchased";
  effective_date: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  marketplace_purchase: WebhooksMarketplacePurchase;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  previous_marketplace_purchase?: WebhooksPreviousMarketplacePurchase;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** member added event */
export interface WebhookMemberAdded {
  action: "added";
  changes?: {
    /**
     * This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
     * role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
     * assigned to the collaborator, use the `role_name` field instead, which will provide the full
     * role name, including custom roles.
     */
    permission?: {
      to: "write" | "admin" | "read";
    };
    /** The role assigned to the collaborator. */
    role_name?: {
      to: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** member edited event */
export interface WebhookMemberEdited {
  action: "edited";
  /** The changes to the collaborator permissions */
  changes: {
    old_permission?: {
      /** The previous permissions of the collaborator if the action was edited. */
      from: string;
    };
    permission?: {
      from?: string | null;
      to?: string | null;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** member removed event */
export interface WebhookMemberRemoved {
  action: "removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** membership added event */
export interface WebhookMembershipAdded {
  action: "added";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The scope of the membership. Currently, can only be `team`. */
  scope: "team";
  /** User */
  sender: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam;
}

/** membership removed event */
export interface WebhookMembershipRemoved {
  action: "removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  member: WebhooksUser;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The scope of the membership. Currently, can only be `team`. */
  scope: "team" | "organization";
  /** User */
  sender: {
    /** @format uri */
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    /** @format uri-template */
    events_url?: string;
    /** @format uri */
    followers_url?: string;
    /** @format uri-template */
    following_url?: string;
    /** @format uri-template */
    gists_url?: string;
    gravatar_id?: string;
    /** @format uri */
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    /** @format uri */
    organizations_url?: string;
    /** @format uri */
    received_events_url?: string;
    /** @format uri */
    repos_url?: string;
    site_admin?: boolean;
    /** @format uri-template */
    starred_url?: string;
    /** @format uri */
    subscriptions_url?: string;
    type?: "Bot" | "User" | "Organization";
    /** @format uri */
    url?: string;
    user_view_type?: string;
  };
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam;
}

export interface WebhookMergeGroupChecksRequested {
  action: "checks_requested";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A group of pull requests that the merge queue has grouped together to be merged. */
  merge_group: MergeGroup;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

export interface WebhookMergeGroupDestroyed {
  action: "destroyed";
  /** Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated). */
  reason?: "merged" | "invalidated" | "dequeued";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A group of pull requests that the merge queue has grouped together to be merged. */
  merge_group: MergeGroup;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** meta deleted event */
export interface WebhookMetaDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** The deleted webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace. */
  hook: {
    active: boolean;
    config: {
      content_type: "json" | "form";
      insecure_ssl: string;
      secret?: string;
      /** @format uri */
      url: string;
    };
    created_at: string;
    events: (
      | "*"
      | "branch_protection_rule"
      | "check_run"
      | "check_suite"
      | "code_scanning_alert"
      | "commit_comment"
      | "create"
      | "delete"
      | "deployment"
      | "deployment_status"
      | "deploy_key"
      | "discussion"
      | "discussion_comment"
      | "fork"
      | "gollum"
      | "issues"
      | "issue_comment"
      | "label"
      | "member"
      | "membership"
      | "meta"
      | "milestone"
      | "organization"
      | "org_block"
      | "package"
      | "page_build"
      | "project"
      | "project_card"
      | "project_column"
      | "public"
      | "pull_request"
      | "pull_request_review"
      | "pull_request_review_comment"
      | "pull_request_review_thread"
      | "push"
      | "registry_package"
      | "release"
      | "repository"
      | "repository_import"
      | "repository_vulnerability_alert"
      | "secret_scanning_alert"
      | "secret_scanning_alert_location"
      | "security_and_analysis"
      | "star"
      | "status"
      | "team"
      | "team_add"
      | "watch"
      | "workflow_job"
      | "workflow_run"
      | "repository_dispatch"
      | "projects_v2_item"
    )[];
    id: number;
    name: string;
    type: string;
    updated_at: string;
  };
  /** The id of the modified webhook. */
  hook_id: number;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** milestone closed event */
export interface WebhookMilestoneClosed {
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone created event */
export interface WebhookMilestoneCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone3;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone deleted event */
export interface WebhookMilestoneDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone edited event */
export interface WebhookMilestoneEdited {
  action: "edited";
  /** The changes to the milestone if the action was `edited`. */
  changes: {
    description?: {
      /** The previous version of the description if the action was `edited`. */
      from: string;
    };
    due_on?: {
      /** The previous version of the due date if the action was `edited`. */
      from: string;
    };
    title?: {
      /** The previous version of the title if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** milestone opened event */
export interface WebhookMilestoneOpened {
  action: "opened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** A collection of related issues and pull requests. */
  milestone: WebhooksMilestone3;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** org_block blocked event */
export interface WebhookOrgBlockBlocked {
  action: "blocked";
  blocked_user: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** org_block unblocked event */
export interface WebhookOrgBlockUnblocked {
  action: "unblocked";
  blocked_user: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization deleted event */
export interface WebhookOrganizationDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership?: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization member_added event */
export interface WebhookOrganizationMemberAdded {
  action: "member_added";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization member_invited event */
export interface WebhookOrganizationMemberInvited {
  action: "member_invited";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The invitation for the user or email if the action is `member_invited`. */
  invitation: {
    /** @format date-time */
    created_at: string;
    email: string | null;
    /** @format date-time */
    failed_at: string | null;
    failed_reason: string | null;
    id: number;
    /** @format uri */
    invitation_teams_url: string;
    /** User */
    inviter: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    login: string | null;
    node_id: string;
    role: string;
    team_count: number;
    invitation_source?: string;
  };
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  user?: WebhooksUser;
}

/** organization member_removed event */
export interface WebhookOrganizationMemberRemoved {
  action: "member_removed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** organization renamed event */
export interface WebhookOrganizationRenamed {
  action: "renamed";
  changes?: {
    login?: {
      from?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
  membership?: WebhooksMembership;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Ruby Gems metadata */
export interface WebhookRubygemsMetadata {
  name?: string;
  description?: string;
  readme?: string;
  homepage?: string;
  version_info?: {
    version?: string;
  };
  platform?: string;
  metadata?: Record<string, string>;
  repo?: string;
  dependencies?: Record<string, string>[];
  commit_oid?: string;
}

/** package published event */
export interface WebhookPackagePublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Information about the package. */
  package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    /** @format uri */
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      /** User */
      author?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      body?: string | object;
      body_html?: string;
      container_metadata?: {
        labels?: object | null;
        manifest?: object | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      /** @format uri */
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      npm_metadata?: {
        name?: string;
        version?: string;
        npm_user?: string;
        author?: object | null;
        bugs?: object | null;
        dependencies?: object;
        dev_dependencies?: object;
        peer_dependencies?: object;
        optional_dependencies?: object;
        description?: string;
        dist?: object | null;
        git_head?: string;
        homepage?: string;
        license?: string;
        main?: string;
        repository?: object | null;
        scripts?: object;
        id?: string;
        node_version?: string;
        npm_version?: string;
        has_shrinkwrap?: boolean;
        maintainers?: object[];
        contributors?: object[];
        engines?: object;
        keywords?: string[];
        files?: string[];
        bin?: object;
        man?: object;
        directories?: object | null;
        os?: string[];
        cpu?: string[];
        readme?: string;
        installation_command?: string;
        release_id?: number;
        commit_oid?: string;
        published_via_actions?: boolean;
        deleted_by_id?: number;
      };
      nuget_metadata?:
        | {
            id?: number | string;
            name?: string;
            value?:
              | boolean
              | string
              | number
              | {
                  url?: string;
                  branch?: string;
                  commit?: string;
                  type?: string;
                };
          }[]
        | null;
      package_files: {
        content_type: string;
        created_at: string;
        /** @format uri */
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        /** User */
        author: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        created_at: string;
        draft: boolean;
        /** @format uri */
        html_url: string;
        id: number;
        name: string | null;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        /** @format uri */
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    };
    registry: {
      /** @format uri */
      about_url: string;
      name: string;
      type: string;
      /** @format uri */
      url: string;
      vendor: string;
    } | null;
    updated_at: string | null;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** package updated event */
export interface WebhookPackageUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Information about the package. */
  package: {
    created_at: string;
    description: string | null;
    ecosystem: string;
    /** @format uri */
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      /** User */
      author: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      /** @format uri */
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      package_files: {
        content_type: string;
        created_at: string;
        /** @format uri */
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string;
        size: number;
        state: string;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        /** User */
        author: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        created_at: string;
        draft: boolean;
        /** @format uri */
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        /** @format uri */
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      /** @format uri */
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: {
      /** @format uri */
      about_url: string;
      name: string;
      type: string;
      /** @format uri */
      url: string;
      vendor: string;
    } | null;
    updated_at: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** page_build event */
export interface WebhookPageBuild {
  /** The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself. */
  build: {
    commit: string | null;
    created_at: string;
    duration: number;
    error: {
      message: string | null;
    };
    /** User */
    pusher: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    status: string;
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  id: number;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** personal_access_token_request approved event */
export interface WebhookPersonalAccessTokenRequestApproved {
  action: "approved";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
}

/** personal_access_token_request cancelled event */
export interface WebhookPersonalAccessTokenRequestCancelled {
  action: "cancelled";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
}

/** personal_access_token_request created event */
export interface WebhookPersonalAccessTokenRequestCreated {
  action: "created";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
}

/** personal_access_token_request denied event */
export interface WebhookPersonalAccessTokenRequestDenied {
  action: "denied";
  /** Details of a Personal Access Token Request. */
  personal_access_token_request: PersonalAccessTokenRequest;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
}

export interface WebhookPing {
  /**
   * Webhook
   * The webhook that is being pinged
   */
  hook?: {
    /** Determines whether the hook is actually triggered for the events it subscribes to. */
    active: boolean;
    /** Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app. */
    app_id?: number;
    config: {
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: WebhookConfigContentType;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: WebhookConfigInsecureSsl;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
      secret?: WebhookConfigSecret;
      /** The URL to which the payloads will be delivered. */
      url?: WebhookConfigUrl;
    };
    /** @format date-time */
    created_at: string;
    /** @format uri */
    deliveries_url?: string;
    /** Determines what events the hook is triggered for. Default: ['push']. */
    events: string[];
    /** Unique identifier of the webhook. */
    id: number;
    last_response?: HookResponse;
    /** The type of webhook. The only valid value is 'web'. */
    name: "web";
    /** @format uri */
    ping_url?: string;
    /** @format uri */
    test_url?: string;
    type: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url?: string;
  };
  /** The ID of the webhook that triggered the ping. */
  hook_id?: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  /** Random string of GitHub zen. */
  zen?: string;
}

/** The webhooks ping payload encoded with URL encoding. */
export interface WebhookPingFormEncoded {
  /** A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** project_card converted event */
export interface WebhookProjectCardConverted {
  action: "converted";
  changes: {
    note: {
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: WebhooksProjectCard;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card created event */
export interface WebhookProjectCardCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: WebhooksProjectCard;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card deleted event */
export interface WebhookProjectCardDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Project Card */
  project_card: {
    after_id?: number | null;
    /** Whether or not the card is archived */
    archived: boolean;
    column_id: number | null;
    /** @format uri */
    column_url: string;
    /** @format uri */
    content_url?: string;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The project card's ID */
    id: number;
    node_id: string;
    note: string | null;
    /** @format uri */
    project_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card edited event */
export interface WebhookProjectCardEdited {
  action: "edited";
  changes: {
    note: {
      from: string | null;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: WebhooksProjectCard;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_card moved event */
export interface WebhookProjectCardMoved {
  action: "moved";
  changes?: {
    column_id: {
      from: number;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_card: {
    after_id?: number | null;
    /** Whether or not the card is archived */
    archived: boolean;
    column_id: number;
    /** @format uri */
    column_url: string;
    /** @format uri */
    content_url?: string;
    /** @format date-time */
    created_at: string;
    /** User */
    creator: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** The project card's ID */
    id: number;
    node_id: string;
    note: string | null;
    /** @format uri */
    project_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
  } & {
    after_id: number | null;
    archived?: boolean;
    column_id?: number;
    column_url?: string;
    created_at?: string;
    creator?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    } | null;
    id?: number;
    node_id?: string;
    note?: string | null;
    project_url?: string;
    updated_at?: string;
    url?: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project closed event */
export interface WebhookProjectClosed {
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project_column created event */
export interface WebhookProjectColumnCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project_column deleted event */
export interface WebhookProjectColumnDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project_column edited event */
export interface WebhookProjectColumnEdited {
  action: "edited";
  changes: {
    name?: {
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project_column moved event */
export interface WebhookProjectColumnMoved {
  action: "moved";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project_column: WebhooksProjectColumn;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project created event */
export interface WebhookProjectCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** project deleted event */
export interface WebhookProjectDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: NullableRepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project edited event */
export interface WebhookProjectEdited {
  action: "edited";
  /** The changes to the project if the action was `edited`. */
  changes?: {
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The changes to the project if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** project reopened event */
export interface WebhookProjectReopened {
  action: "reopened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  project: WebhooksProject;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Closed Event */
export interface WebhookProjectsV2ProjectClosed {
  action: "closed";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** A project was created */
export interface WebhookProjectsV2ProjectCreated {
  action: "created";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Deleted Event */
export interface WebhookProjectsV2ProjectDeleted {
  action: "deleted";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Edited Event */
export interface WebhookProjectsV2ProjectEdited {
  action: "edited";
  changes: {
    description?: {
      from?: string | null;
      to?: string | null;
    };
    public?: {
      from?: boolean;
      to?: boolean;
    };
    short_description?: {
      from?: string | null;
      to?: string | null;
    };
    title?: {
      from?: string;
      to?: string;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Archived Event */
export interface WebhookProjectsV2ItemArchived {
  action: "archived";
  changes: WebhooksProjectChanges;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Converted Event */
export interface WebhookProjectsV2ItemConverted {
  action: "converted";
  changes: {
    content_type?: {
      from?: string | null;
      to?: string;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Created Event */
export interface WebhookProjectsV2ItemCreated {
  action: "created";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Deleted Event */
export interface WebhookProjectsV2ItemDeleted {
  action: "deleted";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Edited Event */
export interface WebhookProjectsV2ItemEdited {
  action: "edited";
  /**
   * The changes made to the item may involve modifications in the item's fields and draft issue body.
   * It includes altered values for text, number, date, single select, and iteration fields, along with the GraphQL node ID of the changed field.
   */
  changes?:
    | {
        field_value: {
          field_node_id?: string;
          field_type?: string;
          field_name?: string;
          project_number?: number;
          from?: string | number | ProjectsV2SingleSelectOption | ProjectsV2IterationSetting | null;
          to?: string | number | ProjectsV2SingleSelectOption | ProjectsV2IterationSetting | null;
        };
      }
    | {
        body: {
          from?: string | null;
          to?: string | null;
        };
      };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Reordered Event */
export interface WebhookProjectsV2ItemReordered {
  action: "reordered";
  changes: {
    previous_projects_v2_item_node_id?: {
      from?: string | null;
      to?: string | null;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Item Restored Event */
export interface WebhookProjectsV2ItemRestored {
  action: "restored";
  changes: WebhooksProjectChanges;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An item belonging to a project */
  projects_v2_item: ProjectsV2Item;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Project Reopened Event */
export interface WebhookProjectsV2ProjectReopened {
  action: "reopened";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** A projects v2 project */
  projects_v2: ProjectsV2;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Status Update Created Event */
export interface WebhookProjectsV2StatusUpdateCreated {
  action: "created";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An status update belonging to a project */
  projects_v2_status_update: ProjectsV2StatusUpdate;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Status Update Deleted Event */
export interface WebhookProjectsV2StatusUpdateDeleted {
  action: "deleted";
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An status update belonging to a project */
  projects_v2_status_update: ProjectsV2StatusUpdate;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Projects v2 Status Update Edited Event */
export interface WebhookProjectsV2StatusUpdateEdited {
  action: "edited";
  changes?: {
    body?: {
      from?: string | null;
      to?: string | null;
    };
    status?: {
      from?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
      to?: "INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE" | null;
    };
    start_date?: {
      /** @format date */
      from?: string | null;
      /** @format date */
      to?: string | null;
    };
    target_date?: {
      /** @format date */
      from?: string | null;
      /** @format date */
      to?: string | null;
    };
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /** An status update belonging to a project */
  projects_v2_status_update: ProjectsV2StatusUpdate;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** public event */
export interface WebhookPublic {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request assigned event */
export interface WebhookPullRequestAssigned {
  action: "assigned";
  assignee: WebhooksUser;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request auto_merge_disabled event */
export interface WebhookPullRequestAutoMergeDisabled {
  action: "auto_merge_disabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  reason: string;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request auto_merge_enabled event */
export interface WebhookPullRequestAutoMergeEnabled {
  action: "auto_merge_enabled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the repository */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  reason?: string;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request closed event */
export interface WebhookPullRequestClosed {
  action: "closed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request converted_to_draft event */
export interface WebhookPullRequestConvertedToDraft {
  action: "converted_to_draft";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request demilestoned event */
export interface WebhookPullRequestDemilestoned {
  action: "demilestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** A collection of related issues and pull requests. */
  milestone?: Milestone;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: WebhooksPullRequest5;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request dequeued event */
export interface WebhookPullRequestDequeued {
  action: "dequeued";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  reason:
    | "UNKNOWN_REMOVAL_REASON"
    | "MANUAL"
    | "MERGE"
    | "MERGE_CONFLICT"
    | "CI_FAILURE"
    | "CI_TIMEOUT"
    | "ALREADY_MERGED"
    | "QUEUE_CLEARED"
    | "ROLL_BACK"
    | "BRANCH_PROTECTIONS"
    | "GIT_TREE_INVALID"
    | "INVALID_MERGE_COMMIT";
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request edited event */
export interface WebhookPullRequestEdited {
  action: "edited";
  /** The changes to the comment if the action was `edited`. */
  changes: {
    base?: {
      ref: {
        from: string;
      };
      sha: {
        from: string;
      };
    };
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
    title?: {
      /** The previous version of the title if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request enqueued event */
export interface WebhookPullRequestEnqueued {
  action: "enqueued";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  number: number;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request labeled event */
export interface WebhookPullRequestLabeled {
  action: "labeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label?: WebhooksLabel;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request locked event */
export interface WebhookPullRequestLocked {
  action: "locked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request milestoned event */
export interface WebhookPullRequestMilestoned {
  action: "milestoned";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** A collection of related issues and pull requests. */
  milestone?: Milestone;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: WebhooksPullRequest5;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request opened event */
export interface WebhookPullRequestOpened {
  action: "opened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request ready_for_review event */
export interface WebhookPullRequestReadyForReview {
  action: "ready_for_review";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request reopened event */
export interface WebhookPullRequestReopened {
  action: "reopened";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequestWebhook;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_comment created event */
export interface WebhookPullRequestReviewCommentCreated {
  action: "created";
  /**
   * Pull Request Review Comment
   * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
   */
  comment: {
    _links: {
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      pull_request: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** The text of the comment. */
    body: string;
    /** The SHA of the commit to which the comment applies. */
    commit_id: string;
    /** @format date-time */
    created_at: string;
    /** The diff of the line that the comment refers to. */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     * @format uri
     */
    html_url: string;
    /** The ID of the pull request review comment. */
    id: number;
    /** The comment ID to reply to. */
    in_reply_to_id?: number;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null;
    /** The node ID of the pull request review comment. */
    node_id: string;
    /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string;
    /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line: number | null;
    /** The index of the original line in the diff to which the comment applies. */
    original_position: number;
    /** The first line of the range for a multi-line comment. */
    original_start_line: number | null;
    /** The relative path of the file to which the comment applies. */
    path: string;
    /** The line index in the diff to which the comment applies. */
    position: number | null;
    /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     * @format uri
     */
    pull_request_url: string;
    /** Reactions */
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** The side of the first line of the range for a multi-line comment. */
    side: "LEFT" | "RIGHT";
    /** The first line of the range for a multi-line comment. */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     * @default "RIGHT"
     */
    start_side: "LEFT" | "RIGHT" | null;
    /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file";
    /** @format date-time */
    updated_at: string;
    /**
     * URL for the pull request review comment
     * @format uri
     */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions?: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_comment deleted event */
export interface WebhookPullRequestReviewCommentDeleted {
  action: "deleted";
  /** The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself. */
  comment: WebhooksReviewComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_comment edited event */
export interface WebhookPullRequestReviewCommentEdited {
  action: "edited";
  /** The changes to the comment. */
  changes: WebhooksChanges;
  /** The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself. */
  comment: WebhooksReviewComment;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      user_view_type?: string;
      /** @format uri */
      url?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review dismissed event */
export interface WebhookPullRequestReviewDismissed {
  action: "dismissed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The review that was affected. */
  review: {
    _links: {
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      pull_request: {
        /** @format uri-template */
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** The text of the review. */
    body: string | null;
    /** A commit SHA for the review. */
    commit_id: string;
    /** @format uri */
    html_url: string;
    /** Unique identifier of the review */
    id: number;
    node_id: string;
    /** @format uri */
    pull_request_url: string;
    state: "dismissed" | "approved" | "changes_requested";
    /** @format date-time */
    submitted_at: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review edited event */
export interface WebhookPullRequestReviewEdited {
  action: "edited";
  changes: {
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The review that was affected. */
  review: WebhooksReview;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request review_request_removed event */
export type WebhookPullRequestReviewRequestRemoved =
  | {
      action: "review_request_removed";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /** The default value for a squash merge commit message. */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /** The default value for a squash merge commit title. */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description: string | null;
              /** @format uri */
              html_url: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url: string;
              /** Name of the team */
              name: string;
              node_id: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /** User */
      requested_reviewer: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    }
  | {
      action: "review_request_removed";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description: string | null;
              /** @format uri */
              html_url: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url: string;
              /** Name of the team */
              name: string;
              node_id: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /**
       * Team
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        parent?: {
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        };
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    };

/** pull_request review_requested event */
export type WebhookPullRequestReviewRequested =
  | {
      action: "review_requested";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description: string | null;
              /** @format uri */
              html_url: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url: string;
              /** Name of the team */
              name: string;
              node_id: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission: string;
              privacy: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               * @format uri
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /** User */
      requested_reviewer: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    }
  | {
      action: "review_requested";
      /**
       * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
       * on an enterprise account or an organization that's part of an enterprise account. For more information,
       * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
       */
      enterprise?: EnterpriseWebhooks;
      /**
       * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
       * for and sent to a GitHub App. For more information,
       * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
       */
      installation?: SimpleInstallation;
      /** The pull request number. */
      number: number;
      /**
       * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
       * organization, or when the event occurs from activity in a repository owned by an organization.
       */
      organization?: OrganizationSimpleWebhooks;
      /** Pull Request */
      pull_request: {
        _links: {
          /** Link */
          comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          commits: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          html: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          issue: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comment: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          review_comments: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          self: {
            /** @format uri-template */
            href: string;
          };
          /** Link */
          statuses: {
            /** @format uri-template */
            href: string;
          };
        };
        active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
        additions?: number;
        /** User */
        assignee: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        assignees: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /** Commit message for the merge commit. */
          commit_message: string | null;
          /** Title for the merge commit message. */
          commit_title: string | null;
          /** User */
          enabled_by: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          /** The merge method to use. */
          merge_method: "merge" | "squash" | "rebase";
        };
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        body: string | null;
        changed_files?: number;
        /** @format date-time */
        closed_at: string | null;
        comments?: number;
        /** @format uri */
        comments_url: string;
        commits?: number;
        /** @format uri */
        commits_url: string;
        /** @format date-time */
        created_at: string;
        deletions?: number;
        /** @format uri */
        diff_url: string;
        /** Indicates whether or not the pull request is a draft. */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             * @default false
             */
            allow_auto_merge?: boolean;
            /** Whether to allow private forks */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            /** @format uri-template */
            archive_url: string;
            /**
             * Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @format uri-template */
            assignees_url: string;
            /** @format uri-template */
            blobs_url: string;
            /** @format uri-template */
            branches_url: string;
            /** @format uri */
            clone_url: string;
            /** @format uri-template */
            collaborators_url: string;
            /** @format uri-template */
            comments_url: string;
            /** @format uri-template */
            commits_url: string;
            /** @format uri-template */
            compare_url: string;
            /** @format uri-template */
            contents_url: string;
            /** @format uri */
            contributors_url: string;
            created_at: number | string;
            /** The default branch of the repository. */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge?: boolean;
            /** @format uri */
            deployments_url: string;
            description: string | null;
            /** Returns whether or not this repository is disabled. */
            disabled?: boolean;
            /** @format uri */
            downloads_url: string;
            /** @format uri */
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            /** @format uri */
            forks_url: string;
            full_name: string;
            /** @format uri-template */
            git_commits_url: string;
            /** @format uri-template */
            git_refs_url: string;
            /** @format uri-template */
            git_tags_url: string;
            /** @format uri */
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             * @default false
             */
            has_discussions: boolean;
            homepage: string | null;
            /** @format uri */
            hooks_url: string;
            /** @format uri */
            html_url: string;
            /**
             * Unique identifier of the repository
             * @format int64
             */
            id: number;
            is_template?: boolean;
            /** @format uri-template */
            issue_comment_url: string;
            /** @format uri-template */
            issue_events_url: string;
            /** @format uri-template */
            issues_url: string;
            /** @format uri-template */
            keys_url: string;
            /** @format uri-template */
            labels_url: string;
            language: string | null;
            /** @format uri */
            languages_url: string;
            /** License */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              /** @format uri */
              url: string | null;
            };
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            /** @format uri */
            merges_url: string;
            /** @format uri-template */
            milestones_url: string;
            /** @format uri */
            mirror_url: string | null;
            /** The name of the repository. */
            name: string;
            node_id: string;
            /** @format uri-template */
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /** User */
            owner: {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            };
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /** Whether the repository is private or public. */
            private: boolean;
            public?: boolean;
            /** @format uri-template */
            pulls_url: string;
            pushed_at: number | string | null;
            /** @format uri-template */
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            /** @format uri */
            stargazers_url: string;
            /** @format uri-template */
            statuses_url: string;
            /** @format uri */
            subscribers_url: string;
            /** @format uri */
            subscription_url: string;
            /** @format uri */
            svn_url: string;
            /** @format uri */
            tags_url: string;
            /** @format uri */
            teams_url: string;
            topics: string[];
            /** @format uri-template */
            trees_url: string;
            /** @format date-time */
            updated_at: string;
            /** @format uri */
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
             * @default false
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            /** Whether to require contributors to sign off on web-based commits */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /** User */
          user: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            /** @format int64 */
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
        };
        /** @format uri */
        html_url: string;
        id: number;
        /** @format uri */
        issue_url: string;
        labels: {
          /** 6-character hex code, without the leading #, identifying the color */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /** The name of the label. */
          name: string;
          node_id: string;
          /**
           * URL for the label
           * @format uri
           */
          url: string;
        }[];
        locked: boolean;
        /** Indicates whether maintainers can modify the pull request. */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        /** @format date-time */
        merged_at: string | null;
        /** User */
        merged_by?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          /** @format date-time */
          closed_at: string | null;
          closed_issues: number;
          /** @format date-time */
          created_at: string;
          /** User */
          creator: {
            /** @format uri */
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            /** @format uri-template */
            events_url?: string;
            /** @format uri */
            followers_url?: string;
            /** @format uri-template */
            following_url?: string;
            /** @format uri-template */
            gists_url?: string;
            gravatar_id?: string;
            /** @format uri */
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            /** @format uri */
            organizations_url?: string;
            /** @format uri */
            received_events_url?: string;
            /** @format uri */
            repos_url?: string;
            site_admin?: boolean;
            /** @format uri-template */
            starred_url?: string;
            /** @format uri */
            subscriptions_url?: string;
            type?: "Bot" | "User" | "Organization" | "Mannequin";
            /** @format uri */
            url?: string;
            user_view_type?: string;
          };
          description: string | null;
          /** @format date-time */
          due_on: string | null;
          /** @format uri */
          html_url: string;
          id: number;
          /** @format uri */
          labels_url: string;
          node_id: string;
          /** The number of the milestone. */
          number: number;
          open_issues: number;
          /** The state of the milestone. */
          state: "open" | "closed";
          /** The title of the milestone. */
          title: string;
          /** @format date-time */
          updated_at: string;
          /** @format uri */
          url: string;
        };
        node_id: string;
        /** Number uniquely identifying the pull request within its repository. */
        number: number;
        /** @format uri */
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | {
              /** @format uri */
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              /** @format uri-template */
              events_url?: string;
              /** @format uri */
              followers_url?: string;
              /** @format uri-template */
              following_url?: string;
              /** @format uri-template */
              gists_url?: string;
              gravatar_id?: string;
              /** @format uri */
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              /** @format uri */
              organizations_url?: string;
              /** @format uri */
              received_events_url?: string;
              /** @format uri */
              repos_url?: string;
              site_admin?: boolean;
              /** @format uri-template */
              starred_url?: string;
              /** @format uri */
              subscriptions_url?: string;
              type?: "Bot" | "User" | "Organization";
              /** @format uri */
              url?: string;
              user_view_type?: string;
            }
          | {
              deleted?: boolean;
              /** Description of the team */
              description?: string | null;
              /** @format uri */
              html_url?: string;
              /** Unique identifier of the team */
              id: number;
              /** @format uri-template */
              members_url?: string;
              /** Name of the team */
              name: string;
              node_id?: string;
              parent?: {
                /** Description of the team */
                description: string | null;
                /** @format uri */
                html_url: string;
                /** Unique identifier of the team */
                id: number;
                /** @format uri-template */
                members_url: string;
                /** Name of the team */
                name: string;
                node_id: string;
                /** Permission that the team will have for its repositories */
                permission: string;
                privacy: "open" | "closed" | "secret";
                /** @format uri */
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 * @format uri
                 */
                url: string;
              };
              /** Permission that the team will have for its repositories */
              permission?: string;
              privacy?: "open" | "closed" | "secret";
              /** @format uri */
              repositories_url?: string;
              slug?: string;
              /**
               * URL for the team
               * @format uri
               */
              url?: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }[];
        /** @format uri-template */
        review_comment_url: string;
        review_comments?: number;
        /** @format uri */
        review_comments_url: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state: "open" | "closed";
        /** @format uri */
        statuses_url: string;
        /** The title of the pull request. */
        title: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /** User */
        user: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
      /**
       * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
       * when the event occurs from activity in a repository.
       */
      repository: RepositoryWebhooks;
      /**
       * Team
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /** Description of the team */
        description?: string | null;
        /** @format uri */
        html_url?: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url?: string;
        /** Name of the team */
        name: string;
        node_id?: string;
        parent?: {
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        };
        /** Permission that the team will have for its repositories */
        permission?: string;
        privacy?: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         * @format uri
         */
        url?: string;
      };
      /** A GitHub user. */
      sender: SimpleUser;
    };

/** pull_request_review submitted event */
export interface WebhookPullRequestReviewSubmitted {
  action: "submitted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** The review that was affected. */
  review: WebhooksReview;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request_review_thread resolved event */
export interface WebhookPullRequestReviewThreadResolved {
  action: "resolved";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  thread: {
    comments: {
      _links: {
        /** Link */
        html: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        pull_request: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        self: {
          /** @format uri-template */
          href: string;
        };
      };
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** The text of the comment. */
      body: string;
      /** The SHA of the commit to which the comment applies. */
      commit_id: string;
      /** @format date-time */
      created_at: string;
      /** The diff of the line that the comment refers to. */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       * @format uri
       */
      html_url: string;
      /** The ID of the pull request review comment. */
      id: number;
      /** The comment ID to reply to. */
      in_reply_to_id?: number;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line: number | null;
      /** The node ID of the pull request review comment. */
      node_id: string;
      /** The SHA of the original commit to which the comment applies. */
      original_commit_id: string;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line: number | null;
      /** The index of the original line in the diff to which the comment applies. */
      original_position: number;
      /** The first line of the range for a multi-line comment. */
      original_start_line: number | null;
      /** The relative path of the file to which the comment applies. */
      path: string;
      /** The line index in the diff to which the comment applies. */
      position: number | null;
      /** The ID of the pull request review to which the comment belongs. */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       * @format uri
       */
      pull_request_url: string;
      /** Reactions */
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** The side of the first line of the range for a multi-line comment. */
      side: "LEFT" | "RIGHT";
      /** The first line of the range for a multi-line comment. */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       * @default "RIGHT"
       */
      start_side: "LEFT" | "RIGHT" | null;
      /** The level at which the comment is targeted, can be a diff line or a file. */
      subject_type?: "line" | "file";
      /** @format date-time */
      updated_at: string;
      /**
       * URL for the pull request review comment
       * @format uri
       */
      url: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    }[];
    node_id: string;
  };
}

/** pull_request_review_thread unresolved event */
export interface WebhookPullRequestReviewThreadUnresolved {
  action: "unresolved";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Simple Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    closed_at: string | null;
    /** @format uri */
    comments_url: string;
    /** @format uri */
    commits_url: string;
    created_at: string;
    /** @format uri */
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    number: number;
    /** @format uri */
    patch_url: string;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    /** @format uri */
    review_comments_url: string;
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    title: string;
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
  thread: {
    comments: {
      _links: {
        /** Link */
        html: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        pull_request: {
          /** @format uri-template */
          href: string;
        };
        /** Link */
        self: {
          /** @format uri-template */
          href: string;
        };
      };
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      /** The text of the comment. */
      body: string;
      /** The SHA of the commit to which the comment applies. */
      commit_id: string;
      /** @format date-time */
      created_at: string;
      /** The diff of the line that the comment refers to. */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       * @format uri
       */
      html_url: string;
      /** The ID of the pull request review comment. */
      id: number;
      /** The comment ID to reply to. */
      in_reply_to_id?: number;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      line: number | null;
      /** The node ID of the pull request review comment. */
      node_id: string;
      /** The SHA of the original commit to which the comment applies. */
      original_commit_id: string;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      original_line: number;
      /** The index of the original line in the diff to which the comment applies. */
      original_position: number;
      /** The first line of the range for a multi-line comment. */
      original_start_line: number | null;
      /** The relative path of the file to which the comment applies. */
      path: string;
      /** The line index in the diff to which the comment applies. */
      position: number | null;
      /** The ID of the pull request review to which the comment belongs. */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       * @format uri
       */
      pull_request_url: string;
      /** Reactions */
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        /** @format uri */
        url: string;
      };
      /** The side of the first line of the range for a multi-line comment. */
      side: "LEFT" | "RIGHT";
      /** The first line of the range for a multi-line comment. */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       * @default "RIGHT"
       */
      start_side: "LEFT" | "RIGHT" | null;
      /** The level at which the comment is targeted, can be a diff line or a file. */
      subject_type?: "line" | "file";
      /** @format date-time */
      updated_at: string;
      /**
       * URL for the pull request review comment
       * @format uri
       */
      url: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    }[];
    node_id: string;
  };
}

/** pull_request synchronize event */
export interface WebhookPullRequestSynchronize {
  action: "synchronize";
  after: string;
  before: string;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** The default value for a merge commit message. */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /** The default value for a merge commit message title. */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request unassigned event */
export interface WebhookPullRequestUnassigned {
  action: "unassigned";
  assignee?: WebhooksUserMannequin;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** pull_request unlabeled event */
export interface WebhookPullRequestUnlabeled {
  action: "unlabeled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  label?: WebhooksLabel;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string | null;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /** The default value for a merge commit message. */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /** The default value for a merge commit message title. */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization" | "Mannequin";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization" | "Mannequin";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description: string | null;
          /** @format uri */
          html_url: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url: string;
          /** Name of the team */
          name: string;
          node_id: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission: string;
          privacy: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           * @format uri
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization" | "Mannequin";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** pull_request unlocked event */
export interface WebhookPullRequestUnlocked {
  action: "unlocked";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /** The pull request number. */
  number: WebhooksNumber;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Pull Request */
  pull_request: {
    _links: {
      /** Link */
      comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      commits: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      html: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      issue: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comment: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      review_comments: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      self: {
        /** @format uri-template */
        href: string;
      };
      /** Link */
      statuses: {
        /** @format uri-template */
        href: string;
      };
    };
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    additions?: number;
    /** User */
    assignee: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    assignees: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    }[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /** Commit message for the merge commit. */
      commit_message: string | null;
      /** Title for the merge commit message. */
      commit_title: string;
      /** User */
      enabled_by: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** The merge method to use. */
      merge_method: "merge" | "squash" | "rebase";
    };
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    body: string | null;
    changed_files?: number;
    /** @format date-time */
    closed_at: string | null;
    comments?: number;
    /** @format uri */
    comments_url: string;
    commits?: number;
    /** @format uri */
    commits_url: string;
    /** @format date-time */
    created_at: string;
    deletions?: number;
    /** @format uri */
    diff_url: string;
    /** Indicates whether or not the pull request is a draft. */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;
        /** Whether to allow private forks */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        /** @format uri-template */
        archive_url: string;
        /**
         * Whether the repository is archived.
         * @default false
         */
        archived: boolean;
        /** @format uri-template */
        assignees_url: string;
        /** @format uri-template */
        blobs_url: string;
        /** @format uri-template */
        branches_url: string;
        /** @format uri */
        clone_url: string;
        /** @format uri-template */
        collaborators_url: string;
        /** @format uri-template */
        comments_url: string;
        /** @format uri-template */
        commits_url: string;
        /** @format uri-template */
        compare_url: string;
        /** @format uri-template */
        contents_url: string;
        /** @format uri */
        contributors_url: string;
        created_at: number | string;
        /** The default branch of the repository. */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** @format uri */
        deployments_url: string;
        description: string | null;
        /** Returns whether or not this repository is disabled. */
        disabled?: boolean;
        /** @format uri */
        downloads_url: string;
        /** @format uri */
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        /** @format uri */
        forks_url: string;
        full_name: string;
        /** @format uri-template */
        git_commits_url: string;
        /** @format uri-template */
        git_refs_url: string;
        /** @format uri-template */
        git_tags_url: string;
        /** @format uri */
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @default true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         */
        has_discussions: boolean;
        homepage: string | null;
        /** @format uri */
        hooks_url: string;
        /** @format uri */
        html_url: string;
        /**
         * Unique identifier of the repository
         * @format int64
         */
        id: number;
        is_template?: boolean;
        /** @format uri-template */
        issue_comment_url: string;
        /** @format uri-template */
        issue_events_url: string;
        /** @format uri-template */
        issues_url: string;
        /** @format uri-template */
        keys_url: string;
        /** @format uri-template */
        labels_url: string;
        language: string | null;
        /** @format uri */
        languages_url: string;
        /** License */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          /** @format uri */
          url: string | null;
        };
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /** @format uri */
        merges_url: string;
        /** @format uri-template */
        milestones_url: string;
        /** @format uri */
        mirror_url: string | null;
        /** The name of the repository. */
        name: string;
        node_id: string;
        /** @format uri-template */
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /** User */
        owner: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /** Whether the repository is private or public. */
        private: boolean;
        public?: boolean;
        /** @format uri-template */
        pulls_url: string;
        pushed_at: number | string | null;
        /** @format uri-template */
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        /** @format uri */
        stargazers_url: string;
        /** @format uri-template */
        statuses_url: string;
        /** @format uri */
        subscribers_url: string;
        /** @format uri */
        subscription_url: string;
        /** @format uri */
        svn_url: string;
        /** @format uri */
        tags_url: string;
        /** @format uri */
        teams_url: string;
        topics: string[];
        /** @format uri-template */
        trees_url: string;
        /** @format date-time */
        updated_at: string;
        /** @format uri */
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        /** Whether to require contributors to sign off on web-based commits */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /** User */
      user: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        /** @format int64 */
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
    };
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    issue_url: string;
    labels: {
      /** 6-character hex code, without the leading #, identifying the color */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /** The name of the label. */
      name: string;
      node_id: string;
      /**
       * URL for the label
       * @format uri
       */
      url: string;
    }[];
    locked: boolean;
    /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    /** @format date-time */
    merged_at: string | null;
    /** User */
    merged_by?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      /** @format date-time */
      closed_at: string | null;
      closed_issues: number;
      /** @format date-time */
      created_at: string;
      /** User */
      creator: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      description: string | null;
      /** @format date-time */
      due_on: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      /** @format uri */
      labels_url: string;
      node_id: string;
      /** The number of the milestone. */
      number: number;
      open_issues: number;
      /** The state of the milestone. */
      state: "open" | "closed";
      /** The title of the milestone. */
      title: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
    };
    node_id: string;
    /** Number uniquely identifying the pull request within its repository. */
    number: number;
    /** @format uri */
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        }
      | {
          deleted?: boolean;
          /** Description of the team */
          description?: string | null;
          /** @format uri */
          html_url?: string;
          /** Unique identifier of the team */
          id: number;
          /** @format uri-template */
          members_url?: string;
          /** Name of the team */
          name: string;
          node_id?: string;
          parent?: {
            /** Description of the team */
            description: string | null;
            /** @format uri */
            html_url: string;
            /** Unique identifier of the team */
            id: number;
            /** @format uri-template */
            members_url: string;
            /** Name of the team */
            name: string;
            node_id: string;
            /** Permission that the team will have for its repositories */
            permission: string;
            privacy: "open" | "closed" | "secret";
            /** @format uri */
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             * @format uri
             */
            url: string;
          };
          /** Permission that the team will have for its repositories */
          permission?: string;
          privacy?: "open" | "closed" | "secret";
          /** @format uri */
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           * @format uri
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /** Description of the team */
      description?: string | null;
      /** @format uri */
      html_url?: string;
      /** Unique identifier of the team */
      id: number;
      /** @format uri-template */
      members_url?: string;
      /** Name of the team */
      name: string;
      node_id?: string;
      parent?: {
        /** Description of the team */
        description: string | null;
        /** @format uri */
        html_url: string;
        /** Unique identifier of the team */
        id: number;
        /** @format uri-template */
        members_url: string;
        /** Name of the team */
        name: string;
        node_id: string;
        /** Permission that the team will have for its repositories */
        permission: string;
        privacy: "open" | "closed" | "secret";
        /** @format uri */
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         * @format uri
         */
        url: string;
      };
      /** Permission that the team will have for its repositories */
      permission?: string;
      privacy?: "open" | "closed" | "secret";
      /** @format uri */
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       * @format uri
       */
      url?: string;
    }[];
    /** @format uri-template */
    review_comment_url: string;
    review_comments?: number;
    /** @format uri */
    review_comments_url: string;
    /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed";
    /** @format uri */
    statuses_url: string;
    /** The title of the pull request. */
    title: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    /** User */
    user: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      /** @format int64 */
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** push event */
export interface WebhookPush {
  /** The SHA of the most recent commit on `ref` after the push. */
  after: string;
  base_ref: WebhooksNullableString;
  /** The SHA of the most recent commit on `ref` before the push. */
  before: string;
  /** An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits. */
  commits: {
    /** An array of files added in the commit. A maximum of 3000 changed files will be reported per commit. */
    added?: string[];
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    author: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    committer: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /** Whether this commit is distinct from any that have been pushed before. */
    distinct: boolean;
    id: string;
    /** The commit message. */
    message: string;
    /** An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit. */
    modified?: string[];
    /** An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit. */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     * @format date-time
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     * @format uri
     */
    url: string;
  }[];
  /** URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit. */
  compare: string;
  /** Whether this push created the `ref`. */
  created: boolean;
  /** Whether this push deleted the `ref`. */
  deleted: boolean;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** Whether this push was a force push of the `ref`. */
  forced: boolean;
  /** Commit */
  head_commit: {
    /** An array of files added in the commit. */
    added?: string[];
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    author: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    committer: {
      /** @format date-time */
      date?: string;
      /** @format email */
      email: string | null;
      /** The git author's name. */
      name: string;
      username?: string;
    };
    /** Whether this commit is distinct from any that have been pushed before. */
    distinct: boolean;
    id: string;
    /** The commit message. */
    message: string;
    /** An array of files modified by the commit. */
    modified?: string[];
    /** An array of files removed in the commit. */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     * @format date-time
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     * @format uri
     */
    url: string;
  };
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
  pusher: {
    /** @format date-time */
    date?: string;
    /** @format email */
    email?: string | null;
    /** The git author's name. */
    name: string;
    username?: string;
  };
  /** The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`. */
  ref: string;
  /**
   * Repository
   * A git repository
   */
  repository: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    /**
     * Whether discussions are enabled.
     * @default false
     */
    has_discussions: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
    /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
}

export interface WebhookRegistryPackagePublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  registry_package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      author?: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
        user_view_type?: string;
      };
      body?: string | object;
      body_html?: string;
      container_metadata?: {
        labels?: object | null;
        manifest?: object | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      npm_metadata?: {
        name?: string;
        version?: string;
        npm_user?: string;
        author?: string | object | null;
        bugs?: string | object | null;
        dependencies?: object;
        dev_dependencies?: object;
        peer_dependencies?: object;
        optional_dependencies?: object;
        description?: string;
        dist?: string | object | null;
        git_head?: string;
        homepage?: string;
        license?: string;
        main?: string;
        repository?: string | object | null;
        scripts?: object;
        id?: string;
        node_version?: string;
        npm_version?: string;
        has_shrinkwrap?: boolean;
        maintainers?: string[];
        contributors?: string[];
        engines?: object;
        keywords?: string[];
        files?: string[];
        bin?: object;
        man?: object;
        directories?: string | object | null;
        os?: string[];
        cpu?: string[];
        readme?: string;
        installation_command?: string;
        release_id?: number;
        commit_oid?: string;
        published_via_actions?: boolean;
        deleted_by_id?: number;
      };
      nuget_metadata?: {
        id?: string | object | number | null;
        name?: string;
        value?:
          | boolean
          | string
          | number
          | {
              url?: string;
              branch?: string;
              commit?: string;
              type?: string;
            };
      }[];
      package_files: {
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
          user_view_type?: string;
        };
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: string | null;
        prerelease?: boolean;
        published_at?: string;
        tag_name?: string;
        target_commitish?: string;
        url?: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    };
    registry: {
      about_url?: string;
      name?: string;
      type?: string;
      url?: string;
      vendor?: string;
    } | null;
    updated_at: string | null;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

export interface WebhookRegistryPackageUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  registry_package: {
    created_at: string;
    description: any;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
      user_view_type?: string;
    };
    package_type: string;
    package_version: {
      author: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
        user_view_type?: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: ({
        tags?: string[];
      } | null)[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Record<string, any>[];
      name: string;
      package_files: {
        content_type?: string;
        created_at?: string;
        download_url?: string;
        id?: number;
        md5?: string | null;
        name?: string;
        sha1?: string | null;
        sha256?: string;
        size?: number;
        state?: string;
        updated_at?: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
          user_view_type?: string;
        };
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: object | null;
    updated_at: string;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** release created event */
export interface WebhookReleaseCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** release deleted event */
export interface WebhookReleaseDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** release edited event */
export interface WebhookReleaseEdited {
  action: "edited";
  changes: {
    body?: {
      /** The previous version of the body if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The previous version of the name if the action was `edited`. */
      from: string;
    };
    tag_name?: {
      /** The previous version of the tag_name if the action was `edited`. */
      from: string;
    };
    make_latest?: {
      /** Whether this release was explicitly `edited` to be the latest. */
      to: boolean;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release prereleased event */
export interface WebhookReleasePrereleased {
  action: "prereleased";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * Release
   * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
   */
  release: {
    assets: {
      /** @format uri */
      browser_download_url: string;
      content_type: string;
      /** @format date-time */
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /** The file name of the asset. */
      name: string;
      node_id: string;
      size: number;
      digest: string | null;
      /** State of the release asset. */
      state: "uploaded";
      /** @format date-time */
      updated_at: string;
      /** User */
      uploader?: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      };
      /** @format uri */
      url: string;
    }[];
    /** @format uri */
    assets_url: string;
    /** User */
    author: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    body: string | null;
    /** @format date-time */
    created_at: string | null;
    /** @format uri */
    discussion_url?: string;
    /** Whether the release is a draft or published */
    draft: boolean;
    /** @format uri */
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /** Whether the release is identified as a prerelease or a full release. */
    prerelease: true;
    /** @format date-time */
    published_at: string | null;
    /** Reactions */
    reactions?: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      /** @format uri */
      url: string;
    };
    /** The name of the tag. */
    tag_name: string;
    /** @format uri */
    tarball_url: string | null;
    /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string;
    /** @format uri-template */
    upload_url: string;
    /** @format uri */
    url: string;
    /** @format uri */
    zipball_url: string | null;
  };
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release published event */
export interface WebhookReleasePublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease1;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release released event */
export interface WebhookReleaseReleased {
  action: "released";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** release unpublished event */
export interface WebhookReleaseUnpublished {
  action: "unpublished";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object. */
  release: WebhooksRelease1;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Repository advisory published event */
export interface WebhookRepositoryAdvisoryPublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A repository security advisory. */
  repository_advisory: RepositoryAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Repository advisory reported event */
export interface WebhookRepositoryAdvisoryReported {
  action: "reported";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A repository security advisory. */
  repository_advisory: RepositoryAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** repository archived event */
export interface WebhookRepositoryArchived {
  action: "archived";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository created event */
export interface WebhookRepositoryCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository deleted event */
export interface WebhookRepositoryDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_dispatch event */
export interface WebhookRepositoryDispatchSample {
  /** The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
  action: string;
  branch: string;
  /** The `client_payload` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
  client_payload: Record<string, any>;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository edited event */
export interface WebhookRepositoryEdited {
  action: "edited";
  changes: {
    default_branch?: {
      from: string;
    };
    description?: {
      from: string | null;
    };
    homepage?: {
      from: string | null;
    };
    topics?: {
      from?: string[] | null;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_import event */
export interface WebhookRepositoryImport {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  status: "success" | "cancelled" | "failure";
}

/** repository privatized event */
export interface WebhookRepositoryPrivatized {
  action: "privatized";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository publicized event */
export interface WebhookRepositoryPublicized {
  action: "publicized";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository renamed event */
export interface WebhookRepositoryRenamed {
  action: "renamed";
  changes: {
    repository: {
      name: {
        from: string;
      };
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository ruleset created event */
export interface WebhookRepositoryRulesetCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A set of rules to apply when specified conditions are met. */
  repository_ruleset: RepositoryRuleset;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository ruleset deleted event */
export interface WebhookRepositoryRulesetDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A set of rules to apply when specified conditions are met. */
  repository_ruleset: RepositoryRuleset;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository ruleset edited event */
export interface WebhookRepositoryRulesetEdited {
  action: "edited";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A set of rules to apply when specified conditions are met. */
  repository_ruleset: RepositoryRuleset;
  changes?: {
    name?: {
      from?: string;
    };
    enforcement?: {
      from?: string;
    };
    conditions?: {
      added?: RepositoryRulesetConditions[];
      deleted?: RepositoryRulesetConditions[];
      updated?: {
        /** Parameters for a repository ruleset ref name condition */
        condition?: RepositoryRulesetConditions;
        changes?: {
          condition_type?: {
            from?: string;
          };
          target?: {
            from?: string;
          };
          include?: {
            from?: string[];
          };
          exclude?: {
            from?: string[];
          };
        };
      }[];
    };
    rules?: {
      added?: RepositoryRule[];
      deleted?: RepositoryRule[];
      updated?: {
        /** A repository rule. */
        rule?: RepositoryRule;
        changes?: {
          configuration?: {
            from?: string;
          };
          rule_type?: {
            from?: string;
          };
          pattern?: {
            from?: string;
          };
        };
      }[];
    };
  };
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository transferred event */
export interface WebhookRepositoryTransferred {
  action: "transferred";
  changes: {
    owner: {
      from: {
        /** Organization */
        organization?: {
          /** @format uri */
          avatar_url: string;
          description: string | null;
          /** @format uri */
          events_url: string;
          /** @format uri */
          hooks_url: string;
          /** @format uri */
          html_url?: string;
          id: number;
          /** @format uri */
          issues_url: string;
          login: string;
          /** @format uri-template */
          members_url: string;
          node_id: string;
          /** @format uri-template */
          public_members_url: string;
          /** @format uri */
          repos_url: string;
          /** @format uri */
          url: string;
        };
        /** User */
        user?: {
          /** @format uri */
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          /** @format uri-template */
          events_url?: string;
          /** @format uri */
          followers_url?: string;
          /** @format uri-template */
          following_url?: string;
          /** @format uri-template */
          gists_url?: string;
          gravatar_id?: string;
          /** @format uri */
          html_url?: string;
          /** @format int64 */
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          /** @format uri */
          organizations_url?: string;
          /** @format uri */
          received_events_url?: string;
          /** @format uri */
          repos_url?: string;
          site_admin?: boolean;
          /** @format uri-template */
          starred_url?: string;
          /** @format uri */
          subscriptions_url?: string;
          type?: "Bot" | "User" | "Organization";
          /** @format uri */
          url?: string;
          user_view_type?: string;
        };
      };
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository unarchived event */
export interface WebhookRepositoryUnarchived {
  action: "unarchived";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert create event */
export interface WebhookRepositoryVulnerabilityAlertCreate {
  action: "create";
  /** The security alert of the vulnerable dependency. */
  alert: WebhooksAlert;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert dismiss event */
export interface WebhookRepositoryVulnerabilityAlertDismiss {
  action: "dismiss";
  /**
   * Repository Vulnerability Alert Alert
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_comment?: string | null;
    dismiss_reason: string;
    dismissed_at: string;
    /** User */
    dismisser: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    external_identifier: string;
    /** @format uri */
    external_reference: string | null;
    fix_reason?: string;
    /** @format date-time */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: "dismissed";
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert reopen event */
export interface WebhookRepositoryVulnerabilityAlertReopen {
  action: "reopen";
  /** The security alert of the vulnerable dependency. */
  alert: WebhooksAlert;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** repository_vulnerability_alert resolve event */
export interface WebhookRepositoryVulnerabilityAlertResolve {
  action: "resolve";
  /**
   * Repository Vulnerability Alert Alert
   * The security alert of the vulnerable dependency.
   */
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    /** User */
    dismisser?: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    external_identifier: string;
    /** @format uri */
    external_reference: string | null;
    fix_reason?: string;
    /** @format date-time */
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: "fixed" | "open";
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** secret_scanning_alert created event */
export interface WebhookSecretScanningAlertCreated {
  action: "created";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** Secret Scanning Alert Location Created Event */
export interface WebhookSecretScanningAlertLocationCreated {
  action?: "created";
  alert: SecretScanningAlertWebhook;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  location: SecretScanningLocation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** Secret Scanning Alert Location Created Event */
export interface WebhookSecretScanningAlertLocationCreatedFormEncoded {
  /** A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object. */
  payload: string;
}

/** secret_scanning_alert publicly leaked event */
export interface WebhookSecretScanningAlertPubliclyLeaked {
  action: "publicly_leaked";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_alert reopened event */
export interface WebhookSecretScanningAlertReopened {
  action: "reopened";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_alert resolved event */
export interface WebhookSecretScanningAlertResolved {
  action: "resolved";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_alert validated event */
export interface WebhookSecretScanningAlertValidated {
  action: "validated";
  alert: SecretScanningAlertWebhook;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** secret_scanning_scan completed event */
export interface WebhookSecretScanningScanCompleted {
  action: "completed";
  /** What type of scan was completed */
  type: "backfill" | "custom-pattern-backfill" | "pattern-version-backfill";
  /** What type of content was scanned */
  source: "git" | "issues" | "pull-requests" | "discussions" | "wiki";
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  started_at: string;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
  completed_at: string;
  /** List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updates */
  secret_types?: string[] | null;
  /** If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updated */
  custom_pattern_name?: string | null;
  /** If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updated */
  custom_pattern_scope?: "repository" | "organization" | "enterprise" | null;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_advisory published event */
export interface WebhookSecurityAdvisoryPublished {
  action: "published";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The details of the security advisory, including summary, description, and severity. */
  security_advisory: WebhooksSecurityAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_advisory updated event */
export interface WebhookSecurityAdvisoryUpdated {
  action: "updated";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The details of the security advisory, including summary, description, and severity. */
  security_advisory: WebhooksSecurityAdvisory;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_advisory withdrawn event */
export interface WebhookSecurityAdvisoryWithdrawn {
  action: "withdrawn";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** The details of the security advisory, including summary, description, and severity. */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cvss_severities?: CvssSeverities;
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      /** @format uri */
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** security_and_analysis event */
export interface WebhookSecurityAndAnalysis {
  changes: {
    from?: {
      security_and_analysis?: SecurityAndAnalysis;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /** Full Repository */
  repository: FullRepository;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** sponsorship cancelled event */
export interface WebhookSponsorshipCancelled {
  action: "cancelled";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship created event */
export interface WebhookSponsorshipCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship edited event */
export interface WebhookSponsorshipEdited {
  action: "edited";
  changes: {
    privacy_level?: {
      /** The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy. */
      from: string;
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship pending_cancellation event */
export interface WebhookSponsorshipPendingCancellation {
  action: "pending_cancellation";
  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
  effective_date?: WebhooksEffectiveDate;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship pending_tier_change event */
export interface WebhookSponsorshipPendingTierChange {
  action: "pending_tier_change";
  changes: WebhooksChanges8;
  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
  effective_date?: WebhooksEffectiveDate;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** sponsorship tier_changed event */
export interface WebhookSponsorshipTierChanged {
  action: "tier_changed";
  changes: WebhooksChanges8;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  sponsorship: WebhooksSponsorship;
}

/** star created event */
export interface WebhookStarCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
  starred_at: string | null;
}

/** star deleted event */
export interface WebhookStarDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
  starred_at: any;
}

/** status event */
export interface WebhookStatus {
  /** @format uri */
  avatar_url?: string | null;
  /** An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches. */
  branches: {
    commit: {
      sha: string | null;
      /** @format uri */
      url: string | null;
    };
    name: string;
    protected: boolean;
  }[];
  commit: {
    /** User */
    author: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    comments_url: string;
    commit: {
      /** Metaproperties for Git author/committer information. */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      comment_count: number;
      /** Metaproperties for Git author/committer information. */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      message: string;
      tree: {
        sha: string;
        /** @format uri */
        url: string;
      };
      /** @format uri */
      url: string;
      verification: {
        payload: string | null;
        reason:
          | "expired_key"
          | "not_signing_key"
          | "gpgverify_error"
          | "gpgverify_unavailable"
          | "unsigned"
          | "unknown_signature_type"
          | "no_user"
          | "unverified_email"
          | "bad_email"
          | "unknown_key"
          | "malformed_signature"
          | "invalid"
          | "valid"
          | "bad_cert"
          | "ocsp_pending";
        signature: string | null;
        verified: boolean;
        verified_at: string | null;
      };
    };
    /** User */
    committer: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    html_url: string;
    node_id: string;
    parents: {
      /** @format uri */
      html_url: string;
      sha: string;
      /** @format uri */
      url: string;
    }[];
    sha: string;
    /** @format uri */
    url: string;
  };
  context: string;
  created_at: string;
  /** The optional human-readable description added to the status. */
  description: string | null;
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /** The unique identifier of the status. */
  id: number;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  name: string;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The Commit SHA. */
  sha: string;
  /** The new state. Can be `pending`, `success`, `failure`, or `error`. */
  state: "pending" | "success" | "failure" | "error";
  /** The optional link added to the status. */
  target_url: string | null;
  updated_at: string;
}

/** parent issue added event */
export interface WebhookSubIssuesParentIssueAdded {
  action: "parent_issue_added";
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /** A repository on GitHub. */
  parent_issue_repo: Repository;
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** parent issue removed event */
export interface WebhookSubIssuesParentIssueRemoved {
  action: "parent_issue_removed";
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /** A repository on GitHub. */
  parent_issue_repo: Repository;
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** sub-issue added event */
export interface WebhookSubIssuesSubIssueAdded {
  action: "sub_issue_added";
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /** A repository on GitHub. */
  sub_issue_repo: Repository;
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** sub-issue removed event */
export interface WebhookSubIssuesSubIssueRemoved {
  action: "sub_issue_removed";
  /** The ID of the sub-issue. */
  sub_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  sub_issue: Issue;
  /** A repository on GitHub. */
  sub_issue_repo: Repository;
  /** The ID of the parent issue. */
  parent_issue_id: number;
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
  parent_issue: Issue;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository?: RepositoryWebhooks;
  /** A GitHub user. */
  sender?: SimpleUser;
}

/** team_add event */
export interface WebhookTeamAdd {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team added_to_repository event */
export interface WebhookTeamAddedToRepository {
  action: "added_to_repository";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team created event */
export interface WebhookTeamCreated {
  action: "created";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team deleted event */
export interface WebhookTeamDeleted {
  action: "deleted";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender?: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team edited event */
export interface WebhookTeamEdited {
  action: "edited";
  /** The changes to the team if the action was `edited`. */
  changes: {
    description?: {
      /** The previous version of the description if the action was `edited`. */
      from: string;
    };
    name?: {
      /** The previous version of the name if the action was `edited`. */
      from: string;
    };
    privacy?: {
      /** The previous version of the team's privacy if the action was `edited`. */
      from: string;
    };
    notification_setting?: {
      /** The previous version of the team's notification setting if the action was `edited`. */
      from: string;
    };
    repository?: {
      permissions: {
        from: {
          /** The previous version of the team member's `admin` permission on a repository, if the action was `edited`. */
          admin?: boolean;
          /** The previous version of the team member's `pull` permission on a repository, if the action was `edited`. */
          pull?: boolean;
          /** The previous version of the team member's `push` permission on a repository, if the action was `edited`. */
          push?: boolean;
        };
      };
    };
  };
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** team removed_from_repository event */
export interface WebhookTeamRemovedFromRepository {
  action: "removed_from_repository";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     * @default false
     */
    allow_auto_merge?: boolean;
    /** Whether to allow private forks */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    /** @format uri-template */
    archive_url: string;
    /**
     * Whether the repository is archived.
     * @default false
     */
    archived: boolean;
    /** @format uri-template */
    assignees_url: string;
    /** @format uri-template */
    blobs_url: string;
    /** @format uri-template */
    branches_url: string;
    /** @format uri */
    clone_url: string;
    /** @format uri-template */
    collaborators_url: string;
    /** @format uri-template */
    comments_url: string;
    /** @format uri-template */
    commits_url: string;
    /** @format uri-template */
    compare_url: string;
    /** @format uri-template */
    contents_url: string;
    /** @format uri */
    contributors_url: string;
    created_at: number | string;
    /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string, any>;
    /** The default branch of the repository. */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** @format uri */
    deployments_url: string;
    description: string | null;
    /** Returns whether or not this repository is disabled. */
    disabled?: boolean;
    /** @format uri */
    downloads_url: string;
    /** @format uri */
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    /** @format uri */
    forks_url: string;
    full_name: string;
    /** @format uri-template */
    git_commits_url: string;
    /** @format uri-template */
    git_refs_url: string;
    /** @format uri-template */
    git_tags_url: string;
    /** @format uri */
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @default true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     */
    has_wiki: boolean;
    homepage: string | null;
    /** @format uri */
    hooks_url: string;
    /** @format uri */
    html_url: string;
    /**
     * Unique identifier of the repository
     * @format int64
     */
    id: number;
    is_template?: boolean;
    /** @format uri-template */
    issue_comment_url: string;
    /** @format uri-template */
    issue_events_url: string;
    /** @format uri-template */
    issues_url: string;
    /** @format uri-template */
    keys_url: string;
    /** @format uri-template */
    labels_url: string;
    language: string | null;
    /** @format uri */
    languages_url: string;
    /** License */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      /** @format uri */
      url: string | null;
    };
    master_branch?: string;
    /** @format uri */
    merges_url: string;
    /** @format uri-template */
    milestones_url: string;
    /** @format uri */
    mirror_url: string | null;
    /** The name of the repository. */
    name: string;
    node_id: string;
    /** @format uri-template */
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /** User */
    owner: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /** Whether the repository is private or public. */
    private: boolean;
    public?: boolean;
    /** @format uri-template */
    pulls_url: string;
    pushed_at: number | string | null;
    /** @format uri-template */
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    /** @format uri */
    stargazers_url: string;
    /** @format uri-template */
    statuses_url: string;
    /** @format uri */
    subscribers_url: string;
    /** @format uri */
    subscription_url: string;
    /** @format uri */
    svn_url: string;
    /** @format uri */
    tags_url: string;
    /** @format uri */
    teams_url: string;
    topics: string[];
    /** @format uri-template */
    trees_url: string;
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    visibility: "public" | "private" | "internal";
    watchers: number;
    watchers_count: number;
  };
  /** A GitHub user. */
  sender: SimpleUser;
  /** Groups of organization members that gives permissions on specified repositories. */
  team: WebhooksTeam1;
}

/** watch started event */
export interface WebhookWatchStarted {
  action: "started";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
}

/** workflow_dispatch event */
export interface WebhookWorkflowDispatch {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  inputs: Record<string, any>;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  ref: string;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: string;
}

/** workflow_job completed event */
export interface WebhookWorkflowJobCompleted {
  action: "completed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object. */
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out" | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    /** The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_id: number | null;
    /** The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_name: string | null;
    /** The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_id: number | null;
    /** The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_name: string | null;
    started_at: string;
    /** The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`. */
    status: "queued" | "in_progress" | "completed" | "waiting";
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "queued";
    }[];
    /** @format uri */
    url: string;
  } & {
    check_run_url?: string;
    completed_at?: string;
    conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out";
    /** The time that the job created. */
    created_at?: string;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: (string | null)[];
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status?: string;
    /** The name of the current branch. */
    head_branch?: string | null;
    /** The name of the workflow. */
    workflow_name?: string | null;
    steps?: (object | null)[];
    url?: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_job in_progress event */
export interface WebhookWorkflowJobInProgress {
  action: "in_progress";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  /** The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object. */
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: "success" | "failure" | "cancelled" | "neutral" | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    /** The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_id: number | null;
    /** The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_name: string | null;
    /** The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_id: number | null;
    /** The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_name: string | null;
    started_at: string;
    /** The current status of the job. Can be `queued`, `in_progress`, or `completed`. */
    status: "queued" | "in_progress" | "completed";
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "queued" | "pending";
    }[];
    /** @format uri */
    url: string;
  } & {
    check_run_url?: string;
    completed_at?: string | null;
    conclusion?: string | null;
    /** The time that the job created. */
    created_at?: string;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: string[];
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status: "in_progress" | "completed" | "queued";
    /** The name of the current branch. */
    head_branch?: string | null;
    /** The name of the workflow. */
    workflow_name?: string | null;
    steps: {
      completed_at: string | null;
      conclusion: string | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "in_progress" | "completed" | "pending" | "queued";
    }[];
    url?: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_job queued event */
export interface WebhookWorkflowJobQueued {
  action: "queued";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    /** @format date-time */
    started_at: string;
    status: "queued" | "in_progress" | "completed" | "waiting";
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "completed" | "in_progress" | "queued" | "pending";
    }[];
    /** @format uri */
    url: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_job waiting event */
export interface WebhookWorkflowJobWaiting {
  action: "waiting";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow_job: {
    /** @format uri */
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /** The time that the job created. */
    created_at: string;
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    /** @format uri */
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    /** @format date-time */
    started_at: string;
    /** The name of the current branch. */
    head_branch: string | null;
    /** The name of the workflow. */
    workflow_name: string | null;
    status: "queued" | "in_progress" | "completed" | "waiting";
    steps: {
      completed_at: string | null;
      conclusion: "failure" | "skipped" | "success" | "cancelled" | null;
      name: string;
      number: number;
      started_at: string | null;
      status: "completed" | "in_progress" | "queued" | "pending" | "waiting";
    }[];
    /** @format uri */
    url: string;
  };
  /** A request for a specific ref(branch,sha,tag) to be deployed */
  deployment?: Deployment;
}

/** workflow_run completed event */
export interface WebhookWorkflowRunCompleted {
  action: "completed";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format uri */
    artifacts_url: string;
    /** @format uri */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /** @format uri */
    check_suite_url: string;
    conclusion:
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** Repository Lite */
    head_repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    jobs_url: string;
    /** @format uri */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /** @format uri */
    previous_attempt_url: string | null;
    pull_requests: ({
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    } | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /** Repository Lite */
    repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    /** @format uri */
    workflow_url: string;
    /**
     * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
     * @example "Simple Workflow"
     */
    display_title?: string;
  };
}

/** workflow_run in_progress event */
export interface WebhookWorkflowRunInProgress {
  action: "in_progress";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format uri */
    artifacts_url: string;
    /** @format uri */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /** @format uri */
    check_suite_url: string;
    conclusion:
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** Repository Lite */
    head_repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string | null;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    jobs_url: string;
    /** @format uri */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /** @format uri */
    previous_attempt_url: string | null;
    pull_requests: ({
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    } | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /** Repository Lite */
    repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    /** @format uri */
    workflow_url: string;
  };
}

/** workflow_run requested event */
export interface WebhookWorkflowRunRequested {
  action: "requested";
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
   */
  enterprise?: EnterpriseWebhooks;
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
  installation?: SimpleInstallation;
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
  organization?: OrganizationSimpleWebhooks;
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
  repository: RepositoryWebhooks;
  /** A GitHub user. */
  sender: SimpleUser;
  workflow: WebhooksWorkflow;
  /** Workflow Run */
  workflow_run: {
    /** User */
    actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format uri */
    artifacts_url: string;
    /** @format uri */
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    /** @format uri */
    check_suite_url: string;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | "skipped"
      | "startup_failure"
      | null;
    /** @format date-time */
    created_at: string;
    event: string;
    head_branch: string | null;
    /** SimpleCommit */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        /** @format date-time */
        date?: string;
        /** @format email */
        email: string | null;
        /** The git author's name. */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /** Repository Lite */
    head_repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    head_sha: string;
    /** @format uri */
    html_url: string;
    id: number;
    /** @format uri */
    jobs_url: string;
    /** @format uri */
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    /** @format uri */
    previous_attempt_url: string | null;
    pull_requests: {
      base: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /** Repo Ref */
        repo: {
          id: number;
          name: string;
          /** @format uri */
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      /** @format uri */
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /** Repository Lite */
    repository: {
      /** @format uri-template */
      archive_url: string;
      /** @format uri-template */
      assignees_url: string;
      /** @format uri-template */
      blobs_url: string;
      /** @format uri-template */
      branches_url: string;
      /** @format uri-template */
      collaborators_url: string;
      /** @format uri-template */
      comments_url: string;
      /** @format uri-template */
      commits_url: string;
      /** @format uri-template */
      compare_url: string;
      /** @format uri-template */
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      /** @format uri */
      forks_url: string;
      full_name: string;
      /** @format uri-template */
      git_commits_url: string;
      /** @format uri-template */
      git_refs_url: string;
      /** @format uri-template */
      git_tags_url: string;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      /** Unique identifier of the repository */
      id: number;
      /** @format uri-template */
      issue_comment_url: string;
      /** @format uri-template */
      issue_events_url: string;
      /** @format uri-template */
      issues_url: string;
      /** @format uri-template */
      keys_url: string;
      /** @format uri-template */
      labels_url: string;
      /** @format uri */
      languages_url: string;
      /** @format uri */
      merges_url: string;
      /** @format uri-template */
      milestones_url: string;
      /** The name of the repository. */
      name: string;
      node_id: string;
      /** @format uri-template */
      notifications_url: string;
      /** User */
      owner: {
        /** @format uri */
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        /** @format uri-template */
        events_url?: string;
        /** @format uri */
        followers_url?: string;
        /** @format uri-template */
        following_url?: string;
        /** @format uri-template */
        gists_url?: string;
        gravatar_id?: string;
        /** @format uri */
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        /** @format uri */
        organizations_url?: string;
        /** @format uri */
        received_events_url?: string;
        /** @format uri */
        repos_url?: string;
        site_admin?: boolean;
        /** @format uri-template */
        starred_url?: string;
        /** @format uri */
        subscriptions_url?: string;
        type?: "Bot" | "User" | "Organization";
        /** @format uri */
        url?: string;
        user_view_type?: string;
      };
      /** Whether the repository is private or public. */
      private: boolean;
      /** @format uri-template */
      pulls_url: string;
      /** @format uri-template */
      releases_url: string;
      /** @format uri */
      stargazers_url: string;
      /** @format uri-template */
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      /** @format uri-template */
      trees_url: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    /** @format date-time */
    run_started_at: string;
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
    /** User */
    triggering_actor: {
      /** @format uri */
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      /** @format uri-template */
      events_url?: string;
      /** @format uri */
      followers_url?: string;
      /** @format uri-template */
      following_url?: string;
      /** @format uri-template */
      gists_url?: string;
      gravatar_id?: string;
      /** @format uri */
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      /** @format uri */
      organizations_url?: string;
      /** @format uri */
      received_events_url?: string;
      /** @format uri */
      repos_url?: string;
      site_admin?: boolean;
      /** @format uri-template */
      starred_url?: string;
      /** @format uri */
      subscriptions_url?: string;
      type?: "Bot" | "User" | "Organization";
      /** @format uri */
      url?: string;
      user_view_type?: string;
    };
    /** @format date-time */
    updated_at: string;
    /** @format uri */
    url: string;
    workflow_id: number;
    /** @format uri */
    workflow_url: string;
    display_title: string;
  };
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://api.github.com";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
            ? JSON.stringify(property)
            : `${property}`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(`${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title GitHub v3 REST API
 * @version 1.1.4
 * @license MIT (https://spdx.org/licenses/MIT)
 * @termsOfService https://docs.github.com/articles/github-terms-of-service
 * @baseUrl https://api.github.com
 * @externalDocs https://docs.github.com/rest/
 * @contact Support (https://support.github.com/contact?tags=dotcom-rest-api)
 *
 * GitHub's v3 REST API.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  /**
   * @description Get Hypermedia links to resources accessible in GitHub's REST API
   *
   * @tags meta
   * @name MetaRoot
   * @summary GitHub API Root
   * @request GET:/
   */
  metaRoot = (params: RequestParams = {}) =>
    this.request<Root, any>({
      path: `/`,
      method: "GET",
      format: "json",
      ...params,
    });

  advisories = {
    /**
     * @description Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware. By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesListGlobalAdvisories
     * @summary List global security advisories
     * @request GET:/advisories
     */
    securityAdvisoriesListGlobalAdvisories: (
      query?: {
        /** If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. */
        ghsa_id?: string;
        /**
         * If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
         * @default "reviewed"
         */
        type?: "reviewed" | "malware" | "unreviewed";
        /** If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. */
        cve_id?: string;
        /** If specified, only advisories for these ecosystems will be returned. */
        ecosystem?: SecurityAdvisoryEcosystems;
        /** If specified, only advisories with these severities will be returned. */
        severity?: "unknown" | "low" | "medium" | "high" | "critical";
        /**
         * If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
         *
         * Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
         */
        cwes?: string | string[];
        /** Whether to only return advisories that have been withdrawn. */
        is_withdrawn?: boolean;
        /**
         * If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
         * If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.
         *
         * Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
         */
        affects?: string | string[];
        /**
         * If specified, only return advisories that were published on a date or date range.
         *
         * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         */
        published?: string;
        /**
         * If specified, only return advisories that were updated on a date or date range.
         *
         * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         */
        updated?: string;
        /**
         * If specified, only show advisories that were updated or published on a date or date range.
         *
         * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         */
        modified?: string;
        /**
         * If specified, only return advisories that have an EPSS percentage score that matches the provided value.
         * The EPSS percentage represents the likelihood of a CVE being exploited.
         */
        epss_percentage?: string;
        /**
         * If specified, only return advisories that have an EPSS percentile score that matches the provided value.
         * The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.
         */
        epss_percentile?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
        /**
         * The property to sort the results by.
         * @default "published"
         */
        sort?: "updated" | "published" | "epss_percentage" | "epss_percentile";
      },
      params: RequestParams = {},
    ) =>
      this.request<GlobalAdvisory[], ValidationErrorSimple | BasicError>({
        path: `/advisories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesGetGlobalAdvisory
     * @summary Get a global security advisory
     * @request GET:/advisories/{ghsa_id}
     */
    securityAdvisoriesGetGlobalAdvisory: (ghsaId: string, params: RequestParams = {}) =>
      this.request<GlobalAdvisory, BasicError>({
        path: `/advisories/${ghsaId}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  app = {
    /**
     * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetAuthenticated
     * @summary Get the authenticated app
     * @request GET:/app
     */
    appsGetAuthenticated: (params: RequestParams = {}) =>
      this.request<Integration, any>({
        path: `/app`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)." You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetWebhookConfigForApp
     * @summary Get a webhook configuration for an app
     * @request GET:/app/hook/config
     */
    appsGetWebhookConfigForApp: (params: RequestParams = {}) =>
      this.request<WebhookConfig, any>({
        path: `/app/hook/config`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)." You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsUpdateWebhookConfigForApp
     * @summary Update a webhook configuration for an app
     * @request PATCH:/app/hook/config
     */
    appsUpdateWebhookConfigForApp: (
      data: {
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        content_type?: WebhookConfigContentType;
        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfig, any>({
        path: `/app/hook/config`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a list of webhook deliveries for the webhook configured for a GitHub App. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsListWebhookDeliveries
     * @summary List deliveries for an app webhook
     * @request GET:/app/hook/deliveries
     */
    appsListWebhookDeliveries: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        cursor?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<HookDeliveryItem[], BasicError | ValidationError>({
        path: `/app/hook/deliveries`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a delivery for the webhook configured for a GitHub App. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetWebhookDelivery
     * @summary Get a delivery for an app webhook
     * @request GET:/app/hook/deliveries/{delivery_id}
     */
    appsGetWebhookDelivery: (deliveryId: number, params: RequestParams = {}) =>
      this.request<HookDelivery, BasicError | ValidationError>({
        path: `/app/hook/deliveries/${deliveryId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Redeliver a delivery for the webhook configured for a GitHub App. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsRedeliverWebhookDelivery
     * @summary Redeliver a delivery for an app webhook
     * @request POST:/app/hook/deliveries/{delivery_id}/attempts
     */
    appsRedeliverWebhookDelivery: (deliveryId: number, params: RequestParams = {}) =>
      this.request<object, BasicError | ValidationError>({
        path: `/app/hook/deliveries/${deliveryId}/attempts`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Lists all the pending installation requests for the authenticated GitHub App.
     *
     * @tags apps
     * @name AppsListInstallationRequestsForAuthenticatedApp
     * @summary List installation requests for the authenticated app
     * @request GET:/app/installation-requests
     */
    appsListInstallationRequestsForAuthenticatedApp: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IntegrationInstallationRequest[], BasicError>({
        path: `/app/installation-requests`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The permissions the installation has are included under the `permissions` key. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsListInstallations
     * @summary List installations for the authenticated app
     * @request GET:/app/installations
     */
    appsListInstallations: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        outdated?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Installation[], any>({
        path: `/app/installations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find an installation's information using the installation id. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetInstallation
     * @summary Get an installation for the authenticated app
     * @request GET:/app/installations/{installation_id}
     */
    appsGetInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<Installation, BasicError>({
        path: `/app/installations/${installationId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Uninstalls a GitHub App on a user, organization, or enterprise account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsDeleteInstallation
     * @summary Delete an installation for the authenticated app
     * @request DELETE:/app/installations/{installation_id}
     */
    appsDeleteInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/app/installations/${installationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner. Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsCreateInstallationAccessToken
     * @summary Create an installation access token for an app
     * @request POST:/app/installations/{installation_id}/access_tokens
     */
    appsCreateInstallationAccessToken: (
      installationId: number,
      data?: {
        /** List of repository names that the token should have access to */
        repositories?: string[];
        /**
         * List of repository IDs that the token should have access to
         * @example [1]
         */
        repository_ids?: number[];
        /** The permissions granted to the user access token. */
        permissions?: AppPermissions;
      },
      params: RequestParams = {},
    ) =>
      this.request<InstallationToken, BasicError | ValidationError>({
        path: `/app/installations/${installationId}/access_tokens`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Suspends a GitHub App on a user, organization, or enterprise account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsSuspendInstallation
     * @summary Suspend an app installation
     * @request PUT:/app/installations/{installation_id}/suspended
     */
    appsSuspendInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/app/installations/${installationId}/suspended`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a GitHub App installation suspension. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsUnsuspendInstallation
     * @summary Unsuspend an app installation
     * @request DELETE:/app/installations/{installation_id}/suspended
     */
    appsUnsuspendInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/app/installations/${installationId}/suspended`,
        method: "DELETE",
        ...params,
      }),
  };
  appManifests = {
    /**
     * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     *
     * @tags apps
     * @name AppsCreateFromManifest
     * @summary Create a GitHub App from a manifest
     * @request POST:/app-manifests/{code}/conversions
     */
    appsCreateFromManifest: (code: string, params: RequestParams = {}) =>
      this.request<
        Integration & {
          client_id: string;
          client_secret: string;
          webhook_secret: string | null;
          pem: string;
          [key: string]: any;
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/app-manifests/${code}/conversions`,
        method: "POST",
        format: "json",
        ...params,
      }),
  };
  applications = {
    /**
     * @description OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted. Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     *
     * @tags apps
     * @name AppsDeleteAuthorization
     * @summary Delete an app authorization
     * @request DELETE:/applications/{client_id}/grant
     */
    appsDeleteAuthorization: (
      clientId: string,
      data: {
        /** The OAuth access token used to authenticate to the GitHub API. */
        access_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationError>({
        path: `/applications/${clientId}/grant`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
     *
     * @tags apps
     * @name AppsCheckToken
     * @summary Check a token
     * @request POST:/applications/{client_id}/token
     */
    appsCheckToken: (
      clientId: string,
      data: {
        /** The access_token of the OAuth or GitHub application. */
        access_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, BasicError | ValidationError>({
        path: `/applications/${clientId}/token`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
     *
     * @tags apps
     * @name AppsResetToken
     * @summary Reset a token
     * @request PATCH:/applications/{client_id}/token
     */
    appsResetToken: (
      clientId: string,
      data: {
        /** The access_token of the OAuth or GitHub application. */
        access_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, ValidationError>({
        path: `/applications/${clientId}/token`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
     *
     * @tags apps
     * @name AppsDeleteToken
     * @summary Delete an app token
     * @request DELETE:/applications/{client_id}/token
     */
    appsDeleteToken: (
      clientId: string,
      data: {
        /** The OAuth access token used to authenticate to the GitHub API. */
        access_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationError>({
        path: `/applications/${clientId}/token`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify which repositories the token can access and which permissions are granted to the token. Invalid tokens will return `404 NOT FOUND`.
     *
     * @tags apps
     * @name AppsScopeToken
     * @summary Create a scoped access token
     * @request POST:/applications/{client_id}/token/scoped
     */
    appsScopeToken: (
      clientId: string,
      data: {
        /**
         * The access token used to authenticate to the GitHub API.
         * @example "e72e16c7e42f292c6912e7710c838347ae178b4a"
         */
        access_token: string;
        /**
         * The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
         * @example "octocat"
         */
        target?: string;
        /**
         * The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
         * @example 1
         */
        target_id?: number;
        /** The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified. */
        repositories?: string[];
        /**
         * The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
         * @example [1]
         */
        repository_ids?: number[];
        /** The permissions granted to the user access token. */
        permissions?: AppPermissions;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, BasicError | ValidationError>({
        path: `/applications/${clientId}/token/scoped`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  apps = {
    /**
     * @description > [!NOTE] > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     *
     * @tags apps
     * @name AppsGetBySlug
     * @summary Get an app
     * @request GET:/apps/{app_slug}
     */
    appsGetBySlug: (appSlug: string, params: RequestParams = {}) =>
      this.request<Integration, BasicError>({
        path: `/apps/${appSlug}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  assignments = {
    /**
     * @description Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     *
     * @tags classroom
     * @name ClassroomGetAnAssignment
     * @summary Get an assignment
     * @request GET:/assignments/{assignment_id}
     */
    classroomGetAnAssignment: (assignmentId: number, params: RequestParams = {}) =>
      this.request<ClassroomAssignment, BasicError>({
        path: `/assignments/${assignmentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     *
     * @tags classroom
     * @name ClassroomListAcceptedAssignmentsForAnAssignment
     * @summary List accepted assignments for an assignment
     * @request GET:/assignments/{assignment_id}/accepted_assignments
     */
    classroomListAcceptedAssignmentsForAnAssignment: (
      assignmentId: number,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ClassroomAcceptedAssignment[], any>({
        path: `/assignments/${assignmentId}/accepted_assignments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     *
     * @tags classroom
     * @name ClassroomGetAssignmentGrades
     * @summary Get assignment grades
     * @request GET:/assignments/{assignment_id}/grades
     */
    classroomGetAssignmentGrades: (assignmentId: number, params: RequestParams = {}) =>
      this.request<ClassroomAssignmentGrade[], BasicError>({
        path: `/assignments/${assignmentId}/grades`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  classrooms = {
    /**
     * @description Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
     *
     * @tags classroom
     * @name ClassroomListClassrooms
     * @summary List classrooms
     * @request GET:/classrooms
     */
    classroomListClassrooms: (
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleClassroom[], any>({
        path: `/classrooms`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
     *
     * @tags classroom
     * @name ClassroomGetAClassroom
     * @summary Get a classroom
     * @request GET:/classrooms/{classroom_id}
     */
    classroomGetAClassroom: (classroomId: number, params: RequestParams = {}) =>
      this.request<Classroom, BasicError>({
        path: `/classrooms/${classroomId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
     *
     * @tags classroom
     * @name ClassroomListAssignmentsForAClassroom
     * @summary List assignments for a classroom
     * @request GET:/classrooms/{classroom_id}/assignments
     */
    classroomListAssignmentsForAClassroom: (
      classroomId: number,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleClassroomAssignment[], any>({
        path: `/classrooms/${classroomId}/assignments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  codesOfConduct = {
    /**
     * @description Returns array of all GitHub's codes of conduct.
     *
     * @tags codes-of-conduct
     * @name CodesOfConductGetAllCodesOfConduct
     * @summary Get all codes of conduct
     * @request GET:/codes_of_conduct
     */
    codesOfConductGetAllCodesOfConduct: (params: RequestParams = {}) =>
      this.request<CodeOfConduct[], any>({
        path: `/codes_of_conduct`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns information about the specified GitHub code of conduct.
     *
     * @tags codes-of-conduct
     * @name CodesOfConductGetConductCode
     * @summary Get a code of conduct
     * @request GET:/codes_of_conduct/{key}
     */
    codesOfConductGetConductCode: (key: string, params: RequestParams = {}) =>
      this.request<CodeOfConduct, BasicError>({
        path: `/codes_of_conduct/${key}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  credentials = {
    /**
     * @description Submit a list of credentials to be revoked. This endpoint is intended to revoke credentials the caller does not own and may have found exposed on GitHub.com or elsewhere. It can also be used for credentials associated with an old user account that you no longer have access to. Credential owners will be notified of the revocation. This endpoint currently accepts the following credential types: - Personal access tokens (classic) - Fine-grained personal access tokens Revoked credentials may impact users on GitHub Free, Pro, & Team and GitHub Enterprise Cloud, and GitHub Enterprise Cloud with Enterprise Managed Users. GitHub cannot reactivate any credentials that have been revoked; new credentials will need to be generated. To prevent abuse, this API is limited to only 60 unauthenticated requests per hour and a max of 1000 tokens per API request. > [!NOTE] > Any authenticated requests will return a 403.
     *
     * @tags credentials
     * @name CredentialsRevoke
     * @summary Revoke a list of credentials
     * @request POST:/credentials/revoke
     */
    credentialsRevoke: (
      data: {
        /**
         * A list of credentials to be revoked, up to 1000 per request.
         * @maxItems 1000
         * @minItems 1
         */
        credentials: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<object, ValidationErrorSimple | BasicError>({
        path: `/credentials/revoke`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),
  };
  emojis = {
    /**
     * @description Lists all the emojis available to use on GitHub.
     *
     * @tags emojis
     * @name EmojisGet
     * @summary Get emojis
     * @request GET:/emojis
     */
    emojisGet: (params: RequestParams = {}) =>
      this.request<Record<string, string>, any>({
        path: `/emojis`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  enterprises = {
    /**
     * @description Lists all code security configurations available in an enterprise. The authenticated user must be an administrator of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetConfigurationsForEnterprise
     * @summary Get code security configurations for an enterprise
     * @request GET:/enterprises/{enterprise}/code-security/configurations
     */
    codeSecurityGetConfigurationsForEnterprise: (
      enterprise: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration[], BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a code security configuration in an enterprise. The authenticated user must be an administrator of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityCreateConfigurationForEnterprise
     * @summary Create a code security configuration for an enterprise
     * @request POST:/enterprises/{enterprise}/code-security/configurations
     */
    codeSecurityCreateConfigurationForEnterprise: (
      enterprise: string,
      data: {
        /** The name of the code security configuration. Must be unique within the enterprise. */
        name: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description: string;
        /**
         * The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         * @default "disabled"
         */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /**
         * The enablement status of Dependency Graph
         * @default "enabled"
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Automatic dependency submission
         * @default "disabled"
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /**
           * Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           * @default false
           */
          labeled_runners?: boolean;
        };
        /**
         * The enablement status of Dependabot alerts
         * @default "disabled"
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Dependabot security updates
         * @default "disabled"
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of code scanning default setup
         * @default "disabled"
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning
         * @default "disabled"
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning push protection
         * @default "disabled"
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning validity checks
         * @default "disabled"
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning non provider patterns
         * @default "disabled"
         */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning delegated alert dismissal
         * @default "disabled"
         */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of private vulnerability reporting
         * @default "disabled"
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /**
         * The enforcement status for a security configuration
         * @default "enforced"
         */
        enforcement?: "enforced" | "unenforced";
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration, BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the default code security configurations for an enterprise. The authenticated user must be an administrator of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetDefaultConfigurationsForEnterprise
     * @summary Get default code security configurations for an enterprise
     * @request GET:/enterprises/{enterprise}/code-security/configurations/defaults
     */
    codeSecurityGetDefaultConfigurationsForEnterprise: (enterprise: string, params: RequestParams = {}) =>
      this.request<CodeSecurityDefaultConfigurations, any>({
        path: `/enterprises/${enterprise}/code-security/configurations/defaults`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a code security configuration available in an enterprise. The authenticated user must be an administrator of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetSingleConfigurationForEnterprise
     * @summary Retrieve a code security configuration of an enterprise
     * @request GET:/enterprises/{enterprise}/code-security/configurations/{configuration_id}
     */
    codeSecurityGetSingleConfigurationForEnterprise: (
      enterprise: string,
      configurationId: number,
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration, BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations/${configurationId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a code security configuration in an enterprise. The authenticated user must be an administrator of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityUpdateEnterpriseConfiguration
     * @summary Update a custom code security configuration for an enterprise
     * @request PATCH:/enterprises/{enterprise}/code-security/configurations/{configuration_id}
     */
    codeSecurityUpdateEnterpriseConfiguration: (
      enterprise: string,
      configurationId: number,
      data: {
        /** The name of the code security configuration. Must be unique across the enterprise. */
        name?: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description?: string;
        /** The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features. */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /** The enablement status of Dependency Graph */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Automatic dependency submission */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /** Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
          labeled_runners?: boolean;
        };
        /** The enablement status of Dependabot alerts */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Dependabot security updates */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /** The enablement status of code scanning default setup */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning push protection */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning validity checks */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning non-provider patterns */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning delegated alert dismissal
         * @default "disabled"
         */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of private vulnerability reporting */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /** The enforcement status for a security configuration */
        enforcement?: "enforced" | "unenforced";
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration, BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations/${configurationId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a code security configuration from an enterprise. Repositories attached to the configuration will retain their settings but will no longer be associated with the configuration. The authenticated user must be an administrator for the enterprise to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityDeleteConfigurationForEnterprise
     * @summary Delete a code security configuration for an enterprise
     * @request DELETE:/enterprises/{enterprise}/code-security/configurations/{configuration_id}
     */
    codeSecurityDeleteConfigurationForEnterprise: (
      enterprise: string,
      configurationId: number,
      params: RequestParams = {},
    ) =>
      this.request<any, BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations/${configurationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Attaches an enterprise code security configuration to repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration. If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled. The authenticated user must be an administrator for the enterprise to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityAttachEnterpriseConfiguration
     * @summary Attach an enterprise configuration to repositories
     * @request POST:/enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach
     */
    codeSecurityAttachEnterpriseConfiguration: (
      enterprise: string,
      configurationId: number,
      data: {
        /** The type of repositories to attach the configuration to. */
        scope: "all" | "all_without_configurations";
      },
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations/${configurationId}/attach`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Sets a code security configuration as a default to be applied to new repositories in your enterprise. This configuration will be applied by default to the matching repository type when created, but only for organizations within the enterprise that do not already have a default code security configuration set. The authenticated user must be an administrator for the enterprise to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecuritySetConfigurationAsDefaultForEnterprise
     * @summary Set a code security configuration as a default for an enterprise
     * @request PUT:/enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults
     */
    codeSecuritySetConfigurationAsDefaultForEnterprise: (
      enterprise: string,
      configurationId: number,
      data: {
        /** Specify which types of repository this security configuration should be applied to by default. */
        default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** Specifies which types of repository this security configuration is applied to by default. */
          default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
          /** A code security configuration */
          configuration?: CodeSecurityConfiguration;
        },
        BasicError
      >({
        path: `/enterprises/${enterprise}/code-security/configurations/${configurationId}/defaults`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the repositories associated with an enterprise code security configuration in an organization. The authenticated user must be an administrator of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetRepositoriesForEnterpriseConfiguration
     * @summary Get repositories associated with an enterprise code security configuration
     * @request GET:/enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories
     */
    codeSecurityGetRepositoriesForEnterpriseConfiguration: (
      enterprise: string,
      configurationId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
         *
         * Can be: `all`, `attached`, `attaching`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
         * @default "all"
         */
        status?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfigurationRepositories[], BasicError>({
        path: `/enterprises/${enterprise}/code-security/configurations/${configurationId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists Dependabot alerts for repositories that are owned by the specified enterprise. The authenticated user must be a member of the enterprise to use this endpoint. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)." OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotListAlertsForEnterprise
     * @summary List Dependabot alerts for an enterprise
     * @request GET:/enterprises/{enterprise}/dependabot/alerts
     */
    dependabotListAlertsForEnterprise: (
      enterprise: string,
      query?: {
        /**
         * A comma-separated list of states. If specified, only alerts with these states will be returned.
         *
         * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
         */
        state?: string;
        /**
         * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
         *
         * Can be: `low`, `medium`, `high`, `critical`
         */
        severity?: string;
        /**
         * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
         *
         * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
         */
        ecosystem?: string;
        /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
        package?: string;
        /**
         * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
         * - An exact number (`n`)
         * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
         * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
         *
         * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
         */
        epss_percentage?: string;
        /**
         * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
         * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
         */
        has?: string | "patch"[];
        /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
        scope?: "development" | "runtime";
        /**
         * The property by which to sort the results.
         * `created` means when the alert was created.
         * `updated` means when the alert's state last changed.
         * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
         * @default "created"
         */
        sort?: "created" | "updated" | "epss_percentage";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
         * This parameter must not be used in combination with `last`.
         * Instead, use `per_page` in combination with `after` to fetch the first page of results.
         * @min 1
         * @max 100
         * @default 30
         */
        first?: number;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
         * This parameter must not be used in combination with `first`.
         * Instead, use `per_page` in combination with `before` to fetch the last page of results.
         * @min 1
         * @max 100
         */
        last?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DependabotAlertWithRepository[], BasicError | ValidationErrorSimple>({
        path: `/enterprises/${enterprise}/dependabot/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest. Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization). The authenticated user must be a member of the enterprise in order to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
     *
     * @tags secret-scanning
     * @name SecretScanningListAlertsForEnterprise
     * @summary List secret scanning alerts for an enterprise
     * @request GET:/enterprises/{enterprise}/secret-scanning/alerts
     */
    secretScanningListAlertsForEnterprise: (
      enterprise: string,
      query?: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
        /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
        secret_type?: string;
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        resolution?: string;
        /**
         * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
        validity?: string;
        /**
         * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
         * @default false
         */
        is_publicly_leaked?: boolean;
        /**
         * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
         * @default false
         */
        is_multi_repo?: boolean;
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        OrganizationSecretScanningAlert[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/enterprises/${enterprise}/secret-scanning/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  events = {
    /**
     * @description > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListPublicEvents
     * @summary List public events
     * @request GET:/events
     */
    activityListPublicEvents: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Event[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  feeds = {
    /**
     * @description Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs. *   **Timeline**: The GitHub global public timeline *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)." *   **Current user public**: The public timeline for the authenticated user *   **Current user**: The private timeline for the authenticated user *   **Current user actor**: The private timeline for activity created by the authenticated user *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of. *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub. By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." > [!NOTE] > Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     *
     * @tags activity
     * @name ActivityGetFeeds
     * @summary Get feeds
     * @request GET:/feeds
     */
    activityGetFeeds: (params: RequestParams = {}) =>
      this.request<Feed, any>({
        path: `/feeds`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  gists = {
    /**
     * @description Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     *
     * @tags gists
     * @name GistsList
     * @summary List gists for the authenticated user
     * @request GET:/gists
     */
    gistsList: (
      query?: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], BasicError>({
        path: `/gists`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Allows you to add a new gist with one or more files. > [!NOTE] > Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     *
     * @tags gists
     * @name GistsCreate
     * @summary Create a gist
     * @request POST:/gists
     */
    gistsCreate: (
      data: {
        /**
         * Description of the gist
         * @example "Example Ruby script"
         */
        description?: string;
        /**
         * Names and content for the files that make up the gist
         * @example {"hello.rb":{"content":"puts \"Hello, World!\""}}
         */
        files: Record<
          string,
          {
            /** Content of the file */
            content: string;
          }
        >;
        /** Flag indicating whether the gist is public */
        public?: boolean | "true" | "false";
      },
      params: RequestParams = {},
    ) =>
      this.request<GistSimple, BasicError | ValidationError>({
        path: `/gists`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List public gists sorted by most recently updated to least recently updated. Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     *
     * @tags gists
     * @name GistsListPublic
     * @summary List public gists
     * @request GET:/gists/public
     */
    gistsListPublic: (
      query?: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], BasicError | ValidationError>({
        path: `/gists/public`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List the authenticated user's starred gists:
     *
     * @tags gists
     * @name GistsListStarred
     * @summary List starred gists
     * @request GET:/gists/starred
     */
    gistsListStarred: (
      query?: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], BasicError>({
        path: `/gists/starred`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specified gist. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsGet
     * @summary Get a gist
     * @request GET:/gists/{gist_id}
     */
    gistsGet: (gistId: string, params: RequestParams = {}) =>
      this.request<
        GistSimple,
        | {
            block?: {
              reason?: string;
              created_at?: string;
              html_url?: string | null;
            };
            message?: string;
            documentation_url?: string;
          }
        | BasicError
      >({
        path: `/gists/${gistId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. At least one of `description` or `files` is required. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsUpdate
     * @summary Update a gist
     * @request PATCH:/gists/{gist_id}
     */
    gistsUpdate: (
      gistId: string,
      data: {
        /**
         * The description of the gist.
         * @example "Example Ruby script"
         */
        description?: string;
        /**
         * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
         * (including extension) of the targeted gist file. For example: `hello.py`.
         *
         * To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
         * deleted if the specified object does not contain at least one of `content` or `filename`.
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: Record<
          string,
          {
            /** The new content of the file. */
            content?: string;
            /** The new filename for the file. */
            filename?: string | null;
          }
        >;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistSimple, BasicError | ValidationError>({
        path: `/gists/${gistId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsDelete
     * @summary Delete a gist
     * @request DELETE:/gists/{gist_id}
     */
    gistsDelete: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/gists/${gistId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the comments on a gist. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsListComments
     * @summary List gist comments
     * @request GET:/gists/{gist_id}/comments
     */
    gistsListComments: (
      gistId: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistComment[], BasicError>({
        path: `/gists/${gistId}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a comment on a gist. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsCreateComment
     * @summary Create a gist comment
     * @request POST:/gists/{gist_id}/comments
     */
    gistsCreateComment: (
      gistId: string,
      data: {
        /**
         * The comment text.
         * @maxLength 65535
         * @example "Body of the attachment"
         */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistComment, BasicError>({
        path: `/gists/${gistId}/comments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a comment on a gist. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsGetComment
     * @summary Get a gist comment
     * @request GET:/gists/{gist_id}/comments/{comment_id}
     */
    gistsGetComment: (gistId: string, commentId: number, params: RequestParams = {}) =>
      this.request<
        GistComment,
        | {
            block?: {
              reason?: string;
              created_at?: string;
              html_url?: string | null;
            };
            message?: string;
            documentation_url?: string;
          }
        | BasicError
      >({
        path: `/gists/${gistId}/comments/${commentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a comment on a gist. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsUpdateComment
     * @summary Update a gist comment
     * @request PATCH:/gists/{gist_id}/comments/{comment_id}
     */
    gistsUpdateComment: (
      gistId: string,
      commentId: number,
      data: {
        /**
         * The comment text.
         * @maxLength 65535
         * @example "Body of the attachment"
         */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistComment, BasicError>({
        path: `/gists/${gistId}/comments/${commentId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsDeleteComment
     * @summary Delete a gist comment
     * @request DELETE:/gists/{gist_id}/comments/{comment_id}
     */
    gistsDeleteComment: (gistId: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/gists/${gistId}/comments/${commentId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsListCommits
     * @summary List gist commits
     * @request GET:/gists/{gist_id}/commits
     */
    gistsListCommits: (
      gistId: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistCommit[], BasicError>({
        path: `/gists/${gistId}/commits`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsListForks
     * @summary List gist forks
     * @request GET:/gists/{gist_id}/forks
     */
    gistsListForks: (
      gistId: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistSimple[], BasicError>({
        path: `/gists/${gistId}/forks`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsFork
     * @summary Fork a gist
     * @request POST:/gists/{gist_id}/forks
     */
    gistsFork: (gistId: string, params: RequestParams = {}) =>
      this.request<BaseGist, BasicError | ValidationError>({
        path: `/gists/${gistId}/forks`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsCheckIsStarred
     * @summary Check if a gist is starred
     * @request GET:/gists/{gist_id}/star
     */
    gistsCheckIsStarred: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError | EmptyObject>({
        path: `/gists/${gistId}/star`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     *
     * @tags gists
     * @name GistsStar
     * @summary Star a gist
     * @request PUT:/gists/{gist_id}/star
     */
    gistsStar: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/gists/${gistId}/star`,
        method: "PUT",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsUnstar
     * @summary Unstar a gist
     * @request DELETE:/gists/{gist_id}/star
     */
    gistsUnstar: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/gists/${gistId}/star`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a specified gist revision. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
     *
     * @tags gists
     * @name GistsGetRevision
     * @summary Get a gist revision
     * @request GET:/gists/{gist_id}/{sha}
     */
    gistsGetRevision: (gistId: string, sha: string, params: RequestParams = {}) =>
      this.request<GistSimple, BasicError | ValidationError>({
        path: `/gists/${gistId}/${sha}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  gitignore = {
    /**
     * @description List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
     *
     * @tags gitignore
     * @name GitignoreGetAllTemplates
     * @summary Get all gitignore templates
     * @request GET:/gitignore/templates
     */
    gitignoreGetAllTemplates: (params: RequestParams = {}) =>
      this.request<string[], any>({
        path: `/gitignore/templates`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the content of a gitignore template. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
     *
     * @tags gitignore
     * @name GitignoreGetTemplate
     * @summary Get a gitignore template
     * @request GET:/gitignore/templates/{name}
     */
    gitignoreGetTemplate: (name: string, params: RequestParams = {}) =>
      this.request<GitignoreTemplate, any>({
        path: `/gitignore/templates/${name}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  installation = {
    /**
     * @description List repositories that an app installation can access.
     *
     * @tags apps
     * @name AppsListReposAccessibleToInstallation
     * @summary List repositories accessible to the app installation
     * @request GET:/installation/repositories
     */
    appsListReposAccessibleToInstallation: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: Repository[];
          /** @example "selected" */
          repository_selection?: string;
        },
        BasicError
      >({
        path: `/installation/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint. Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
     *
     * @tags apps
     * @name AppsRevokeInstallationAccessToken
     * @summary Revoke an installation access token
     * @request DELETE:/installation/token
     */
    appsRevokeInstallationAccessToken: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/installation/token`,
        method: "DELETE",
        ...params,
      }),
  };
  issues = {
    /**
     * @description List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not necessarily assigned to you. > [!NOTE] > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesList
     * @summary List issues assigned to the authenticated user
     * @request GET:/issues
     */
    issuesList: (
      query?: {
        /**
         * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        collab?: boolean;
        orgs?: boolean;
        owned?: boolean;
        pulls?: boolean;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError | ValidationError>({
        path: `/issues`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  licenses = {
    /**
     * @description Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
     *
     * @tags licenses
     * @name LicensesGetAllCommonlyUsed
     * @summary Get all commonly used licenses
     * @request GET:/licenses
     */
    licensesGetAllCommonlyUsed: (
      query?: {
        featured?: boolean;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<LicenseSimple[], any>({
        path: `/licenses`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
     *
     * @tags licenses
     * @name LicensesGet
     * @summary Get a license
     * @request GET:/licenses/{license}
     */
    licensesGet: (license: string, params: RequestParams = {}) =>
      this.request<License, BasicError>({
        path: `/licenses/${license}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  markdown = {
    /**
     * @description Depending on what is rendered in the Markdown, you may need to provide additional token scopes for labels, such as `issues:read` or `pull_requests:read`.
     *
     * @tags markdown
     * @name MarkdownRender
     * @summary Render a Markdown document
     * @request POST:/markdown
     */
    markdownRender: (
      data: {
        /** The Markdown text to render in HTML. */
        text: string;
        /**
         * The rendering mode.
         * @default "markdown"
         * @example "markdown"
         */
        mode?: "markdown" | "gfm";
        /** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
        context?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfigUrl, any>({
        path: `/markdown`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     *
     * @tags markdown
     * @name MarkdownRenderRaw
     * @summary Render a Markdown document in raw mode
     * @request POST:/markdown/raw
     */
    markdownRenderRaw: (data?: WebhookConfigUrl, params: RequestParams = {}) =>
      this.request<WebhookConfigUrl, any>({
        path: `/markdown/raw`,
        method: "POST",
        body: data,
        type: ContentType.Text,
        ...params,
      }),
  };
  marketplaceListing = {
    /**
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsGetSubscriptionPlanForAccount
     * @summary Get a subscription plan for an account
     * @request GET:/marketplace_listing/accounts/{account_id}
     */
    appsGetSubscriptionPlanForAccount: (accountId: number, params: RequestParams = {}) =>
      this.request<MarketplacePurchase, BasicError>({
        path: `/marketplace_listing/accounts/${accountId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all plans that are part of your GitHub Marketplace listing. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListPlans
     * @summary List plans
     * @request GET:/marketplace_listing/plans
     */
    appsListPlans: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplaceListingPlan[], BasicError>({
        path: `/marketplace_listing/plans`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListAccountsForPlan
     * @summary List accounts for a plan
     * @request GET:/marketplace_listing/plans/{plan_id}/accounts
     */
    appsListAccountsForPlan: (
      planId: number,
      query?: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplacePurchase[], BasicError | ValidationError>({
        path: `/marketplace_listing/plans/${planId}/accounts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsGetSubscriptionPlanForAccountStubbed
     * @summary Get a subscription plan for an account (stubbed)
     * @request GET:/marketplace_listing/stubbed/accounts/{account_id}
     */
    appsGetSubscriptionPlanForAccountStubbed: (accountId: number, params: RequestParams = {}) =>
      this.request<MarketplacePurchase, BasicError | void>({
        path: `/marketplace_listing/stubbed/accounts/${accountId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all plans that are part of your GitHub Marketplace listing. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListPlansStubbed
     * @summary List plans (stubbed)
     * @request GET:/marketplace_listing/stubbed/plans
     */
    appsListPlansStubbed: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplaceListingPlan[], BasicError>({
        path: `/marketplace_listing/stubbed/plans`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListAccountsForPlanStubbed
     * @summary List accounts for a plan (stubbed)
     * @request GET:/marketplace_listing/stubbed/plans/{plan_id}/accounts
     */
    appsListAccountsForPlanStubbed: (
      planId: number,
      query?: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplacePurchase[], BasicError>({
        path: `/marketplace_listing/stubbed/plans/${planId}/accounts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  meta = {
    /**
     * @description Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)." The API's response also includes a list of GitHub's domain names. The values shown in the documentation's response are example values. You must always query the API directly to get the latest values. > [!NOTE] > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
     *
     * @tags meta
     * @name MetaGet
     * @summary Get GitHub meta information
     * @request GET:/meta
     */
    metaGet: (params: RequestParams = {}) =>
      this.request<ApiOverview, any>({
        path: `/meta`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  networks = {
    /**
     * @description > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListPublicEventsForRepoNetwork
     * @summary List public events for a network of repositories
     * @request GET:/networks/{owner}/{repo}/events
     */
    activityListPublicEventsForRepoNetwork: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], BasicError>({
        path: `/networks/${owner}/${repo}/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  notifications = {
    /**
     * @description List all notifications for the current user, sorted by most recently updated.
     *
     * @tags activity
     * @name ActivityListNotificationsForAuthenticatedUser
     * @summary List notifications for the authenticated user
     * @request GET:/notifications
     */
    activityListNotificationsForAuthenticatedUser: (
      query?: {
        /**
         * If `true`, show notifications marked as read.
         * @default false
         */
        all?: boolean;
        /**
         * If `true`, only shows notifications in which the user is directly participating or mentioned.
         * @default false
         */
        participating?: boolean;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        before?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 50). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 50
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Thread[], BasicError | ValidationError>({
        path: `/notifications`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     *
     * @tags activity
     * @name ActivityMarkNotificationsAsRead
     * @summary Mark notifications as read
     * @request PUT:/notifications
     */
    activityMarkNotificationsAsRead: (
      data?: {
        /**
         * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
         * @format date-time
         */
        last_read_at?: string;
        /** Whether the notification has been read. */
        read?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          message?: string;
        },
        BasicError
      >({
        path: `/notifications`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a notification thread.
     *
     * @tags activity
     * @name ActivityGetThread
     * @summary Get a thread
     * @request GET:/notifications/threads/{thread_id}
     */
    activityGetThread: (threadId: number, params: RequestParams = {}) =>
      this.request<Thread, BasicError>({
        path: `/notifications/threads/${threadId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
     *
     * @tags activity
     * @name ActivityMarkThreadAsRead
     * @summary Mark a thread as read
     * @request PATCH:/notifications/threads/{thread_id}
     */
    activityMarkThreadAsRead: (threadId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/notifications/threads/${threadId}`,
        method: "PATCH",
        ...params,
      }),

    /**
     * @description Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
     *
     * @tags activity
     * @name ActivityMarkThreadAsDone
     * @summary Mark a thread as done
     * @request DELETE:/notifications/threads/{thread_id}
     */
    activityMarkThreadAsDone: (threadId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/notifications/threads/${threadId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription). Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     *
     * @tags activity
     * @name ActivityGetThreadSubscriptionForAuthenticatedUser
     * @summary Get a thread subscription for the authenticated user
     * @request GET:/notifications/threads/{thread_id}/subscription
     */
    activityGetThreadSubscriptionForAuthenticatedUser: (threadId: number, params: RequestParams = {}) =>
      this.request<ThreadSubscription, BasicError>({
        path: `/notifications/threads/${threadId}/subscription`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**. You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored. Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
     *
     * @tags activity
     * @name ActivitySetThreadSubscription
     * @summary Set a thread subscription
     * @request PUT:/notifications/threads/{thread_id}/subscription
     */
    activitySetThreadSubscription: (
      threadId: number,
      data?: {
        /**
         * Whether to block all notifications from a thread.
         * @default false
         */
        ignored?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ThreadSubscription, BasicError>({
        path: `/notifications/threads/${threadId}/subscription`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
     *
     * @tags activity
     * @name ActivityDeleteThreadSubscription
     * @summary Delete a thread subscription
     * @request DELETE:/notifications/threads/{thread_id}/subscription
     */
    activityDeleteThreadSubscription: (threadId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/notifications/threads/${threadId}/subscription`,
        method: "DELETE",
        ...params,
      }),
  };
  octocat = {
    /**
     * @description Get the octocat as ASCII art
     *
     * @tags meta
     * @name MetaGetOctocat
     * @summary Get Octocat
     * @request GET:/octocat
     */
    metaGetOctocat: (
      query?: {
        /** The words to show in Octocat's speech bubble */
        s?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfigUrl, any>({
        path: `/octocat`,
        method: "GET",
        query: query,
        ...params,
      }),
  };
  organizations = {
    /**
     * @description Lists all organizations, in the order that they were created. > [!NOTE] > Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
     *
     * @tags orgs
     * @name OrgsList
     * @summary List organizations
     * @request GET:/organizations
     */
    orgsList: (
      query?: {
        /** An organization ID. Only return organizations with an ID greater than this ID. */
        since?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationSimple[], any>({
        path: `/organizations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories that organization admins have allowed Dependabot to access when updating dependencies. > [!NOTE] >    This operation supports both server-to-server and user-to-server access. Unauthorized users will not see the existence of this endpoint.
     *
     * @tags dependabot
     * @name DependabotRepositoryAccessForOrg
     * @summary Lists the repositories Dependabot can access in an organization
     * @request GET:/organizations/{org}/dependabot/repository-access
     */
    dependabotRepositoryAccessForOrg: (
      org: string,
      query?: {
        /**
         * The page number of results to fetch.
         * @min 1
         * @default 1
         */
        page?: number;
        /**
         * Number of results per page.
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DependabotRepositoryAccessDetails, BasicError>({
        path: `/organizations/${org}/dependabot/repository-access`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates repositories according to the list of repositories that organization admins have given Dependabot access to when they've updated dependencies. > [!NOTE] >    This operation supports both server-to-server and user-to-server access. Unauthorized users will not see the existence of this endpoint. **Example request body:** ```json { "repository_ids_to_add": [123, 456], "repository_ids_to_remove": [789] } ```
     *
     * @tags dependabot
     * @name DependabotUpdateRepositoryAccessForOrg
     * @summary Updates Dependabot's repository access list for an organization
     * @request PATCH:/organizations/{org}/dependabot/repository-access
     */
    dependabotUpdateRepositoryAccessForOrg: (
      org: string,
      data: {
        /** List of repository IDs to add. */
        repository_ids_to_add?: number[];
        /** List of repository IDs to remove. */
        repository_ids_to_remove?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/organizations/${org}/dependabot/repository-access`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Sets the default level of repository access Dependabot will have while performing an update.  Available values are: - 'public' - Dependabot will only have access to public repositories, unless access is explicitly granted to non-public repositories. - 'internal' - Dependabot will only have access to public and internal repositories, unless access is explicitly granted to private repositories. Unauthorized users will not see the existence of this endpoint. This operation supports both server-to-server and user-to-server access.
     *
     * @tags dependabot
     * @name DependabotSetRepositoryAccessDefaultLevel
     * @summary Set the default repository access level for Dependabot
     * @request PUT:/organizations/{org}/dependabot/repository-access/default-level
     */
    dependabotSetRepositoryAccessDefaultLevel: (
      org: string,
      data: {
        /**
         * The default repository access level for Dependabot updates.
         * @example "internal"
         */
        default_level: "public" | "internal";
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/organizations/${org}/dependabot/repository-access/default-level`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets a report of the total usage for an organization. To use this endpoint, you must be an administrator of an organization within an enterprise or an organization account. **Note:** This endpoint is only available to organizations with access to the enhanced billing platform. For more information, see "[About the enhanced billing platform](https://docs.github.com/billing/using-the-new-billing-platform)."
     *
     * @tags billing
     * @name BillingGetGithubBillingUsageReportOrg
     * @summary Get billing usage report for an organization
     * @request GET:/organizations/{org}/settings/billing/usage
     */
    billingGetGithubBillingUsageReportOrg: (
      org: string,
      query?: {
        /** If specified, only return results for a single year. The value of `year` is an integer with four digits representing a year. For example, `2025`. Default value is the current year. */
        year?: number;
        /** If specified, only return results for a single month. The value of `month` is an integer between `1` and `12`. If no year is specified the default `year` is used. */
        month?: number;
        /** If specified, only return results for a single day. The value of `day` is an integer between `1` and `31`. If no `year` or `month` is specified, the default `year` and `month` are used. */
        day?: number;
        /** If specified, only return results for a single hour. The value of `hour` is an integer between `0` and `23`. If no `year`, `month`, or `day` is specified, the default `year`, `month`, and `day` are used. */
        hour?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        BillingUsageReport,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/organizations/${org}/settings/billing/usage`,
        method: "GET",
        query: query,
        ...params,
      }),
  };
  orgs = {
    /**
     * @description Gets information about an organization. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/). To see the full details about an organization, the authenticated user must be an organization owner. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization. To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
     *
     * @tags orgs
     * @name OrgsGet
     * @summary Get an organization
     * @request GET:/orgs/{org}
     */
    orgsGet: (org: string, params: RequestParams = {}) =>
      this.request<OrganizationFull, BasicError>({
        path: `/orgs/${org}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes). > [!WARNING] > **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/). Updates the organization's profile and member privileges. The authenticated user must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsUpdate
     * @summary Update an organization
     * @request PATCH:/orgs/{org}
     */
    orgsUpdate: (
      org: string,
      data?: {
        /** Billing email address. This address is not publicized. */
        billing_email?: string;
        /** The company name. */
        company?: string;
        /** The publicly visible email address. */
        email?: string;
        /** The Twitter username of the company. */
        twitter_username?: string;
        /** The location. */
        location?: string;
        /** The shorthand name of the company. */
        name?: string;
        /** The description of the company. The maximum size is 160 characters. */
        description?: string;
        /** Whether an organization can use organization projects. */
        has_organization_projects?: boolean;
        /** Whether repositories that belong to the organization can use repository projects. */
        has_repository_projects?: boolean;
        /**
         * Default permission level members have for organization repositories.
         * @default "read"
         */
        default_repository_permission?: "read" | "write" | "admin" | "none";
        /**
         * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
         * @default true
         */
        members_can_create_repositories?: boolean;
        /** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
        members_can_create_internal_repositories?: boolean;
        /** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
        members_can_create_private_repositories?: boolean;
        /** Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
        members_can_create_public_repositories?: boolean;
        /**
         * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
         * **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
         */
        members_allowed_repository_creation_type?: "all" | "private" | "none";
        /**
         * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_pages?: boolean;
        /**
         * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_public_pages?: boolean;
        /**
         * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_private_pages?: boolean;
        /**
         * Whether organization members can fork private organization repositories.
         * @default false
         */
        members_can_fork_private_repositories?: boolean;
        /**
         * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
         * @default false
         */
        web_commit_signoff_required?: boolean;
        /** @example ""http://github.blog"" */
        blog?: string;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        advanced_security_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependabot_alerts_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependabot_security_updates_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependency_graph_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        secret_scanning_enabled_for_new_repositories?: boolean;
        /**
         * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
        /** Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */
        secret_scanning_push_protection_custom_link_enabled?: boolean;
        /** If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret. */
        secret_scanning_push_protection_custom_link?: string;
        /** Controls whether or not deploy keys may be added and used for repositories in the organization. */
        deploy_keys_enabled_for_repositories?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationFull, BasicError | (ValidationError | ValidationErrorSimple)>({
        path: `/orgs/${org}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an organization and all its repositories. The organization login will be unavailable for 90 days after deletion. Please review the Terms of Service regarding account deletion before using this endpoint: https://docs.github.com/site-policy/github-terms/github-terms-of-service
     *
     * @tags orgs
     * @name OrgsDelete
     * @summary Delete an organization
     * @request DELETE:/orgs/{org}
     */
    orgsDelete: (org: string, params: RequestParams = {}) =>
      this.request<object, BasicError>({
        path: `/orgs/${org}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetActionsCacheUsageForOrg
     * @summary Get GitHub Actions cache usage for an organization
     * @request GET:/orgs/{org}/actions/cache/usage
     */
    actionsGetActionsCacheUsageForOrg: (org: string, params: RequestParams = {}) =>
      this.request<ActionsCacheUsageOrgEnterprise, any>({
        path: `/orgs/${org}/actions/cache/usage`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetActionsCacheUsageByRepoForOrg
     * @summary List repositories with GitHub Actions cache usage for an organization
     * @request GET:/orgs/{org}/actions/cache/usage-by-repository
     */
    actionsGetActionsCacheUsageByRepoForOrg: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repository_cache_usages: ActionsCacheUsageByRepository[];
        },
        any
      >({
        path: `/orgs/${org}/actions/cache/usage-by-repository`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all GitHub-hosted runners configured in an organization. OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListHostedRunnersForOrg
     * @summary List GitHub-hosted runners for an organization
     * @request GET:/orgs/{org}/actions/hosted-runners
     */
    actionsListHostedRunnersForOrg: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          runners: ActionsHostedRunner[];
        },
        any
      >({
        path: `/orgs/${org}/actions/hosted-runners`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a GitHub-hosted runner for an organization. OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateHostedRunnerForOrg
     * @summary Create a GitHub-hosted runner for an organization
     * @request POST:/orgs/{org}/actions/hosted-runners
     */
    actionsCreateHostedRunnerForOrg: (
      org: string,
      data: {
        /** Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name: string;
        /** The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`. */
        image: {
          /** The unique identifier of the runner image. */
          id?: string;
          /** The source of the runner image. */
          source?: "github" | "partner" | "custom";
        };
        /** The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes` */
        size: string;
        /** The existing runner group to add this runner to. */
        runner_group_id: number;
        /** The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost. */
        maximum_runners?: number;
        /** Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits` */
        enable_static_ip?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ActionsHostedRunner, any>({
        path: `/orgs/${org}/actions/hosted-runners`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the list of GitHub-owned images available for GitHub-hosted runners for an organization.
     *
     * @tags actions
     * @name ActionsGetHostedRunnersGithubOwnedImagesForOrg
     * @summary Get GitHub-owned images for GitHub-hosted runners in an organization
     * @request GET:/orgs/{org}/actions/hosted-runners/images/github-owned
     */
    actionsGetHostedRunnersGithubOwnedImagesForOrg: (org: string, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          images: ActionsHostedRunnerImage[];
        },
        any
      >({
        path: `/orgs/${org}/actions/hosted-runners/images/github-owned`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the list of partner images available for GitHub-hosted runners for an organization.
     *
     * @tags actions
     * @name ActionsGetHostedRunnersPartnerImagesForOrg
     * @summary Get partner images for GitHub-hosted runners in an organization
     * @request GET:/orgs/{org}/actions/hosted-runners/images/partner
     */
    actionsGetHostedRunnersPartnerImagesForOrg: (org: string, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          images: ActionsHostedRunnerImage[];
        },
        any
      >({
        path: `/orgs/${org}/actions/hosted-runners/images/partner`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the GitHub-hosted runners limits for an organization.
     *
     * @tags actions
     * @name ActionsGetHostedRunnersLimitsForOrg
     * @summary Get limits on GitHub-hosted runners for an organization
     * @request GET:/orgs/{org}/actions/hosted-runners/limits
     */
    actionsGetHostedRunnersLimitsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<ActionsHostedRunnerLimits, any>({
        path: `/orgs/${org}/actions/hosted-runners/limits`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the list of machine specs available for GitHub-hosted runners for an organization.
     *
     * @tags actions
     * @name ActionsGetHostedRunnersMachineSpecsForOrg
     * @summary Get GitHub-hosted runners machine specs for an organization
     * @request GET:/orgs/{org}/actions/hosted-runners/machine-sizes
     */
    actionsGetHostedRunnersMachineSpecsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          machine_specs: ActionsHostedRunnerMachineSpec[];
        },
        any
      >({
        path: `/orgs/${org}/actions/hosted-runners/machine-sizes`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the list of platforms available for GitHub-hosted runners for an organization.
     *
     * @tags actions
     * @name ActionsGetHostedRunnersPlatformsForOrg
     * @summary Get platforms for GitHub-hosted runners in an organization
     * @request GET:/orgs/{org}/actions/hosted-runners/platforms
     */
    actionsGetHostedRunnersPlatformsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          platforms: string[];
        },
        any
      >({
        path: `/orgs/${org}/actions/hosted-runners/platforms`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a GitHub-hosted runner configured in an organization. OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetHostedRunnerForOrg
     * @summary Get a GitHub-hosted runner for an organization
     * @request GET:/orgs/{org}/actions/hosted-runners/{hosted_runner_id}
     */
    actionsGetHostedRunnerForOrg: (org: string, hostedRunnerId: number, params: RequestParams = {}) =>
      this.request<ActionsHostedRunner, any>({
        path: `/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a GitHub-hosted runner for an organization. OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsUpdateHostedRunnerForOrg
     * @summary Update a GitHub-hosted runner for an organization
     * @request PATCH:/orgs/{org}/actions/hosted-runners/{hosted_runner_id}
     */
    actionsUpdateHostedRunnerForOrg: (
      org: string,
      hostedRunnerId: number,
      data: {
        /** Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name?: string;
        /** The existing runner group to add this runner to. */
        runner_group_id?: number;
        /** The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost. */
        maximum_runners?: number;
        /** Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits` */
        enable_static_ip?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ActionsHostedRunner, any>({
        path: `/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a GitHub-hosted runner for an organization.
     *
     * @tags actions
     * @name ActionsDeleteHostedRunnerForOrg
     * @summary Delete a GitHub-hosted runner for an organization
     * @request DELETE:/orgs/{org}/actions/hosted-runners/{hosted_runner_id}
     */
    actionsDeleteHostedRunnerForOrg: (org: string, hostedRunnerId: number, params: RequestParams = {}) =>
      this.request<ActionsHostedRunner, any>({
        path: `/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`,
        method: "DELETE",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the customization template for an OpenID Connect (OIDC) subject claim. OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     *
     * @tags oidc
     * @name OidcGetOidcCustomSubTemplateForOrg
     * @summary Get the customization template for an OIDC subject claim for an organization
     * @request GET:/orgs/{org}/actions/oidc/customization/sub
     */
    oidcGetOidcCustomSubTemplateForOrg: (org: string, params: RequestParams = {}) =>
      this.request<OidcCustomSub, any>({
        path: `/orgs/${org}/actions/oidc/customization/sub`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates the customization template for an OpenID Connect (OIDC) subject claim. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags oidc
     * @name OidcUpdateOidcCustomSubTemplateForOrg
     * @summary Set the customization template for an OIDC subject claim for an organization
     * @request PUT:/orgs/{org}/actions/oidc/customization/sub
     */
    oidcUpdateOidcCustomSubTemplateForOrg: (org: string, data: OidcCustomSub, params: RequestParams = {}) =>
      this.request<EmptyObject, BasicError>({
        path: `/orgs/${org}/actions/oidc/customization/sub`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetGithubActionsPermissionsOrganization
     * @summary Get GitHub Actions permissions for an organization
     * @request GET:/orgs/{org}/actions/permissions
     */
    actionsGetGithubActionsPermissionsOrganization: (org: string, params: RequestParams = {}) =>
      this.request<ActionsOrganizationPermissions, any>({
        path: `/orgs/${org}/actions/permissions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetGithubActionsPermissionsOrganization
     * @summary Set GitHub Actions permissions for an organization
     * @request PUT:/orgs/{org}/actions/permissions
     */
    actionsSetGithubActionsPermissionsOrganization: (
      org: string,
      data: {
        /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
        enabled_repositories: EnabledRepositories;
        /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
        allowed_actions?: AllowedActions;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/permissions`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelectedRepositoriesEnabledGithubActionsOrganization
     * @summary List selected repositories enabled for GitHub Actions in an organization
     * @request GET:/orgs/{org}/actions/permissions/repositories
     */
    actionsListSelectedRepositoriesEnabledGithubActionsOrganization: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: Repository[];
        },
        any
      >({
        path: `/orgs/${org}/actions/permissions/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization
     * @summary Set selected repositories enabled for GitHub Actions in an organization
     * @request PUT:/orgs/{org}/actions/permissions/repositories
     */
    actionsSetSelectedRepositoriesEnabledGithubActionsOrganization: (
      org: string,
      data: {
        /** List of repository IDs to enable for GitHub Actions. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/permissions/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsEnableSelectedRepositoryGithubActionsOrganization
     * @summary Enable a selected repository for GitHub Actions in an organization
     * @request PUT:/orgs/{org}/actions/permissions/repositories/{repository_id}
     */
    actionsEnableSelectedRepositoryGithubActionsOrganization: (
      org: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/permissions/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDisableSelectedRepositoryGithubActionsOrganization
     * @summary Disable a selected repository for GitHub Actions in an organization
     * @request DELETE:/orgs/{org}/actions/permissions/repositories/{repository_id}
     */
    actionsDisableSelectedRepositoryGithubActionsOrganization: (
      org: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/permissions/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetAllowedActionsOrganization
     * @summary Get allowed actions and reusable workflows for an organization
     * @request GET:/orgs/{org}/actions/permissions/selected-actions
     */
    actionsGetAllowedActionsOrganization: (org: string, params: RequestParams = {}) =>
      this.request<SelectedActions, any>({
        path: `/orgs/${org}/actions/permissions/selected-actions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetAllowedActionsOrganization
     * @summary Set allowed actions and reusable workflows for an organization
     * @request PUT:/orgs/{org}/actions/permissions/selected-actions
     */
    actionsSetAllowedActionsOrganization: (org: string, data?: SelectedActions, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/permissions/selected-actions`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)." OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization
     * @summary Get default workflow permissions for an organization
     * @request GET:/orgs/{org}/actions/permissions/workflow
     */
    actionsGetGithubActionsDefaultWorkflowPermissionsOrganization: (org: string, params: RequestParams = {}) =>
      this.request<ActionsGetDefaultWorkflowPermissions, any>({
        path: `/orgs/${org}/actions/permissions/workflow`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization
     * @summary Set default workflow permissions for an organization
     * @request PUT:/orgs/{org}/actions/permissions/workflow
     */
    actionsSetGithubActionsDefaultWorkflowPermissionsOrganization: (
      org: string,
      data?: ActionsSetDefaultWorkflowPermissions,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/permissions/workflow`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnerGroupsForOrg
     * @summary List self-hosted runner groups for an organization
     * @request GET:/orgs/{org}/actions/runner-groups
     */
    actionsListSelfHostedRunnerGroupsForOrg: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Only return runner groups that are allowed to be used by this repository. */
        visible_to_repository?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          runner_groups: RunnerGroupsOrg[];
        },
        any
      >({
        path: `/orgs/${org}/actions/runner-groups`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new self-hosted runner group for an organization. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateSelfHostedRunnerGroupForOrg
     * @summary Create a self-hosted runner group for an organization
     * @request POST:/orgs/{org}/actions/runner-groups
     */
    actionsCreateSelfHostedRunnerGroupForOrg: (
      org: string,
      data: {
        /** Name of the runner group. */
        name: string;
        /**
         * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
         * @default "all"
         */
        visibility?: "selected" | "all" | "private";
        /** List of repository IDs that can access the runner group. */
        selected_repository_ids?: number[];
        /** List of runner IDs to add to the runner group. */
        runners?: number[];
        /**
         * Whether the runner group can be used by `public` repositories.
         * @default false
         */
        allows_public_repositories?: boolean;
        /**
         * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
         * @default false
         */
        restricted_to_workflows?: boolean;
        /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
        selected_workflows?: string[];
        /** The identifier of a hosted compute network configuration. */
        network_configuration_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsOrg, any>({
        path: `/orgs/${org}/actions/runner-groups`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner group for an organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetSelfHostedRunnerGroupForOrg
     * @summary Get a self-hosted runner group for an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}
     */
    actionsGetSelfHostedRunnerGroupForOrg: (org: string, runnerGroupId: number, params: RequestParams = {}) =>
      this.request<RunnerGroupsOrg, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the `name` and `visibility` of a self-hosted runner group in an organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsUpdateSelfHostedRunnerGroupForOrg
     * @summary Update a self-hosted runner group for an organization
     * @request PATCH:/orgs/{org}/actions/runner-groups/{runner_group_id}
     */
    actionsUpdateSelfHostedRunnerGroupForOrg: (
      org: string,
      runnerGroupId: number,
      data: {
        /** Name of the runner group. */
        name: string;
        /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. */
        visibility?: "selected" | "all" | "private";
        /**
         * Whether the runner group can be used by `public` repositories.
         * @default false
         */
        allows_public_repositories?: boolean;
        /**
         * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
         * @default false
         */
        restricted_to_workflows?: boolean;
        /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
        selected_workflows?: string[];
        /** The identifier of a hosted compute network configuration. */
        network_configuration_id?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsOrg, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a self-hosted runner group for an organization. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteSelfHostedRunnerGroupFromOrg
     * @summary Delete a self-hosted runner group from an organization
     * @request DELETE:/orgs/{org}/actions/runner-groups/{runner_group_id}
     */
    actionsDeleteSelfHostedRunnerGroupFromOrg: (org: string, runnerGroupId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the GitHub-hosted runners in an organization group. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListGithubHostedRunnersInGroupForOrg
     * @summary List GitHub-hosted runners in a group for an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners
     */
    actionsListGithubHostedRunnersInGroupForOrg: (
      org: string,
      runnerGroupId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          runners: ActionsHostedRunner[];
        },
        any
      >({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/hosted-runners`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the repositories with access to a self-hosted runner group configured in an organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary List repository access to a self-hosted runner group in an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
     */
    actionsListRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: MinimalRepository[];
        },
        any
      >({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary Set repository access for a self-hosted runner group in an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
     */
    actionsSetRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      data: {
        /** List of repository IDs that can access the runner group. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)." OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary Add repository access to a self-hosted runner group in an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
     */
    actionsAddRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary Remove repository access to a self-hosted runner group in an organization
     * @request DELETE:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
     */
    actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists self-hosted runners that are in a specific organization group. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnersInGroupForOrg
     * @summary List self-hosted runners in a group for an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners
     */
    actionsListSelfHostedRunnersInGroupForOrg: (
      org: string,
      runnerGroupId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          runners: Runner[];
        },
        any
      >({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of self-hosted runners that are part of an organization runner group. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetSelfHostedRunnersInGroupForOrg
     * @summary Set self-hosted runners in a group for an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners
     */
    actionsSetSelfHostedRunnersInGroupForOrg: (
      org: string,
      runnerGroupId: number,
      data: {
        /** List of runner IDs to add to the runner group. */
        runners: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a self-hosted runner to a runner group configured in an organization. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddSelfHostedRunnerToGroupForOrg
     * @summary Add a self-hosted runner to a group for an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     */
    actionsAddSelfHostedRunnerToGroupForOrg: (
      org: string,
      runnerGroupId: number,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveSelfHostedRunnerFromGroupForOrg
     * @summary Remove a self-hosted runner from a group for an organization
     * @request DELETE:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     */
    actionsRemoveSelfHostedRunnerFromGroupForOrg: (
      org: string,
      runnerGroupId: number,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all self-hosted runners configured in an organization. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnersForOrg
     * @summary List self-hosted runners for an organization
     * @request GET:/orgs/{org}/actions/runners
     */
    actionsListSelfHostedRunnersForOrg: (
      org: string,
      query?: {
        /** The name of a self-hosted runner. */
        name?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          runners: Runner[];
        },
        any
      >({
        path: `/orgs/${org}/actions/runners`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists binaries for the runner application that you can download and run. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListRunnerApplicationsForOrg
     * @summary List runner applications for an organization
     * @request GET:/orgs/{org}/actions/runners/downloads
     */
    actionsListRunnerApplicationsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<RunnerApplication[], any>({
        path: `/orgs/${org}/actions/runners/downloads`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Generates a configuration that can be passed to the runner application at startup. The authenticated user must have admin access to the organization. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGenerateRunnerJitconfigForOrg
     * @summary Create configuration for a just-in-time runner for an organization
     * @request POST:/orgs/{org}/actions/runners/generate-jitconfig
     */
    actionsGenerateRunnerJitconfigForOrg: (
      org: string,
      data: {
        /** The name of the new runner. */
        name: string;
        /** The ID of the runner group to register the runner to. */
        runner_group_id: number;
        /**
         * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
        /**
         * The working directory to be used for job execution, relative to the runner install directory.
         * @default "_work"
         */
        work_folder?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** A self hosted runner */
          runner: Runner;
          /** The base64 encoded runner configuration. */
          encoded_jit_config: string;
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/orgs/${org}/actions/runners/generate-jitconfig`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the `config` script. The token expires after one hour. For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner: ``` ./config.sh --url https://github.com/octo-org --token TOKEN ``` Authenticated users must have admin access to the organization to use this endpoint. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateRegistrationTokenForOrg
     * @summary Create a registration token for an organization
     * @request POST:/orgs/{org}/actions/runners/registration-token
     */
    actionsCreateRegistrationTokenForOrg: (org: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: `/orgs/${org}/actions/runners/registration-token`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour. For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization: ``` ./config.sh remove --token TOKEN ``` Authenticated users must have admin access to the organization to use this endpoint. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateRemoveTokenForOrg
     * @summary Create a remove token for an organization
     * @request POST:/orgs/{org}/actions/runners/remove-token
     */
    actionsCreateRemoveTokenForOrg: (org: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: `/orgs/${org}/actions/runners/remove-token`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner configured in an organization. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsGetSelfHostedRunnerForOrg
     * @summary Get a self-hosted runner for an organization
     * @request GET:/orgs/{org}/actions/runners/{runner_id}
     */
    actionsGetSelfHostedRunnerForOrg: (org: string, runnerId: number, params: RequestParams = {}) =>
      this.request<Runner, any>({
        path: `/orgs/${org}/actions/runners/${runnerId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. Authenticated users must have admin access to the organization to use this endpoint. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteSelfHostedRunnerFromOrg
     * @summary Delete a self-hosted runner from an organization
     * @request DELETE:/orgs/{org}/actions/runners/{runner_id}
     */
    actionsDeleteSelfHostedRunnerFromOrg: (org: string, runnerId: number, params: RequestParams = {}) =>
      this.request<void, ValidationErrorSimple>({
        path: `/orgs/${org}/actions/runners/${runnerId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all labels for a self-hosted runner configured in an organization. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListLabelsForSelfHostedRunnerForOrg
     * @summary List labels for a self-hosted runner for an organization
     * @request GET:/orgs/{org}/actions/runners/{runner_id}/labels
     */
    actionsListLabelsForSelfHostedRunnerForOrg: (org: string, runnerId: number, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError
      >({
        path: `/orgs/${org}/actions/runners/${runnerId}/labels`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Adds custom labels to a self-hosted runner configured in an organization. Authenticated users must have admin access to the organization to use this endpoint. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddCustomLabelsToSelfHostedRunnerForOrg
     * @summary Add custom labels to a self-hosted runner for an organization
     * @request POST:/orgs/{org}/actions/runners/{runner_id}/labels
     */
    actionsAddCustomLabelsToSelfHostedRunnerForOrg: (
      org: string,
      runnerId: number,
      data: {
        /**
         * The names of the custom labels to add to the runner.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/orgs/${org}/actions/runners/${runnerId}/labels`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsSetCustomLabelsForSelfHostedRunnerForOrg
     * @summary Set custom labels for a self-hosted runner for an organization
     * @request PUT:/orgs/{org}/actions/runners/{runner_id}/labels
     */
    actionsSetCustomLabelsForSelfHostedRunnerForOrg: (
      org: string,
      runnerId: number,
      data: {
        /**
         * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
         * @maxItems 100
         * @minItems 0
         */
        labels: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/orgs/${org}/actions/runners/${runnerId}/labels`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg
     * @summary Remove all custom labels from a self-hosted runner for an organization
     * @request DELETE:/orgs/{org}/actions/runners/{runner_id}/labels
     */
    actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg: (
      org: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError
      >({
        path: `/orgs/${org}/actions/runners/${runnerId}/labels`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner. This endpoint returns a `404 Not Found` status if the custom label is not present on the runner. Authenticated users must have admin access to the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg
     * @summary Remove a custom label from a self-hosted runner for an organization
     * @request DELETE:/orgs/{org}/actions/runners/{runner_id}/labels/{name}
     */
    actionsRemoveCustomLabelFromSelfHostedRunnerForOrg: (
      org: string,
      runnerId: number,
      name: string,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/orgs/${org}/actions/runners/${runnerId}/labels/${name}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all secrets available in an organization without revealing their encrypted values. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListOrgSecrets
     * @summary List organization secrets
     * @request GET:/orgs/{org}/actions/secrets
     */
    actionsListOrgSecrets: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: OrganizationActionsSecret[];
        },
        any
      >({
        path: `/orgs/${org}/actions/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. The authenticated user must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetOrgPublicKey
     * @summary Get an organization public key
     * @request GET:/orgs/{org}/actions/secrets/public-key
     */
    actionsGetOrgPublicKey: (org: string, params: RequestParams = {}) =>
      this.request<ActionsPublicKey, any>({
        path: `/orgs/${org}/actions/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single organization secret without revealing its encrypted value. The authenticated user must have collaborator access to a repository to create, update, or read secrets OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetOrgSecret
     * @summary Get an organization secret
     * @request GET:/orgs/{org}/actions/secrets/{secret_name}
     */
    actionsGetOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<OrganizationActionsSecret, any>({
        path: `/orgs/${org}/actions/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateOrUpdateOrgSecret
     * @summary Create or update an organization secret
     * @request PUT:/orgs/{org}/actions/secrets/{secret_name}
     */
    actionsCreateOrUpdateOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
        /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
        visibility: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/orgs/${org}/actions/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a secret in an organization using the secret name. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteOrgSecret
     * @summary Delete an organization secret
     * @request DELETE:/orgs/{org}/actions/secrets/{secret_name}
     */
    actionsDeleteOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListSelectedReposForOrgSecret
     * @summary List selected repositories for an organization secret
     * @request GET:/orgs/{org}/actions/secrets/{secret_name}/repositories
     */
    actionsListSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: MinimalRepository[];
        },
        any
      >({
        path: `/orgs/${org}/actions/secrets/${secretName}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret). Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsSetSelectedReposForOrgSecret
     * @summary Set selected repositories for an organization secret
     * @request PUT:/orgs/{org}/actions/secrets/{secret_name}/repositories
     */
    actionsSetSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/secrets/${secretName}/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. For more information about setting the visibility, see [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret). Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddSelectedRepoToOrgSecret
     * @summary Add selected repository to an organization secret
     * @request PUT:/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
     */
    actionsAddSelectedRepoToOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret). Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsRemoveSelectedRepoFromOrgSecret
     * @summary Remove selected repository from an organization secret
     * @request DELETE:/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
     */
    actionsRemoveSelectedRepoFromOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all organization variables. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListOrgVariables
     * @summary List organization variables
     * @request GET:/orgs/{org}/actions/variables
     */
    actionsListOrgVariables: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          variables: OrganizationActionsVariable[];
        },
        any
      >({
        path: `/orgs/${org}/actions/variables`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates an organization variable that you can reference in a GitHub Actions workflow. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateOrgVariable
     * @summary Create an organization variable
     * @request POST:/orgs/{org}/actions/variables
     */
    actionsCreateOrgVariable: (
      org: string,
      data: {
        /** The name of the variable. */
        name: string;
        /** The value of the variable. */
        value: string;
        /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
        visibility: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/orgs/${org}/actions/variables`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific variable in an organization. The authenticated user must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetOrgVariable
     * @summary Get an organization variable
     * @request GET:/orgs/{org}/actions/variables/{name}
     */
    actionsGetOrgVariable: (org: string, name: string, params: RequestParams = {}) =>
      this.request<OrganizationActionsVariable, any>({
        path: `/orgs/${org}/actions/variables/${name}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates an organization variable that you can reference in a GitHub Actions workflow. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsUpdateOrgVariable
     * @summary Update an organization variable
     * @request PATCH:/orgs/{org}/actions/variables/{name}
     */
    actionsUpdateOrgVariable: (
      org: string,
      name: string,
      data: {
        /** The name of the variable. */
        name?: string;
        /** The value of the variable. */
        value?: string;
        /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
        visibility?: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/variables/${name}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Deletes an organization variable using the variable name. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteOrgVariable
     * @summary Delete an organization variable
     * @request DELETE:/orgs/{org}/actions/variables/{name}
     */
    actionsDeleteOrgVariable: (org: string, name: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/actions/variables/${name}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all repositories that can access an organization variable that is available to selected repositories. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsListSelectedReposForOrgVariable
     * @summary List selected repositories for an organization variable
     * @request GET:/orgs/{org}/actions/variables/{name}/repositories
     */
    actionsListSelectedReposForOrgVariable: (
      org: string,
      name: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: MinimalRepository[];
        },
        void
      >({
        path: `/orgs/${org}/actions/variables/${name}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsSetSelectedReposForOrgVariable
     * @summary Set selected repositories for an organization variable
     * @request PUT:/orgs/{org}/actions/variables/{name}/repositories
     */
    actionsSetSelectedReposForOrgVariable: (
      org: string,
      name: string,
      data: {
        /** The IDs of the repositories that can access the organization variable. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/actions/variables/${name}/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddSelectedRepoToOrgVariable
     * @summary Add selected repository to an organization variable
     * @request PUT:/orgs/{org}/actions/variables/{name}/repositories/{repository_id}
     */
    actionsAddSelectedRepoToOrgVariable: (
      org: string,
      name: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     *
     * @tags actions
     * @name ActionsRemoveSelectedRepoFromOrgVariable
     * @summary Remove selected repository from an organization variable
     * @request DELETE:/orgs/{org}/actions/variables/{name}/repositories/{repository_id}
     */
    actionsRemoveSelectedRepoFromOrgVariable: (
      org: string,
      name: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List a collection of artifact attestations associated with any entry in a list of subject digests owned by an organization. The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required. **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
     *
     * @tags orgs
     * @name OrgsListAttestationsBulk
     * @summary List attestations by bulk subject digests
     * @request POST:/orgs/{org}/attestations/bulk-list
     */
    orgsListAttestationsBulk: (
      org: string,
      data: {
        /**
         * List of subject digests to fetch attestations for.
         * @maxItems 1024
         * @minItems 1
         */
        subject_digests: string[];
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      },
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** Mapping of subject digest to bundles. */
          attestations_subject_digests?: Record<
            string,
            | {
                /** The bundle of the attestation. */
                bundle?: {
                  mediaType?: string;
                  verificationMaterial?: Record<string, any>;
                  dsseEnvelope?: Record<string, any>;
                };
                repository_id?: number;
                bundle_url?: string;
              }[]
            | null
          >;
          /** Information about the current page. */
          page_info?: {
            /** Indicates whether there is a next page. */
            has_next?: boolean;
            /** Indicates whether there is a previous page. */
            has_previous?: boolean;
            /** The cursor to the next page. */
            next?: string;
            /** The cursor to the previous page. */
            previous?: string;
          };
        },
        any
      >({
        path: `/orgs/${org}/attestations/bulk-list`,
        method: "POST",
        query: query,
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete artifact attestations in bulk by either subject digests or unique ID.
     *
     * @tags orgs
     * @name OrgsDeleteAttestationsBulk
     * @summary Delete attestations in bulk
     * @request POST:/orgs/{org}/attestations/delete-request
     */
    orgsDeleteAttestationsBulk: (
      org: string,
      data:
        | {
            /**
             * List of subject digests associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            subject_digests: string[];
          }
        | {
            /**
             * List of unique IDs associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            attestation_ids: number[];
          },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/attestations/delete-request`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Delete an artifact attestation by subject digest.
     *
     * @tags orgs
     * @name OrgsDeleteAttestationsBySubjectDigest
     * @summary Delete attestations by subject digest
     * @request DELETE:/orgs/{org}/attestations/digest/{subject_digest}
     */
    orgsDeleteAttestationsBySubjectDigest: (org: string, subjectDigest: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/attestations/digest/${subjectDigest}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Delete an artifact attestation by unique ID that is associated with a repository owned by an org.
     *
     * @tags orgs
     * @name OrgsDeleteAttestationsById
     * @summary Delete attestations by ID
     * @request DELETE:/orgs/{org}/attestations/{attestation_id}
     */
    orgsDeleteAttestationsById: (org: string, attestationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/attestations/${attestationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization. The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required. **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
     *
     * @tags orgs
     * @name OrgsListAttestations
     * @summary List attestations
     * @request GET:/orgs/{org}/attestations/{subject_digest}
     */
    orgsListAttestations: (
      org: string,
      subjectDigest: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          attestations?: {
            /**
             * The attestation's Sigstore Bundle.
             * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
             */
            bundle?: {
              mediaType?: string;
              verificationMaterial?: Record<string, any>;
              dsseEnvelope?: Record<string, any>;
            };
            repository_id?: number;
            bundle_url?: string;
          }[];
        },
        any
      >({
        path: `/orgs/${org}/attestations/${subjectDigest}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List the users blocked by an organization.
     *
     * @tags orgs
     * @name OrgsListBlockedUsers
     * @summary List users blocked by an organization
     * @request GET:/orgs/{org}/blocks
     */
    orgsListBlockedUsers: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/orgs/${org}/blocks`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
     *
     * @tags orgs
     * @name OrgsCheckBlockedUser
     * @summary Check if a user is blocked by an organization
     * @request GET:/orgs/{org}/blocks/{username}
     */
    orgsCheckBlockedUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/blocks/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
     *
     * @tags orgs
     * @name OrgsBlockUser
     * @summary Block a user from an organization
     * @request PUT:/orgs/{org}/blocks/{username}
     */
    orgsBlockUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, ValidationError>({
        path: `/orgs/${org}/blocks/${username}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Unblocks the given user on behalf of the specified organization.
     *
     * @tags orgs
     * @name OrgsUnblockUser
     * @summary Unblock a user from an organization
     * @request DELETE:/orgs/{org}/blocks/{username}
     */
    orgsUnblockUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/blocks/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists campaigns in an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
     *
     * @tags campaigns
     * @name CampaignsListOrgCampaigns
     * @summary List campaigns for an organization
     * @request GET:/orgs/{org}/campaigns
     */
    campaignsListOrgCampaigns: (
      org: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** If specified, only campaigns with this state will be returned. */
        state?: CampaignState;
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created" | "updated" | "ends_at" | "published";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CampaignSummary[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/campaigns`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a campaign for an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included in the campaign.
     *
     * @tags campaigns
     * @name CampaignsCreateCampaign
     * @summary Create a campaign for an organization
     * @request POST:/orgs/{org}/campaigns
     */
    campaignsCreateCampaign: (
      org: string,
      data: {
        /**
         * The name of the campaign
         * @minLength 1
         * @maxLength 50
         */
        name: string;
        /**
         * A description for the campaign
         * @minLength 1
         * @maxLength 255
         */
        description: string;
        /**
         * The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
         * @maxItems 10
         */
        managers?: string[];
        /**
         * The slugs of the teams to set as the campaign managers.
         * @maxItems 10
         */
        team_managers?: string[];
        /**
         * The end date and time of the campaign. The date must be in the future.
         * @format date-time
         */
        ends_at: string;
        /**
         * The contact link of the campaign. Must be a URI.
         * @format uri
         */
        contact_link?: string | null;
        /**
         * The code scanning alerts to include in this campaign
         * @minItems 1
         */
        code_scanning_alerts: {
          /** The repository id */
          repository_id: number;
          /**
           * The alert numbers
           * @minItems 1
           */
          alert_numbers: number[];
        }[];
        /**
         * If true, will automatically generate issues for the campaign. The default is false.
         * @default false
         */
        generate_issues?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CampaignSummary,
        | BasicError
        | void
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/campaigns`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a campaign for an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
     *
     * @tags campaigns
     * @name CampaignsGetCampaignSummary
     * @summary Get a campaign for an organization
     * @request GET:/orgs/{org}/campaigns/{campaign_number}
     */
    campaignsGetCampaignSummary: (org: string, campaignNumber: number, params: RequestParams = {}) =>
      this.request<
        CampaignSummary,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/campaigns/${campaignNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a campaign in an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
     *
     * @tags campaigns
     * @name CampaignsUpdateCampaign
     * @summary Update a campaign
     * @request PATCH:/orgs/{org}/campaigns/{campaign_number}
     */
    campaignsUpdateCampaign: (
      org: string,
      campaignNumber: number,
      data: {
        /**
         * The name of the campaign
         * @minLength 1
         * @maxLength 50
         */
        name?: string;
        /**
         * A description for the campaign
         * @minLength 1
         * @maxLength 255
         */
        description?: string;
        /**
         * The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
         * @maxItems 10
         */
        managers?: string[];
        /**
         * The slugs of the teams to set as the campaign managers.
         * @maxItems 10
         */
        team_managers?: string[];
        /**
         * The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
         * @format date-time
         */
        ends_at?: string;
        /**
         * The contact link of the campaign. Must be a URI.
         * @format uri
         */
        contact_link?: string | null;
        /** Indicates whether a campaign is open or closed */
        state?: CampaignState;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CampaignSummary,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/campaigns/${campaignNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a campaign in an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
     *
     * @tags campaigns
     * @name CampaignsDeleteCampaign
     * @summary Delete a campaign for an organization
     * @request DELETE:/orgs/{org}/campaigns/{campaign_number}
     */
    campaignsDeleteCampaign: (org: string, campaignNumber: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/campaigns/${campaignNumber}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)." The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningListAlertsForOrg
     * @summary List code scanning alerts for an organization
     * @request GET:/orgs/{org}/code-scanning/alerts
     */
    codeScanningListAlertsForOrg: (
      org: string,
      query?: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        tool_name?: CodeScanningAnalysisToolName;
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        tool_guid?: CodeScanningAnalysisToolGuid;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** If specified, only code scanning alerts with this state will be returned. */
        state?: CodeScanningAlertStateQuery;
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** If specified, only code scanning alerts with this severity will be returned. */
        severity?: CodeScanningAlertSeverity;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningOrganizationAlertItems[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/code-scanning/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all code security configurations available in an organization. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetConfigurationsForOrg
     * @summary Get code security configurations for an organization
     * @request GET:/orgs/{org}/code-security/configurations
     */
    codeSecurityGetConfigurationsForOrg: (
      org: string,
      query?: {
        /**
         * The target type of the code security configuration
         * @default "all"
         */
        target_type?: "global" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration[], BasicError>({
        path: `/orgs/${org}/code-security/configurations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a code security configuration in an organization. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityCreateConfiguration
     * @summary Create a code security configuration
     * @request POST:/orgs/{org}/code-security/configurations
     */
    codeSecurityCreateConfiguration: (
      org: string,
      data: {
        /** The name of the code security configuration. Must be unique within the organization. */
        name: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description: string;
        /**
         * The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         * @default "disabled"
         */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /**
         * The enablement status of Dependency Graph
         * @default "enabled"
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Automatic dependency submission
         * @default "disabled"
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /**
           * Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           * @default false
           */
          labeled_runners?: boolean;
        };
        /**
         * The enablement status of Dependabot alerts
         * @default "disabled"
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Dependabot security updates
         * @default "disabled"
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of code scanning default setup
         * @default "disabled"
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "not_set"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning
         * @default "disabled"
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning push protection
         * @default "disabled"
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning delegated bypass
         * @default "disabled"
         */
        secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
        /** Feature options for secret scanning delegated bypass */
        secret_scanning_delegated_bypass_options?: {
          /** The bypass reviewers for secret scanning delegated bypass */
          reviewers?: {
            /** The ID of the team or role selected as a bypass reviewer */
            reviewer_id: number;
            /** The type of the bypass reviewer */
            reviewer_type: "TEAM" | "ROLE";
          }[];
        };
        /**
         * The enablement status of secret scanning validity checks
         * @default "disabled"
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of secret scanning non provider patterns
         * @default "disabled"
         */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning delegated alert dismissal */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /**
         * The enablement status of private vulnerability reporting
         * @default "disabled"
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /**
         * The enforcement status for a security configuration
         * @default "enforced"
         */
        enforcement?: "enforced" | "unenforced";
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration, any>({
        path: `/orgs/${org}/code-security/configurations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the default code security configurations for an organization. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetDefaultConfigurations
     * @summary Get default code security configurations
     * @request GET:/orgs/{org}/code-security/configurations/defaults
     */
    codeSecurityGetDefaultConfigurations: (org: string, params: RequestParams = {}) =>
      this.request<CodeSecurityDefaultConfigurations, BasicError>({
        path: `/orgs/${org}/code-security/configurations/defaults`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Detach code security configuration(s) from a set of repositories. Repositories will retain their settings but will no longer be associated with the configuration. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityDetachConfiguration
     * @summary Detach configurations from repositories
     * @request DELETE:/orgs/{org}/code-security/configurations/detach
     */
    codeSecurityDetachConfiguration: (
      org: string,
      data: {
        /**
         * An array of repository IDs to detach from configurations. Up to 1000 IDs can be provided.
         * @maxItems 1000
         * @minItems 1
         */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<any, BasicError>({
        path: `/orgs/${org}/code-security/configurations/detach`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets a code security configuration available in an organization. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetConfiguration
     * @summary Get a code security configuration
     * @request GET:/orgs/{org}/code-security/configurations/{configuration_id}
     */
    codeSecurityGetConfiguration: (org: string, configurationId: number, params: RequestParams = {}) =>
      this.request<CodeSecurityConfiguration, BasicError>({
        path: `/orgs/${org}/code-security/configurations/${configurationId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a code security configuration in an organization. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityUpdateConfiguration
     * @summary Update a code security configuration
     * @request PATCH:/orgs/{org}/code-security/configurations/{configuration_id}
     */
    codeSecurityUpdateConfiguration: (
      org: string,
      configurationId: number,
      data: {
        /** The name of the code security configuration. Must be unique within the organization. */
        name?: string;
        /**
         * A description of the code security configuration
         * @maxLength 255
         */
        description?: string;
        /** The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features. */
        advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection";
        /** The enablement status of Dependency Graph */
        dependency_graph?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Automatic dependency submission */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";
        /** Feature options for Automatic dependency submission */
        dependency_graph_autosubmit_action_options?: {
          /** Whether to use runners labeled with 'dependency-submission' or standard GitHub runners. */
          labeled_runners?: boolean;
        };
        /** The enablement status of Dependabot alerts */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Dependabot security updates */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        /** The enablement status of code scanning default setup */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        /** Feature options for code scanning default setup */
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions;
        /**
         * The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning */
        secret_scanning?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning push protection */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning delegated bypass */
        secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";
        /** Feature options for secret scanning delegated bypass */
        secret_scanning_delegated_bypass_options?: {
          /** The bypass reviewers for secret scanning delegated bypass */
          reviewers?: {
            /** The ID of the team or role selected as a bypass reviewer */
            reviewer_id: number;
            /** The type of the bypass reviewer */
            reviewer_type: "TEAM" | "ROLE";
          }[];
        };
        /** The enablement status of secret scanning validity checks */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning non-provider patterns */
        secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";
        /** The enablement status of Copilot secret scanning */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";
        /** The enablement status of secret scanning delegated alert dismissal */
        secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";
        /** The enablement status of private vulnerability reporting */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";
        /** The enforcement status for a security configuration */
        enforcement?: "enforced" | "unenforced";
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfiguration, any>({
        path: `/orgs/${org}/code-security/configurations/${configurationId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes the desired code security configuration from an organization. Repositories attached to the configuration will retain their settings but will no longer be associated with the configuration. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityDeleteConfiguration
     * @summary Delete a code security configuration
     * @request DELETE:/orgs/{org}/code-security/configurations/{configuration_id}
     */
    codeSecurityDeleteConfiguration: (org: string, configurationId: number, params: RequestParams = {}) =>
      this.request<any, BasicError>({
        path: `/orgs/${org}/code-security/configurations/${configurationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration. If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityAttachConfiguration
     * @summary Attach a configuration to repositories
     * @request POST:/orgs/{org}/code-security/configurations/{configuration_id}/attach
     */
    codeSecurityAttachConfiguration: (
      org: string,
      configurationId: number,
      data: {
        /** The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids` */
        scope: "all" | "all_without_configurations" | "public" | "private_or_internal" | "selected";
        /** An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<object, any>({
        path: `/orgs/${org}/code-security/configurations/${configurationId}/attach`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Sets a code security configuration as a default to be applied to new repositories in your organization. This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecuritySetConfigurationAsDefault
     * @summary Set a code security configuration as a default for an organization
     * @request PUT:/orgs/{org}/code-security/configurations/{configuration_id}/defaults
     */
    codeSecuritySetConfigurationAsDefault: (
      org: string,
      configurationId: number,
      data: {
        /** Specify which types of repository this security configuration should be applied to by default. */
        default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** Specifies which types of repository this security configuration is applied to by default. */
          default_for_new_repos?: "all" | "none" | "private_and_internal" | "public";
          /** A code security configuration */
          configuration?: CodeSecurityConfiguration;
        },
        BasicError
      >({
        path: `/orgs/${org}/code-security/configurations/${configurationId}/defaults`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the repositories associated with a code security configuration in an organization. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetRepositoriesForConfiguration
     * @summary Get repositories associated with a code security configuration
     * @request GET:/orgs/{org}/code-security/configurations/{configuration_id}/repositories
     */
    codeSecurityGetRepositoriesForConfiguration: (
      org: string,
      configurationId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
         *
         * Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
         * @default "all"
         */
        status?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeSecurityConfigurationRepositories[], BasicError>({
        path: `/orgs/${org}/code-security/configurations/${configurationId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the codespaces associated to a specified organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListInOrganization
     * @summary List codespaces for the organization
     * @request GET:/orgs/{org}/codespaces
     */
    codespacesListInOrganization: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          codespaces: Codespace[];
        },
        BasicError
      >({
        path: `/orgs/${org}/codespaces`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesSetCodespacesAccess
     * @summary Manage access control for organization codespaces
     * @request PUT:/orgs/{org}/codespaces/access
     * @deprecated
     */
    codespacesSetCodespacesAccess: (
      org: string,
      data: {
        /** Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization. */
        visibility: "disabled" | "selected_members" | "all_members" | "all_members_and_outside_collaborators";
        /**
         * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
         * @maxItems 100
         */
        selected_usernames?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void | BasicError | ValidationError>({
        path: `/orgs/${org}/codespaces/access`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Codespaces for the specified users will be billed to the organization. To use this endpoint, the access settings for the organization must be set to `selected_members`. For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesSetCodespacesAccessUsers
     * @summary Add users to Codespaces access for an organization
     * @request POST:/orgs/{org}/codespaces/access/selected_users
     * @deprecated
     */
    codespacesSetCodespacesAccessUsers: (
      org: string,
      data: {
        /**
         * The usernames of the organization members whose codespaces be billed to the organization.
         * @maxItems 100
         */
        selected_usernames: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void | BasicError | ValidationError>({
        path: `/orgs/${org}/codespaces/access/selected_users`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Codespaces for the specified users will no longer be billed to the organization. To use this endpoint, the access settings for the organization must be set to `selected_members`. For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesDeleteCodespacesAccessUsers
     * @summary Remove users from Codespaces access for an organization
     * @request DELETE:/orgs/{org}/codespaces/access/selected_users
     * @deprecated
     */
    codespacesDeleteCodespacesAccessUsers: (
      org: string,
      data: {
        /**
         * The usernames of the organization members whose codespaces should not be billed to the organization.
         * @maxItems 100
         */
        selected_usernames: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void | BasicError | ValidationError>({
        path: `/orgs/${org}/codespaces/access/selected_users`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted values. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListOrgSecrets
     * @summary List organization secrets
     * @request GET:/orgs/{org}/codespaces/secrets
     */
    codespacesListOrgSecrets: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: CodespacesOrgSecret[];
        },
        any
      >({
        path: `/orgs/${org}/codespaces/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetOrgPublicKey
     * @summary Get an organization public key
     * @request GET:/orgs/{org}/codespaces/secrets/public-key
     */
    codespacesGetOrgPublicKey: (org: string, params: RequestParams = {}) =>
      this.request<CodespacesPublicKey, any>({
        path: `/orgs/${org}/codespaces/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets an organization development environment secret without revealing its encrypted value. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetOrgSecret
     * @summary Get an organization secret
     * @request GET:/orgs/{org}/codespaces/secrets/{secret_name}
     */
    codespacesGetOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<CodespacesOrgSecret, any>({
        path: `/orgs/${org}/codespaces/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCreateOrUpdateOrgSecret
     * @summary Create or update an organization secret
     * @request PUT:/orgs/{org}/codespaces/secrets/{secret_name}
     */
    codespacesCreateOrUpdateOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /**
         * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** The ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
        visibility: "all" | "private" | "selected";
        /** An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, BasicError | ValidationError>({
        path: `/orgs/${org}/codespaces/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an organization development environment secret using the secret name. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesDeleteOrgSecret
     * @summary Delete an organization secret
     * @request DELETE:/orgs/{org}/codespaces/secrets/{secret_name}
     */
    codespacesDeleteOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/codespaces/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListSelectedReposForOrgSecret
     * @summary List selected repositories for an organization secret
     * @request GET:/orgs/{org}/codespaces/secrets/{secret_name}/repositories
     */
    codespacesListSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: MinimalRepository[];
        },
        BasicError
      >({
        path: `/orgs/${org}/codespaces/secrets/${secretName}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces all repositories for an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesSetSelectedReposForOrgSecret
     * @summary Set selected repositories for an organization secret
     * @request PUT:/orgs/{org}/codespaces/secrets/{secret_name}/repositories
     */
    codespacesSetSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | void>({
        path: `/orgs/${org}/codespaces/secrets/${secretName}/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesAddSelectedRepoToOrgSecret
     * @summary Add selected repository to an organization secret
     * @request PUT:/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}
     */
    codespacesAddSelectedRepoToOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | void | ValidationError>({
        path: `/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesRemoveSelectedRepoFromOrgSecret
     * @summary Remove selected repository from an organization secret
     * @request DELETE:/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}
     */
    codespacesRemoveSelectedRepoFromOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | void | ValidationError>({
        path: `/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Gets information about an organization's Copilot subscription, including seat breakdown and feature policies. To configure these settings, go to your organization's settings on GitHub.com. For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)." Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription. OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotGetCopilotOrganizationDetails
     * @summary Get Copilot seat information and settings for an organization
     * @request GET:/orgs/{org}/copilot/billing
     */
    copilotGetCopilotOrganizationDetails: (org: string, params: RequestParams = {}) =>
      this.request<CopilotOrganizationDetails, BasicError | void>({
        path: `/orgs/${org}/copilot/billing`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed. Only organization owners can view assigned seats. Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`. For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)." OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotListCopilotSeats
     * @summary List all Copilot seat assignments for an organization
     * @request GET:/orgs/{org}/copilot/billing/seats
     */
    copilotListCopilotSeats: (
      org: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 50
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** Total number of Copilot seats for the organization currently being billed. */
          total_seats?: number;
          seats?: CopilotSeatDetails[];
        },
        BasicError
      >({
        path: `/orgs/${org}/copilot/billing/seats`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Purchases a GitHub Copilot seat for all users within each specified team. The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)." Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)." For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)." The response contains the total number of new seats that were created and existing seats that were refreshed. OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotAddCopilotSeatsForTeams
     * @summary Add teams to the Copilot subscription for an organization
     * @request POST:/orgs/{org}/copilot/billing/selected_teams
     */
    copilotAddCopilotSeatsForTeams: (
      org: string,
      data: {
        /**
         * List of team names within the organization to which to grant access to GitHub Copilot.
         * @minItems 1
         */
        selected_teams: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          seats_created: number;
        },
        BasicError | void
      >({
        path: `/orgs/${org}/copilot/billing/selected_teams`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Sets seats for all members of each team specified to "pending cancellation". This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team. For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)." Only organization owners can cancel Copilot seats for their organization members. The response contains the total number of seats set to "pending cancellation". OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotCancelCopilotSeatAssignmentForTeams
     * @summary Remove teams from the Copilot subscription for an organization
     * @request DELETE:/orgs/{org}/copilot/billing/selected_teams
     */
    copilotCancelCopilotSeatAssignmentForTeams: (
      org: string,
      data: {
        /**
         * The names of teams from which to revoke access to GitHub Copilot.
         * @minItems 1
         */
        selected_teams: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          seats_cancelled: number;
        },
        BasicError | void
      >({
        path: `/orgs/${org}/copilot/billing/selected_teams`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Purchases a GitHub Copilot seat for each user specified. The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)." Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)." For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)." The response contains the total number of new seats that were created and existing seats that were refreshed. OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotAddCopilotSeatsForUsers
     * @summary Add users to the Copilot subscription for an organization
     * @request POST:/orgs/{org}/copilot/billing/selected_users
     */
    copilotAddCopilotSeatsForUsers: (
      org: string,
      data: {
        /**
         * The usernames of the organization members to be granted access to GitHub Copilot.
         * @minItems 1
         */
        selected_usernames: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          seats_created: number;
        },
        BasicError | void
      >({
        path: `/orgs/${org}/copilot/billing/selected_users`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Sets seats for all users specified to "pending cancellation". This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership. For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)." Only organization owners can cancel Copilot seats for their organization members. The response contains the total number of seats set to "pending cancellation". OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotCancelCopilotSeatAssignmentForUsers
     * @summary Remove users from the Copilot subscription for an organization
     * @request DELETE:/orgs/{org}/copilot/billing/selected_users
     */
    copilotCancelCopilotSeatAssignmentForUsers: (
      org: string,
      data: {
        /**
         * The usernames of the organization members for which to revoke access to GitHub Copilot.
         * @minItems 1
         */
        selected_usernames: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          seats_cancelled: number;
        },
        BasicError | void
      >({
        path: `/orgs/${org}/copilot/billing/selected_users`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions. > [!NOTE] > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day. The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE. To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization. Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics. OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotCopilotMetricsForOrganization
     * @summary Get Copilot metrics for an organization
     * @request GET:/orgs/{org}/copilot/metrics
     */
    copilotCopilotMetricsForOrganization: (
      org: string,
      query?: {
        /** Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago. */
        since?: string;
        /** Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed. */
        until?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 28
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CopilotUsageMetricsDay[], BasicError>({
        path: `/orgs/${org}/copilot/metrics`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists Dependabot alerts for an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags dependabot
     * @name DependabotListAlertsForOrg
     * @summary List Dependabot alerts for an organization
     * @request GET:/orgs/{org}/dependabot/alerts
     */
    dependabotListAlertsForOrg: (
      org: string,
      query?: {
        /**
         * A comma-separated list of states. If specified, only alerts with these states will be returned.
         *
         * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
         */
        state?: string;
        /**
         * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
         *
         * Can be: `low`, `medium`, `high`, `critical`
         */
        severity?: string;
        /**
         * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
         *
         * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
         */
        ecosystem?: string;
        /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
        package?: string;
        /**
         * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
         * - An exact number (`n`)
         * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
         * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
         *
         * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
         */
        epss_percentage?: string;
        /**
         * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
         * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
         */
        has?: string | "patch"[];
        /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
        scope?: "development" | "runtime";
        /**
         * The property by which to sort the results.
         * `created` means when the alert was created.
         * `updated` means when the alert's state last changed.
         * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
         * @default "created"
         */
        sort?: "created" | "updated" | "epss_percentage";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
         * This parameter must not be used in combination with `last`.
         * Instead, use `per_page` in combination with `after` to fetch the first page of results.
         * @min 1
         * @max 100
         * @default 30
         */
        first?: number;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
         * This parameter must not be used in combination with `first`.
         * Instead, use `per_page` in combination with `before` to fetch the last page of results.
         * @min 1
         * @max 100
         */
        last?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DependabotAlertWithRepository[], BasicError | ValidationErrorSimple>({
        path: `/orgs/${org}/dependabot/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all secrets available in an organization without revealing their encrypted values. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotListOrgSecrets
     * @summary List organization secrets
     * @request GET:/orgs/{org}/dependabot/secrets
     */
    dependabotListOrgSecrets: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: OrganizationDependabotSecret[];
        },
        any
      >({
        path: `/orgs/${org}/dependabot/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotGetOrgPublicKey
     * @summary Get an organization public key
     * @request GET:/orgs/{org}/dependabot/secrets/public-key
     */
    dependabotGetOrgPublicKey: (org: string, params: RequestParams = {}) =>
      this.request<DependabotPublicKey, any>({
        path: `/orgs/${org}/dependabot/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single organization secret without revealing its encrypted value. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotGetOrgSecret
     * @summary Get an organization secret
     * @request GET:/orgs/{org}/dependabot/secrets/{secret_name}
     */
    dependabotGetOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<OrganizationDependabotSecret, any>({
        path: `/orgs/${org}/dependabot/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotCreateOrUpdateOrgSecret
     * @summary Create or update an organization secret
     * @request PUT:/orgs/{org}/dependabot/secrets/{secret_name}
     */
    dependabotCreateOrUpdateOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
        visibility: "all" | "private" | "selected";
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/orgs/${org}/dependabot/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a secret in an organization using the secret name. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotDeleteOrgSecret
     * @summary Delete an organization secret
     * @request DELETE:/orgs/{org}/dependabot/secrets/{secret_name}
     */
    dependabotDeleteOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/dependabot/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotListSelectedReposForOrgSecret
     * @summary List selected repositories for an organization secret
     * @request GET:/orgs/{org}/dependabot/secrets/{secret_name}/repositories
     */
    dependabotListSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repositories: MinimalRepository[];
        },
        any
      >({
        path: `/orgs/${org}/dependabot/secrets/${secretName}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotSetSelectedReposForOrgSecret
     * @summary Set selected repositories for an organization secret
     * @request PUT:/orgs/{org}/dependabot/secrets/{secret_name}/repositories
     */
    dependabotSetSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/dependabot/secrets/${secretName}/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotAddSelectedRepoToOrgSecret
     * @summary Add selected repository to an organization secret
     * @request PUT:/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
     */
    dependabotAddSelectedRepoToOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotRemoveSelectedRepoFromOrgSecret
     * @summary Remove selected repository from an organization secret
     * @request DELETE:/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
     */
    dependabotRemoveSelectedRepoFromOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
     *
     * @tags packages
     * @name PackagesListDockerMigrationConflictingPackagesForOrganization
     * @summary Get list of conflicting packages during Docker migration for organization
     * @request GET:/orgs/{org}/docker/conflicts
     */
    packagesListDockerMigrationConflictingPackagesForOrganization: (org: string, params: RequestParams = {}) =>
      this.request<Package[], BasicError>({
        path: `/orgs/${org}/docker/conflicts`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListPublicOrgEvents
     * @summary List public organization events
     * @request GET:/orgs/{org}/events
     */
    activityListPublicOrgEvents: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/orgs/${org}/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
     *
     * @tags orgs
     * @name OrgsListFailedInvitations
     * @summary List failed organization invitations
     * @request GET:/orgs/{org}/failed_invitations
     */
    orgsListFailedInvitations: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], BasicError>({
        path: `/orgs/${org}/failed_invitations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List webhooks for an organization. The authenticated user must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsListWebhooks
     * @summary List organization webhooks
     * @request GET:/orgs/{org}/hooks
     */
    orgsListWebhooks: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgHook[], BasicError>({
        path: `/orgs/${org}/hooks`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a hook that posts payloads in JSON format. You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsCreateWebhook
     * @summary Create an organization webhook
     * @request POST:/orgs/{org}/hooks
     */
    orgsCreateWebhook: (
      org: string,
      data: {
        /** Must be passed as "web". */
        name: string;
        /** Key/value pairs to provide settings for this webhook. */
        config: {
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
          /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
          content_type?: WebhookConfigContentType;
          /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
          /** @example ""kdaigle"" */
          username?: string;
          /** @example ""password"" */
          password?: string;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
         * @default ["push"]
         */
        events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgHook, BasicError | ValidationError>({
        path: `/orgs/${org}/hooks`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization). You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsGetWebhook
     * @summary Get an organization webhook
     * @request GET:/orgs/{org}/hooks/{hook_id}
     */
    orgsGetWebhook: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<OrgHook, BasicError>({
        path: `/orgs/${org}/hooks/${hookId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)". You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsUpdateWebhook
     * @summary Update an organization webhook
     * @request PATCH:/orgs/{org}/hooks/{hook_id}
     */
    orgsUpdateWebhook: (
      org: string,
      hookId: number,
      data?: {
        /** Key/value pairs to provide settings for this webhook. */
        config?: {
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
          /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
          content_type?: WebhookConfigContentType;
          /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
        /** @example ""web"" */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgHook, BasicError | ValidationError>({
        path: `/orgs/${org}/hooks/${hookId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a webhook for an organization. The authenticated user must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsDeleteWebhook
     * @summary Delete an organization webhook
     * @request DELETE:/orgs/{org}/hooks/{hook_id}
     */
    orgsDeleteWebhook: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/hooks/${hookId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)." You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsGetWebhookConfigForOrg
     * @summary Get a webhook configuration for an organization
     * @request GET:/orgs/{org}/hooks/{hook_id}/config
     */
    orgsGetWebhookConfigForOrg: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<WebhookConfig, any>({
        path: `/orgs/${org}/hooks/${hookId}/config`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)." You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsUpdateWebhookConfigForOrg
     * @summary Update a webhook configuration for an organization
     * @request PATCH:/orgs/{org}/hooks/{hook_id}/config
     */
    orgsUpdateWebhookConfigForOrg: (
      org: string,
      hookId: number,
      data?: {
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        content_type?: WebhookConfigContentType;
        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfig, any>({
        path: `/orgs/${org}/hooks/${hookId}/config`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a list of webhook deliveries for a webhook configured in an organization. You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsListWebhookDeliveries
     * @summary List deliveries for an organization webhook
     * @request GET:/orgs/{org}/hooks/{hook_id}/deliveries
     */
    orgsListWebhookDeliveries: (
      org: string,
      hookId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        cursor?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<HookDeliveryItem[], BasicError | ValidationError>({
        path: `/orgs/${org}/hooks/${hookId}/deliveries`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a delivery for a webhook configured in an organization. You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsGetWebhookDelivery
     * @summary Get a webhook delivery for an organization webhook
     * @request GET:/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}
     */
    orgsGetWebhookDelivery: (org: string, hookId: number, deliveryId: number, params: RequestParams = {}) =>
      this.request<HookDelivery, BasicError | ValidationError>({
        path: `/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Redeliver a delivery for a webhook configured in an organization. You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsRedeliverWebhookDelivery
     * @summary Redeliver a delivery for an organization webhook
     * @request POST:/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
     */
    orgsRedeliverWebhookDelivery: (org: string, hookId: number, deliveryId: number, params: RequestParams = {}) =>
      this.request<object, BasicError | ValidationError>({
        path: `/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}/attempts`,
        method: "POST",
        ...params,
      }),

    /**
     * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. You must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     *
     * @tags orgs
     * @name OrgsPingWebhook
     * @summary Ping an organization webhook
     * @request POST:/orgs/{org}/hooks/{hook_id}/pings
     */
    orgsPingWebhook: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/hooks/${hookId}/pings`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Get API request count statistics for an actor broken down by route within a specified time frame.
     *
     * @tags orgs
     * @name ApiInsightsGetRouteStatsByActor
     * @summary Get route stats by actor
     * @request GET:/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}
     */
    apiInsightsGetRouteStatsByActor: (
      org: string,
      actorType: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server",
      actorId: number,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** The property to sort the results by. */
        sort?: (
          | "last_rate_limited_timestamp"
          | "last_request_timestamp"
          | "rate_limited_request_count"
          | "http_method"
          | "api_route"
          | "total_request_count"
        )[];
        /** Providing a substring will filter results where the API route contains the substring. This is a case-insensitive search. */
        api_route_substring?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsRouteStats, any>({
        path: `/orgs/${org}/insights/api/route-stats/${actorType}/${actorId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps.
     *
     * @tags orgs
     * @name ApiInsightsGetSubjectStats
     * @summary Get subject stats
     * @request GET:/orgs/{org}/insights/api/subject-stats
     */
    apiInsightsGetSubjectStats: (
      org: string,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** The property to sort the results by. */
        sort?: (
          | "last_rate_limited_timestamp"
          | "last_request_timestamp"
          | "rate_limited_request_count"
          | "subject_name"
          | "total_request_count"
        )[];
        /** Providing a substring will filter results where the subject name contains the substring. This is a case-insensitive search. */
        subject_name_substring?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsSubjectStats, any>({
        path: `/orgs/${org}/insights/api/subject-stats`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get overall statistics of API requests made within an organization by all users and apps within a specified time frame.
     *
     * @tags orgs
     * @name ApiInsightsGetSummaryStats
     * @summary Get summary stats
     * @request GET:/orgs/{org}/insights/api/summary-stats
     */
    apiInsightsGetSummaryStats: (
      org: string,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsSummaryStats, any>({
        path: `/orgs/${org}/insights/api/summary-stats`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get overall statistics of API requests within the organization for a user.
     *
     * @tags orgs
     * @name ApiInsightsGetSummaryStatsByUser
     * @summary Get summary stats by user
     * @request GET:/orgs/{org}/insights/api/summary-stats/users/{user_id}
     */
    apiInsightsGetSummaryStatsByUser: (
      org: string,
      userId: string,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsSummaryStats, any>({
        path: `/orgs/${org}/insights/api/summary-stats/users/${userId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user.
     *
     * @tags orgs
     * @name ApiInsightsGetSummaryStatsByActor
     * @summary Get summary stats by actor
     * @request GET:/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}
     */
    apiInsightsGetSummaryStatsByActor: (
      org: string,
      actorType: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server",
      actorId: number,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsSummaryStats, any>({
        path: `/orgs/${org}/insights/api/summary-stats/${actorType}/${actorId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the number of API requests and rate-limited requests made within an organization over a specified time period.
     *
     * @tags orgs
     * @name ApiInsightsGetTimeStats
     * @summary Get time stats
     * @request GET:/orgs/{org}/insights/api/time-stats
     */
    apiInsightsGetTimeStats: (
      org: string,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /** The increment of time used to breakdown the query results (5m, 10m, 1h, etc.) */
        timestamp_increment: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsTimeStats, any>({
        path: `/orgs/${org}/insights/api/time-stats`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period.
     *
     * @tags orgs
     * @name ApiInsightsGetTimeStatsByUser
     * @summary Get time stats by user
     * @request GET:/orgs/{org}/insights/api/time-stats/users/{user_id}
     */
    apiInsightsGetTimeStatsByUser: (
      org: string,
      userId: string,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /** The increment of time used to breakdown the query results (5m, 10m, 1h, etc.) */
        timestamp_increment: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsTimeStats, any>({
        path: `/orgs/${org}/insights/api/time-stats/users/${userId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period.
     *
     * @tags orgs
     * @name ApiInsightsGetTimeStatsByActor
     * @summary Get time stats by actor
     * @request GET:/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}
     */
    apiInsightsGetTimeStatsByActor: (
      org: string,
      actorType: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server",
      actorId: number,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /** The increment of time used to breakdown the query results (5m, 10m, 1h, etc.) */
        timestamp_increment: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsTimeStats, any>({
        path: `/orgs/${org}/insights/api/time-stats/${actorType}/${actorId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get API usage statistics within an organization for a user broken down by the type of access.
     *
     * @tags orgs
     * @name ApiInsightsGetUserStats
     * @summary Get user stats
     * @request GET:/orgs/{org}/insights/api/user-stats/{user_id}
     */
    apiInsightsGetUserStats: (
      org: string,
      userId: string,
      query: {
        /** The minimum timestamp to query for stats. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        min_timestamp: string;
        /** The maximum timestamp to query for stats. Defaults to the time 30 days ago. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        max_timestamp?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** The property to sort the results by. */
        sort?: (
          | "last_rate_limited_timestamp"
          | "last_request_timestamp"
          | "rate_limited_request_count"
          | "subject_name"
          | "total_request_count"
        )[];
        /** Providing a substring will filter results where the actor name contains the substring. This is a case-insensitive search. */
        actor_name_substring?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiInsightsUserStats, any>({
        path: `/orgs/${org}/insights/api/user-stats/${userId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find the organization's installation information. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetOrgInstallation
     * @summary Get an organization installation for the authenticated app
     * @request GET:/orgs/{org}/installation
     */
    appsGetOrgInstallation: (org: string, params: RequestParams = {}) =>
      this.request<Installation, any>({
        path: `/orgs/${org}/installation`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. The authenticated user must be an organization owner to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsListAppInstallations
     * @summary List app installations for an organization
     * @request GET:/orgs/{org}/installations
     */
    orgsListAppInstallations: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          installations: Installation[];
        },
        any
      >({
        path: `/orgs/${org}/installations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
     *
     * @tags interactions
     * @name InteractionsGetRestrictionsForOrg
     * @summary Get interaction restrictions for an organization
     * @request GET:/orgs/{org}/interaction-limits
     */
    interactionsGetRestrictionsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse | object, any>({
        path: `/orgs/${org}/interaction-limits`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
     *
     * @tags interactions
     * @name InteractionsSetRestrictionsForOrg
     * @summary Set interaction restrictions for an organization
     * @request PUT:/orgs/{org}/interaction-limits
     */
    interactionsSetRestrictionsForOrg: (org: string, data: InteractionLimit, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, ValidationError>({
        path: `/orgs/${org}/interaction-limits`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     *
     * @tags interactions
     * @name InteractionsRemoveRestrictionsForOrg
     * @summary Remove interaction restrictions for an organization
     * @request DELETE:/orgs/{org}/interaction-limits
     */
    interactionsRemoveRestrictionsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/interaction-limits`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     *
     * @tags orgs
     * @name OrgsListPendingInvitations
     * @summary List pending organization invitations
     * @request GET:/orgs/{org}/invitations
     */
    orgsListPendingInvitations: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Filter invitations by their member role.
         * @default "all"
         */
        role?: "all" | "admin" | "direct_member" | "billing_manager" | "hiring_manager";
        /**
         * Filter invitations by their invitation source.
         * @default "all"
         */
        invitation_source?: "all" | "member" | "scim";
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], BasicError>({
        path: `/orgs/${org}/invitations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
     *
     * @tags orgs
     * @name OrgsCreateInvitation
     * @summary Create an organization invitation
     * @request POST:/orgs/{org}/invitations
     */
    orgsCreateInvitation: (
      org: string,
      data?: {
        /** **Required unless you provide `email`**. GitHub user ID for the person you are inviting. */
        invitee_id?: number;
        /** **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. */
        email?: string;
        /**
         * The role for the new member.
         *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
         *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
         *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
         *  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
         * @default "direct_member"
         */
        role?: "admin" | "direct_member" | "billing_manager" | "reinstate";
        /** Specify IDs for the teams you want to invite new members to. */
        team_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation, BasicError | ValidationError>({
        path: `/orgs/${org}/invitations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     *
     * @tags orgs
     * @name OrgsCancelInvitation
     * @summary Cancel an organization invitation
     * @request DELETE:/orgs/{org}/invitations/{invitation_id}
     */
    orgsCancelInvitation: (org: string, invitationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/orgs/${org}/invitations/${invitationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
     *
     * @tags orgs
     * @name OrgsListInvitationTeams
     * @summary List organization invitation teams
     * @request GET:/orgs/{org}/invitations/{invitation_id}/teams
     */
    orgsListInvitationTeams: (
      org: string,
      invitationId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: `/orgs/${org}/invitations/${invitationId}/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all issue types for an organization. OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsListIssueTypes
     * @summary List issue types for an organization
     * @request GET:/orgs/{org}/issue-types
     */
    orgsListIssueTypes: (org: string, params: RequestParams = {}) =>
      this.request<IssueType[], BasicError>({
        path: `/orgs/${org}/issue-types`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Create a new issue type for an organization. You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization). To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsCreateIssueType
     * @summary Create issue type for an organization
     * @request POST:/orgs/{org}/issue-types
     */
    orgsCreateIssueType: (org: string, data: OrganizationCreateIssueType, params: RequestParams = {}) =>
      this.request<IssueType, BasicError | ValidationErrorSimple>({
        path: `/orgs/${org}/issue-types`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates an issue type for an organization. You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization). To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsUpdateIssueType
     * @summary Update issue type for an organization
     * @request PUT:/orgs/{org}/issue-types/{issue_type_id}
     */
    orgsUpdateIssueType: (
      org: string,
      issueTypeId: number,
      data: OrganizationUpdateIssueType,
      params: RequestParams = {},
    ) =>
      this.request<IssueType, BasicError | ValidationErrorSimple>({
        path: `/orgs/${org}/issue-types/${issueTypeId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an issue type for an organization. You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization). To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsDeleteIssueType
     * @summary Delete issue type for an organization
     * @request DELETE:/orgs/{org}/issue-types/{issue_type_id}
     */
    orgsDeleteIssueType: (org: string, issueTypeId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationErrorSimple>({
        path: `/orgs/${org}/issue-types/${issueTypeId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List issues in an organization assigned to the authenticated user. > [!NOTE] > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesListForOrg
     * @summary List organization issues assigned to the authenticated user
     * @request GET:/orgs/{org}/issues
     */
    issuesListForOrg: (
      org: string,
      query?: {
        /**
         * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /** Can be the name of an issue type. */
        type?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError>({
        path: `/orgs/${org}/issues`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     *
     * @tags orgs
     * @name OrgsListMembers
     * @summary List organization members
     * @request GET:/orgs/{org}/members
     */
    orgsListMembers: (
      org: string,
      query?: {
        /**
         * Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only members with [insecure 2FA methods](https://docs.github.com/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned. These options are only available for organization owners.
         * @default "all"
         */
        filter?: "2fa_disabled" | "2fa_insecure" | "all";
        /**
         * Filter members returned by their role.
         * @default "all"
         */
        role?: "all" | "admin" | "member";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: `/orgs/${org}/members`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Check if a user is, publicly or privately, a member of the organization.
     *
     * @tags orgs
     * @name OrgsCheckMembershipForUser
     * @summary Check organization membership for a user
     * @request GET:/orgs/{org}/members/{username}
     */
    orgsCheckMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/orgs/${org}/members/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. > [!NOTE] > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
     *
     * @tags orgs
     * @name OrgsRemoveMember
     * @summary Remove an organization member
     * @request DELETE:/orgs/{org}/members/{username}
     */
    orgsRemoveMember: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/members/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the codespaces that a member of an organization has for repositories in that organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetCodespacesForUserInOrg
     * @summary List codespaces for a user in organization
     * @request GET:/orgs/{org}/members/{username}/codespaces
     */
    codespacesGetCodespacesForUserInOrg: (
      org: string,
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          codespaces: Codespace[];
        },
        BasicError
      >({
        path: `/orgs/${org}/members/${username}/codespaces`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a user's codespace. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesDeleteFromOrganization
     * @summary Delete a codespace from the organization
     * @request DELETE:/orgs/{org}/members/{username}/codespaces/{codespace_name}
     */
    codespacesDeleteFromOrganization: (
      org: string,
      username: string,
      codespaceName: string,
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError>({
        path: `/orgs/${org}/members/${username}/codespaces/${codespaceName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Stops a user's codespace. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesStopInOrganization
     * @summary Stop a codespace for an organization user
     * @request POST:/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop
     */
    codespacesStopInOrganization: (org: string, username: string, codespaceName: string, params: RequestParams = {}) =>
      this.request<Codespace, BasicError>({
        path: `/orgs/${org}/members/${username}/codespaces/${codespaceName}/stop`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This endpoint is in public preview and is subject to change. Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot. The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`. For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)." Only organization owners can view Copilot seat assignment details for members of their organization. OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotGetCopilotSeatDetailsForUser
     * @summary Get Copilot seat assignment details for a user
     * @request GET:/orgs/{org}/members/{username}/copilot
     */
    copilotGetCopilotSeatDetailsForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<CopilotSeatDetails, BasicError | void>({
        path: `/orgs/${org}/members/${username}/copilot`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
     *
     * @tags orgs
     * @name OrgsGetMembershipForUser
     * @summary Get organization membership for a user
     * @request GET:/orgs/{org}/memberships/{username}
     */
    orgsGetMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<OrgMembership, BasicError>({
        path: `/orgs/${org}/memberships/${username}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Only authenticated organization owners can add a member to the organization or update the member's role. *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation. *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent. **Rate limits** To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     *
     * @tags orgs
     * @name OrgsSetMembershipForUser
     * @summary Set organization membership for a user
     * @request PUT:/orgs/{org}/memberships/{username}
     */
    orgsSetMembershipForUser: (
      org: string,
      username: string,
      data?: {
        /**
         * The role to give the user in the organization. Can be one of:
         *  * `admin` - The user will become an owner of the organization.
         *  * `member` - The user will become a non-owner member of the organization.
         * @default "member"
         */
        role?: "admin" | "member";
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgMembership, BasicError | ValidationError>({
        path: `/orgs/${org}/memberships/${username}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner. If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases. > [!NOTE] > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
     *
     * @tags orgs
     * @name OrgsRemoveMembershipForUser
     * @summary Remove organization membership for a user
     * @request DELETE:/orgs/{org}/memberships/{username}
     */
    orgsRemoveMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/memberships/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API). A list of `repositories` is only returned for export migrations.
     *
     * @tags migrations
     * @name MigrationsListForOrg
     * @summary List organization migrations
     * @request GET:/orgs/{org}/migrations
     */
    migrationsListForOrg: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Exclude attributes from the API response to improve performance */
        exclude?: "repositories"[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration[], any>({
        path: `/orgs/${org}/migrations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Initiates the generation of a migration archive.
     *
     * @tags migrations
     * @name MigrationsStartForOrg
     * @summary Start an organization migration
     * @request POST:/orgs/{org}/migrations
     */
    migrationsStartForOrg: (
      org: string,
      data: {
        /** A list of arrays indicating which repositories should be migrated. */
        repositories: string[];
        /**
         * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
         * @default false
         * @example true
         */
        lock_repositories?: boolean;
        /**
         * Indicates whether metadata should be excluded and only git source should be included for the migration.
         * @default false
         */
        exclude_metadata?: boolean;
        /**
         * Indicates whether the repository git data should be excluded from the migration.
         * @default false
         */
        exclude_git_data?: boolean;
        /**
         * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
         * @default false
         * @example true
         */
        exclude_attachments?: boolean;
        /**
         * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
         * @default false
         * @example true
         */
        exclude_releases?: boolean;
        /**
         * Indicates whether projects owned by the organization or users should be excluded. from the migration.
         * @default false
         * @example true
         */
        exclude_owner_projects?: boolean;
        /**
         * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
         * @default false
         * @example true
         */
        org_metadata_only?: boolean;
        /** Exclude related items from being returned in the response in order to improve performance of the request. */
        exclude?: "repositories"[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError | ValidationError>({
        path: `/orgs/${org}/migrations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches the status of a migration. The `state` of a migration can be one of the following values: *   `pending`, which means the migration hasn't started yet. *   `exporting`, which means the migration is in progress. *   `exported`, which means the migration finished successfully. *   `failed`, which means the migration failed.
     *
     * @tags migrations
     * @name MigrationsGetStatusForOrg
     * @summary Get an organization migration status
     * @request GET:/orgs/{org}/migrations/{migration_id}
     */
    migrationsGetStatusForOrg: (
      org: string,
      migrationId: number,
      query?: {
        /** Exclude attributes from the API response to improve performance */
        exclude?: "repositories"[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError>({
        path: `/orgs/${org}/migrations/${migrationId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches the URL to a migration archive.
     *
     * @tags migrations
     * @name MigrationsDownloadArchiveForOrg
     * @summary Download an organization migration archive
     * @request GET:/orgs/{org}/migrations/{migration_id}/archive
     */
    migrationsDownloadArchiveForOrg: (org: string, migrationId: number, params: RequestParams = {}) =>
      this.request<any, void | BasicError>({
        path: `/orgs/${org}/migrations/${migrationId}/archive`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     *
     * @tags migrations
     * @name MigrationsDeleteArchiveForOrg
     * @summary Delete an organization migration archive
     * @request DELETE:/orgs/{org}/migrations/{migration_id}/archive
     */
    migrationsDeleteArchiveForOrg: (org: string, migrationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/migrations/${migrationId}/archive`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     *
     * @tags migrations
     * @name MigrationsUnlockRepoForOrg
     * @summary Unlock an organization repository
     * @request DELETE:/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
     */
    migrationsUnlockRepoForOrg: (org: string, migrationId: number, repoName: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/migrations/${migrationId}/repos/${repoName}/lock`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all the repositories for this organization migration.
     *
     * @tags migrations
     * @name MigrationsListReposForOrg
     * @summary List repositories in an organization migration
     * @request GET:/orgs/{org}/migrations/{migration_id}/repositories
     */
    migrationsListReposForOrg: (
      org: string,
      migrationId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/orgs/${org}/migrations/${migrationId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the organization roles available in this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsListOrgRoles
     * @summary Get all organization roles for an organization
     * @request GET:/orgs/{org}/organization-roles
     */
    orgsListOrgRoles: (org: string, params: RequestParams = {}) =>
      this.request<
        {
          /** The total number of organization roles available to the organization. */
          total_count?: number;
          /** The list of organization roles available to the organization. */
          roles?: OrganizationRole[];
        },
        BasicError | ValidationError
      >({
        path: `/orgs/${org}/organization-roles`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Removes all assigned organization roles from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." The authenticated user must be an administrator for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsRevokeAllOrgRolesTeam
     * @summary Remove all organization roles for a team
     * @request DELETE:/orgs/{org}/organization-roles/teams/{team_slug}
     */
    orgsRevokeAllOrgRolesTeam: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/organization-roles/teams/${teamSlug}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Assigns an organization role to a team in an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." The authenticated user must be an administrator for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsAssignTeamToOrgRole
     * @summary Assign an organization role to a team
     * @request PUT:/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}
     */
    orgsAssignTeamToOrgRole: (org: string, teamSlug: string, roleId: number, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes an organization role from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." The authenticated user must be an administrator for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsRevokeOrgRoleTeam
     * @summary Remove an organization role from a team
     * @request DELETE:/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}
     */
    orgsRevokeOrgRoleTeam: (org: string, teamSlug: string, roleId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Revokes all assigned organization roles from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." The authenticated user must be an administrator for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsRevokeAllOrgRolesUser
     * @summary Remove all organization roles for a user
     * @request DELETE:/orgs/{org}/organization-roles/users/{username}
     */
    orgsRevokeAllOrgRolesUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/organization-roles/users/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Assigns an organization role to a member of an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." The authenticated user must be an administrator for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsAssignUserToOrgRole
     * @summary Assign an organization role to a user
     * @request PUT:/orgs/{org}/organization-roles/users/{username}/{role_id}
     */
    orgsAssignUserToOrgRole: (org: string, username: string, roleId: number, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/orgs/${org}/organization-roles/users/${username}/${roleId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Remove an organization role from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." The authenticated user must be an administrator for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsRevokeOrgRoleUser
     * @summary Remove an organization role from a user
     * @request DELETE:/orgs/{org}/organization-roles/users/{username}/{role_id}
     */
    orgsRevokeOrgRoleUser: (org: string, username: string, roleId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/organization-roles/users/${username}/${roleId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets an organization role that is available to this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsGetOrgRole
     * @summary Get an organization role
     * @request GET:/orgs/{org}/organization-roles/{role_id}
     */
    orgsGetOrgRole: (org: string, roleId: number, params: RequestParams = {}) =>
      this.request<OrganizationRole, BasicError | ValidationError>({
        path: `/orgs/${org}/organization-roles/${roleId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." To use this endpoint, you must be an administrator for the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsListOrgRoleTeams
     * @summary List teams that are assigned to an organization role
     * @request GET:/orgs/{org}/organization-roles/{role_id}/teams
     */
    orgsListOrgRoleTeams: (
      org: string,
      roleId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamRoleAssignment[], void>({
        path: `/orgs/${org}/organization-roles/${roleId}/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)." To use this endpoint, you must be an administrator for the organization. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsListOrgRoleUsers
     * @summary List users that are assigned to an organization role
     * @request GET:/orgs/{org}/organization-roles/{role_id}/users
     */
    orgsListOrgRoleUsers: (
      org: string,
      roleId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<UserRoleAssignment[], void>({
        path: `/orgs/${org}/organization-roles/${roleId}/users`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all users who are outside collaborators of an organization.
     *
     * @tags orgs
     * @name OrgsListOutsideCollaborators
     * @summary List outside collaborators for an organization
     * @request GET:/orgs/{org}/outside_collaborators
     */
    orgsListOutsideCollaborators: (
      org: string,
      query?: {
        /**
         * Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only outside collaborators with [insecure 2FA methods](https://docs.github.com/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned.
         * @default "all"
         */
        filter?: "2fa_disabled" | "2fa_insecure" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/orgs/${org}/outside_collaborators`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
     *
     * @tags orgs
     * @name OrgsConvertMemberToOutsideCollaborator
     * @summary Convert an organization member to outside collaborator
     * @request PUT:/orgs/{org}/outside_collaborators/{username}
     */
    orgsConvertMemberToOutsideCollaborator: (
      org: string,
      username: string,
      data?: {
        /**
         * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
         * @default false
         */
        async?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, void | BasicError>({
        path: `/orgs/${org}/outside_collaborators/${username}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removing a user from this list will remove them from all the organization's repositories.
     *
     * @tags orgs
     * @name OrgsRemoveOutsideCollaborator
     * @summary Remove outside collaborator from an organization
     * @request DELETE:/orgs/{org}/outside_collaborators/{username}
     */
    orgsRemoveOutsideCollaborator: (org: string, username: string, params: RequestParams = {}) =>
      this.request<
        void,
        {
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/orgs/${org}/outside_collaborators/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists packages in an organization readable by the user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesListPackagesForOrganization
     * @summary List packages for an organization
     * @request GET:/orgs/{org}/packages
     */
    packagesListPackagesForOrganization: (
      org: string,
      query: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /**
         * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
         *
         * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
         * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
         */
        visibility?: "public" | "private" | "internal";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Package[], BasicError>({
        path: `/orgs/${org}/packages`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific package in an organization. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetPackageForOrganization
     * @summary Get a package for an organization
     * @request GET:/orgs/{org}/packages/{package_type}/{package_name}
     */
    packagesGetPackageForOrganization: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      params: RequestParams = {},
    ) =>
      this.request<Package, any>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance. The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesDeletePackageForOrg
     * @summary Delete a package for an organization
     * @request DELETE:/orgs/{org}/packages/{package_type}/{package_name}
     */
    packagesDeletePackageForOrg: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Restores an entire package in an organization. You can restore a deleted package under the following conditions: - The package was deleted within the last 30 days. - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first. The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesRestorePackageForOrg
     * @summary Restore a package for an organization
     * @request POST:/orgs/{org}/packages/{package_type}/{package_name}/restore
     */
    packagesRestorePackageForOrg: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      query?: {
        /** package token */
        token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}/restore`,
        method: "POST",
        query: query,
        ...params,
      }),

    /**
     * @description Lists package versions for a package owned by an organization. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetAllPackageVersionsForPackageOwnedByOrg
     * @summary List package versions for a package owned by an organization
     * @request GET:/orgs/{org}/packages/{package_type}/{package_name}/versions
     */
    packagesGetAllPackageVersionsForPackageOwnedByOrg: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The state of the package, either active or deleted.
         * @default "active"
         */
        state?: "active" | "deleted";
      },
      params: RequestParams = {},
    ) =>
      this.request<PackageVersion[], BasicError>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}/versions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific package version in an organization. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetPackageVersionForOrganization
     * @summary Get a package version for an organization
     * @request GET:/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
     */
    packagesGetPackageVersionForOrganization: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<PackageVersion, any>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance. The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesDeletePackageVersionForOrg
     * @summary Delete package version for an organization
     * @request DELETE:/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
     */
    packagesDeletePackageVersionForOrg: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Restores a specific package version in an organization. You can restore a deleted package under the following conditions: - The package was deleted within the last 30 days. - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first. The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesRestorePackageVersionForOrg
     * @summary Restore package version for an organization
     * @request POST:/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
     */
    packagesRestorePackageVersionForOrg: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      org: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Lists requests from organization members to access organization resources with a fine-grained personal access token. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsListPatGrantRequests
     * @summary List requests to access organization resources with fine-grained personal access tokens
     * @request GET:/orgs/{org}/personal-access-token-requests
     */
    orgsListPatGrantRequests: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The property by which to sort the results.
         * @default "created_at"
         */
        sort?: "created_at";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * A list of owner usernames to use to filter the results.
         * @maxItems 10
         * @example "owner[]=octocat1,owner[]=octocat2"
         */
        owner?: string[];
        /**
         * The name of the repository to use to filter the results.
         * @example "Hello-World"
         */
        repository?: string;
        /**
         * The permission to use to filter the results.
         * @example "issues_read"
         */
        permission?: string;
        /**
         * Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_before?: string;
        /**
         * Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_after?: string;
        /**
         * The ID of the token
         * @maxItems 50
         * @example "token_id[]=1,token_id[]=2"
         */
        token_id?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationProgrammaticAccessGrantRequest[], BasicError | ValidationError>({
        path: `/orgs/${org}/personal-access-token-requests`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsReviewPatGrantRequestsInBulk
     * @summary Review requests to access organization resources with fine-grained personal access tokens
     * @request POST:/orgs/{org}/personal-access-token-requests
     */
    orgsReviewPatGrantRequestsInBulk: (
      org: string,
      data: {
        /**
         * Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
         * @maxItems 100
         * @minItems 1
         */
        pat_request_ids?: number[];
        /** Action to apply to the requests. */
        action: "approve" | "deny";
        /**
         * Reason for approving or denying the requests. Max 1024 characters.
         * @maxLength 1024
         */
        reason?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError | ValidationError>({
        path: `/orgs/${org}/personal-access-token-requests`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Approves or denies a pending request to access organization resources via a fine-grained personal access token. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsReviewPatGrantRequest
     * @summary Review a request to access organization resources with a fine-grained personal access token
     * @request POST:/orgs/{org}/personal-access-token-requests/{pat_request_id}
     */
    orgsReviewPatGrantRequest: (
      org: string,
      patRequestId: number,
      data: {
        /** Action to apply to the request. */
        action: "approve" | "deny";
        /**
         * Reason for approving or denying the request. Max 1024 characters.
         * @maxLength 1024
         */
        reason?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<any, BasicError | ValidationError>({
        path: `/orgs/${org}/personal-access-token-requests/${patRequestId}`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the repositories a fine-grained personal access token request is requesting access to. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsListPatGrantRequestRepositories
     * @summary List repositories requested to be accessed by a fine-grained personal access token
     * @request GET:/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories
     */
    orgsListPatGrantRequestRepositories: (
      org: string,
      patRequestId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/orgs/${org}/personal-access-token-requests/${patRequestId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists approved fine-grained personal access tokens owned by organization members that can access organization resources. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsListPatGrants
     * @summary List fine-grained personal access tokens with access to organization resources
     * @request GET:/orgs/{org}/personal-access-tokens
     */
    orgsListPatGrants: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The property by which to sort the results.
         * @default "created_at"
         */
        sort?: "created_at";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * A list of owner usernames to use to filter the results.
         * @maxItems 10
         * @example "owner[]=octocat1,owner[]=octocat2"
         */
        owner?: string[];
        /**
         * The name of the repository to use to filter the results.
         * @example "Hello-World"
         */
        repository?: string;
        /**
         * The permission to use to filter the results.
         * @example "issues_read"
         */
        permission?: string;
        /**
         * Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_before?: string;
        /**
         * Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        last_used_after?: string;
        /**
         * The ID of the token
         * @maxItems 50
         * @example "token_id[]=1,token_id[]=2"
         */
        token_id?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationProgrammaticAccessGrant[], BasicError | ValidationError>({
        path: `/orgs/${org}/personal-access-tokens`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsUpdatePatAccesses
     * @summary Update the access to organization resources via fine-grained personal access tokens
     * @request POST:/orgs/{org}/personal-access-tokens
     */
    orgsUpdatePatAccesses: (
      org: string,
      data: {
        /** Action to apply to the fine-grained personal access token. */
        action: "revoke";
        /**
         * The IDs of the fine-grained personal access tokens.
         * @maxItems 100
         * @minItems 1
         */
        pat_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError | ValidationError>({
        path: `/orgs/${org}/personal-access-tokens`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsUpdatePatAccess
     * @summary Update the access a fine-grained personal access token has to organization resources
     * @request POST:/orgs/{org}/personal-access-tokens/{pat_id}
     */
    orgsUpdatePatAccess: (
      org: string,
      patId: number,
      data: {
        /** Action to apply to the fine-grained personal access token. */
        action: "revoke";
      },
      params: RequestParams = {},
    ) =>
      this.request<any, BasicError | ValidationError>({
        path: `/orgs/${org}/personal-access-tokens/${patId}`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the repositories a fine-grained personal access token has access to. Only GitHub Apps can use this endpoint.
     *
     * @tags orgs
     * @name OrgsListPatGrantRepositories
     * @summary List repositories a fine-grained personal access token has access to
     * @request GET:/orgs/{org}/personal-access-tokens/{pat_id}/repositories
     */
    orgsListPatGrantRepositories: (
      org: string,
      patId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/orgs/${org}/personal-access-tokens/${patId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all private registry configurations available at the organization-level without revealing their encrypted values. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags private-registries
     * @name PrivateRegistriesListOrgPrivateRegistries
     * @summary List private registries for an organization
     * @request GET:/orgs/{org}/private-registries
     */
    privateRegistriesListOrgPrivateRegistries: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          configurations: OrgPrivateRegistryConfiguration[];
        },
        BasicError
      >({
        path: `/orgs/${org}/private-registries`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags private-registries
     * @name PrivateRegistriesCreateOrgPrivateRegistry
     * @summary Create a private registry for an organization
     * @request POST:/orgs/{org}/private-registries
     */
    privateRegistriesCreateOrgPrivateRegistry: (
      org: string,
      data: {
        /** The registry type. */
        registry_type: "maven_repository" | "nuget_feed" | "goproxy_server";
        /**
         * The URL of the private registry.
         * @format uri
         */
        url: string;
        /** The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication. */
        username?: string | null;
        /**
         * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** The ID of the key you used to encrypt the secret. */
        key_id: string;
        /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
        visibility: "all" | "private" | "selected";
        /** An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. You can manage the list of selected repositories using the [Update a private registry for an organization](https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization) endpoint. This field should be omitted if `visibility` is set to `all` or `private`. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgPrivateRegistryConfigurationWithSelectedRepositories, BasicError | ValidationError>({
        path: `/orgs/${org}/private-registries`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets. OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags private-registries
     * @name PrivateRegistriesGetOrgPublicKey
     * @summary Get private registries public key for an organization
     * @request GET:/orgs/{org}/private-registries/public-key
     */
    privateRegistriesGetOrgPublicKey: (org: string, params: RequestParams = {}) =>
      this.request<
        {
          /**
           * The identifier for the key.
           * @example "012345678912345678"
           */
          key_id: string;
          /**
           * The Base64 encoded public key.
           * @example "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
           */
          key: string;
        },
        BasicError
      >({
        path: `/orgs/${org}/private-registries/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the configuration of a single private registry defined for an organization, omitting its encrypted value. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags private-registries
     * @name PrivateRegistriesGetOrgPrivateRegistry
     * @summary Get a private registry for an organization
     * @request GET:/orgs/{org}/private-registries/{secret_name}
     */
    privateRegistriesGetOrgPrivateRegistry: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<OrgPrivateRegistryConfiguration, BasicError>({
        path: `/orgs/${org}/private-registries/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags private-registries
     * @name PrivateRegistriesUpdateOrgPrivateRegistry
     * @summary Update a private registry for an organization
     * @request PATCH:/orgs/{org}/private-registries/{secret_name}
     */
    privateRegistriesUpdateOrgPrivateRegistry: (
      org: string,
      secretName: string,
      data: {
        /** The registry type. */
        registry_type?: "maven_repository" | "nuget_feed" | "goproxy_server";
        /**
         * The URL of the private registry.
         * @format uri
         */
        url?: string;
        /** The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication. */
        username?: string | null;
        /**
         * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** The ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
        visibility?: "all" | "private" | "selected";
        /** An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/orgs/${org}/private-registries/${secretName}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Delete a private registry configuration at the organization-level. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     *
     * @tags private-registries
     * @name PrivateRegistriesDeleteOrgPrivateRegistry
     * @summary Delete a private registry for an organization
     * @request DELETE:/orgs/{org}/private-registries/{secret_name}
     */
    privateRegistriesDeleteOrgPrivateRegistry: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/private-registries/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsListForOrg
     * @summary List organization projects
     * @request GET:/orgs/{org}/projects
     * @deprecated
     */
    projectsListForOrg: (
      org: string,
      query?: {
        /**
         * Indicates the state of the projects to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project[], ValidationErrorSimple>({
        path: `/orgs/${org}/projects`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsCreateForOrg
     * @summary Create an organization project
     * @request POST:/orgs/{org}/projects
     * @deprecated
     */
    projectsCreateForOrg: (
      org: string,
      data: {
        /** The name of the project. */
        name: string;
        /** The description of the project. */
        body?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project, BasicError | ValidationErrorSimple>({
        path: `/orgs/${org}/projects`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets all custom properties defined for an organization. Organization members can read these properties.
     *
     * @tags orgs
     * @name OrgsGetAllCustomProperties
     * @summary Get all custom properties for an organization
     * @request GET:/orgs/{org}/properties/schema
     */
    orgsGetAllCustomProperties: (org: string, params: RequestParams = {}) =>
      this.request<CustomProperty[], BasicError>({
        path: `/orgs/${org}/properties/schema`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates new or updates existing custom properties defined for an organization in a batch. If the property already exists, the existing property will be replaced with the new values. Missing optional values will fall back to default values, previous values will be overwritten. E.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`. To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
     *
     * @tags orgs
     * @name OrgsCreateOrUpdateCustomProperties
     * @summary Create or update custom properties for an organization
     * @request PATCH:/orgs/{org}/properties/schema
     */
    orgsCreateOrUpdateCustomProperties: (
      org: string,
      data: {
        /**
         * The array of custom properties to create or update.
         * @maxItems 100
         * @minItems 1
         */
        properties: CustomProperty[];
      },
      params: RequestParams = {},
    ) =>
      this.request<CustomProperty[], BasicError>({
        path: `/orgs/${org}/properties/schema`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a custom property that is defined for an organization. Organization members can read these properties.
     *
     * @tags orgs
     * @name OrgsGetCustomProperty
     * @summary Get a custom property for an organization
     * @request GET:/orgs/{org}/properties/schema/{custom_property_name}
     */
    orgsGetCustomProperty: (org: string, customPropertyName: string, params: RequestParams = {}) =>
      this.request<CustomProperty, BasicError>({
        path: `/orgs/${org}/properties/schema/${customPropertyName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new or updates an existing custom property that is defined for an organization. To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
     *
     * @tags orgs
     * @name OrgsCreateOrUpdateCustomProperty
     * @summary Create or update a custom property for an organization
     * @request PUT:/orgs/{org}/properties/schema/{custom_property_name}
     */
    orgsCreateOrUpdateCustomProperty: (
      org: string,
      customPropertyName: string,
      data: CustomPropertySetPayload,
      params: RequestParams = {},
    ) =>
      this.request<CustomProperty, BasicError>({
        path: `/orgs/${org}/properties/schema/${customPropertyName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes a custom property that is defined for an organization. To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
     *
     * @tags orgs
     * @name OrgsRemoveCustomProperty
     * @summary Remove a custom property for an organization
     * @request DELETE:/orgs/{org}/properties/schema/{custom_property_name}
     */
    orgsRemoveCustomProperty: (org: string, customPropertyName: string, params: RequestParams = {}) =>
      this.request<any, BasicError>({
        path: `/orgs/${org}/properties/schema/${customPropertyName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists organization repositories with all of their custom property values. Organization members can read these properties.
     *
     * @tags orgs
     * @name OrgsListCustomPropertiesValuesForRepos
     * @summary List custom property values for organization repositories
     * @request GET:/orgs/{org}/properties/values
     */
    orgsListCustomPropertiesValuesForRepos: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        repository_query?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgRepoCustomPropertyValues[], BasicError>({
        path: `/orgs/${org}/properties/values`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create new or update existing custom property values for repositories in a batch that belong to an organization. Each target repository will have its custom property values updated to match the values provided in the request. A maximum of 30 repositories can be updated in a single request. Using a value of `null` for a custom property will remove or 'unset' the property value from the repository. To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
     *
     * @tags orgs
     * @name OrgsCreateOrUpdateCustomPropertiesValuesForRepos
     * @summary Create or update custom property values for organization repositories
     * @request PATCH:/orgs/{org}/properties/values
     */
    orgsCreateOrUpdateCustomPropertiesValuesForRepos: (
      org: string,
      data: {
        /**
         * The names of repositories that the custom property values will be applied to.
         * @maxItems 30
         * @minItems 1
         */
        repository_names: string[];
        /** List of custom property names and associated values to apply to the repositories. */
        properties: CustomPropertyValue[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/orgs/${org}/properties/values`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Members of an organization can choose to have their membership publicized or not.
     *
     * @tags orgs
     * @name OrgsListPublicMembers
     * @summary List public organization members
     * @request GET:/orgs/{org}/public_members
     */
    orgsListPublicMembers: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/orgs/${org}/public_members`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Check if the provided user is a public member of the organization.
     *
     * @tags orgs
     * @name OrgsCheckPublicMembershipForUser
     * @summary Check public organization membership for a user
     * @request GET:/orgs/{org}/public_members/{username}
     */
    orgsCheckPublicMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/orgs/${org}/public_members/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description The user can publicize their own membership. (A user cannot publicize the membership for another user.) Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     *
     * @tags orgs
     * @name OrgsSetPublicMembershipForAuthenticatedUser
     * @summary Set public organization membership for the authenticated user
     * @request PUT:/orgs/{org}/public_members/{username}
     */
    orgsSetPublicMembershipForAuthenticatedUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/public_members/${username}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
     *
     * @tags orgs
     * @name OrgsRemovePublicMembershipForAuthenticatedUser
     * @summary Remove public organization membership for the authenticated user
     * @request DELETE:/orgs/{org}/public_members/{username}
     */
    orgsRemovePublicMembershipForAuthenticatedUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/public_members/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists repositories for the specified organization. > [!NOTE] > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * @tags repos
     * @name ReposListForOrg
     * @summary List organization repositories
     * @request GET:/orgs/{org}/repos
     */
    reposListForOrg: (
      org: string,
      query?: {
        /**
         * Specifies the types of repositories you want returned.
         * @default "all"
         */
        type?: "all" | "public" | "private" | "forks" | "sources" | "member";
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: `/orgs/${org}/repos`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new repository in the specified organization. The authenticated user must be a member of the organization. OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
     *
     * @tags repos
     * @name ReposCreateInOrg
     * @summary Create an organization repository
     * @request POST:/orgs/{org}/repos
     */
    reposCreateInOrg: (
      org: string,
      data: {
        /** The name of the repository. */
        name: string;
        /** A short description of the repository. */
        description?: string;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Whether the repository is private.
         * @default false
         */
        private?: boolean;
        /** The visibility of the repository. */
        visibility?: "public" | "private";
        /**
         * Either `true` to enable issues for this repository or `false` to disable them.
         * @default true
         */
        has_issues?: boolean;
        /**
         * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;
        /**
         * Either `true` to enable the wiki for this repository or `false` to disable it.
         * @default true
         */
        has_wiki?: boolean;
        /**
         * Whether downloads are enabled.
         * @default true
         * @example true
         */
        has_downloads?: boolean;
        /**
         * Either `true` to make this repo available as a template repository or `false` to prevent it.
         * @default false
         */
        is_template?: boolean;
        /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
        team_id?: number;
        /**
         * Pass `true` to create an initial commit with empty README.
         * @default false
         */
        auto_init?: boolean;
        /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
        gitignore_template?: string;
        /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
        license_template?: string;
        /**
         * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;
        /**
         * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @deprecated
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        /**
         * Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /** The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values. */
        custom_properties?: Record<string, any>;
      },
      params: RequestParams = {},
    ) =>
      this.request<FullRepository, BasicError | ValidationError>({
        path: `/orgs/${org}/repos`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get all the repository rulesets for an organization.
     *
     * @tags repos
     * @name ReposGetOrgRulesets
     * @summary Get all organization repository rulesets
     * @request GET:/orgs/{org}/rulesets
     */
    reposGetOrgRulesets: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * A comma-separated list of rule targets to filter by.
         * If provided, only rulesets that apply to the specified targets will be returned.
         * For example, `branch,tag,push`.
         * @example "branch,tag,push"
         */
        targets?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset[], BasicError>({
        path: `/orgs/${org}/rulesets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a repository ruleset for an organization.
     *
     * @tags repos
     * @name ReposCreateOrgRuleset
     * @summary Create an organization repository ruleset
     * @request POST:/orgs/{org}/rulesets
     */
    reposCreateOrgRuleset: (
      org: string,
      data: {
        /** The name of the ruleset. */
        name: string;
        /**
         * The target of the ruleset
         * @default "branch"
         */
        target?: "branch" | "tag" | "push" | "repository";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /**
         * Conditions for an organization ruleset.
         * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
         * The push rulesets conditions object does not require the `ref_name` property.
         * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
         */
        conditions?: OrgRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset, BasicError>({
        path: `/orgs/${org}/rulesets`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists suites of rule evaluations at the organization level. For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
     *
     * @tags repos
     * @name ReposGetOrgRuleSuites
     * @summary List organization rule suites
     * @request GET:/orgs/{org}/rulesets/rule-suites
     */
    reposGetOrgRuleSuites: (
      org: string,
      query?: {
        /** The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned. */
        ref?: string;
        /** The name of the repository to filter on. */
        repository_name?: string;
        /**
         * The time period to filter by.
         *
         * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
         * @default "day"
         */
        time_period?: "hour" | "day" | "week" | "month";
        /** The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. */
        actor_name?: string;
        /**
         * The rule suite results to filter on. When specified, only suites with this result will be returned.
         * @default "all"
         */
        rule_suite_result?: "pass" | "fail" | "bypass" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RuleSuites, BasicError>({
        path: `/orgs/${org}/rulesets/rule-suites`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a suite of rule evaluations from within an organization. For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
     *
     * @tags repos
     * @name ReposGetOrgRuleSuite
     * @summary Get an organization rule suite
     * @request GET:/orgs/{org}/rulesets/rule-suites/{rule_suite_id}
     */
    reposGetOrgRuleSuite: (org: string, ruleSuiteId: number, params: RequestParams = {}) =>
      this.request<RuleSuite, BasicError>({
        path: `/orgs/${org}/rulesets/rule-suites/${ruleSuiteId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get a repository ruleset for an organization. **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user making the API request has write access to the ruleset.
     *
     * @tags repos
     * @name ReposGetOrgRuleset
     * @summary Get an organization repository ruleset
     * @request GET:/orgs/{org}/rulesets/{ruleset_id}
     */
    reposGetOrgRuleset: (org: string, rulesetId: number, params: RequestParams = {}) =>
      this.request<RepositoryRuleset, BasicError>({
        path: `/orgs/${org}/rulesets/${rulesetId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Update a ruleset for an organization.
     *
     * @tags repos
     * @name ReposUpdateOrgRuleset
     * @summary Update an organization repository ruleset
     * @request PUT:/orgs/{org}/rulesets/{ruleset_id}
     */
    reposUpdateOrgRuleset: (
      org: string,
      rulesetId: number,
      data?: {
        /** The name of the ruleset. */
        name?: string;
        /** The target of the ruleset */
        target?: "branch" | "tag" | "push" | "repository";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement?: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /**
         * Conditions for an organization ruleset.
         * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
         * The push rulesets conditions object does not require the `ref_name` property.
         * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
         */
        conditions?: OrgRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset, BasicError>({
        path: `/orgs/${org}/rulesets/${rulesetId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a ruleset for an organization.
     *
     * @tags repos
     * @name ReposDeleteOrgRuleset
     * @summary Delete an organization repository ruleset
     * @request DELETE:/orgs/{org}/rulesets/{ruleset_id}
     */
    reposDeleteOrgRuleset: (org: string, rulesetId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/orgs/${org}/rulesets/${rulesetId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Get the history of an organization ruleset.
     *
     * @tags orgs
     * @name OrgsGetOrgRulesetHistory
     * @summary Get organization ruleset history
     * @request GET:/orgs/{org}/rulesets/{ruleset_id}/history
     */
    orgsGetOrgRulesetHistory: (
      org: string,
      rulesetId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RulesetVersion[], BasicError>({
        path: `/orgs/${org}/rulesets/${rulesetId}/history`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a version of an organization ruleset.
     *
     * @tags orgs
     * @name OrgsGetOrgRulesetVersion
     * @summary Get organization ruleset version
     * @request GET:/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}
     */
    orgsGetOrgRulesetVersion: (org: string, rulesetId: number, versionId: number, params: RequestParams = {}) =>
      this.request<RulesetVersionWithState, BasicError>({
        path: `/orgs/${org}/rulesets/${rulesetId}/history/${versionId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags secret-scanning
     * @name SecretScanningListAlertsForOrg
     * @summary List secret scanning alerts for an organization
     * @request GET:/orgs/{org}/secret-scanning/alerts
     */
    secretScanningListAlertsForOrg: (
      org: string,
      query?: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
        /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
        secret_type?: string;
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        resolution?: string;
        /**
         * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
        after?: string;
        /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
        validity?: string;
        /**
         * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
         * @default false
         */
        is_publicly_leaked?: boolean;
        /**
         * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
         * @default false
         */
        is_multi_repo?: boolean;
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        OrganizationSecretScanningAlert[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/orgs/${org}/secret-scanning/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repository security advisories for an organization. The authenticated user must be an owner or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesListOrgRepositoryAdvisories
     * @summary List repository security advisories for an organization
     * @request GET:/orgs/{org}/security-advisories
     */
    securityAdvisoriesListOrgRepositoryAdvisories: (
      org: string,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "published";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
        /** Filter by the state of the repository advisories. Only advisories of this state will be returned. */
        state?: "triage" | "draft" | "published" | "closed";
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryAdvisory[], BasicError>({
        path: `/orgs/${org}/security-advisories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
     *
     * @tags orgs
     * @name OrgsListSecurityManagerTeams
     * @summary List security manager teams
     * @request GET:/orgs/{org}/security-managers
     * @deprecated
     */
    orgsListSecurityManagerTeams: (org: string, params: RequestParams = {}) =>
      this.request<TeamSimple[], any>({
        path: `/orgs/${org}/security-managers`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
     *
     * @tags orgs
     * @name OrgsAddSecurityManagerTeam
     * @summary Add a security manager team
     * @request PUT:/orgs/{org}/security-managers/teams/{team_slug}
     * @deprecated
     */
    orgsAddSecurityManagerTeam: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/security-managers/teams/${teamSlug}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
     *
     * @tags orgs
     * @name OrgsRemoveSecurityManagerTeam
     * @summary Remove a security manager team
     * @request DELETE:/orgs/{org}/security-managers/teams/{team_slug}
     * @deprecated
     */
    orgsRemoveSecurityManagerTeam: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/security-managers/teams/${teamSlug}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets the summary of the free and paid GitHub Actions minutes used. Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
     *
     * @tags billing
     * @name BillingGetGithubActionsBillingOrg
     * @summary Get GitHub Actions billing for an organization
     * @request GET:/orgs/{org}/settings/billing/actions
     */
    billingGetGithubActionsBillingOrg: (org: string, params: RequestParams = {}) =>
      this.request<ActionsBillingUsage, any>({
        path: `/orgs/${org}/settings/billing/actions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the free and paid storage used for GitHub Packages in gigabytes. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
     *
     * @tags billing
     * @name BillingGetGithubPackagesBillingOrg
     * @summary Get GitHub Packages billing for an organization
     * @request GET:/orgs/{org}/settings/billing/packages
     */
    billingGetGithubPackagesBillingOrg: (org: string, params: RequestParams = {}) =>
      this.request<PackagesBillingUsage, any>({
        path: `/orgs/${org}/settings/billing/packages`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
     *
     * @tags billing
     * @name BillingGetSharedStorageBillingOrg
     * @summary Get shared storage billing for an organization
     * @request GET:/orgs/{org}/settings/billing/shared-storage
     */
    billingGetSharedStorageBillingOrg: (org: string, params: RequestParams = {}) =>
      this.request<CombinedBillingUsage, any>({
        path: `/orgs/${org}/settings/billing/shared-storage`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all hosted compute network configurations configured in an organization. OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
     *
     * @tags hosted-compute
     * @name HostedComputeListNetworkConfigurationsForOrg
     * @summary List hosted compute network configurations for an organization
     * @request GET:/orgs/{org}/settings/network-configurations
     */
    hostedComputeListNetworkConfigurationsForOrg: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          network_configurations: NetworkConfiguration[];
        },
        any
      >({
        path: `/orgs/${org}/settings/network-configurations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a hosted compute network configuration for an organization. OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
     *
     * @tags hosted-compute
     * @name HostedComputeCreateNetworkConfigurationForOrg
     * @summary Create a hosted compute network configuration for an organization
     * @request POST:/orgs/{org}/settings/network-configurations
     */
    hostedComputeCreateNetworkConfigurationForOrg: (
      org: string,
      data: {
        /** Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name: string;
        /** The hosted compute service to use for the network configuration. */
        compute_service?: "none" | "actions";
        /**
         * The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
         * @maxItems 1
         * @minItems 1
         */
        network_settings_ids: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<NetworkConfiguration, any>({
        path: `/orgs/${org}/settings/network-configurations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a hosted compute network configuration configured in an organization. OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
     *
     * @tags hosted-compute
     * @name HostedComputeGetNetworkConfigurationForOrg
     * @summary Get a hosted compute network configuration for an organization
     * @request GET:/orgs/{org}/settings/network-configurations/{network_configuration_id}
     */
    hostedComputeGetNetworkConfigurationForOrg: (
      org: string,
      networkConfigurationId: string,
      params: RequestParams = {},
    ) =>
      this.request<NetworkConfiguration, any>({
        path: `/orgs/${org}/settings/network-configurations/${networkConfigurationId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a hosted compute network configuration for an organization. OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
     *
     * @tags hosted-compute
     * @name HostedComputeUpdateNetworkConfigurationForOrg
     * @summary Update a hosted compute network configuration for an organization
     * @request PATCH:/orgs/{org}/settings/network-configurations/{network_configuration_id}
     */
    hostedComputeUpdateNetworkConfigurationForOrg: (
      org: string,
      networkConfigurationId: string,
      data: {
        /** Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'. */
        name?: string;
        /** The hosted compute service to use for the network configuration. */
        compute_service?: "none" | "actions";
        /**
         * The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
         * @maxItems 1
         * @minItems 0
         */
        network_settings_ids?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<NetworkConfiguration, any>({
        path: `/orgs/${org}/settings/network-configurations/${networkConfigurationId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a hosted compute network configuration from an organization. OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
     *
     * @tags hosted-compute
     * @name HostedComputeDeleteNetworkConfigurationFromOrg
     * @summary Delete a hosted compute network configuration from an organization
     * @request DELETE:/orgs/{org}/settings/network-configurations/{network_configuration_id}
     */
    hostedComputeDeleteNetworkConfigurationFromOrg: (
      org: string,
      networkConfigurationId: string,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/settings/network-configurations/${networkConfigurationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a hosted compute network settings resource configured for an organization. OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
     *
     * @tags hosted-compute
     * @name HostedComputeGetNetworkSettingsForOrg
     * @summary Get a hosted compute network settings resource for an organization
     * @request GET:/orgs/{org}/settings/network-settings/{network_settings_id}
     */
    hostedComputeGetNetworkSettingsForOrg: (org: string, networkSettingsId: string, params: RequestParams = {}) =>
      this.request<NetworkSettings, any>({
        path: `/orgs/${org}/settings/network-settings/${networkSettingsId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions. > [!NOTE] > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day. The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE. To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings. Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team. OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
     *
     * @tags copilot
     * @name CopilotCopilotMetricsForTeam
     * @summary Get Copilot metrics for a team
     * @request GET:/orgs/{org}/team/{team_slug}/copilot/metrics
     */
    copilotCopilotMetricsForTeam: (
      org: string,
      teamSlug: string,
      query?: {
        /** Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago. */
        since?: string;
        /** Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed. */
        until?: string;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of days of metrics to display per page (max 28). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 28
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CopilotUsageMetricsDay[], BasicError>({
        path: `/orgs/${org}/team/${teamSlug}/copilot/metrics`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all teams in an organization that are visible to the authenticated user.
     *
     * @tags teams
     * @name TeamsList
     * @summary List teams
     * @request GET:/orgs/{org}/teams
     */
    teamsList: (
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: `/orgs/${org}/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)." When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     *
     * @tags teams
     * @name TeamsCreate
     * @summary Create a team
     * @request POST:/orgs/{org}/teams
     */
    teamsCreate: (
      org: string,
      data: {
        /** The name of the team. */
        name: string;
        /** The description of the team. */
        description?: string;
        /** List GitHub usernames for organization members who will become team maintainers. */
        maintainers?: string[];
        /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
        repo_names?: string[];
        /**
         * The level of privacy this team should have. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * Default: `secret`
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         * Default for child team: `closed`
         */
        privacy?: "secret" | "closed";
        /**
         * The notification setting the team has chosen. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         * Default: `notifications_enabled`
         */
        notification_setting?: "notifications_enabled" | "notifications_disabled";
        /**
         * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push";
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull, BasicError | ValidationError>({
        path: `/orgs/${org}/teams`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     *
     * @tags teams
     * @name TeamsGetByName
     * @summary Get a team by name
     * @request GET:/orgs/{org}/teams/{team_slug}
     */
    teamsGetByName: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<TeamFull, BasicError>({
        path: `/orgs/${org}/teams/${teamSlug}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description To edit a team, the authenticated user must either be an organization owner or a team maintainer. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
     *
     * @tags teams
     * @name TeamsUpdateInOrg
     * @summary Update a team
     * @request PATCH:/orgs/{org}/teams/{team_slug}
     */
    teamsUpdateInOrg: (
      org: string,
      teamSlug: string,
      data?: {
        /** The name of the team. */
        name?: string;
        /** The description of the team. */
        description?: string;
        /**
         * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";
        /**
         * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         */
        notification_setting?: "notifications_enabled" | "notifications_disabled";
        /**
         * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull, BasicError | ValidationError>({
        path: `/orgs/${org}/teams/${teamSlug}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description To delete a team, the authenticated user must be an organization owner or team maintainer. If you are an organization owner, deleting a parent team will delete all of its child teams as well. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
     *
     * @tags teams
     * @name TeamsDeleteInOrg
     * @summary Delete a team
     * @request DELETE:/orgs/{org}/teams/{team_slug}
     */
    teamsDeleteInOrg: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all discussions on a team's page. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsListDiscussionsInOrg
     * @summary List discussions
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions
     */
    teamsListDiscussionsInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** Pinned discussions only filter */
        pinned?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new discussion post on a team's page. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsCreateDiscussionInOrg
     * @summary Create a discussion
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions
     */
    teamsCreateDiscussionInOrg: (
      org: string,
      teamSlug: string,
      data: {
        /** The discussion post's title. */
        title: string;
        /** The discussion post's body text. */
        body: string;
        /**
         * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
         * @default false
         */
        private?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a specific discussion on a team's page. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsGetDiscussionInOrg
     * @summary Get a discussion
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     */
    teamsGetDiscussionInOrg: (org: string, teamSlug: string, discussionNumber: number, params: RequestParams = {}) =>
      this.request<TeamDiscussion, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Edits the title and body text of a discussion post. Only the parameters you provide are updated. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsUpdateDiscussionInOrg
     * @summary Update a discussion
     * @request PATCH:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     */
    teamsUpdateDiscussionInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      data?: {
        /** The discussion post's title. */
        title?: string;
        /** The discussion post's body text. */
        body?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a discussion from a team's page. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsDeleteDiscussionInOrg
     * @summary Delete a discussion
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     */
    teamsDeleteDiscussionInOrg: (org: string, teamSlug: string, discussionNumber: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all comments on a team discussion. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsListDiscussionCommentsInOrg
     * @summary List discussion comments
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     */
    teamsListDiscussionCommentsInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new comment on a team discussion. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsCreateDiscussionCommentInOrg
     * @summary Create a discussion comment
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     */
    teamsCreateDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a specific comment on a team discussion. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsGetDiscussionCommentInOrg
     * @summary Get a discussion comment
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     */
    teamsGetDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Edits the body text of a discussion comment. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsUpdateDiscussionCommentInOrg
     * @summary Update a discussion comment
     * @request PATCH:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     */
    teamsUpdateDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a comment on a team discussion. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsDeleteDiscussionCommentInOrg
     * @summary Delete a discussion comment
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     */
    teamsDeleteDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionCommentInOrg
     * @summary List reactions for a team discussion comment
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     */
    reactionsListForTeamDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionCommentInOrg
     * @summary Create reaction for a team discussion comment
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     */
    reactionsCreateForTeamDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`. Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsDeleteForTeamDiscussionComment
     * @summary Delete team discussion comment reaction
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
     */
    reactionsDeleteForTeamDiscussionComment: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionInOrg
     * @summary List reactions for a team discussion
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     */
    reactionsListForTeamDiscussionInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). A response with an HTTP `200` status means that you already added the reaction type to this team discussion. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionInOrg
     * @summary Create reaction for a team discussion
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     */
    reactionsCreateForTeamDiscussionInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`. Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsDeleteForTeamDiscussion
     * @summary Delete team discussion reaction
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
     */
    reactionsDeleteForTeamDiscussion: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
     *
     * @tags teams
     * @name TeamsListPendingInvitationsInOrg
     * @summary List pending team invitations
     * @request GET:/orgs/{org}/teams/{team_slug}/invitations
     */
    teamsListPendingInvitationsInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/invitations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Team members will include the members of child teams. To list members in a team, the team must be visible to the authenticated user.
     *
     * @tags teams
     * @name TeamsListMembersInOrg
     * @summary List team members
     * @request GET:/orgs/{org}/teams/{team_slug}/members
     */
    teamsListMembersInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * Filters members returned by their role in the team.
         * @default "all"
         */
        role?: "member" | "maintainer" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/members`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Team members will include the members of child teams. To get a user's membership with a team, the team must be visible to the authenticated user. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`. > [!NOTE] > The response contains the `state` of the membership and the member's `role`. The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
     *
     * @tags teams
     * @name TeamsGetMembershipForUserInOrg
     * @summary Get team membership for a user
     * @request GET:/orgs/{org}/teams/{team_slug}/memberships/{username}
     */
    teamsGetMembershipForUserInOrg: (org: string, teamSlug: string, username: string, params: RequestParams = {}) =>
      this.request<TeamMembership, void>({
        path: `/orgs/${org}/teams/${teamSlug}/memberships/${username}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. > [!NOTE] > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     *
     * @tags teams
     * @name TeamsAddOrUpdateMembershipForUserInOrg
     * @summary Add or update team membership for a user
     * @request PUT:/orgs/{org}/teams/{team_slug}/memberships/{username}
     */
    teamsAddOrUpdateMembershipForUserInOrg: (
      org: string,
      teamSlug: string,
      username: string,
      data?: {
        /**
         * The role that this user should have in the team.
         * @default "member"
         */
        role?: "member" | "maintainer";
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamMembership, void>({
        path: `/orgs/${org}/teams/${teamSlug}/memberships/${username}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. > [!NOTE] > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     *
     * @tags teams
     * @name TeamsRemoveMembershipForUserInOrg
     * @summary Remove team membership for a user
     * @request DELETE:/orgs/{org}/teams/{team_slug}/memberships/{username}
     */
    teamsRemoveMembershipForUserInOrg: (org: string, teamSlug: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/orgs/${org}/teams/${teamSlug}/memberships/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsListProjectsInOrg
     * @summary List team projects
     * @request GET:/orgs/{org}/teams/{team_slug}/projects
     * @deprecated
     */
    teamsListProjectsInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamProject[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/projects`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsCheckPermissionsForProjectInOrg
     * @summary Check team permissions for a project
     * @request GET:/orgs/{org}/teams/{team_slug}/projects/{project_id}
     * @deprecated
     */
    teamsCheckPermissionsForProjectInOrg: (
      org: string,
      teamSlug: string,
      projectId: number,
      params: RequestParams = {},
    ) =>
      this.request<TeamProject, void>({
        path: `/orgs/${org}/teams/${teamSlug}/projects/${projectId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsAddOrUpdateProjectPermissionsInOrg
     * @summary Add or update team project permissions
     * @request PUT:/orgs/{org}/teams/{team_slug}/projects/{project_id}
     * @deprecated
     */
    teamsAddOrUpdateProjectPermissionsInOrg: (
      org: string,
      teamSlug: string,
      projectId: number,
      data?: {
        /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." */
        permission?: "read" | "write" | "admin";
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        void,
        {
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/orgs/${org}/teams/${teamSlug}/projects/${projectId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsRemoveProjectInOrg
     * @summary Remove a project from a team
     * @request DELETE:/orgs/{org}/teams/{team_slug}/projects/{project_id}
     * @deprecated
     */
    teamsRemoveProjectInOrg: (org: string, teamSlug: string, projectId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/projects/${projectId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists a team's repositories visible to the authenticated user. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
     *
     * @tags teams
     * @name TeamsListReposInOrg
     * @summary List team repositories
     * @request GET:/orgs/{org}/teams/{team_slug}/repos
     */
    teamsListReposInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/repos`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked. You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header. If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status. If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     *
     * @tags teams
     * @name TeamsCheckPermissionsForRepoInOrg
     * @summary Check team permissions for a repository
     * @request GET:/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     */
    teamsCheckPermissionsForRepoInOrg: (
      org: string,
      teamSlug: string,
      owner: string,
      repo: string,
      params: RequestParams = {},
    ) =>
      this.request<TeamRepository, void>({
        path: `/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`. For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     *
     * @tags teams
     * @name TeamsAddOrUpdateRepoPermissionsInOrg
     * @summary Add or update team repository permissions
     * @request PUT:/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     */
    teamsAddOrUpdateRepoPermissionsInOrg: (
      org: string,
      teamSlug: string,
      owner: string,
      repo: string,
      data?: {
        /** The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
        permission?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     *
     * @tags teams
     * @name TeamsRemoveRepoInOrg
     * @summary Remove a repository from a team
     * @request DELETE:/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     */
    teamsRemoveRepoInOrg: (org: string, teamSlug: string, owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the child teams of the team specified by `{team_slug}`. > [!NOTE] > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
     *
     * @tags teams
     * @name TeamsListChildInOrg
     * @summary List child teams
     * @request GET:/orgs/{org}/teams/{team_slug}/teams
     */
    teamsListChildInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], any>({
        path: `/orgs/${org}/teams/${teamSlug}/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/). Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)." The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint.
     *
     * @tags orgs
     * @name OrgsEnableOrDisableSecurityProductOnAllOrgRepos
     * @summary Enable or disable a security feature for an organization
     * @request POST:/orgs/{org}/{security_product}/{enablement}
     * @deprecated
     */
    orgsEnableOrDisableSecurityProductOnAllOrgRepos: (
      org: string,
      securityProduct:
        | "dependency_graph"
        | "dependabot_alerts"
        | "dependabot_security_updates"
        | "advanced_security"
        | "code_scanning_default_setup"
        | "secret_scanning"
        | "secret_scanning_push_protection",
      enablement: "enable_all" | "disable_all",
      data?: {
        /**
         * CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
         * If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
         */
        query_suite?: "default" | "extended";
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/orgs/${org}/${securityProduct}/${enablement}`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),
  };
  projects = {
    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsGetCard
     * @summary Get a project card
     * @request GET:/projects/columns/cards/{card_id}
     * @deprecated
     */
    projectsGetCard: (cardId: number, params: RequestParams = {}) =>
      this.request<ProjectCard, BasicError>({
        path: `/projects/columns/cards/${cardId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsUpdateCard
     * @summary Update an existing project card
     * @request PATCH:/projects/columns/cards/{card_id}
     * @deprecated
     */
    projectsUpdateCard: (
      cardId: number,
      data?: {
        /**
         * The project card's note
         * @example "Update all gems"
         */
        note?: string | null;
        /**
         * Whether or not the card is archived
         * @example false
         */
        archived?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectCard, BasicError | ValidationErrorSimple>({
        path: `/projects/columns/cards/${cardId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsDeleteCard
     * @summary Delete a project card
     * @request DELETE:/projects/columns/cards/{card_id}
     * @deprecated
     */
    projectsDeleteCard: (cardId: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            message?: string;
            documentation_url?: string;
            errors?: string[];
          }
      >({
        path: `/projects/columns/cards/${cardId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsMoveCard
     * @summary Move a project card
     * @request POST:/projects/columns/cards/{card_id}/moves
     * @deprecated
     */
    projectsMoveCard: (
      cardId: number,
      data: {
        /**
         * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
         * @pattern ^(?:top|bottom|after:\d+)$
         * @example "bottom"
         */
        position: string;
        /**
         * The unique identifier of the column the card should be moved to
         * @example 42
         */
        column_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        EmptyObject,
        | BasicError
        | {
            message?: string;
            documentation_url?: string;
            errors?: {
              code?: string;
              message?: string;
              resource?: string;
              field?: string;
            }[];
          }
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
            errors?: {
              code?: string;
              message?: string;
            }[];
          }
      >({
        path: `/projects/columns/cards/${cardId}/moves`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsGetColumn
     * @summary Get a project column
     * @request GET:/projects/columns/{column_id}
     * @deprecated
     */
    projectsGetColumn: (columnId: number, params: RequestParams = {}) =>
      this.request<ProjectColumn, BasicError>({
        path: `/projects/columns/${columnId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsUpdateColumn
     * @summary Update an existing project column
     * @request PATCH:/projects/columns/{column_id}
     * @deprecated
     */
    projectsUpdateColumn: (
      columnId: number,
      data: {
        /**
         * Name of the project column
         * @example "Remaining tasks"
         */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectColumn, BasicError>({
        path: `/projects/columns/${columnId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsDeleteColumn
     * @summary Delete a project column
     * @request DELETE:/projects/columns/{column_id}
     * @deprecated
     */
    projectsDeleteColumn: (columnId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/projects/columns/${columnId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsListCards
     * @summary List project cards
     * @request GET:/projects/columns/{column_id}/cards
     * @deprecated
     */
    projectsListCards: (
      columnId: number,
      query?: {
        /**
         * Filters the project cards that are returned by the card's state.
         * @default "not_archived"
         */
        archived_state?: "all" | "archived" | "not_archived";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectCard[], BasicError>({
        path: `/projects/columns/${columnId}/cards`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsCreateCard
     * @summary Create a project card
     * @request POST:/projects/columns/{column_id}/cards
     * @deprecated
     */
    projectsCreateCard: (
      columnId: number,
      data:
        | {
            /**
             * The project card's note
             * @example "Update all gems"
             */
            note: string | null;
          }
        | {
            /**
             * The unique identifier of the content associated with the card
             * @example 42
             */
            content_id: number;
            /**
             * The piece of content associated with the card
             * @example "PullRequest"
             */
            content_type: string;
          },
      params: RequestParams = {},
    ) =>
      this.request<
        ProjectCard,
        | BasicError
        | (ValidationError | ValidationErrorSimple)
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
            errors?: {
              code?: string;
              message?: string;
            }[];
          }
      >({
        path: `/projects/columns/${columnId}/cards`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsMoveColumn
     * @summary Move a project column
     * @request POST:/projects/columns/{column_id}/moves
     * @deprecated
     */
    projectsMoveColumn: (
      columnId: number,
      data: {
        /**
         * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
         * @pattern ^(?:first|last|after:\d+)$
         * @example "last"
         */
        position: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, BasicError | ValidationErrorSimple>({
        path: `/projects/columns/${columnId}/moves`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsGet
     * @summary Get a project
     * @request GET:/projects/{project_id}
     * @deprecated
     */
    projectsGet: (projectId: number, params: RequestParams = {}) =>
      this.request<Project, BasicError>({
        path: `/projects/${projectId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsUpdate
     * @summary Update a project
     * @request PATCH:/projects/{project_id}
     * @deprecated
     */
    projectsUpdate: (
      projectId: number,
      data?: {
        /**
         * Name of the project
         * @example "Week One Sprint"
         */
        name?: string;
        /**
         * Body of the project
         * @example "This project represents the sprint of the first week in January"
         */
        body?: string | null;
        /**
         * State of the project; either 'open' or 'closed'
         * @example "open"
         */
        state?: string;
        /** The baseline permission that all organization members have on this project */
        organization_permission?: "read" | "write" | "admin" | "none";
        /** Whether or not this project can be seen by everyone. */
        private?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Project,
        | BasicError
        | {
            message?: string;
            documentation_url?: string;
            errors?: string[];
          }
        | void
        | ValidationErrorSimple
      >({
        path: `/projects/${projectId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsDelete
     * @summary Delete a project
     * @request DELETE:/projects/{project_id}
     * @deprecated
     */
    projectsDelete: (projectId: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            message?: string;
            documentation_url?: string;
            errors?: string[];
          }
      >({
        path: `/projects/${projectId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsListCollaborators
     * @summary List project collaborators
     * @request GET:/projects/{project_id}/collaborators
     * @deprecated
     */
    projectsListCollaborators: (
      projectId: number,
      query?: {
        /**
         * Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
         * @default "all"
         */
        affiliation?: "outside" | "direct" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError | ValidationError>({
        path: `/projects/${projectId}/collaborators`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsAddCollaborator
     * @summary Add project collaborator
     * @request PUT:/projects/{project_id}/collaborators/{username}
     * @deprecated
     */
    projectsAddCollaborator: (
      projectId: number,
      username: string,
      data?: {
        /**
         * The permission to grant the collaborator.
         * @default "write"
         * @example "write"
         */
        permission?: "read" | "write" | "admin";
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/projects/${projectId}/collaborators/${username}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsRemoveCollaborator
     * @summary Remove user as a collaborator
     * @request DELETE:/projects/{project_id}/collaborators/{username}
     * @deprecated
     */
    projectsRemoveCollaborator: (projectId: number, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/projects/${projectId}/collaborators/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsGetPermissionForUser
     * @summary Get project permission for a user
     * @request GET:/projects/{project_id}/collaborators/{username}/permission
     * @deprecated
     */
    projectsGetPermissionForUser: (projectId: number, username: string, params: RequestParams = {}) =>
      this.request<ProjectCollaboratorPermission, BasicError | ValidationError>({
        path: `/projects/${projectId}/collaborators/${username}/permission`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsListColumns
     * @summary List project columns
     * @request GET:/projects/{project_id}/columns
     * @deprecated
     */
    projectsListColumns: (
      projectId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectColumn[], BasicError>({
        path: `/projects/${projectId}/columns`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsCreateColumn
     * @summary Create a project column
     * @request POST:/projects/{project_id}/columns
     * @deprecated
     */
    projectsCreateColumn: (
      projectId: number,
      data: {
        /**
         * Name of the project column
         * @example "Remaining tasks"
         */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectColumn, BasicError | ValidationErrorSimple>({
        path: `/projects/${projectId}/columns`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  rateLimit = {
    /**
     * @description > [!NOTE] > Accessing this endpoint does not count against your REST API rate limit. Some categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories: * The `core` object provides your rate limit status for all non-search-related resources in the REST API. * The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see "[Search](https://docs.github.com/rest/search/search)." * The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see "[Search code](https://docs.github.com/rest/search/search#search-code)." * The `graphql` object provides your rate limit status for the GraphQL API. For more information, see "[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)." * The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see "[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)." * The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)." * The `dependency_sbom` object provides your rate limit status for requesting SBOMs from the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)." * The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see "[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)." * The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)." * The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see "[API Versions](https://docs.github.com/rest/about-the-rest-api/api-versions)." > [!NOTE] > The `rate` object is closing down. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
     *
     * @tags rate-limit
     * @name RateLimitGet
     * @summary Get rate limit status for the authenticated user
     * @request GET:/rate_limit
     */
    rateLimitGet: (params: RequestParams = {}) =>
      this.request<RateLimitOverview, BasicError>({
        path: `/rate_limit`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  repos = {
    /**
     * @description The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network. > [!NOTE] > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * @tags repos
     * @name ReposGet
     * @summary Get a repository
     * @request GET:/repos/{owner}/{repo}
     */
    reposGet: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<FullRepository, BasicError>({
        path: `/repos/${owner}/${repo}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
     *
     * @tags repos
     * @name ReposUpdate
     * @summary Update a repository
     * @request PATCH:/repos/{owner}/{repo}
     */
    reposUpdate: (
      owner: string,
      repo: string,
      data?: {
        /** The name of the repository. */
        name?: string;
        /** A short description of the repository. */
        description?: string;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Either `true` to make the repository private or `false` to make it public. Default: `false`.
         * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
         * @default false
         */
        private?: boolean;
        /** The visibility of the repository. */
        visibility?: "public" | "private";
        /**
         * Specify which security and analysis features to enable or disable for the repository.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
         * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
         *
         * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
         */
        security_and_analysis?: {
          /** Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)." */
          advanced_security?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable GitHub Code Security for this repository. */
          code_security?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)." */
          secret_scanning?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
          secret_scanning_push_protection?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)." */
          secret_scanning_ai_detection?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
          /** Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)." */
          secret_scanning_non_provider_patterns?: {
            /** Can be `enabled` or `disabled`. */
            status?: string;
          };
        } | null;
        /**
         * Either `true` to enable issues for this repository or `false` to disable them.
         * @default true
         */
        has_issues?: boolean;
        /**
         * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;
        /**
         * Either `true` to enable the wiki for this repository or `false` to disable it.
         * @default true
         */
        has_wiki?: boolean;
        /**
         * Either `true` to make this repo available as a template repository or `false` to prevent it.
         * @default false
         */
        is_template?: boolean;
        /** Updates the default branch for this repository. */
        default_branch?: string;
        /**
         * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;
        /**
         * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
         * @default false
         */
        allow_auto_merge?: boolean;
        /**
         * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /**
         * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
         * @default false
         */
        allow_update_branch?: boolean;
        /**
         * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @deprecated
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;
        /**
         * Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * Whether to archive this repository. `false` will unarchive a previously archived repository.
         * @default false
         */
        archived?: boolean;
        /**
         * Either `true` to allow private forks, or `false` to prevent private forks.
         * @default false
         */
        allow_forking?: boolean;
        /**
         * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
         * @default false
         */
        web_commit_signoff_required?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<FullRepository, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deleting a repository requires admin access. If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a `403 Forbidden` response. OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposDelete
     * @summary Delete a repository
     * @request DELETE:/repos/{owner}/{repo}
     */
    reposDelete: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsListArtifactsForRepo
     * @summary List artifacts for a repository
     * @request GET:/repos/{owner}/{repo}/actions/artifacts
     */
    actionsListArtifactsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** The name field of an artifact. When specified, only artifacts with this name will be returned. */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          artifacts: Artifact[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/artifacts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetArtifact
     * @summary Get an artifact
     * @request GET:/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     */
    actionsGetArtifact: (owner: string, repo: string, artifactId: number, params: RequestParams = {}) =>
      this.request<Artifact, any>({
        path: `/repos/${owner}/${repo}/actions/artifacts/${artifactId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an artifact for a workflow run. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteArtifact
     * @summary Delete an artifact
     * @request DELETE:/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     */
    actionsDeleteArtifact: (owner: string, repo: string, artifactId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/artifacts/${artifactId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadArtifact
     * @summary Download an artifact
     * @request GET:/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
     */
    actionsDownloadArtifact: (
      owner: string,
      repo: string,
      artifactId: number,
      archiveFormat: string,
      params: RequestParams = {},
    ) =>
      this.request<any, void | BasicError>({
        path: `/repos/${owner}/${repo}/actions/artifacts/${artifactId}/${archiveFormat}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetActionsCacheUsage
     * @summary Get GitHub Actions cache usage for a repository
     * @request GET:/repos/{owner}/{repo}/actions/cache/usage
     */
    actionsGetActionsCacheUsage: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ActionsCacheUsageByRepository, any>({
        path: `/repos/${owner}/${repo}/actions/cache/usage`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the GitHub Actions caches for a repository. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetActionsCacheList
     * @summary List GitHub Actions caches for a repository
     * @request GET:/repos/{owner}/{repo}/actions/caches
     */
    actionsGetActionsCacheList: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: string;
        /** An explicit key or prefix for identifying the cache */
        key?: string;
        /**
         * The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
         * @default "last_accessed_at"
         */
        sort?: "created_at" | "last_accessed_at" | "size_in_bytes";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
      },
      params: RequestParams = {},
    ) =>
      this.request<ActionsCacheList, any>({
        path: `/repos/${owner}/${repo}/actions/caches`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteActionsCacheByKey
     * @summary Delete GitHub Actions caches for a repository (using a cache key)
     * @request DELETE:/repos/{owner}/{repo}/actions/caches
     */
    actionsDeleteActionsCacheByKey: (
      owner: string,
      repo: string,
      query: {
        /** A key for identifying the cache. */
        key: string;
        /** The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ActionsCacheList, any>({
        path: `/repos/${owner}/${repo}/actions/caches`,
        method: "DELETE",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a GitHub Actions cache for a repository, using a cache ID. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteActionsCacheById
     * @summary Delete a GitHub Actions cache for a repository (using a cache ID)
     * @request DELETE:/repos/{owner}/{repo}/actions/caches/{cache_id}
     */
    actionsDeleteActionsCacheById: (owner: string, repo: string, cacheId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/caches/${cacheId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetJobForWorkflowRun
     * @summary Get a job for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/jobs/{job_id}
     */
    actionsGetJobForWorkflowRun: (owner: string, repo: string, jobId: number, params: RequestParams = {}) =>
      this.request<Job, any>({
        path: `/repos/${owner}/${repo}/actions/jobs/${jobId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadJobLogsForWorkflowRun
     * @summary Download job logs for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/jobs/{job_id}/logs
     */
    actionsDownloadJobLogsForWorkflowRun: (owner: string, repo: string, jobId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: `/repos/${owner}/${repo}/actions/jobs/${jobId}/logs`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Re-run a job and its dependent jobs in a workflow run. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsReRunJobForWorkflowRun
     * @summary Re-run a job from a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun
     */
    actionsReRunJobForWorkflowRun: (
      owner: string,
      repo: string,
      jobId: number,
      data?: {
        /**
         * Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, BasicError>({
        path: `/repos/${owner}/${repo}/actions/jobs/${jobId}/rerun`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the customization template for an OpenID Connect (OIDC) subject claim. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetCustomOidcSubClaimForRepo
     * @summary Get the customization template for an OIDC subject claim for a repository
     * @request GET:/repos/{owner}/{repo}/actions/oidc/customization/sub
     */
    actionsGetCustomOidcSubClaimForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<OidcCustomSubRepo, BasicError>({
        path: `/repos/${owner}/${repo}/actions/oidc/customization/sub`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetCustomOidcSubClaimForRepo
     * @summary Set the customization template for an OIDC subject claim for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/oidc/customization/sub
     */
    actionsSetCustomOidcSubClaimForRepo: (
      owner: string,
      repo: string,
      data: {
        /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
        use_default: boolean;
        /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
        include_claim_keys?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/actions/oidc/customization/sub`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all organization secrets shared with a repository without revealing their encrypted values. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoOrganizationSecrets
     * @summary List repository organization secrets
     * @request GET:/repos/{owner}/{repo}/actions/organization-secrets
     */
    actionsListRepoOrganizationSecrets: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: ActionsSecret[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/organization-secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all organization variables shared with a repository. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoOrganizationVariables
     * @summary List repository organization variables
     * @request GET:/repos/{owner}/{repo}/actions/organization-variables
     */
    actionsListRepoOrganizationVariables: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          variables: ActionsVariable[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/organization-variables`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetGithubActionsPermissionsRepository
     * @summary Get GitHub Actions permissions for a repository
     * @request GET:/repos/{owner}/{repo}/actions/permissions
     */
    actionsGetGithubActionsPermissionsRepository: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ActionsRepositoryPermissions, any>({
        path: `/repos/${owner}/${repo}/actions/permissions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetGithubActionsPermissionsRepository
     * @summary Set GitHub Actions permissions for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/permissions
     */
    actionsSetGithubActionsPermissionsRepository: (
      owner: string,
      repo: string,
      data: {
        /** Whether GitHub Actions is enabled on the repository. */
        enabled: ActionsEnabled;
        /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
        allowed_actions?: AllowedActions;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/permissions`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)." OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetWorkflowAccessToRepository
     * @summary Get the level of access for workflows outside of the repository
     * @request GET:/repos/{owner}/{repo}/actions/permissions/access
     */
    actionsGetWorkflowAccessToRepository: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ActionsWorkflowAccessToRepository, any>({
        path: `/repos/${owner}/${repo}/actions/permissions/access`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)". OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetWorkflowAccessToRepository
     * @summary Set the level of access for workflows outside of the repository
     * @request PUT:/repos/{owner}/{repo}/actions/permissions/access
     */
    actionsSetWorkflowAccessToRepository: (
      owner: string,
      repo: string,
      data: ActionsWorkflowAccessToRepository,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/permissions/access`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)." OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetAllowedActionsRepository
     * @summary Get allowed actions and reusable workflows for a repository
     * @request GET:/repos/{owner}/{repo}/actions/permissions/selected-actions
     */
    actionsGetAllowedActionsRepository: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<SelectedActions, any>({
        path: `/repos/${owner}/${repo}/actions/permissions/selected-actions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)." OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetAllowedActionsRepository
     * @summary Set allowed actions and reusable workflows for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/permissions/selected-actions
     */
    actionsSetAllowedActionsRepository: (
      owner: string,
      repo: string,
      data?: SelectedActions,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/permissions/selected-actions`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)." OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetGithubActionsDefaultWorkflowPermissionsRepository
     * @summary Get default workflow permissions for a repository
     * @request GET:/repos/{owner}/{repo}/actions/permissions/workflow
     */
    actionsGetGithubActionsDefaultWorkflowPermissionsRepository: (
      owner: string,
      repo: string,
      params: RequestParams = {},
    ) =>
      this.request<ActionsGetDefaultWorkflowPermissions, any>({
        path: `/repos/${owner}/${repo}/actions/permissions/workflow`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)." OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetGithubActionsDefaultWorkflowPermissionsRepository
     * @summary Set default workflow permissions for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/permissions/workflow
     */
    actionsSetGithubActionsDefaultWorkflowPermissionsRepository: (
      owner: string,
      repo: string,
      data: ActionsSetDefaultWorkflowPermissions,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: `/repos/${owner}/${repo}/actions/permissions/workflow`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists all self-hosted runners configured in a repository. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnersForRepo
     * @summary List self-hosted runners for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners
     */
    actionsListSelfHostedRunnersForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** The name of a self-hosted runner. */
        name?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          runners: Runner[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/runners`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists binaries for the runner application that you can download and run. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRunnerApplicationsForRepo
     * @summary List runner applications for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners/downloads
     */
    actionsListRunnerApplicationsForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<RunnerApplication[], any>({
        path: `/repos/${owner}/${repo}/actions/runners/downloads`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Generates a configuration that can be passed to the runner application at startup. The authenticated user must have admin access to the repository. OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGenerateRunnerJitconfigForRepo
     * @summary Create configuration for a just-in-time runner for a repository
     * @request POST:/repos/{owner}/{repo}/actions/runners/generate-jitconfig
     */
    actionsGenerateRunnerJitconfigForRepo: (
      owner: string,
      repo: string,
      data: {
        /** The name of the new runner. */
        name: string;
        /** The ID of the runner group to register the runner to. */
        runner_group_id: number;
        /**
         * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
        /**
         * The working directory to be used for job execution, relative to the runner install directory.
         * @default "_work"
         */
        work_folder?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** A self hosted runner */
          runner: Runner;
          /** The base64 encoded runner configuration. */
          encoded_jit_config: string;
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/repos/${owner}/${repo}/actions/runners/generate-jitconfig`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the `config` script. The token expires after one hour. For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner: ``` ./config.sh --url https://github.com/octo-org --token TOKEN ``` Authenticated users must have admin access to the repository to use this endpoint. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateRegistrationTokenForRepo
     * @summary Create a registration token for a repository
     * @request POST:/repos/{owner}/{repo}/actions/runners/registration-token
     */
    actionsCreateRegistrationTokenForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: `/repos/${owner}/${repo}/actions/runners/registration-token`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour. For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization: ``` ./config.sh remove --token TOKEN ``` Authenticated users must have admin access to the repository to use this endpoint. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateRemoveTokenForRepo
     * @summary Create a remove token for a repository
     * @request POST:/repos/{owner}/{repo}/actions/runners/remove-token
     */
    actionsCreateRemoveTokenForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: `/repos/${owner}/${repo}/actions/runners/remove-token`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner configured in a repository. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetSelfHostedRunnerForRepo
     * @summary Get a self-hosted runner for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners/{runner_id}
     */
    actionsGetSelfHostedRunnerForRepo: (owner: string, repo: string, runnerId: number, params: RequestParams = {}) =>
      this.request<Runner, any>({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. Authenticated users must have admin access to the repository to use this endpoint. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteSelfHostedRunnerFromRepo
     * @summary Delete a self-hosted runner from a repository
     * @request DELETE:/repos/{owner}/{repo}/actions/runners/{runner_id}
     */
    actionsDeleteSelfHostedRunnerFromRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all labels for a self-hosted runner configured in a repository. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListLabelsForSelfHostedRunnerForRepo
     * @summary List labels for a self-hosted runner for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
     */
    actionsListLabelsForSelfHostedRunnerForRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Adds custom labels to a self-hosted runner configured in a repository. Authenticated users must have admin access to the organization to use this endpoint. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddCustomLabelsToSelfHostedRunnerForRepo
     * @summary Add custom labels to a self-hosted runner for a repository
     * @request POST:/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
     */
    actionsAddCustomLabelsToSelfHostedRunnerForRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      data: {
        /**
         * The names of the custom labels to add to the runner.
         * @maxItems 100
         * @minItems 1
         */
        labels: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetCustomLabelsForSelfHostedRunnerForRepo
     * @summary Set custom labels for a self-hosted runner for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
     */
    actionsSetCustomLabelsForSelfHostedRunnerForRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      data: {
        /**
         * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
         * @maxItems 100
         * @minItems 0
         */
        labels: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo
     * @summary Remove all custom labels from a self-hosted runner for a repository
     * @request DELETE:/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
     */
    actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner. This endpoint returns a `404 Not Found` status if the custom label is not present on the runner. Authenticated users must have admin access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo
     * @summary Remove a custom label from a self-hosted runner for a repository
     * @request DELETE:/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}
     */
    actionsRemoveCustomLabelFromSelfHostedRunnerForRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      name: string,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          labels: RunnerLabel[];
        },
        BasicError | ValidationErrorSimple
      >({
        path: `/repos/${owner}/${repo}/actions/runners/${runnerId}/labels/${name}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters). Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository. This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
     *
     * @tags actions
     * @name ActionsListWorkflowRunsForRepo
     * @summary List workflow runs for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runs
     */
    actionsListWorkflowRunsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        actor?: string;
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        branch?: string;
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event?: string;
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
        status?:
          | "completed"
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "skipped"
          | "stale"
          | "success"
          | "timed_out"
          | "in_progress"
          | "queued"
          | "requested"
          | "waiting"
          | "pending";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         * @format date-time
         */
        created?: string;
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
        /** Returns workflow runs with the `check_suite_id` that you specify. */
        check_suite_id?: number;
        /** Only returns workflow runs that are associated with the specified `head_sha`. */
        head_sha?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          workflow_runs: WorkflowRun[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/runs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsGetWorkflowRun
     * @summary Get a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}
     */
    actionsGetWorkflowRun: (
      owner: string,
      repo: string,
      runId: number,
      query?: {
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<WorkflowRun, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteWorkflowRun
     * @summary Delete a workflow run
     * @request DELETE:/repos/{owner}/{repo}/actions/runs/{run_id}
     */
    actionsDeleteWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsGetReviewsForRun
     * @summary Get the review history for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/approvals
     */
    actionsGetReviewsForRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<EnvironmentApprovals[], any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/approvals`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)." OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsApproveWorkflowRun
     * @summary Approve a workflow run for a fork pull request
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/approve
     */
    actionsApproveWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<EmptyObject, BasicError>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/approve`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsListWorkflowRunArtifacts
     * @summary List workflow run artifacts
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
     */
    actionsListWorkflowRunArtifacts: (
      owner: string,
      repo: string,
      runId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** The name field of an artifact. When specified, only artifacts with this name will be returned. */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          artifacts: Artifact[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/artifacts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsGetWorkflowRunAttempt
     * @summary Get a workflow run attempt
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}
     */
    actionsGetWorkflowRunAttempt: (
      owner: string,
      repo: string,
      runId: number,
      attemptNumber: number,
      query?: {
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<WorkflowRun, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters). Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
     *
     * @tags actions
     * @name ActionsListJobsForWorkflowRunAttempt
     * @summary List jobs for a workflow run attempt
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs
     */
    actionsListJobsForWorkflowRunAttempt: (
      owner: string,
      repo: string,
      runId: number,
      attemptNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          jobs: Job[];
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/jobs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadWorkflowRunAttemptLogs
     * @summary Download workflow run attempt logs
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs
     */
    actionsDownloadWorkflowRunAttemptLogs: (
      owner: string,
      repo: string,
      runId: number,
      attemptNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<any, void>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/logs`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Cancels a workflow run using its `id`. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCancelWorkflowRun
     * @summary Cancel a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/cancel
     */
    actionsCancelWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<EmptyObject, BasicError>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/cancel`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)." > [!NOTE] > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run). OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsReviewCustomGatesForRun
     * @summary Review custom deployment protection rules for a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule
     */
    actionsReviewCustomGatesForRun: (
      owner: string,
      repo: string,
      runId: number,
      data: ReviewCustomGatesCommentRequired | ReviewCustomGatesStateRequired,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/deployment_protection_rule`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job. You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run). OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsForceCancelWorkflowRun
     * @summary Force cancel a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel
     */
    actionsForceCancelWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<EmptyObject, BasicError>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/force-cancel`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters). Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsListJobsForWorkflowRun
     * @summary List jobs for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/jobs
     */
    actionsListJobsForWorkflowRun: (
      owner: string,
      repo: string,
      runId: number,
      query?: {
        /**
         * Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          jobs: Job[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/jobs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadWorkflowRunLogs
     * @summary Download workflow run logs
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/logs
     */
    actionsDownloadWorkflowRunLogs: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/logs`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Deletes all logs for a workflow run. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteWorkflowRunLogs
     * @summary Delete workflow run logs
     * @request DELETE:/repos/{owner}/{repo}/actions/runs/{run_id}/logs
     */
    actionsDeleteWorkflowRunLogs: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/logs`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Get all deployment environments for a workflow run that are waiting for protection rules to pass. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetPendingDeploymentsForRun
     * @summary Get pending deployments for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
     */
    actionsGetPendingDeploymentsForRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<PendingDeployment[], any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Approve or reject pending deployments that are waiting on approval by a required reviewer. Required reviewers with read access to the repository contents and deployments can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsReviewPendingDeploymentsForRun
     * @summary Review pending deployments for a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
     */
    actionsReviewPendingDeploymentsForRun: (
      owner: string,
      repo: string,
      runId: number,
      data: {
        /**
         * The list of environment ids to approve or reject
         * @example [161171787,161171795]
         */
        environment_ids: number[];
        /**
         * Whether to approve or reject deployment to the specified environments.
         * @example "approved"
         */
        state: "approved" | "rejected";
        /**
         * A comment to accompany the deployment review
         * @example "Ship it!"
         */
        comment: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Deployment[], any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Re-runs your workflow run using its `id`. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsReRunWorkflow
     * @summary Re-run a workflow
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/rerun
     */
    actionsReRunWorkflow: (
      owner: string,
      repo: string,
      runId: number,
      data?: {
        /**
         * Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/rerun`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsReRunWorkflowFailedJobs
     * @summary Re-run failed jobs from a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs
     */
    actionsReRunWorkflowFailedJobs: (
      owner: string,
      repo: string,
      runId: number,
      data?: {
        /**
         * Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/rerun-failed-jobs`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information. Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsGetWorkflowRunUsage
     * @summary Get workflow run usage
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/timing
     */
    actionsGetWorkflowRunUsage: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<WorkflowRunUsage, any>({
        path: `/repos/${owner}/${repo}/actions/runs/${runId}/timing`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all secrets available in a repository without revealing their encrypted values. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoSecrets
     * @summary List repository secrets
     * @request GET:/repos/{owner}/{repo}/actions/secrets
     */
    actionsListRepoSecrets: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: ActionsSecret[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetRepoPublicKey
     * @summary Get a repository public key
     * @request GET:/repos/{owner}/{repo}/actions/secrets/public-key
     */
    actionsGetRepoPublicKey: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ActionsPublicKey, any>({
        path: `/repos/${owner}/${repo}/actions/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single repository secret without revealing its encrypted value. The authenticated user must have collaborator access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetRepoSecret
     * @summary Get a repository secret
     * @request GET:/repos/{owner}/{repo}/actions/secrets/{secret_name}
     */
    actionsGetRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<ActionsSecret, any>({
        path: `/repos/${owner}/${repo}/actions/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateOrUpdateRepoSecret
     * @summary Create or update a repository secret
     * @request PUT:/repos/{owner}/{repo}/actions/secrets/{secret_name}
     */
    actionsCreateOrUpdateRepoSecret: (
      owner: string,
      repo: string,
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/actions/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a secret in a repository using the secret name. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteRepoSecret
     * @summary Delete a repository secret
     * @request DELETE:/repos/{owner}/{repo}/actions/secrets/{secret_name}
     */
    actionsDeleteRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all repository variables. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoVariables
     * @summary List repository variables
     * @request GET:/repos/{owner}/{repo}/actions/variables
     */
    actionsListRepoVariables: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          variables: ActionsVariable[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/variables`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a repository variable that you can reference in a GitHub Actions workflow. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateRepoVariable
     * @summary Create a repository variable
     * @request POST:/repos/{owner}/{repo}/actions/variables
     */
    actionsCreateRepoVariable: (
      owner: string,
      repo: string,
      data: {
        /** The name of the variable. */
        name: string;
        /** The value of the variable. */
        value: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/actions/variables`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific variable in a repository. The authenticated user must have collaborator access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetRepoVariable
     * @summary Get a repository variable
     * @request GET:/repos/{owner}/{repo}/actions/variables/{name}
     */
    actionsGetRepoVariable: (owner: string, repo: string, name: string, params: RequestParams = {}) =>
      this.request<ActionsVariable, any>({
        path: `/repos/${owner}/${repo}/actions/variables/${name}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a repository variable that you can reference in a GitHub Actions workflow. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsUpdateRepoVariable
     * @summary Update a repository variable
     * @request PATCH:/repos/{owner}/{repo}/actions/variables/{name}
     */
    actionsUpdateRepoVariable: (
      owner: string,
      repo: string,
      name: string,
      data: {
        /** The name of the variable. */
        name?: string;
        /** The value of the variable. */
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/variables/${name}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Deletes a repository variable using the variable name. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteRepoVariable
     * @summary Delete a repository variable
     * @request DELETE:/repos/{owner}/{repo}/actions/variables/{name}
     */
    actionsDeleteRepoVariable: (owner: string, repo: string, name: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/variables/${name}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsListRepoWorkflows
     * @summary List repository workflows
     * @request GET:/repos/{owner}/{repo}/actions/workflows
     */
    actionsListRepoWorkflows: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          workflows: Workflow[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/workflows`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsGetWorkflow
     * @summary Get a workflow
     * @request GET:/repos/{owner}/{repo}/actions/workflows/{workflow_id}
     */
    actionsGetWorkflow: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<Workflow, any>({
        path: `/repos/${owner}/${repo}/actions/workflows/${workflowId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDisableWorkflow
     * @summary Disable a workflow
     * @request PUT:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
     */
    actionsDisableWorkflow: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/workflows/${workflowId}/disable`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)." OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateWorkflowDispatch
     * @summary Create a workflow dispatch event
     * @request POST:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
     */
    actionsCreateWorkflowDispatch: (
      owner: string,
      repo: string,
      workflowId: number | string,
      data: {
        /** The git reference for the workflow. The reference can be a branch or tag name. */
        ref: string;
        /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
        inputs?: Record<string, any>;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsEnableWorkflow
     * @summary Enable a workflow
     * @request PUT:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
     */
    actionsEnableWorkflow: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/actions/workflows/${workflowId}/enable`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters). Anyone with read access to the repository can use this endpoint OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository. This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
     *
     * @tags actions
     * @name ActionsListWorkflowRuns
     * @summary List workflow runs for a workflow
     * @request GET:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
     */
    actionsListWorkflowRuns: (
      owner: string,
      repo: string,
      workflowId: number | string,
      query?: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        actor?: string;
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        branch?: string;
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event?: string;
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
        status?:
          | "completed"
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "skipped"
          | "stale"
          | "success"
          | "timed_out"
          | "in_progress"
          | "queued"
          | "requested"
          | "waiting"
          | "pending";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
         * @format date-time
         */
        created?: string;
        /**
         * If `true` pull requests are omitted from the response (empty array).
         * @default false
         */
        exclude_pull_requests?: boolean;
        /** Returns workflow runs with the `check_suite_id` that you specify. */
        check_suite_id?: number;
        /** Only returns workflow runs that are associated with the specified `head_sha`. */
        head_sha?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          workflow_runs: WorkflowRun[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/actions/workflows/${workflowId}/runs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information. Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags actions
     * @name ActionsGetWorkflowUsage
     * @summary Get workflow usage
     * @request GET:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing
     */
    actionsGetWorkflowUsage: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<WorkflowUsage, any>({
        path: `/repos/${owner}/${repo}/actions/workflows/${workflowId}/timing`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users. For more information about viewing repository activity, see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
     *
     * @tags repos
     * @name ReposListActivities
     * @summary List repository activities
     * @request GET:/repos/{owner}/{repo}/activity
     */
    reposListActivities: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The Git reference for the activities you want to list.
         *
         * The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.
         */
        ref?: string;
        /** The GitHub username to use to filter by the actor who performed the activity. */
        actor?: string;
        /**
         * The time period to filter by.
         *
         * For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).
         */
        time_period?: "day" | "week" | "month" | "quarter" | "year";
        /**
         * The activity type to filter by.
         *
         * For example, you can choose to filter by "force_push", to see all force pushes to the repository.
         */
        activity_type?:
          | "push"
          | "force_push"
          | "branch_creation"
          | "branch_deletion"
          | "pr_merge"
          | "merge_queue_merge";
      },
      params: RequestParams = {},
    ) =>
      this.request<Activity[], ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/activity`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     *
     * @tags issues
     * @name IssuesListAssignees
     * @summary List assignees
     * @request GET:/repos/{owner}/{repo}/assignees
     */
    issuesListAssignees: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: `/repos/${owner}/${repo}/assignees`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks if a user has permission to be assigned to an issue in this repository. If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned. Otherwise a `404` status code is returned.
     *
     * @tags issues
     * @name IssuesCheckUserCanBeAssigned
     * @summary Check if a user can be assigned
     * @request GET:/repos/{owner}/{repo}/assignees/{assignee}
     */
    issuesCheckUserCanBeAssigned: (owner: string, repo: string, assignee: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/assignees/${assignee}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Store an artifact attestation and associate it with a repository. The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required. Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
     *
     * @tags repos
     * @name ReposCreateAttestation
     * @summary Create an attestation
     * @request POST:/repos/{owner}/{repo}/attestations
     */
    reposCreateAttestation: (
      owner: string,
      repo: string,
      data: {
        /**
         * The attestation's Sigstore Bundle.
         * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
         */
        bundle: {
          mediaType?: string;
          verificationMaterial?: Record<string, any>;
          dsseEnvelope?: Record<string, any>;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** The ID of the attestation. */
          id?: number;
        },
        BasicError | ValidationError
      >({
        path: `/repos/${owner}/${repo}/attestations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List a collection of artifact attestations with a given subject digest that are associated with a repository. The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required. **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
     *
     * @tags repos
     * @name ReposListAttestations
     * @summary List attestations
     * @request GET:/repos/{owner}/{repo}/attestations/{subject_digest}
     */
    reposListAttestations: (
      owner: string,
      repo: string,
      subjectDigest: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          attestations?: {
            /**
             * The attestation's Sigstore Bundle.
             * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
             */
            bundle?: {
              mediaType?: string;
              verificationMaterial?: Record<string, any>;
              dsseEnvelope?: Record<string, any>;
            };
            repository_id?: number;
            bundle_url?: string;
          }[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/attestations/${subjectDigest}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets all autolinks that are configured for a repository. Information about autolinks are only available to repository administrators.
     *
     * @tags repos
     * @name ReposListAutolinks
     * @summary Get all autolinks of a repository
     * @request GET:/repos/{owner}/{repo}/autolinks
     */
    reposListAutolinks: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Autolink[], any>({
        path: `/repos/${owner}/${repo}/autolinks`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with admin access to the repository can create an autolink.
     *
     * @tags repos
     * @name ReposCreateAutolink
     * @summary Create an autolink reference for a repository
     * @request POST:/repos/{owner}/{repo}/autolinks
     */
    reposCreateAutolink: (
      owner: string,
      repo: string,
      data: {
        /** This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit. */
        key_prefix: string;
        /** The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`. */
        url_template: string;
        /**
         * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
         * @default true
         */
        is_alphanumeric?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Autolink, ValidationError>({
        path: `/repos/${owner}/${repo}/autolinks`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description This returns a single autolink reference by ID that was configured for the given repository. Information about autolinks are only available to repository administrators.
     *
     * @tags repos
     * @name ReposGetAutolink
     * @summary Get an autolink reference of a repository
     * @request GET:/repos/{owner}/{repo}/autolinks/{autolink_id}
     */
    reposGetAutolink: (owner: string, repo: string, autolinkId: number, params: RequestParams = {}) =>
      this.request<Autolink, BasicError>({
        path: `/repos/${owner}/${repo}/autolinks/${autolinkId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This deletes a single autolink reference by ID that was configured for the given repository. Information about autolinks are only available to repository administrators.
     *
     * @tags repos
     * @name ReposDeleteAutolink
     * @summary Delete an autolink reference from a repository
     * @request DELETE:/repos/{owner}/{repo}/autolinks/{autolink_id}
     */
    reposDeleteAutolink: (owner: string, repo: string, autolinkId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/autolinks/${autolinkId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Shows whether Dependabot security updates are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
     *
     * @tags repos
     * @name ReposCheckAutomatedSecurityFixes
     * @summary Check if Dependabot security updates are enabled for a repository
     * @request GET:/repos/{owner}/{repo}/automated-security-fixes
     */
    reposCheckAutomatedSecurityFixes: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CheckAutomatedSecurityFixes, void>({
        path: `/repos/${owner}/${repo}/automated-security-fixes`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Enables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
     *
     * @tags repos
     * @name ReposEnableAutomatedSecurityFixes
     * @summary Enable Dependabot security updates
     * @request PUT:/repos/{owner}/{repo}/automated-security-fixes
     */
    reposEnableAutomatedSecurityFixes: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/automated-security-fixes`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Disables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
     *
     * @tags repos
     * @name ReposDisableAutomatedSecurityFixes
     * @summary Disable Dependabot security updates
     * @request DELETE:/repos/{owner}/{repo}/automated-security-fixes
     */
    reposDisableAutomatedSecurityFixes: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/automated-security-fixes`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListBranches
     * @summary List branches
     * @request GET:/repos/{owner}/{repo}/branches
     */
    reposListBranches: (
      owner: string,
      repo: string,
      query?: {
        /** Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
        protected?: boolean;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ShortBranch[], BasicError>({
        path: `/repos/${owner}/${repo}/branches`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetBranch
     * @summary Get a branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}
     */
    reposGetBranch: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<BranchWithProtection, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetBranchProtection
     * @summary Get branch protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection
     */
    reposGetBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<BranchProtection, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Protecting a branch requires admin or owner permissions to the repository. > [!NOTE] > Passing new arrays of `users` and `teams` replaces their previous values. > [!NOTE] > The list of users, apps, and teams in total is limited to 100 items.
     *
     * @tags repos
     * @name ReposUpdateBranchProtection
     * @summary Update branch protection
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection
     */
    reposUpdateBranchProtection: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** Require status checks to pass before merging. Set to `null` to disable. */
        required_status_checks: {
          /** Require branches to be up to date before merging. */
          strict: boolean;
          /**
           * **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
           * @deprecated
           */
          contexts: string[];
          /** The list of status checks to require in order to merge into this branch. */
          checks?: {
            /** The name of the required check */
            context: string;
            /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
            app_id?: number;
          }[];
        } | null;
        /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
        enforce_admins: boolean | null;
        /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
        required_pull_request_reviews: {
          /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
          dismissal_restrictions?: {
            /** The list of user `login`s with dismissal access */
            users?: string[];
            /** The list of team `slug`s with dismissal access */
            teams?: string[];
            /** The list of app `slug`s with dismissal access */
            apps?: string[];
          };
          /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
          dismiss_stale_reviews?: boolean;
          /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
          require_code_owner_reviews?: boolean;
          /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
          required_approving_review_count?: number;
          /**
           * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
           * @default false
           */
          require_last_push_approval?: boolean;
          /** Allow specific users, teams, or apps to bypass pull request requirements. */
          bypass_pull_request_allowances?: {
            /** The list of user `login`s allowed to bypass pull request requirements. */
            users?: string[];
            /** The list of team `slug`s allowed to bypass pull request requirements. */
            teams?: string[];
            /** The list of app `slug`s allowed to bypass pull request requirements. */
            apps?: string[];
          };
        } | null;
        /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
        restrictions: {
          /** The list of user `login`s with push access */
          users: string[];
          /** The list of team `slug`s with push access */
          teams: string[];
          /** The list of app `slug`s with push access */
          apps?: string[];
        } | null;
        /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
        required_linear_history?: boolean;
        /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
        allow_force_pushes?: boolean | null;
        /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
        allow_deletions?: boolean;
        /** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
        block_creations?: boolean;
        /** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
        required_conversation_resolution?: boolean;
        /**
         * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
         * @default false
         */
        lock_branch?: boolean;
        /**
         * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
         * @default false
         */
        allow_fork_syncing?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProtectedBranch, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposDeleteBranchProtection
     * @summary Delete branch protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection
     */
    reposDeleteBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetAdminBranchProtection
     * @summary Get admin branch protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     */
    reposGetAdminBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, any>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * @tags repos
     * @name ReposSetAdminBranchProtection
     * @summary Set admin branch protection
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     */
    reposSetAdminBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, any>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * @tags repos
     * @name ReposDeleteAdminBranchProtection
     * @summary Delete admin branch protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     */
    reposDeleteAdminBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetPullRequestReviewProtection
     * @summary Get pull request review protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     */
    reposGetPullRequestReviewProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchPullRequestReview, any>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled. > [!NOTE] > Passing new arrays of `users` and `teams` replaces their previous values.
     *
     * @tags repos
     * @name ReposUpdatePullRequestReviewProtection
     * @summary Update pull request review protection
     * @request PATCH:/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     */
    reposUpdatePullRequestReviewProtection: (
      owner: string,
      repo: string,
      branch: string,
      data?: {
        /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
        dismissal_restrictions?: {
          /** The list of user `login`s with dismissal access */
          users?: string[];
          /** The list of team `slug`s with dismissal access */
          teams?: string[];
          /** The list of app `slug`s with dismissal access */
          apps?: string[];
        };
        /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
        dismiss_stale_reviews?: boolean;
        /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
        require_code_owner_reviews?: boolean;
        /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
        required_approving_review_count?: number;
        /**
         * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
         * @default false
         */
        require_last_push_approval?: boolean;
        /** Allow specific users, teams, or apps to bypass pull request requirements. */
        bypass_pull_request_allowances?: {
          /** The list of user `login`s allowed to bypass pull request requirements. */
          users?: string[];
          /** The list of team `slug`s allowed to bypass pull request requirements. */
          teams?: string[];
          /** The list of app `slug`s allowed to bypass pull request requirements. */
          apps?: string[];
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<ProtectedBranchPullRequestReview, ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposDeletePullRequestReviewProtection
     * @summary Delete pull request review protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     */
    reposDeletePullRequestReviewProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help. > [!NOTE] > You must enable branch protection to require signed commits.
     *
     * @tags repos
     * @name ReposGetCommitSignatureProtection
     * @summary Get commit signature protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     */
    reposGetCommitSignatureProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     *
     * @tags repos
     * @name ReposCreateCommitSignatureProtection
     * @summary Create commit signature protection
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     */
    reposCreateCommitSignatureProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     *
     * @tags repos
     * @name ReposDeleteCommitSignatureProtection
     * @summary Delete commit signature protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     */
    reposDeleteCommitSignatureProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetStatusChecksProtection
     * @summary Get status checks protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     */
    reposGetStatusChecksProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<StatusCheckPolicy, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * @tags repos
     * @name ReposUpdateStatusCheckProtection
     * @summary Update status check protection
     * @request PATCH:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     */
    reposUpdateStatusCheckProtection: (
      owner: string,
      repo: string,
      branch: string,
      data?: {
        /** Require branches to be up to date before merging. */
        strict?: boolean;
        /**
         * **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
         * @deprecated
         */
        contexts?: string[];
        /** The list of status checks to require in order to merge into this branch. */
        checks?: {
          /** The name of the required check */
          context: string;
          /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
          app_id?: number;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<StatusCheckPolicy, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposRemoveStatusCheckProtection
     * @summary Remove status check protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     */
    reposRemoveStatusCheckProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetAllStatusCheckContexts
     * @summary Get all status check contexts
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposGetAllStatusCheckContexts: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<string[], BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposAddStatusCheckContexts
     * @summary Add status check contexts
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposAddStatusCheckContexts: (
      owner: string,
      repo: string,
      branch: string,
      data?:
        | {
            /** The name of the status checks */
            contexts: string[];
          }
        | string[],
      params: RequestParams = {},
    ) =>
      this.request<string[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposSetStatusCheckContexts
     * @summary Set status check contexts
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposSetStatusCheckContexts: (
      owner: string,
      repo: string,
      branch: string,
      data?:
        | {
            /** The name of the status checks */
            contexts: string[];
          }
        | string[],
      params: RequestParams = {},
    ) =>
      this.request<string[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposRemoveStatusCheckContexts
     * @summary Remove status check contexts
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposRemoveStatusCheckContexts: (
      owner: string,
      repo: string,
      branch: string,
      data:
        | {
            /** The name of the status checks */
            contexts: string[];
          }
        | string[],
      params: RequestParams = {},
    ) =>
      this.request<string[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists who has access to this protected branch. > [!NOTE] > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
     *
     * @tags repos
     * @name ReposGetAccessRestrictions
     * @summary Get access restrictions
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     */
    reposGetAccessRestrictions: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<BranchRestrictionPolicy, BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Disables the ability to restrict who can push to this branch.
     *
     * @tags repos
     * @name ReposDeleteAccessRestrictions
     * @summary Delete access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     */
    reposDeleteAccessRestrictions: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
     *
     * @tags repos
     * @name ReposGetAppsWithAccessToProtectedBranch
     * @summary Get apps with access to the protected branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposGetAppsWithAccessToProtectedBranch: (
      owner: string,
      repo: string,
      branch: string,
      params: RequestParams = {},
    ) =>
      this.request<Integration[], BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
     *
     * @tags repos
     * @name ReposAddAppAccessRestrictions
     * @summary Add app access restrictions
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposAddAppAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Integration[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
     *
     * @tags repos
     * @name ReposSetAppAccessRestrictions
     * @summary Set app access restrictions
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposSetAppAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Integration[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
     *
     * @tags repos
     * @name ReposRemoveAppAccessRestrictions
     * @summary Remove app access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposRemoveAppAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Integration[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists the teams who have push access to this branch. The list includes child teams.
     *
     * @tags repos
     * @name ReposGetTeamsWithAccessToProtectedBranch
     * @summary Get teams with access to the protected branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposGetTeamsWithAccessToProtectedBranch: (
      owner: string,
      repo: string,
      branch: string,
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Grants the specified teams push access for this branch. You can also give push access to child teams.
     *
     * @tags repos
     * @name ReposAddTeamAccessRestrictions
     * @summary Add team access restrictions
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposAddTeamAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data?:
        | {
            /** The slug values for teams */
            teams: string[];
          }
        | string[],
      params: RequestParams = {},
    ) =>
      this.request<Team[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
     *
     * @tags repos
     * @name ReposSetTeamAccessRestrictions
     * @summary Set team access restrictions
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposSetTeamAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data?:
        | {
            /** The slug values for teams */
            teams: string[];
          }
        | string[],
      params: RequestParams = {},
    ) =>
      this.request<Team[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removes the ability of a team to push to this branch. You can also remove push access for child teams.
     *
     * @tags repos
     * @name ReposRemoveTeamAccessRestrictions
     * @summary Remove team access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposRemoveTeamAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data:
        | {
            /** The slug values for teams */
            teams: string[];
          }
        | string[],
      params: RequestParams = {},
    ) =>
      this.request<Team[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists the people who have push access to this branch.
     *
     * @tags repos
     * @name ReposGetUsersWithAccessToProtectedBranch
     * @summary Get users with access to the protected branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposGetUsersWithAccessToProtectedBranch: (
      owner: string,
      repo: string,
      branch: string,
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Grants the specified people push access for this branch. | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposAddUserAccessRestrictions
     * @summary Add user access restrictions
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposAddUserAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The username for users */
        users: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people. | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposSetUserAccessRestrictions
     * @summary Set user access restrictions
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposSetUserAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The username for users */
        users: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removes the ability of a user to push to this branch. | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposRemoveUserAccessRestrictions
     * @summary Remove user access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposRemoveUserAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The username for users */
        users: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Renames a branch in a repository. > [!NOTE] > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)". The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions. In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
     *
     * @tags repos
     * @name ReposRenameBranch
     * @summary Rename a branch
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/rename
     */
    reposRenameBranch: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The new name of the branch. */
        new_name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BranchWithProtection, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/branches/${branch}/rename`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new check run for a specific commit in a repository. To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite. In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs. > [!NOTE] > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * @tags checks
     * @name ChecksCreate
     * @summary Create a check run
     * @request POST:/repos/{owner}/{repo}/check-runs
     */
    checksCreate: (
      owner: string,
      repo: string,
      data: (
        | {
            status: "completed";
            [key: string]: any;
          }
        | {
            status?: "queued" | "in_progress";
            [key: string]: any;
          }
      ) & {
        /** The name of the check. For example, "code-coverage". */
        name: string;
        /** The SHA of the commit. */
        head_sha: string;
        /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
        details_url?: string;
        /** A reference for the run on the integrator's system. */
        external_id?: string;
        /**
         * The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
         * @default "queued"
         */
        status?: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
        /**
         * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        started_at?: string;
        /**
         * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
         * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
         */
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out";
        /**
         * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        completed_at?: string;
        /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
        output?: {
          /** The title of the check run. */
          title: string;
          /**
           * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
           * @maxLength 65535
           */
          summary: string;
          /**
           * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
           * @maxLength 65535
           */
          text?: string;
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
           * @maxItems 50
           */
          annotations?: {
            /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
            path: string;
            /** The start line of the annotation. Line numbers start at 1. */
            start_line: number;
            /** The end line of the annotation. */
            end_line: number;
            /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
            start_column?: number;
            /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
            end_column?: number;
            /** The level of the annotation. */
            annotation_level: "notice" | "warning" | "failure";
            /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
            message: string;
            /** The title that represents the annotation. The maximum size is 255 characters. */
            title?: string;
            /** Details about this annotation. The maximum size is 64 KB. */
            raw_details?: string;
          }[];
          /** Adds images to the output displayed in the GitHub pull request UI. */
          images?: {
            /** The alternative text for the image. */
            alt: string;
            /** The full URL of the image. */
            image_url: string;
            /** A short image description. */
            caption?: string;
          }[];
        };
        /**
         * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
         * @maxItems 3
         */
        actions?: {
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           * @maxLength 20
           */
          label: string;
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           * @maxLength 40
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           * @maxLength 20
           */
          identifier: string;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckRun, any>({
        path: `/repos/${owner}/${repo}/check-runs`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single check run using its `id`. > [!NOTE] > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
     *
     * @tags checks
     * @name ChecksGet
     * @summary Get a check run
     * @request GET:/repos/{owner}/{repo}/check-runs/{check_run_id}
     */
    checksGet: (owner: string, repo: string, checkRunId: number, params: RequestParams = {}) =>
      this.request<CheckRun, any>({
        path: `/repos/${owner}/${repo}/check-runs/${checkRunId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a check run for a specific commit in a repository. > [!NOTE] > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array. OAuth apps and personal access tokens (classic) cannot use this endpoint.
     *
     * @tags checks
     * @name ChecksUpdate
     * @summary Update a check run
     * @request PATCH:/repos/{owner}/{repo}/check-runs/{check_run_id}
     */
    checksUpdate: (
      owner: string,
      repo: string,
      checkRunId: number,
      data: (
        | {
            status?: "completed";
            [key: string]: any;
          }
        | {
            status?: "queued" | "in_progress";
            [key: string]: any;
          }
      ) & {
        /** The name of the check. For example, "code-coverage". */
        name?: string;
        /** The URL of the integrator's site that has the full details of the check. */
        details_url?: string;
        /** A reference for the run on the integrator's system. */
        external_id?: string;
        /**
         * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        started_at?: string;
        /** The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
        status?: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
        /**
         * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
         * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
         */
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out";
        /**
         * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        completed_at?: string;
        /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
        output?: {
          /** **Required**. */
          title?: string;
          /**
           * Can contain Markdown.
           * @maxLength 65535
           */
          summary: string;
          /**
           * Can contain Markdown.
           * @maxLength 65535
           */
          text?: string;
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
           * @maxItems 50
           */
          annotations?: {
            /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
            path: string;
            /** The start line of the annotation. Line numbers start at 1. */
            start_line: number;
            /** The end line of the annotation. */
            end_line: number;
            /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
            start_column?: number;
            /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
            end_column?: number;
            /** The level of the annotation. */
            annotation_level: "notice" | "warning" | "failure";
            /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
            message: string;
            /** The title that represents the annotation. The maximum size is 255 characters. */
            title?: string;
            /** Details about this annotation. The maximum size is 64 KB. */
            raw_details?: string;
          }[];
          /** Adds images to the output displayed in the GitHub pull request UI. */
          images?: {
            /** The alternative text for the image. */
            alt: string;
            /** The full URL of the image. */
            image_url: string;
            /** A short image description. */
            caption?: string;
          }[];
        };
        /**
         * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
         * @maxItems 3
         */
        actions?: {
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           * @maxLength 20
           */
          label: string;
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           * @maxLength 40
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           * @maxLength 20
           */
          identifier: string;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckRun, any>({
        path: `/repos/${owner}/${repo}/check-runs/${checkRunId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists annotations for a check run using the annotation `id`. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
     *
     * @tags checks
     * @name ChecksListAnnotations
     * @summary List check run annotations
     * @request GET:/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
     */
    checksListAnnotations: (
      owner: string,
      repo: string,
      checkRunId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckAnnotation[], any>({
        path: `/repos/${owner}/${repo}/check-runs/${checkRunId}/annotations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, the `status` of the check suite it belongs to is reset to `queued` and the `conclusion` is cleared. The check run itself is not updated. GitHub apps recieving the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) with the `rerequested` action should then decide if the check run should be reset or updated and call the [update `check_run` endpoint](https://docs.github.com/rest/checks/runs#update-a-check-run) to update the check_run if desired. For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
     *
     * @tags checks
     * @name ChecksRerequestRun
     * @summary Rerequest a check run
     * @request POST:/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest
     */
    checksRerequestRun: (owner: string, repo: string, checkRunId: number, params: RequestParams = {}) =>
      this.request<EmptyObject, BasicError>({
        path: `/repos/${owner}/${repo}/check-runs/${checkRunId}/rerequest`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)". > [!NOTE] > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`. OAuth apps and personal access tokens (classic) cannot use this endpoint.
     *
     * @tags checks
     * @name ChecksCreateSuite
     * @summary Create a check suite
     * @request POST:/repos/{owner}/{repo}/check-suites
     */
    checksCreateSuite: (
      owner: string,
      repo: string,
      data: {
        /** The sha of the head commit. */
        head_sha: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckSuite, any>({
        path: `/repos/${owner}/${repo}/check-suites`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     *
     * @tags checks
     * @name ChecksSetSuitesPreferences
     * @summary Update repository preferences for check suites
     * @request PATCH:/repos/{owner}/{repo}/check-suites/preferences
     */
    checksSetSuitesPreferences: (
      owner: string,
      repo: string,
      data: {
        /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. */
        auto_trigger_checks?: {
          /** The `id` of the GitHub App. */
          app_id: number;
          /**
           * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
           * @default true
           */
          setting: boolean;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckSuitePreference, any>({
        path: `/repos/${owner}/${repo}/check-suites/preferences`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single check suite using its `id`. > [!NOTE] > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
     *
     * @tags checks
     * @name ChecksGetSuite
     * @summary Get a check suite
     * @request GET:/repos/{owner}/{repo}/check-suites/{check_suite_id}
     */
    checksGetSuite: (owner: string, repo: string, checkSuiteId: number, params: RequestParams = {}) =>
      this.request<CheckSuite, any>({
        path: `/repos/${owner}/${repo}/check-suites/${checkSuiteId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists check runs for a check suite using its `id`. > [!NOTE] > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
     *
     * @tags checks
     * @name ChecksListForSuite
     * @summary List check runs in a check suite
     * @request GET:/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
     */
    checksListForSuite: (
      owner: string,
      repo: string,
      checkSuiteId: number,
      query?: {
        /** Returns check runs with the specified `name`. */
        check_name?: string;
        /** Returns check runs with the specified `status`. */
        status?: "queued" | "in_progress" | "completed";
        /**
         * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          check_runs: CheckRun[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/check-suites/${checkSuiteId}/check-runs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     *
     * @tags checks
     * @name ChecksRerequestSuite
     * @summary Rerequest a check suite
     * @request POST:/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
     */
    checksRerequestSuite: (owner: string, repo: string, checkSuiteId: number, params: RequestParams = {}) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/check-suites/${checkSuiteId}/rerequest`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists code scanning alerts. The response includes a `most_recent_instance` object. This provides details of the most recent instance of this alert for the default branch (or for the specified Git reference if you used `ref` in the request). OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningListAlertsForRepo
     * @summary List code scanning alerts for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/alerts
     */
    codeScanningListAlertsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        tool_name?: CodeScanningAnalysisToolName;
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        tool_guid?: CodeScanningAnalysisToolGuid;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
        /** The number of the pull request for the results you want to list. */
        pr?: number;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** If specified, only code scanning alerts with this state will be returned. */
        state?: CodeScanningAlertStateQuery;
        /** If specified, only code scanning alerts with this severity will be returned. */
        severity?: CodeScanningAlertSeverity;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAlertItems[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single code scanning alert. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetAlert
     * @summary Get a code scanning alert
     * @request GET:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
     */
    codeScanningGetAlert: (owner: string, repo: string, alertNumber: AlertNumber, params: RequestParams = {}) =>
      this.request<
        CodeScanningAlert,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the status of a single code scanning alert. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningUpdateAlert
     * @summary Update a code scanning alert
     * @request PATCH:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
     */
    codeScanningUpdateAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      data: {
        /** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
        state: CodeScanningAlertSetState;
        /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
        dismissed_reason?: CodeScanningAlertDismissedReason;
        /** The dismissal comment associated with the dismissal of the alert. */
        dismissed_comment?: CodeScanningAlertDismissedComment;
        /** If `true`, attempt to create an alert dismissal request. */
        create_request?: CodeScanningAlertCreateRequest;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAlert,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the status and description of an autofix for a code scanning alert. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetAutofix
     * @summary Get the status of an autofix for a code scanning alert
     * @request GET:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix
     */
    codeScanningGetAutofix: (owner: string, repo: string, alertNumber: AlertNumber, params: RequestParams = {}) =>
      this.request<
        CodeScanningAutofix,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates an autofix for a code scanning alert. If a new autofix is to be created as a result of this request or is currently being generated, then this endpoint will return a 202 Accepted response. If an autofix already exists for a given alert, then this endpoint will return a 200 OK response. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningCreateAutofix
     * @summary Create an autofix for a code scanning alert
     * @request POST:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix
     */
    codeScanningCreateAutofix: (owner: string, repo: string, alertNumber: AlertNumber, params: RequestParams = {}) =>
      this.request<
        CodeScanningAutofix,
        | BasicError
        | void
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Commits an autofix for a code scanning alert. If an autofix is committed as a result of this request, then this endpoint will return a 201 Created response. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningCommitAutofix
     * @summary Commit an autofix for a code scanning alert
     * @request POST:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits
     */
    codeScanningCommitAutofix: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      data?: CodeScanningAutofixCommits,
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAutofixCommitsResponse,
        | BasicError
        | void
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix/commits`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all instances of the specified code scanning alert. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningListAlertInstances
     * @summary List instances of a code scanning alert
     * @request GET:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
     */
    codeScanningListAlertInstances: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
        /** The number of the pull request for the results you want to list. */
        pr?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAlertInstance[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/instances`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the `page` and `per_page` parameters to list the analyses you're interested in. By default 30 analyses are listed per page. The `rules_count` field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and `0` is returned in this field. > [!WARNING] > **Closing down notice:** The `tool_name` field is closing down and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningListRecentAnalyses
     * @summary List code scanning analyses for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/analyses
     */
    codeScanningListRecentAnalyses: (
      owner: string,
      repo: string,
      query?: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        tool_name?: CodeScanningAnalysisToolName;
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        tool_guid?: CodeScanningAnalysisToolGuid;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** The number of the pull request for the results you want to list. */
        pr?: number;
        /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
        /** Filter analyses belonging to the same SARIF upload. */
        sarif_id?: CodeScanningAnalysisSarifId;
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The property by which to sort the results.
         * @default "created"
         */
        sort?: "created";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAnalysis[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/analyses`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specified code scanning analysis for a repository. The default JSON response contains fields that describe the analysis. This includes the Git reference and commit SHA to which the analysis relates, the datetime of the analysis, the name of the code scanning tool, and the number of alerts. The `rules_count` field in the default response give the number of rules that were run in the analysis. For very old analyses this data is not available, and `0` is returned in this field. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetAnalysis
     * @summary Get a code scanning analysis for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
     */
    codeScanningGetAnalysis: (owner: string, repo: string, analysisId: number, params: RequestParams = {}) =>
      this.request<
        CodeScanningAnalysis,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a specified code scanning analysis from a repository. You can delete one analysis at a time. To delete a series of analyses, start with the most recent analysis and work backwards. Conceptually, the process is similar to the undo function in a text editor. When you list the analyses for a repository, one or more will be identified as deletable in the response: ``` "deletable": true ``` An analysis is deletable when it's the most recent in a set of analyses. Typically, a repository will have multiple sets of analyses for each enabled code scanning tool, where a set is determined by a unique combination of analysis values: * `ref` * `tool` * `category` If you attempt to delete an analysis that is not the most recent in a set, you'll get a 400 response with the message: ``` Analysis specified is not deletable. ``` The response from a successful `DELETE` operation provides you with two alternative URLs for deleting the next analysis in the set: `next_analysis_url` and `confirm_delete_url`. Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis in a set. This is a useful option if you want to preserve at least one analysis for the specified tool in your repository. Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool. When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url` in the 200 response is `null`. As an example of the deletion process, let's imagine that you added a workflow that configured a particular code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10 on the default branch, and another 5 on a topic branch. You therefore have two separate sets of analyses for this tool. You've now decided that you want to remove all of the analyses for the tool. To do this you must make 15 separate deletion requests. To start, you must find an analysis that's identified as deletable. Each set of analyses always has one that's identified as deletable. Having found the deletable analysis for one of the two sets, delete this analysis and then continue deleting the next analysis in the set until they're all deleted. Then repeat the process for the second set. The procedure therefore consists of a nested loop: **Outer loop**: * List the analyses for the repository, filtered by tool. * Parse this list to find a deletable analysis. If found: **Inner loop**: * Delete the identified analysis. * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration. The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningDeleteAnalysis
     * @summary Delete a code scanning analysis from a repository
     * @request DELETE:/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
     */
    codeScanningDeleteAnalysis: (
      owner: string,
      repo: string,
      analysisId: number,
      query?: {
        /** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
        confirm_delete?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAnalysisDeletion,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`,
        method: "DELETE",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the CodeQL databases that are available in a repository. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningListCodeqlDatabases
     * @summary List CodeQL databases for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/codeql/databases
     */
    codeScanningListCodeqlDatabases: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        CodeScanningCodeqlDatabase[],
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/codeql/databases`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a CodeQL database for a language in a repository. By default this endpoint returns JSON metadata about the CodeQL database. To download the CodeQL database binary content, set the `Accept` header of the request to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure your HTTP client is configured to follow redirects or use the `Location` header to make a second request to get the redirect URL. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetCodeqlDatabase
     * @summary Get a CodeQL database for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}
     */
    codeScanningGetCodeqlDatabase: (owner: string, repo: string, language: string, params: RequestParams = {}) =>
      this.request<
        CodeScanningCodeqlDatabase,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a CodeQL database for a language in a repository. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningDeleteCodeqlDatabase
     * @summary Delete a CodeQL database
     * @request DELETE:/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}
     */
    codeScanningDeleteCodeqlDatabase: (owner: string, repo: string, language: string, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories. Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis). Use the `owner` and `repo` parameters in the URL to specify the controller repository that will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags code-scanning
     * @name CodeScanningCreateVariantAnalysis
     * @summary Create a CodeQL variant analysis
     * @request POST:/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses
     */
    codeScanningCreateVariantAnalysis: (
      owner: string,
      repo: string,
      data: {
        /** The language targeted by the CodeQL query */
        language: CodeScanningVariantAnalysisLanguage;
        /** A Base64-encoded tarball containing a CodeQL query and all its dependencies */
        query_pack: string;
        /** List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required. */
        repositories?: string[];
        /**
         * List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
         * @maxItems 1
         */
        repository_lists?: string[];
        /**
         * List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
         * @maxItems 1
         */
        repository_owners?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningVariantAnalysis,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the summary of a CodeQL variant analysis. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetVariantAnalysis
     * @summary Get the summary of a CodeQL variant analysis
     * @request GET:/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}
     */
    codeScanningGetVariantAnalysis: (
      owner: string,
      repo: string,
      codeqlVariantAnalysisId: number,
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningVariantAnalysis,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the analysis status of a repository in a CodeQL variant analysis. OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetVariantAnalysisRepoTask
     * @summary Get the analysis status of a repository in a CodeQL variant analysis
     * @request GET:/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}
     */
    codeScanningGetVariantAnalysisRepoTask: (
      owner: string,
      repo: string,
      codeqlVariantAnalysisId: number,
      repoOwner: string,
      repoName: string,
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningVariantAnalysisRepoTask,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}/repos/${repoOwner}/${repoName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a code scanning default setup configuration. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetDefaultSetup
     * @summary Get a code scanning default setup configuration
     * @request GET:/repos/{owner}/{repo}/code-scanning/default-setup
     */
    codeScanningGetDefaultSetup: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        CodeScanningDefaultSetup,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/default-setup`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a code scanning default setup configuration. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningUpdateDefaultSetup
     * @summary Update a code scanning default setup configuration
     * @request PATCH:/repos/{owner}/{repo}/code-scanning/default-setup
     */
    codeScanningUpdateDefaultSetup: (
      owner: string,
      repo: string,
      data: CodeScanningDefaultSetupUpdate,
      params: RequestParams = {},
    ) =>
      this.request<
        EmptyObject,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/default-setup`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)." There are two places where you can upload code scanning results. - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)." - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)." You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example: ``` gzip -c analysis-data.sarif | base64 -w0 ``` SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable. To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)." | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            | |----------------------------------|:------------------:|----------------------------------------------------------------------------------| | Runs per file                    |         20         |                                                                                  | | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            | | Rules per run                    |       25,000       |                                                                                  | | Tool extensions per run          |        100         |                                                                                  | | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. | | Location per result	             |       1,000        | Only 100 locations will be included.                                             | | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   | The `202 Accepted` response includes an `id` value. You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint. For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)." OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories. This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
     *
     * @tags code-scanning
     * @name CodeScanningUploadSarif
     * @summary Upload an analysis as SARIF data
     * @request POST:/repos/{owner}/{repo}/code-scanning/sarifs
     */
    codeScanningUploadSarif: (
      owner: string,
      repo: string,
      data: {
        /** The SHA of the commit to which the analysis you are uploading relates. */
        commit_sha: CodeScanningAnalysisCommitSha;
        /**
         * The full Git reference, formatted as `refs/heads/<branch name>`,
         * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
         */
        ref: CodeScanningRefFull;
        /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */
        sarif: CodeScanningAnalysisSarifFile;
        /**
         * The base directory used in the analysis, as it appears in the SARIF file.
         * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
         * @format uri
         * @example "file:///github/workspace/"
         */
        checkout_uri?: string;
        /**
         * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        started_at?: string;
        /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
        tool_name?: string;
        /**
         * Whether the SARIF file will be validated according to the code scanning specifications.
         * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
         */
        validate?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningSarifsReceipt,
        | void
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/sarifs`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)." OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
     *
     * @tags code-scanning
     * @name CodeScanningGetSarif
     * @summary Get information about a SARIF upload
     * @request GET:/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
     */
    codeScanningGetSarif: (owner: string, repo: string, sarifId: string, params: RequestParams = {}) =>
      this.request<
        CodeScanningSarifsStatus,
        | BasicError
        | void
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/code-scanning/sarifs/${sarifId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the code security configuration that manages a repository's code security settings. The authenticated user must be an administrator or security manager for the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags code-security
     * @name CodeSecurityGetConfigurationForRepository
     * @summary Get the code security configuration associated with a repository
     * @request GET:/repos/{owner}/{repo}/code-security-configuration
     */
    codeSecurityGetConfigurationForRepository: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodeSecurityConfigurationForRepository, BasicError>({
        path: `/repos/${owner}/${repo}/code-security-configuration`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description List any syntax errors that are detected in the CODEOWNERS file. For more information about the correct CODEOWNERS syntax, see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
     *
     * @tags repos
     * @name ReposCodeownersErrors
     * @summary List CODEOWNERS errors
     * @request GET:/repos/{owner}/{repo}/codeowners/errors
     */
    reposCodeownersErrors: (
      owner: string,
      repo: string,
      query?: {
        /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeownersErrors, void>({
        path: `/repos/${owner}/${repo}/codeowners/errors`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the codespaces associated to a specified repository and the authenticated user. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListInRepositoryForAuthenticatedUser
     * @summary List codespaces in a repository for the authenticated user
     * @request GET:/repos/{owner}/{repo}/codespaces
     */
    codespacesListInRepositoryForAuthenticatedUser: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          codespaces: Codespace[];
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/codespaces`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a codespace owned by the authenticated user in the specified repository. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCreateWithRepoForAuthenticatedUser
     * @summary Create a codespace in a repository
     * @request POST:/repos/{owner}/{repo}/codespaces
     */
    codespacesCreateWithRepoForAuthenticatedUser: (
      owner: string,
      repo: string,
      data: {
        /** Git ref (typically a branch name) for this codespace */
        ref?: string;
        /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
        location?: string;
        /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /** Machine type to use for this codespace */
        machine?: string;
        /** Path to devcontainer.json config to use for this codespace */
        devcontainer_path?: string;
        /** Whether to authorize requested permissions from devcontainer.json */
        multi_repo_permissions_opt_out?: boolean;
        /** Working directory for this codespace */
        working_directory?: string;
        /** Time in minutes before codespace stops from inactivity */
        idle_timeout_minutes?: number;
        /** Display name for this codespace */
        display_name?: string;
        /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
        retention_period_minutes?: number;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        Codespace,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/codespaces`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListDevcontainersInRepositoryForAuthenticatedUser
     * @summary List devcontainer configurations in a repository for the authenticated user
     * @request GET:/repos/{owner}/{repo}/codespaces/devcontainers
     */
    codespacesListDevcontainersInRepositoryForAuthenticatedUser: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          devcontainers: {
            path: string;
            name?: string;
            display_name?: string;
          }[];
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/codespaces/devcontainers`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List the machine types available for a given repository based on its configuration. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesRepoMachinesForAuthenticatedUser
     * @summary List available machine types for a repository
     * @request GET:/repos/{owner}/{repo}/codespaces/machines
     */
    codespacesRepoMachinesForAuthenticatedUser: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The location to check for available machines. Assigned by IP if not provided.
         * @example "WestUs2"
         */
        location?: string;
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /**
         * The branch or commit to check for prebuild availability and devcontainer restrictions.
         * @example "main"
         */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          machines: CodespaceMachine[];
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/codespaces/machines`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the default attributes for codespaces created by the user with the repository. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesPreFlightWithRepoForAuthenticatedUser
     * @summary Get default attributes for a codespace
     * @request GET:/repos/{owner}/{repo}/codespaces/new
     */
    codespacesPreFlightWithRepoForAuthenticatedUser: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
         * @example "main"
         */
        ref?: string;
        /**
         * An alternative IP for default location auto-detection, such as when proxying a request.
         * @example "1.2.3.4"
         */
        client_ip?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** A GitHub user. */
          billable_owner?: SimpleUser;
          defaults?: {
            location: string;
            devcontainer_path: string | null;
          };
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/codespaces/new`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCheckPermissionsForDevcontainer
     * @summary Check if permissions defined by a devcontainer have been accepted by the authenticated user
     * @request GET:/repos/{owner}/{repo}/codespaces/permissions_check
     */
    codespacesCheckPermissionsForDevcontainer: (
      owner: string,
      repo: string,
      query: {
        /**
         * The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
         * @example "master"
         */
        ref: string;
        /**
         * Path to the devcontainer.json configuration to use for the permission check.
         * @example ".devcontainer/example/devcontainer.json"
         */
        devcontainer_path: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodespacesPermissionsCheckForDevcontainer,
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/codespaces/permissions_check`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all development environment secrets available in a repository without revealing their encrypted values. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListRepoSecrets
     * @summary List repository secrets
     * @request GET:/repos/{owner}/{repo}/codespaces/secrets
     */
    codespacesListRepoSecrets: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: RepoCodespacesSecret[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/codespaces/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetRepoPublicKey
     * @summary Get a repository public key
     * @request GET:/repos/{owner}/{repo}/codespaces/secrets/public-key
     */
    codespacesGetRepoPublicKey: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodespacesPublicKey, any>({
        path: `/repos/${owner}/${repo}/codespaces/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single repository development environment secret without revealing its encrypted value. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetRepoSecret
     * @summary Get a repository secret
     * @request GET:/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
     */
    codespacesGetRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<RepoCodespacesSecret, any>({
        path: `/repos/${owner}/${repo}/codespaces/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
     *
     * @tags codespaces
     * @name CodespacesCreateOrUpdateRepoSecret
     * @summary Create or update a repository secret
     * @request PUT:/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
     */
    codespacesCreateOrUpdateRepoSecret: (
      owner: string,
      repo: string,
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/codespaces/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a development environment secret in a repository using the secret name. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
     *
     * @tags codespaces
     * @name CodespacesDeleteRepoSecret
     * @summary Delete a repository secret
     * @request DELETE:/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
     */
    codespacesDeleteRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/codespaces/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. The `permissions` hash returned in the response contains the base role permissions of the collaborator. The `role_name` is the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise. There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response. Team members will include the members of child teams. The authenticated user must have write, maintain, or admin privileges on the repository to use this endpoint. For organization-owned repositories, the authenticated user needs to be a member of the organization. OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
     *
     * @tags repos
     * @name ReposListCollaborators
     * @summary List repository collaborators
     * @request GET:/repos/{owner}/{repo}/collaborators
     */
    reposListCollaborators: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
         * @default "all"
         */
        affiliation?: "outside" | "direct" | "all";
        /** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */
        permission?: "pull" | "triage" | "push" | "maintain" | "admin";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Collaborator[], BasicError>({
        path: `/repos/${owner}/${repo}/collaborators`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. Team members will include the members of child teams. The authenticated user must have push access to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
     *
     * @tags repos
     * @name ReposCheckCollaborator
     * @summary Check if a user is a repository collaborator
     * @request GET:/repos/{owner}/{repo}/collaborators/{username}
     */
    reposCheckCollaborator: (owner: string, repo: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/repos/${owner}/${repo}/collaborators/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Add a user to a repository with a specified level of access. If the repository is owned by an organization, this API does not add the user to the organization - a user that has repository access without being an organization member is called an "outside collaborator" (if they are not an Enterprise Managed User) or a "repository collaborator" if they are an Enterprise Managed User. These users are exempt from some organization policies - see "[Adding outside collaborators to repositories](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/managing-outside-collaborators/adding-outside-collaborators-to-repositories-in-your-organization)" to learn more about these collaborator types. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Adding an outside collaborator may be restricted by enterprise and organization administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)" and "[Setting permissions for adding outside collaborators](https://docs.github.com/organizations/managing-organization-settings/setting-permissions-for-adding-outside-collaborators)" for organization settings. For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the role being given must be equal to or higher than the org base permission. Otherwise, the request will fail with: ``` Cannot assign {member} permission of {role name} ``` Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations). For Enterprise Managed Users, this endpoint does not send invitations - these users are automatically added to organizations and repositories. Enterprise Managed Users can only be added to organizations and repositories within their enterprise. **Updating an existing collaborator's permission level** The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed. **Rate limits** You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     *
     * @tags repos
     * @name ReposAddCollaborator
     * @summary Add a repository collaborator
     * @request PUT:/repos/{owner}/{repo}/collaborators/{username}
     */
    reposAddCollaborator: (
      owner: string,
      repo: string,
      username: string,
      data?: {
        /**
         * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
         * @default "push"
         */
        permission?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/collaborators/${username}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes a collaborator from a repository. To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal. This endpoint also: - Cancels any outstanding invitations sent by the collaborator - Unassigns the user from any issues - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories. - Unstars the repository - Updates access permissions to packages Removing a user as a collaborator has the following effects on forks: - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork. - If the user had their own fork of the repository, the fork will be deleted. - If the user still has read access to the repository, open pull requests by this user from a fork will be denied. > [!NOTE] > A user can still have access to the repository through organization permissions like base repository permissions. Although the API responds immediately, the additional permission updates might take some extra time to complete in the background. For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
     *
     * @tags repos
     * @name ReposRemoveCollaborator
     * @summary Remove a repository collaborator
     * @request DELETE:/repos/{owner}/{repo}/collaborators/{username}
     */
    reposRemoveCollaborator: (owner: string, repo: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/collaborators/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Checks the repository permission and role of a collaborator. The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the `maintain` role is mapped to `write` and the `triage` role is mapped to `read`. The `role_name` attribute provides the name of the assigned role, including custom roles. The `permission` can also be used to determine which base level of access the collaborator has to the repository. The calculated permissions are the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise. There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
     *
     * @tags repos
     * @name ReposGetCollaboratorPermissionLevel
     * @summary Get repository permissions for a user
     * @request GET:/repos/{owner}/{repo}/collaborators/{username}/permission
     */
    reposGetCollaboratorPermissionLevel: (owner: string, repo: string, username: string, params: RequestParams = {}) =>
      this.request<RepositoryCollaboratorPermission, BasicError>({
        path: `/repos/${owner}/${repo}/collaborators/${username}/permission`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the commit comments for a specified repository. Comments are ordered by ascending ID. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags repos
     * @name ReposListCommitCommentsForRepo
     * @summary List commit comments for a repository
     * @request GET:/repos/{owner}/{repo}/comments
     */
    reposListCommitCommentsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment[], any>({
        path: `/repos/${owner}/${repo}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specified commit comment. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags repos
     * @name ReposGetCommitComment
     * @summary Get a commit comment
     * @request GET:/repos/{owner}/{repo}/comments/{comment_id}
     */
    reposGetCommitComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<CommitComment, BasicError>({
        path: `/repos/${owner}/${repo}/comments/${commentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the contents of a specified commit comment. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags repos
     * @name ReposUpdateCommitComment
     * @summary Update a commit comment
     * @request PATCH:/repos/{owner}/{repo}/comments/{comment_id}
     */
    reposUpdateCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The contents of the comment */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment, BasicError>({
        path: `/repos/${owner}/${repo}/comments/${commentId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteCommitComment
     * @summary Delete a commit comment
     * @request DELETE:/repos/{owner}/{repo}/comments/{comment_id}
     */
    reposDeleteCommitComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/comments/${commentId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
     *
     * @tags reactions
     * @name ReactionsListForCommitComment
     * @summary List reactions for a commit comment
     * @request GET:/repos/{owner}/{repo}/comments/{comment_id}/reactions
     */
    reactionsListForCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], BasicError>({
        path: `/repos/${owner}/${repo}/comments/${commentId}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
     *
     * @tags reactions
     * @name ReactionsCreateForCommitComment
     * @summary Create reaction for a commit comment
     * @request POST:/repos/{owner}/{repo}/comments/{comment_id}/reactions
     */
    reactionsCreateForCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, ValidationError>({
        path: `/repos/${owner}/${repo}/comments/${commentId}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`. Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
     *
     * @tags reactions
     * @name ReactionsDeleteForCommitComment
     * @summary Delete a commit comment reaction
     * @request DELETE:/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
     */
    reactionsDeleteForCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/comments/${commentId}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags repos
     * @name ReposListCommits
     * @summary List commits
     * @request GET:/repos/{owner}/{repo}/commits
     */
    reposListCommits: (
      owner: string,
      repo: string,
      query?: {
        /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */
        sha?: string;
        /** Only commits containing this file path will be returned. */
        path?: string;
        /** GitHub username or email address to use to filter by commit author. */
        author?: string;
        /** GitHub username or email address to use to filter by commit committer. */
        committer?: string;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
         * @format date-time
         */
        since?: string;
        /**
         * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
         * @format date-time
         */
        until?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Commit[], BasicError>({
        path: `/repos/${owner}/${repo}/commits`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     *
     * @tags repos
     * @name ReposListBranchesForHeadCommit
     * @summary List branches for HEAD commit
     * @request GET:/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
     */
    reposListBranchesForHeadCommit: (owner: string, repo: string, commitSha: string, params: RequestParams = {}) =>
      this.request<BranchShort[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/commits/${commitSha}/branches-where-head`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the comments for a specified commit. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags repos
     * @name ReposListCommentsForCommit
     * @summary List commit comments
     * @request GET:/repos/{owner}/{repo}/commits/{commit_sha}/comments
     */
    reposListCommentsForCommit: (
      owner: string,
      repo: string,
      commitSha: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment[], any>({
        path: `/repos/${owner}/${repo}/commits/${commitSha}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a comment for a commit using its `:commit_sha`. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags repos
     * @name ReposCreateCommitComment
     * @summary Create a commit comment
     * @request POST:/repos/{owner}/{repo}/commits/{commit_sha}/comments
     */
    reposCreateCommitComment: (
      owner: string,
      repo: string,
      commitSha: string,
      data: {
        /** The contents of the comment. */
        body: string;
        /** Relative path of the file to comment on. */
        path?: string;
        /** Line index in the diff to comment on. */
        position?: number;
        /** **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on. */
        line?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/commits/${commitSha}/comments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, it will return merged and open pull requests associated with the commit. To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
     *
     * @tags repos
     * @name ReposListPullRequestsAssociatedWithCommit
     * @summary List pull requests associated with a commit
     * @request GET:/repos/{owner}/{repo}/commits/{commit_sha}/pulls
     */
    reposListPullRequestsAssociatedWithCommit: (
      owner: string,
      repo: string,
      commitSha: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestSimple[], BasicError>({
        path: `/repos/${owner}/${repo}/commits/${commitSha}/pulls`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint. > [!NOTE] > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types. - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code. - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code. - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag. **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags repos
     * @name ReposGetCommit
     * @summary Get a commit
     * @request GET:/repos/{owner}/{repo}/commits/{ref}
     */
    reposGetCommit: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Commit,
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/commits/${ref}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. > [!NOTE] > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array. If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
     *
     * @tags checks
     * @name ChecksListForRef
     * @summary List check runs for a Git reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/check-runs
     */
    checksListForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /** Returns check runs with the specified `name`. */
        check_name?: string;
        /** Returns check runs with the specified `status`. */
        status?: "queued" | "in_progress" | "completed";
        /**
         * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        app_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          check_runs: CheckRun[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/commits/${ref}/check-runs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. > [!NOTE] > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
     *
     * @tags checks
     * @name ChecksListSuitesForRef
     * @summary List check suites for a Git reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/check-suites
     */
    checksListSuitesForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * Filters check suites by GitHub App `id`.
         * @example 1
         */
        app_id?: number;
        /** Returns check runs with the specified `name`. */
        check_name?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          check_suites: CheckSuite[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/commits/${ref}/check-suites`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Additionally, a combined `state` is returned. The `state` is one of: *   **failure** if any of the contexts report as `error` or `failure` *   **pending** if there are no statuses or a context is `pending` *   **success** if the latest status for all contexts is `success`
     *
     * @tags repos
     * @name ReposGetCombinedStatusForRef
     * @summary Get the combined status for a specific reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/status
     */
    reposGetCombinedStatusForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CombinedCommitStatus, BasicError>({
        path: `/repos/${owner}/${repo}/commits/${ref}/status`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one. This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
     *
     * @tags repos
     * @name ReposListCommitStatusesForRef
     * @summary List commit statuses for a reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/statuses
     */
    reposListCommitStatusesForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Status[], BasicError>({
        path: `/repos/${owner}/${repo}/commits/${ref}/statuses`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns all community profile metrics for a repository. The repository cannot be a fork. The returned metrics include an overall health score, the repository description, the presence of documentation, the detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE, README, and CONTRIBUTING files. The `health_percentage` score is defined as a percentage of how many of the recommended community health files are present. For more information, see "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)." `content_reports_enabled` is only returned for organization-owned repositories.
     *
     * @tags repos
     * @name ReposGetCommunityProfileMetrics
     * @summary Get community profile metrics
     * @request GET:/repos/{owner}/{repo}/community/profile
     */
    reposGetCommunityProfileMetrics: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CommunityProfile, any>({
        path: `/repos/${owner}/${repo}/community/profile`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)." This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.diff`**: Returns the diff of the commit. - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file. When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison. **Working with large comparisons** To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination: - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison. - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results. For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)." **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags repos
     * @name ReposCompareCommits
     * @summary Compare two commits
     * @request GET:/repos/{owner}/{repo}/compare/{basehead}
     */
    reposCompareCommits: (
      owner: string,
      repo: string,
      basehead: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CommitComparison,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/compare/${basehead}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks. - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup). - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects. If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule". If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself. If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values. **Notes**: - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree). - This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree). - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download. - If the requested file's size is: - 1 MB or smaller: All features of this endpoint are supported. - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type. - Greater than 100 MB: This endpoint is not supported.
     *
     * @tags repos
     * @name ReposGetContent
     * @summary Get repository content
     * @request GET:/repos/{owner}/{repo}/contents/{path}
     */
    reposGetContent: (
      owner: string,
      repo: string,
      path: string,
      query?: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch. */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ContentTree, BasicError>({
        path: `/repos/${owner}/${repo}/contents/${path}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new file or replaces an existing file in a repository. > [!NOTE] > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
     *
     * @tags repos
     * @name ReposCreateOrUpdateFileContents
     * @summary Create or update file contents
     * @request PUT:/repos/{owner}/{repo}/contents/{path}
     */
    reposCreateOrUpdateFileContents: (
      owner: string,
      repo: string,
      path: string,
      data: {
        /** The commit message. */
        message: string;
        /** The new file content, using Base64 encoding. */
        content: string;
        /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
        sha?: string;
        /** The branch name. Default: the repository’s default branch. */
        branch?: string;
        /** The person that committed the file. Default: the authenticated user. */
        committer?: {
          /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
          name: string;
          /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
          email: string;
          /** @example ""2013-01-05T13:13:22+05:00"" */
          date?: string;
        };
        /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
        author?: {
          /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
          name: string;
          /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
          email: string;
          /** @example ""2013-01-15T17:13:22+05:00"" */
          date?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<FileCommit, BasicError | (BasicError | RepositoryRuleViolationError) | ValidationError>({
        path: `/repos/${owner}/${repo}/contents/${path}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a file in a repository. You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author. The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used. You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code. > [!NOTE] > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
     *
     * @tags repos
     * @name ReposDeleteFile
     * @summary Delete a file
     * @request DELETE:/repos/{owner}/{repo}/contents/{path}
     */
    reposDeleteFile: (
      owner: string,
      repo: string,
      path: string,
      data: {
        /** The commit message. */
        message: string;
        /** The blob SHA of the file being deleted. */
        sha: string;
        /** The branch name. Default: the repository’s default branch */
        branch?: string;
        /** object containing information about the committer. */
        committer?: {
          /** The name of the author (or committer) of the commit */
          name?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
        };
        /** object containing information about the author. */
        author?: {
          /** The name of the author (or committer) of the commit */
          name?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<
        FileCommit,
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/contents/${path}`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance. GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     *
     * @tags repos
     * @name ReposListContributors
     * @summary List repository contributors
     * @request GET:/repos/{owner}/{repo}/contributors
     */
    reposListContributors: (
      owner: string,
      repo: string,
      query?: {
        /** Set to `1` or `true` to include anonymous contributors in results. */
        anon?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Contributor[], BasicError>({
        path: `/repos/${owner}/${repo}/contributors`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags dependabot
     * @name DependabotListAlertsForRepo
     * @summary List Dependabot alerts for a repository
     * @request GET:/repos/{owner}/{repo}/dependabot/alerts
     */
    dependabotListAlertsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * A comma-separated list of states. If specified, only alerts with these states will be returned.
         *
         * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
         */
        state?: string;
        /**
         * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
         *
         * Can be: `low`, `medium`, `high`, `critical`
         */
        severity?: string;
        /**
         * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
         *
         * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
         */
        ecosystem?: string;
        /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
        package?: string;
        /** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */
        manifest?: string;
        /**
         * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
         * - An exact number (`n`)
         * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
         * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
         *
         * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
         */
        epss_percentage?: string;
        /**
         * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
         * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
         */
        has?: string | "patch"[];
        /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
        scope?: "development" | "runtime";
        /**
         * The property by which to sort the results.
         * `created` means when the alert was created.
         * `updated` means when the alert's state last changed.
         * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
         * @default "created"
         */
        sort?: "created" | "updated" | "epss_percentage";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * **Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
         * @deprecated
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @deprecated
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
         * This parameter must not be used in combination with `last`.
         * Instead, use `per_page` in combination with `after` to fetch the first page of results.
         * @min 1
         * @max 100
         * @default 30
         */
        first?: number;
        /**
         * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
         * This parameter must not be used in combination with `first`.
         * Instead, use `per_page` in combination with `before` to fetch the last page of results.
         * @min 1
         * @max 100
         */
        last?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DependabotAlert[], BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/dependabot/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags dependabot
     * @name DependabotGetAlert
     * @summary Get a Dependabot alert
     * @request GET:/repos/{owner}/{repo}/dependabot/alerts/{alert_number}
     */
    dependabotGetAlert: (owner: string, repo: string, alertNumber: AlertNumber, params: RequestParams = {}) =>
      this.request<DependabotAlert, BasicError>({
        path: `/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)." OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags dependabot
     * @name DependabotUpdateAlert
     * @summary Update a Dependabot alert
     * @request PATCH:/repos/{owner}/{repo}/dependabot/alerts/{alert_number}
     */
    dependabotUpdateAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      data: {
        /**
         * The state of the Dependabot alert.
         * A `dismissed_reason` must be provided when setting the state to `dismissed`.
         */
        state: "dismissed" | "open";
        /** **Required when `state` is `dismissed`.** A reason for dismissing the alert. */
        dismissed_reason?: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk";
        /**
         * An optional comment associated with dismissing the alert.
         * @maxLength 280
         */
        dismissed_comment?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DependabotAlert, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all secrets available in a repository without revealing their encrypted values. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotListRepoSecrets
     * @summary List repository secrets
     * @request GET:/repos/{owner}/{repo}/dependabot/secrets
     */
    dependabotListRepoSecrets: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: DependabotSecret[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/dependabot/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
     *
     * @tags dependabot
     * @name DependabotGetRepoPublicKey
     * @summary Get a repository public key
     * @request GET:/repos/{owner}/{repo}/dependabot/secrets/public-key
     */
    dependabotGetRepoPublicKey: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<DependabotPublicKey, any>({
        path: `/repos/${owner}/${repo}/dependabot/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single repository secret without revealing its encrypted value. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotGetRepoSecret
     * @summary Get a repository secret
     * @request GET:/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
     */
    dependabotGetRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<DependabotSecret, any>({
        path: `/repos/${owner}/${repo}/dependabot/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotCreateOrUpdateRepoSecret
     * @summary Create or update a repository secret
     * @request PUT:/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
     */
    dependabotCreateOrUpdateRepoSecret: (
      owner: string,
      repo: string,
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/dependabot/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a secret in a repository using the secret name. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags dependabot
     * @name DependabotDeleteRepoSecret
     * @summary Delete a repository secret
     * @request DELETE:/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
     */
    dependabotDeleteRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/dependabot/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
     *
     * @tags dependency-graph
     * @name DependencyGraphDiffRange
     * @summary Get a diff of the dependencies between commits
     * @request GET:/repos/{owner}/{repo}/dependency-graph/compare/{basehead}
     */
    dependencyGraphDiffRange: (
      owner: string,
      repo: string,
      basehead: string,
      query?: {
        /** The full path, relative to the repository root, of the dependency manifest file. */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DependencyGraphDiff, BasicError>({
        path: `/repos/${owner}/${repo}/dependency-graph/compare/${basehead}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
     *
     * @tags dependency-graph
     * @name DependencyGraphExportSbom
     * @summary Export a software bill of materials (SBOM) for a repository.
     * @request GET:/repos/{owner}/{repo}/dependency-graph/sbom
     */
    dependencyGraphExportSbom: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<DependencyGraphSpdxSbom, BasicError>({
        path: `/repos/${owner}/${repo}/dependency-graph/sbom`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Create a new snapshot of a repository's dependencies. The authenticated user must have access to the repository. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags dependency-graph
     * @name DependencyGraphCreateRepositorySnapshot
     * @summary Create a snapshot of dependencies for a repository
     * @request POST:/repos/{owner}/{repo}/dependency-graph/snapshots
     */
    dependencyGraphCreateRepositorySnapshot: (
      owner: string,
      repo: string,
      data: Snapshot,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** ID of the created snapshot. */
          id: number;
          /** The time at which the snapshot was created. */
          created_at: string;
          /** Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed. */
          result: string;
          /** A message providing further details about the result, such as why the dependencies were not updated. */
          message: string;
        },
        any
      >({
        path: `/repos/${owner}/${repo}/dependency-graph/snapshots`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Simple filtering of deployments is available via query parameters:
     *
     * @tags repos
     * @name ReposListDeployments
     * @summary List deployments
     * @request GET:/repos/{owner}/{repo}/deployments
     */
    reposListDeployments: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The SHA recorded at creation time.
         * @default "none"
         */
        sha?: string;
        /**
         * The name of the ref. This can be a branch, tag, or SHA.
         * @default "none"
         */
        ref?: string;
        /**
         * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
         * @default "none"
         */
        task?: string;
        /**
         * The name of the environment that was deployed to (e.g., `staging` or `production`).
         * @default "none"
         */
        environment?: string | null;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Deployment[], any>({
        path: `/repos/${owner}/${repo}/deployments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Deployments offer a few configurable parameters with certain defaults. The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request. The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter makes it easier to track which environments have requested deployments. The default environment is `production`. The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response. By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed. The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched. The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled. Merged branch response: You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example *   There are no merge conflicts If there are no new commits in the base branch, a new request to create a deployment should give a successful response. Merge conflict response: This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts. Failed commit status checks: This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`. OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreateDeployment
     * @summary Create a deployment
     * @request POST:/repos/{owner}/{repo}/deployments
     */
    reposCreateDeployment: (
      owner: string,
      repo: string,
      data: {
        /** The ref to deploy. This can be a branch, tag, or SHA. */
        ref: string;
        /**
         * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
         * @default "deploy"
         */
        task?: string;
        /**
         * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
         * @default true
         */
        auto_merge?: boolean;
        /** The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
        required_contexts?: string[];
        /** JSON payload with extra information about the deployment. */
        payload?: Record<string, any> | string;
        /**
         * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
         * @default "production"
         */
        environment?: string;
        /**
         * Short description of the deployment.
         * @default ""
         */
        description?: string | null;
        /**
         * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
         * @default false
         */
        transient_environment?: boolean;
        /** Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */
        production_environment?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Deployment, void | ValidationError>({
        path: `/repos/${owner}/${repo}/deployments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetDeployment
     * @summary Get a deployment
     * @request GET:/repos/{owner}/{repo}/deployments/{deployment_id}
     */
    reposGetDeployment: (owner: string, repo: string, deploymentId: number, params: RequestParams = {}) =>
      this.request<Deployment, BasicError>({
        path: `/repos/${owner}/${repo}/deployments/${deploymentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. To set a deployment as inactive, you must: *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status. For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)." OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposDeleteDeployment
     * @summary Delete a deployment
     * @request DELETE:/repos/{owner}/{repo}/deployments/{deployment_id}
     */
    reposDeleteDeployment: (owner: string, repo: string, deploymentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/deployments/${deploymentId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Users with pull access can view deployment statuses for a deployment:
     *
     * @tags repos
     * @name ReposListDeploymentStatuses
     * @summary List deployment statuses
     * @request GET:/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     */
    reposListDeploymentStatuses: (
      owner: string,
      repo: string,
      deploymentId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeploymentStatus[], BasicError>({
        path: `/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with `push` access can create deployment statuses for a given deployment. OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreateDeploymentStatus
     * @summary Create a deployment status
     * @request POST:/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     */
    reposCreateDeploymentStatus: (
      owner: string,
      repo: string,
      deploymentId: number,
      data: {
        /** The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
        state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
        /**
         * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
         *
         * > [!NOTE]
         * > It's recommended to use the `log_url` parameter, which replaces `target_url`.
         * @default ""
         */
        target_url?: string;
        /**
         * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
         * @default ""
         */
        log_url?: string;
        /**
         * A short description of the status. The maximum description length is 140 characters.
         * @default ""
         */
        description?: string;
        /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used. */
        environment?: string;
        /**
         * Sets the URL for accessing your environment. Default: `""`
         * @default ""
         */
        environment_url?: string;
        /** Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
        auto_inactive?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeploymentStatus, ValidationError>({
        path: `/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with pull access can view a deployment status for a deployment:
     *
     * @tags repos
     * @name ReposGetDeploymentStatus
     * @summary Get a deployment status
     * @request GET:/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
     */
    reposGetDeploymentStatus: (
      owner: string,
      repo: string,
      deploymentId: number,
      statusId: number,
      params: RequestParams = {},
    ) =>
      this.request<DeploymentStatus, BasicError>({
        path: `/repos/${owner}/${repo}/deployments/${deploymentId}/statuses/${statusId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)." The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow. This input example shows how you can use the `client_payload` as a test to debug your workflow. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreateDispatchEvent
     * @summary Create a repository dispatch event
     * @request POST:/repos/{owner}/{repo}/dispatches
     */
    reposCreateDispatchEvent: (
      owner: string,
      repo: string,
      data: {
        /**
         * A custom webhook event name. Must be 100 characters or fewer.
         * @minLength 1
         * @maxLength 100
         */
        event_type: string;
        /** JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB. */
        client_payload?: Record<string, any>;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/dispatches`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the environments for a repository. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposGetAllEnvironments
     * @summary List environments
     * @request GET:/repos/{owner}/{repo}/environments
     */
    reposGetAllEnvironments: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /**
           * The number of environments in this repository
           * @example 5
           */
          total_count?: number;
          environments?: Environment[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/environments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)." Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposGetEnvironment
     * @summary Get an environment
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}
     */
    reposGetEnvironment: (owner: string, repo: string, environmentName: string, params: RequestParams = {}) =>
      this.request<Environment, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)." > [!NOTE] > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)." > [!NOTE] > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)." OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreateOrUpdateEnvironment
     * @summary Create or update an environment
     * @request PUT:/repos/{owner}/{repo}/environments/{environment_name}
     */
    reposCreateOrUpdateEnvironment: (
      owner: string,
      repo: string,
      environmentName: string,
      data?: {
        /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
        wait_timer?: WaitTimer;
        /** Whether or not a user who created the job is prevented from approving their own job. */
        prevent_self_review?: PreventSelfReview;
        /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
        reviewers?:
          | {
              /** The type of reviewer. */
              type?: DeploymentReviewerType;
              /**
               * The id of the user or team who can review the deployment
               * @example 4532992
               */
              id?: number;
            }[]
          | null;
        /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
        deployment_branch_policy?: DeploymentBranchPolicySettings;
      },
      params: RequestParams = {},
    ) =>
      this.request<Environment, BasicError>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposDeleteAnEnvironment
     * @summary Delete an environment
     * @request DELETE:/repos/{owner}/{repo}/environments/{environment_name}
     */
    reposDeleteAnEnvironment: (owner: string, repo: string, environmentName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the deployment branch policies for an environment. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposListDeploymentBranchPolicies
     * @summary List deployment branch policies
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
     */
    reposListDeploymentBranchPolicies: (
      owner: string,
      repo: string,
      environmentName: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /**
           * The number of deployment branch policies for the environment.
           * @example 2
           */
          total_count: number;
          branch_policies: DeploymentBranchPolicy[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a deployment branch or tag policy for an environment. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreateDeploymentBranchPolicy
     * @summary Create a deployment branch policy
     * @request POST:/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
     */
    reposCreateDeploymentBranchPolicy: (
      owner: string,
      repo: string,
      environmentName: string,
      data: DeploymentBranchPolicyNamePatternWithType,
      params: RequestParams = {},
    ) =>
      this.request<DeploymentBranchPolicy, void>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a deployment branch or tag policy for an environment. Anyone with read access to the repository can use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposGetDeploymentBranchPolicy
     * @summary Get a deployment branch policy
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
     */
    reposGetDeploymentBranchPolicy: (
      owner: string,
      repo: string,
      environmentName: string,
      branchPolicyId: number,
      params: RequestParams = {},
    ) =>
      this.request<DeploymentBranchPolicy, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a deployment branch or tag policy for an environment. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposUpdateDeploymentBranchPolicy
     * @summary Update a deployment branch policy
     * @request PUT:/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
     */
    reposUpdateDeploymentBranchPolicy: (
      owner: string,
      repo: string,
      environmentName: string,
      branchPolicyId: number,
      data: DeploymentBranchPolicyNamePattern,
      params: RequestParams = {},
    ) =>
      this.request<DeploymentBranchPolicy, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a deployment branch or tag policy for an environment. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposDeleteDeploymentBranchPolicy
     * @summary Delete a deployment branch policy
     * @request DELETE:/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
     */
    reposDeleteDeploymentBranchPolicy: (
      owner: string,
      repo: string,
      environmentName: string,
      branchPolicyId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)." For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app). OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposGetAllDeploymentProtectionRules
     * @summary Get all deployment protection rules for an environment
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules
     */
    reposGetAllDeploymentProtectionRules: (
      environmentName: string,
      repo: string,
      owner: string,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /**
           * The number of enabled custom deployment protection rules for this environment
           * @example 10
           */
          total_count?: number;
          custom_deployment_protection_rules?: DeploymentProtectionRule[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Enable a custom deployment protection rule for an environment. The authenticated user must have admin or owner permissions to the repository to use this endpoint. For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app), as well as the [guide to creating custom deployment protection rules](https://docs.github.com/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules). OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreateDeploymentProtectionRule
     * @summary Create a custom deployment protection rule on an environment
     * @request POST:/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules
     */
    reposCreateDeploymentProtectionRule: (
      environmentName: string,
      repo: string,
      owner: string,
      data: {
        /** The ID of the custom app that will be enabled on the environment. */
        integration_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeploymentProtectionRule, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets all custom deployment protection rule integrations that are available for an environment. The authenticated user must have admin or owner permissions to the repository to use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)." For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)". OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposListCustomDeploymentRuleIntegrations
     * @summary List custom deployment rule integrations available for an environment
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps
     */
    reposListCustomDeploymentRuleIntegrations: (
      environmentName: string,
      repo: string,
      owner: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /**
           * The total number of custom deployment protection rule integrations available for this environment.
           * @example 35
           */
          total_count?: number;
          available_custom_deployment_protection_rule_integrations?: CustomDeploymentRuleApp[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/apps`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)." For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app). OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposGetCustomDeploymentProtectionRule
     * @summary Get a custom deployment protection rule
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}
     */
    reposGetCustomDeploymentProtectionRule: (
      owner: string,
      repo: string,
      environmentName: string,
      protectionRuleId: number,
      params: RequestParams = {},
    ) =>
      this.request<DeploymentProtectionRule, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Disables a custom deployment protection rule for an environment. The authenticated user must have admin or owner permissions to the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposDisableDeploymentProtectionRule
     * @summary Disable a custom protection rule for an environment
     * @request DELETE:/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}
     */
    reposDisableDeploymentProtectionRule: (
      environmentName: string,
      repo: string,
      owner: string,
      protectionRuleId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all secrets available in an environment without revealing their encrypted values. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListEnvironmentSecrets
     * @summary List environment secrets
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/secrets
     */
    actionsListEnvironmentSecrets: (
      owner: string,
      repo: string,
      environmentName: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: ActionsSecret[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetEnvironmentPublicKey
     * @summary Get an environment public key
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key
     */
    actionsGetEnvironmentPublicKey: (
      owner: string,
      repo: string,
      environmentName: string,
      params: RequestParams = {},
    ) =>
      this.request<ActionsPublicKey, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single environment secret without revealing its encrypted value. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetEnvironmentSecret
     * @summary Get an environment secret
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}
     */
    actionsGetEnvironmentSecret: (
      owner: string,
      repo: string,
      environmentName: string,
      secretName: string,
      params: RequestParams = {},
    ) =>
      this.request<ActionsSecret, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateOrUpdateEnvironmentSecret
     * @summary Create or update an environment secret
     * @request PUT:/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}
     */
    actionsCreateOrUpdateEnvironmentSecret: (
      owner: string,
      repo: string,
      environmentName: string,
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a secret in an environment using the secret name. Authenticated users must have collaborator access to a repository to create, update, or read secrets. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteEnvironmentSecret
     * @summary Delete an environment secret
     * @request DELETE:/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}
     */
    actionsDeleteEnvironmentSecret: (
      owner: string,
      repo: string,
      environmentName: string,
      secretName: string,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all environment variables. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListEnvironmentVariables
     * @summary List environment variables
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/variables
     */
    actionsListEnvironmentVariables: (
      owner: string,
      repo: string,
      environmentName: string,
      query?: {
        /**
         * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 10
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          variables: ActionsVariable[];
        },
        any
      >({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/variables`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create an environment variable that you can reference in a GitHub Actions workflow. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateEnvironmentVariable
     * @summary Create an environment variable
     * @request POST:/repos/{owner}/{repo}/environments/{environment_name}/variables
     */
    actionsCreateEnvironmentVariable: (
      owner: string,
      repo: string,
      environmentName: string,
      data: {
        /** The name of the variable. */
        name: string;
        /** The value of the variable. */
        value: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/variables`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific variable in an environment. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetEnvironmentVariable
     * @summary Get an environment variable
     * @request GET:/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}
     */
    actionsGetEnvironmentVariable: (
      owner: string,
      repo: string,
      environmentName: string,
      name: string,
      params: RequestParams = {},
    ) =>
      this.request<ActionsVariable, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates an environment variable that you can reference in a GitHub Actions workflow. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsUpdateEnvironmentVariable
     * @summary Update an environment variable
     * @request PATCH:/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}
     */
    actionsUpdateEnvironmentVariable: (
      owner: string,
      repo: string,
      name: string,
      environmentName: string,
      data: {
        /** The name of the variable. */
        name?: string;
        /** The value of the variable. */
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Deletes an environment variable using the variable name. Authenticated users must have collaborator access to a repository to create, update, or read variables. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteEnvironmentVariable
     * @summary Delete an environment variable
     * @request DELETE:/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}
     */
    actionsDeleteEnvironmentVariable: (
      owner: string,
      repo: string,
      name: string,
      environmentName: string,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListRepoEvents
     * @summary List repository events
     * @request GET:/repos/{owner}/{repo}/events
     */
    activityListRepoEvents: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/repos/${owner}/${repo}/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListForks
     * @summary List forks
     * @request GET:/repos/{owner}/{repo}/forks
     */
    reposListForks: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The sort order. `stargazers` will sort by star count.
         * @default "newest"
         */
        sort?: "newest" | "oldest" | "stargazers" | "watchers";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/repos/${owner}/${repo}/forks`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a fork for the authenticated user. > [!NOTE] > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api). > [!NOTE] > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
     *
     * @tags repos
     * @name ReposCreateFork
     * @summary Create a fork
     * @request POST:/repos/{owner}/{repo}/forks
     */
    reposCreateFork: (
      owner: string,
      repo: string,
      data?: {
        /** Optional parameter to specify the organization name if forking into an organization. */
        organization?: string;
        /** When forking from an existing repository, a new name for the fork. */
        name?: string;
        /** When forking from an existing repository, fork with only the default branch. */
        default_branch_only?: boolean;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<FullRepository, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/forks`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags git
     * @name GitCreateBlob
     * @summary Create a blob
     * @request POST:/repos/{owner}/{repo}/git/blobs
     */
    gitCreateBlob: (
      owner: string,
      repo: string,
      data: {
        /** The new blob's content. */
        content: string;
        /**
         * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
         * @default "utf-8"
         */
        encoding?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ShortBlob, BasicError | (ValidationError | RepositoryRuleViolationError)>({
        path: `/repos/${owner}/${repo}/git/blobs`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The `content` in the response will always be Base64 encoded. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw blob data. - **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified. **Note** This endpoint supports blobs up to 100 megabytes in size.
     *
     * @tags git
     * @name GitGetBlob
     * @summary Get a blob
     * @request GET:/repos/{owner}/{repo}/git/blobs/{file_sha}
     */
    gitGetBlob: (owner: string, repo: string, fileSha: string, params: RequestParams = {}) =>
      this.request<Blob, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/blobs/${fileSha}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects). **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitCreateCommit
     * @summary Create a commit
     * @request POST:/repos/{owner}/{repo}/git/commits
     */
    gitCreateCommit: (
      owner: string,
      repo: string,
      data: {
        /** The commit message */
        message: string;
        /** The SHA of the tree object this commit points to */
        tree: string;
        /** The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
        parents?: string[];
        /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
        author?: {
          /** The name of the author (or committer) of the commit */
          name: string;
          /** The email of the author (or committer) of the commit */
          email: string;
          /**
           * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           * @format date-time
           */
          date?: string;
        };
        /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
        committer?: {
          /** The name of the author (or committer) of the commit */
          name?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
          /**
           * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           * @format date-time
           */
          date?: string;
        };
        /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
        signature?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitCommit, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/commits`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects). To get the contents of a commit, see "[Get a commit](/rest/commits/commits#get-a-commit)." **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitGetCommit
     * @summary Get a commit object
     * @request GET:/repos/{owner}/{repo}/git/commits/{commit_sha}
     */
    gitGetCommit: (owner: string, repo: string, commitSha: string, params: RequestParams = {}) =>
      this.request<GitCommit, BasicError>({
        path: `/repos/${owner}/${repo}/git/commits/${commitSha}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array. When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`. > [!NOTE] > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)". If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
     *
     * @tags git
     * @name GitListMatchingRefs
     * @summary List matching references
     * @request GET:/repos/{owner}/{repo}/git/matching-refs/{ref}
     */
    gitListMatchingRefs: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<GitRef[], BasicError>({
        path: `/repos/${owner}/${repo}/git/matching-refs/${ref}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned. > [!NOTE] > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     *
     * @tags git
     * @name GitGetRef
     * @summary Get a reference
     * @request GET:/repos/{owner}/{repo}/git/ref/{ref}
     */
    gitGetRef: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<GitRef, BasicError>({
        path: `/repos/${owner}/${repo}/git/ref/${ref}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
     *
     * @tags git
     * @name GitCreateRef
     * @summary Create a reference
     * @request POST:/repos/{owner}/{repo}/git/refs
     */
    gitCreateRef: (
      owner: string,
      repo: string,
      data: {
        /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
        ref: string;
        /** The SHA1 value for this reference. */
        sha: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitRef, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/refs`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the provided reference to point to a new SHA. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
     *
     * @tags git
     * @name GitUpdateRef
     * @summary Update a reference
     * @request PATCH:/repos/{owner}/{repo}/git/refs/{ref}
     */
    gitUpdateRef: (
      owner: string,
      repo: string,
      ref: string,
      data: {
        /** The SHA1 value to set this reference to */
        sha: string;
        /**
         * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
         * @default false
         */
        force?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitRef, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/refs/${ref}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes the provided reference.
     *
     * @tags git
     * @name GitDeleteRef
     * @summary Delete a reference
     * @request DELETE:/repos/{owner}/{repo}/git/refs/{ref}
     */
    gitDeleteRef: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<void, BasicError | void>({
        path: `/repos/${owner}/${repo}/git/refs/${ref}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary. **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitCreateTag
     * @summary Create a tag object
     * @request POST:/repos/{owner}/{repo}/git/tags
     */
    gitCreateTag: (
      owner: string,
      repo: string,
      data: {
        /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
        tag: string;
        /** The tag message. */
        message: string;
        /** The SHA of the git object this is tagging. */
        object: string;
        /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */
        type: "commit" | "tree" | "blob";
        /** An object with information about the individual creating the tag. */
        tagger?: {
          /** The name of the author of the tag */
          name: string;
          /** The email of the author of the tag */
          email: string;
          /**
           * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           * @format date-time
           */
          date?: string;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<GitTag, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/tags`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Signature verification object** The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object: | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. | | `verified_at` | `string` | The date the signature was verified by GitHub. | These are the possible values for `reason` in the `verification` object: | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitGetTag
     * @summary Get a tag
     * @request GET:/repos/{owner}/{repo}/git/tags/{tag_sha}
     */
    gitGetTag: (owner: string, repo: string, tagSha: string, params: RequestParams = {}) =>
      this.request<GitTag, BasicError>({
        path: `/repos/${owner}/${repo}/git/tags/${tagSha}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure. If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)." Returns an error if you try to delete a file that does not exist.
     *
     * @tags git
     * @name GitCreateTree
     * @summary Create a tree
     * @request POST:/repos/{owner}/{repo}/git/trees
     */
    gitCreateTree: (
      owner: string,
      repo: string,
      data: {
        /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
        tree: {
          /** The file referenced in the tree. */
          path?: string;
          /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
          mode?: "100644" | "100755" | "040000" | "160000" | "120000";
          /** Either `blob`, `tree`, or `commit`. */
          type?: "blob" | "tree" | "commit";
          /**
           * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
           *
           * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
           */
          sha?: string | null;
          /**
           * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
           *
           * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
           */
          content?: string;
        }[];
        /**
         * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
         * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
         */
        base_tree?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitTree, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/trees`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a single tree using the SHA1 value or ref name for that tree. If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time. > [!NOTE] > The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
     *
     * @tags git
     * @name GitGetTree
     * @summary Get a tree
     * @request GET:/repos/{owner}/{repo}/git/trees/{tree_sha}
     */
    gitGetTree: (
      owner: string,
      repo: string,
      treeSha: string,
      query?: {
        /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
        recursive?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitTree, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/git/trees/${treeSha}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
     *
     * @tags repos
     * @name ReposListWebhooks
     * @summary List repository webhooks
     * @request GET:/repos/{owner}/{repo}/hooks
     */
    reposListWebhooks: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Hook[], BasicError>({
        path: `/repos/${owner}/${repo}/hooks`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.
     *
     * @tags repos
     * @name ReposCreateWebhook
     * @summary Create a repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks
     */
    reposCreateWebhook: (
      owner: string,
      repo: string,
      data?: {
        /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
        name?: string;
        /** Key/value pairs to provide settings for this webhook. */
        config?: {
          /** The URL to which the payloads will be delivered. */
          url?: WebhookConfigUrl;
          /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
          content_type?: WebhookConfigContentType;
          /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<Hook, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/hooks`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
     *
     * @tags repos
     * @name ReposGetWebhook
     * @summary Get a repository webhook
     * @request GET:/repos/{owner}/{repo}/hooks/{hook_id}
     */
    reposGetWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<Hook, BasicError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
     *
     * @tags repos
     * @name ReposUpdateWebhook
     * @summary Update a repository webhook
     * @request PATCH:/repos/{owner}/{repo}/hooks/{hook_id}
     */
    reposUpdateWebhook: (
      owner: string,
      repo: string,
      hookId: number,
      data: {
        /** Configuration object of the webhook */
        config?: WebhookConfig;
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
         * @default ["push"]
         */
        events?: string[];
        /** Determines a list of events to be added to the list of events that the Hook triggers for. */
        add_events?: string[];
        /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
        remove_events?: string[];
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Hook, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a webhook for an organization. The authenticated user must be a repository owner, or have admin access in the repository, to delete the webhook.
     *
     * @tags repos
     * @name ReposDeleteWebhook
     * @summary Delete a repository webhook
     * @request DELETE:/repos/{owner}/{repo}/hooks/{hook_id}
     */
    reposDeleteWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)." OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposGetWebhookConfigForRepo
     * @summary Get a webhook configuration for a repository
     * @request GET:/repos/{owner}/{repo}/hooks/{hook_id}/config
     */
    reposGetWebhookConfigForRepo: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<WebhookConfig, any>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/config`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)." OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposUpdateWebhookConfigForRepo
     * @summary Update a webhook configuration for a repository
     * @request PATCH:/repos/{owner}/{repo}/hooks/{hook_id}/config
     */
    reposUpdateWebhookConfigForRepo: (
      owner: string,
      repo: string,
      hookId: number,
      data?: {
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        content_type?: WebhookConfigContentType;
        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfig, any>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/config`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a list of webhook deliveries for a webhook configured in a repository.
     *
     * @tags repos
     * @name ReposListWebhookDeliveries
     * @summary List deliveries for a repository webhook
     * @request GET:/repos/{owner}/{repo}/hooks/{hook_id}/deliveries
     */
    reposListWebhookDeliveries: (
      owner: string,
      repo: string,
      hookId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        cursor?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<HookDeliveryItem[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/deliveries`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a delivery for a webhook configured in a repository.
     *
     * @tags repos
     * @name ReposGetWebhookDelivery
     * @summary Get a delivery for a repository webhook
     * @request GET:/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}
     */
    reposGetWebhookDelivery: (
      owner: string,
      repo: string,
      hookId: number,
      deliveryId: number,
      params: RequestParams = {},
    ) =>
      this.request<HookDelivery, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Redeliver a webhook delivery for a webhook configured in a repository.
     *
     * @tags repos
     * @name ReposRedeliverWebhookDelivery
     * @summary Redeliver a delivery for a repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
     */
    reposRedeliverWebhookDelivery: (
      owner: string,
      repo: string,
      hookId: number,
      deliveryId: number,
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}/attempts`,
        method: "POST",
        ...params,
      }),

    /**
     * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
     *
     * @tags repos
     * @name ReposPingWebhook
     * @summary Ping a repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks/{hook_id}/pings
     */
    reposPingWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/pings`,
        method: "POST",
        ...params,
      }),

    /**
     * @description This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated. > [!NOTE] > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
     *
     * @tags repos
     * @name ReposTestPushWebhook
     * @summary Test the push repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks/{hook_id}/tests
     */
    reposTestPushWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/hooks/${hookId}/tests`,
        method: "POST",
        ...params,
      }),

    /**
     * @description View the progress of an import. > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation). **Import status** This section includes details about the possible values of the `status` field of the Import Progress response. An import that does not have errors will progress through these steps: *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL. *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import). *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects". *   `complete` - the import is complete, and the repository is ready on GitHub. If there are problems, you will see one of these in the `status` field: *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information. *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL. *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. **The project_choices field** When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type. **Git LFS related fields** This section includes details about Git LFS related fields that may be present in the Import Progress response. *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken. *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step. *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository. *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
     *
     * @tags migrations
     * @name MigrationsGetImportStatus
     * @summary Get an import status
     * @request GET:/repos/{owner}/{repo}/import
     * @deprecated
     */
    migrationsGetImportStatus: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Import, BasicError>({
        path: `/repos/${owner}/${repo}/import`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response. > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsStartImport
     * @summary Start an import
     * @request PUT:/repos/{owner}/{repo}/import
     * @deprecated
     */
    migrationsStartImport: (
      owner: string,
      repo: string,
      data: {
        /** The URL of the originating repository. */
        vcs_url: string;
        /** The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */
        vcs?: "subversion" | "git" | "mercurial" | "tfvc";
        /** If authentication is required, the username to provide to `vcs_url`. */
        vcs_username?: string;
        /** If authentication is required, the password to provide to `vcs_url`. */
        vcs_password?: string;
        /** For a tfvc import, the name of the project that is being imported. */
        tfvc_project?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Import, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/import`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted. Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array. You can select the project to import by providing one of the objects in the `project_choices` array in the update request. > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsUpdateImport
     * @summary Update an import
     * @request PATCH:/repos/{owner}/{repo}/import
     * @deprecated
     */
    migrationsUpdateImport: (
      owner: string,
      repo: string,
      data?: {
        /** The username to provide to the originating repository. */
        vcs_username?: string;
        /** The password to provide to the originating repository. */
        vcs_password?: string;
        /**
         * The type of version control system you are migrating from.
         * @example ""git""
         */
        vcs?: "subversion" | "tfvc" | "git" | "mercurial";
        /**
         * For a tfvc import, the name of the project that is being imported.
         * @example ""project1""
         */
        tfvc_project?: string;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<Import, BasicError>({
        path: `/repos/${owner}/${repo}/import`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Stop an import for a repository. > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsCancelImport
     * @summary Cancel an import
     * @request DELETE:/repos/{owner}/{repo}/import
     * @deprecated
     */
    migrationsCancelImport: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/import`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`. This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information. > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsGetCommitAuthors
     * @summary Get commit authors
     * @request GET:/repos/{owner}/{repo}/import/authors
     * @deprecated
     */
    migrationsGetCommitAuthors: (
      owner: string,
      repo: string,
      query?: {
        /** A user ID. Only return users with an ID greater than this ID. */
        since?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PorterAuthor[], BasicError>({
        path: `/repos/${owner}/${repo}/import/authors`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository. > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsMapCommitAuthor
     * @summary Map a commit author
     * @request PATCH:/repos/{owner}/{repo}/import/authors/{author_id}
     * @deprecated
     */
    migrationsMapCommitAuthor: (
      owner: string,
      repo: string,
      authorId: number,
      data?: {
        /** The new Git author email. */
        email?: string;
        /** The new Git author name. */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PorterAuthor, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/import/authors/${authorId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List files larger than 100MB found during the import > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsGetLargeFiles
     * @summary Get large files
     * @request GET:/repos/{owner}/{repo}/import/large_files
     * @deprecated
     */
    migrationsGetLargeFiles: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PorterLargeFile[], BasicError>({
        path: `/repos/${owner}/${repo}/import/large_files`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files). > [!WARNING] > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     *
     * @tags migrations
     * @name MigrationsSetLfsPreference
     * @summary Update Git LFS preference
     * @request PATCH:/repos/{owner}/{repo}/import/lfs
     * @deprecated
     */
    migrationsSetLfsPreference: (
      owner: string,
      repo: string,
      data: {
        /** Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import. */
        use_lfs: "opt_in" | "opt_out";
      },
      params: RequestParams = {},
    ) =>
      this.request<Import, ValidationError | BasicError>({
        path: `/repos/${owner}/${repo}/import/lfs`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetRepoInstallation
     * @summary Get a repository installation for the authenticated app
     * @request GET:/repos/{owner}/{repo}/installation
     */
    appsGetRepoInstallation: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Installation, BasicError>({
        path: `/repos/${owner}/${repo}/installation`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     *
     * @tags interactions
     * @name InteractionsGetRestrictionsForRepo
     * @summary Get interaction restrictions for a repository
     * @request GET:/repos/{owner}/{repo}/interaction-limits
     */
    interactionsGetRestrictionsForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse | object, any>({
        path: `/repos/${owner}/${repo}/interaction-limits`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     *
     * @tags interactions
     * @name InteractionsSetRestrictionsForRepo
     * @summary Set interaction restrictions for a repository
     * @request PUT:/repos/{owner}/{repo}/interaction-limits
     */
    interactionsSetRestrictionsForRepo: (
      owner: string,
      repo: string,
      data: InteractionLimit,
      params: RequestParams = {},
    ) =>
      this.request<InteractionLimitResponse, void>({
        path: `/repos/${owner}/${repo}/interaction-limits`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     *
     * @tags interactions
     * @name InteractionsRemoveRestrictionsForRepo
     * @summary Remove interaction restrictions for a repository
     * @request DELETE:/repos/{owner}/{repo}/interaction-limits
     */
    interactionsRemoveRestrictionsForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/repos/${owner}/${repo}/interaction-limits`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     *
     * @tags repos
     * @name ReposListInvitations
     * @summary List repository invitations
     * @request GET:/repos/{owner}/{repo}/invitations
     */
    reposListInvitations: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation[], any>({
        path: `/repos/${owner}/${repo}/invitations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposUpdateInvitation
     * @summary Update a repository invitation
     * @request PATCH:/repos/{owner}/{repo}/invitations/{invitation_id}
     */
    reposUpdateInvitation: (
      owner: string,
      repo: string,
      invitationId: number,
      data?: {
        /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
        permissions?: "read" | "write" | "maintain" | "triage" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation, any>({
        path: `/repos/${owner}/${repo}/invitations/${invitationId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteInvitation
     * @summary Delete a repository invitation
     * @request DELETE:/repos/{owner}/{repo}/invitations/{invitation_id}
     */
    reposDeleteInvitation: (owner: string, repo: string, invitationId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/invitations/${invitationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List issues in a repository. Only open issues will be listed. > [!NOTE] > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesListForRepo
     * @summary List repository issues
     * @request GET:/repos/{owner}/{repo}/issues
     */
    issuesListForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
        milestone?: string;
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
        assignee?: string;
        /** Can be the name of an issue type. If the string `*` is passed, issues with any type are accepted. If the string `none` is passed, issues without type are returned. */
        type?: string;
        /** The user that created the issue. */
        creator?: string;
        /** A user that's mentioned in the issue. */
        mentioned?: string;
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesCreate
     * @summary Create an issue
     * @request POST:/repos/{owner}/{repo}/issues
     */
    issuesCreate: (
      owner: string,
      repo: string,
      data: {
        /** The title of the issue. */
        title: string | number;
        /** The contents of the issue. */
        body?: string;
        /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_ */
        assignee?: string | null;
        /** The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._ */
        milestone?: string | number | null;
        /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
        labels?: (
          | string
          | {
              id?: number;
              name?: string;
              description?: string | null;
              color?: string | null;
            }
        )[];
        /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
        assignees?: string[];
        /**
         * The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._
         * @example "Epic"
         */
        type?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Issue,
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/issues`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request. By default, issue comments are ordered by ascending ID. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesListCommentsForRepo
     * @summary List issue comments for a repository
     * @request GET:/repos/{owner}/{repo}/issues/comments
     */
    issuesListCommentsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesGetComment
     * @summary Get an issue comment
     * @request GET:/repos/{owner}/{repo}/issues/comments/{comment_id}
     */
    issuesGetComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<IssueComment, BasicError>({
        path: `/repos/${owner}/${repo}/issues/comments/${commentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesUpdateComment
     * @summary Update an issue comment
     * @request PATCH:/repos/{owner}/{repo}/issues/comments/{comment_id}
     */
    issuesUpdateComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The contents of the comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment, ValidationError>({
        path: `/repos/${owner}/${repo}/issues/comments/${commentId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
     *
     * @tags issues
     * @name IssuesDeleteComment
     * @summary Delete an issue comment
     * @request DELETE:/repos/{owner}/{repo}/issues/comments/{comment_id}
     */
    issuesDeleteComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/issues/comments/${commentId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
     *
     * @tags reactions
     * @name ReactionsListForIssueComment
     * @summary List reactions for an issue comment
     * @request GET:/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     */
    reactionsListForIssueComment: (
      owner: string,
      repo: string,
      commentId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
     *
     * @tags reactions
     * @name ReactionsCreateForIssueComment
     * @summary Create reaction for an issue comment
     * @request POST:/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     */
    reactionsCreateForIssueComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, ValidationError>({
        path: `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`. Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
     *
     * @tags reactions
     * @name ReactionsDeleteForIssueComment
     * @summary Delete an issue comment reaction
     * @request DELETE:/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
     */
    reactionsDeleteForIssueComment: (
      owner: string,
      repo: string,
      commentId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists events for a repository.
     *
     * @tags issues
     * @name IssuesListEventsForRepo
     * @summary List issue events for a repository
     * @request GET:/repos/{owner}/{repo}/issues/events
     */
    issuesListEventsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueEvent[], ValidationError>({
        path: `/repos/${owner}/${repo}/issues/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single event by the event id.
     *
     * @tags issues
     * @name IssuesGetEvent
     * @summary Get an issue event
     * @request GET:/repos/{owner}/{repo}/issues/events/{event_id}
     */
    issuesGetEvent: (owner: string, repo: string, eventId: number, params: RequestParams = {}) =>
      this.request<IssueEvent, BasicError>({
        path: `/repos/${owner}/${repo}/issues/events/${eventId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook. > [!NOTE] > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesGet
     * @summary Get an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}
     */
    issuesGet: (owner: string, repo: string, issueNumber: number, params: RequestParams = {}) =>
      this.request<Issue, BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Issue owners and users with push access or Triage role can edit an issue. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesUpdate
     * @summary Update an issue
     * @request PATCH:/repos/{owner}/{repo}/issues/{issue_number}
     */
    issuesUpdate: (
      owner: string,
      repo: string,
      issueNumber: number,
      data?: {
        /** The title of the issue. */
        title?: string | number | null;
        /** The contents of the issue. */
        body?: string | null;
        /** Username to assign to this issue. **This field is closing down.** */
        assignee?: string | null;
        /** The open or closed state of the issue. */
        state?: "open" | "closed";
        /**
         * The reason for the state change. Ignored unless `state` is changed.
         * @example "not_planned"
         */
        state_reason?: "completed" | "not_planned" | "reopened" | null;
        /** The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped. */
        milestone?: string | number | null;
        /** Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. */
        labels?: (
          | string
          | {
              id?: number;
              name?: string;
              description?: string | null;
              color?: string | null;
            }
        )[];
        /** Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. */
        assignees?: string[];
        /**
         * The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.
         * @example "Epic"
         */
        type?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Issue,
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     *
     * @tags issues
     * @name IssuesAddAssignees
     * @summary Add assignees to an issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/assignees
     */
    issuesAddAssignees: (
      owner: string,
      repo: string,
      issueNumber: number,
      data?: {
        /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
        assignees?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue, any>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/assignees`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes one or more assignees from an issue.
     *
     * @tags issues
     * @name IssuesRemoveAssignees
     * @summary Remove assignees from an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/assignees
     */
    issuesRemoveAssignees: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
        assignees?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue, any>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/assignees`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks if a user has permission to be assigned to a specific issue. If the `assignee` can be assigned to this issue, a `204` status code with no content is returned. Otherwise a `404` status code is returned.
     *
     * @tags issues
     * @name IssuesCheckUserCanBeAssignedToIssue
     * @summary Check if a user can be assigned to a issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}
     */
    issuesCheckUserCanBeAssignedToIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      assignee: string,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/assignees/${assignee}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request. Issue comments are ordered by ascending ID. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesListComments
     * @summary List issue comments
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/comments
     */
    issuesListComments: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesCreateComment
     * @summary Create an issue comment
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/comments
     */
    issuesCreateComment: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The contents of the comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/comments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all events for an issue.
     *
     * @tags issues
     * @name IssuesListEvents
     * @summary List issue events
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/events
     */
    issuesListEvents: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueEventForIssue[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all labels for an issue.
     *
     * @tags issues
     * @name IssuesListLabelsOnIssue
     * @summary List labels for an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesListLabelsOnIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/labels`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue.
     *
     * @tags issues
     * @name IssuesAddLabels
     * @summary Add labels to an issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesAddLabels: (
      owner: string,
      repo: string,
      issueNumber: number,
      data?:
        | {
            /**
             * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
             * @minItems 1
             */
            labels?: string[];
          }
        | string[]
        | {
            /** @minItems 1 */
            labels?: {
              name: string;
            }[];
          }
        | {
            name: string;
          }[]
        | string,
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/labels`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes any previous labels and sets the new labels for an issue.
     *
     * @tags issues
     * @name IssuesSetLabels
     * @summary Set labels for an issue
     * @request PUT:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesSetLabels: (
      owner: string,
      repo: string,
      issueNumber: number,
      data?:
        | {
            /**
             * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
             * @minItems 1
             */
            labels?: string[];
          }
        | string[]
        | {
            /** @minItems 1 */
            labels?: {
              name: string;
            }[];
          }
        | {
            name: string;
          }[]
        | string,
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/labels`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes all labels from an issue.
     *
     * @tags issues
     * @name IssuesRemoveAllLabels
     * @summary Remove all labels from an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesRemoveAllLabels: (owner: string, repo: string, issueNumber: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/labels`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
     *
     * @tags issues
     * @name IssuesRemoveLabel
     * @summary Remove a label from an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
     */
    issuesRemoveLabel: (owner: string, repo: string, issueNumber: number, name: string, params: RequestParams = {}) =>
      this.request<Label[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/labels/${name}`,
        method: "DELETE",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access can lock an issue or pull request's conversation. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     *
     * @tags issues
     * @name IssuesLock
     * @summary Lock an issue
     * @request PUT:/repos/{owner}/{repo}/issues/{issue_number}/lock
     */
    issuesLock: (
      owner: string,
      repo: string,
      issueNumber: number,
      data?: {
        /**
         * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
         *  * `off-topic`
         *  * `too heated`
         *  * `resolved`
         *  * `spam`
         */
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/lock`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Users with push access can unlock an issue's conversation.
     *
     * @tags issues
     * @name IssuesUnlock
     * @summary Unlock an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/lock
     */
    issuesUnlock: (owner: string, repo: string, issueNumber: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/lock`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
     *
     * @tags reactions
     * @name ReactionsListForIssue
     * @summary List reactions for an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/reactions
     */
    reactionsListForIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue.
     *
     * @tags reactions
     * @name ReactionsCreateForIssue
     * @summary Create reaction for an issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/reactions
     */
    reactionsCreateForIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, ValidationError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`. Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
     *
     * @tags reactions
     * @name ReactionsDeleteForIssue
     * @summary Delete an issue reaction
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
     */
    reactionsDeleteForIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description You can use the REST API to remove a sub-issue from an issue. Removing content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass a specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesRemoveSubIssue
     * @summary Remove sub-issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/sub_issue
     */
    issuesRemoveSubIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The id of the sub-issue to remove */
        sub_issue_id: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue, BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issue`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to list the sub-issues on an issue. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesListSubIssues
     * @summary List sub-issues
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/sub_issues
     */
    issuesListSubIssues: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to add sub-issues to issues. Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesAddSubIssue
     * @summary Add sub-issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/sub_issues
     */
    issuesAddSubIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The id of the sub-issue to add. The sub-issue must belong to the same repository owner as the parent issue */
        sub_issue_id: number;
        /** Option that, when true, instructs the operation to replace the sub-issues current parent issue */
        replace_parent?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description You can use the REST API to reprioritize a sub-issue to a different position in the parent list.
     *
     * @tags issues
     * @name IssuesReprioritizeSubIssue
     * @summary Reprioritize sub-issue
     * @request PATCH:/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority
     */
    issuesReprioritizeSubIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The id of the sub-issue to reprioritize */
        sub_issue_id: number;
        /** The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified). */
        after_id?: number;
        /** The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified). */
        before_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Issue,
        | BasicError
        | ValidationErrorSimple
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues/priority`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List all timeline events for an issue.
     *
     * @tags issues
     * @name IssuesListEventsForTimeline
     * @summary List timeline events for an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/timeline
     */
    issuesListEventsForTimeline: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TimelineIssueEvents[], BasicError>({
        path: `/repos/${owner}/${repo}/issues/${issueNumber}/timeline`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListDeployKeys
     * @summary List deploy keys
     * @request GET:/repos/{owner}/{repo}/keys
     */
    reposListDeployKeys: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeployKey[], any>({
        path: `/repos/${owner}/${repo}/keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can create a read-only deploy key.
     *
     * @tags repos
     * @name ReposCreateDeployKey
     * @summary Create a deploy key
     * @request POST:/repos/{owner}/{repo}/keys
     */
    reposCreateDeployKey: (
      owner: string,
      repo: string,
      data: {
        /** A name for the key. */
        title?: string;
        /** The contents of the key. */
        key: string;
        /**
         * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
         *
         * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
         */
        read_only?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeployKey, ValidationError>({
        path: `/repos/${owner}/${repo}/keys`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetDeployKey
     * @summary Get a deploy key
     * @request GET:/repos/{owner}/{repo}/keys/{key_id}
     */
    reposGetDeployKey: (owner: string, repo: string, keyId: number, params: RequestParams = {}) =>
      this.request<DeployKey, BasicError>({
        path: `/repos/${owner}/${repo}/keys/${keyId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     *
     * @tags repos
     * @name ReposDeleteDeployKey
     * @summary Delete a deploy key
     * @request DELETE:/repos/{owner}/{repo}/keys/{key_id}
     */
    reposDeleteDeployKey: (owner: string, repo: string, keyId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/keys/${keyId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all labels for a repository.
     *
     * @tags issues
     * @name IssuesListLabelsForRepo
     * @summary List labels for a repository
     * @request GET:/repos/{owner}/{repo}/labels
     */
    issuesListLabelsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError>({
        path: `/repos/${owner}/${repo}/labels`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
     *
     * @tags issues
     * @name IssuesCreateLabel
     * @summary Create a label
     * @request POST:/repos/{owner}/{repo}/labels
     */
    issuesCreateLabel: (
      owner: string,
      repo: string,
      data: {
        /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
        name: string;
        /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
        color?: string;
        /** A short description of the label. Must be 100 characters or fewer. */
        description?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/labels`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a label using the given name.
     *
     * @tags issues
     * @name IssuesGetLabel
     * @summary Get a label
     * @request GET:/repos/{owner}/{repo}/labels/{name}
     */
    issuesGetLabel: (owner: string, repo: string, name: string, params: RequestParams = {}) =>
      this.request<Label, BasicError>({
        path: `/repos/${owner}/${repo}/labels/${name}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a label using the given label name.
     *
     * @tags issues
     * @name IssuesUpdateLabel
     * @summary Update a label
     * @request PATCH:/repos/{owner}/{repo}/labels/{name}
     */
    issuesUpdateLabel: (
      owner: string,
      repo: string,
      name: string,
      data?: {
        /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
        new_name?: string;
        /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
        color?: string;
        /** A short description of the label. Must be 100 characters or fewer. */
        description?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label, any>({
        path: `/repos/${owner}/${repo}/labels/${name}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a label using the given label name.
     *
     * @tags issues
     * @name IssuesDeleteLabel
     * @summary Delete a label
     * @request DELETE:/repos/{owner}/{repo}/labels/{name}
     */
    issuesDeleteLabel: (owner: string, repo: string, name: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/labels/${name}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     *
     * @tags repos
     * @name ReposListLanguages
     * @summary List repository languages
     * @request GET:/repos/{owner}/{repo}/languages
     */
    reposListLanguages: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Language, any>({
        path: `/repos/${owner}/${repo}/languages`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This method returns the contents of the repository's license file, if one is detected. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw contents of the license. - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
     *
     * @tags licenses
     * @name LicensesGetForRepo
     * @summary Get the license for a repository
     * @request GET:/repos/{owner}/{repo}/license
     */
    licensesGetForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        ref?: CodeScanningRef;
      },
      params: RequestParams = {},
    ) =>
      this.request<LicenseContent, BasicError>({
        path: `/repos/${owner}/${repo}/license`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
     *
     * @tags repos
     * @name ReposMergeUpstream
     * @summary Sync a fork branch with the upstream repository
     * @request POST:/repos/{owner}/{repo}/merge-upstream
     */
    reposMergeUpstream: (
      owner: string,
      repo: string,
      data: {
        /** The name of the branch which should be updated to match upstream. */
        branch: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<MergedUpstream, void>({
        path: `/repos/${owner}/${repo}/merge-upstream`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposMerge
     * @summary Merge a branch
     * @request POST:/repos/{owner}/{repo}/merges
     */
    reposMerge: (
      owner: string,
      repo: string,
      data: {
        /** The name of the base branch that the head will be merged into. */
        base: string;
        /** The head to merge. This can be a branch name or a commit SHA1. */
        head: string;
        /** Commit message to use for the merge commit. If omitted, a default message will be used. */
        commit_message?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Commit, BasicError | void | ValidationError>({
        path: `/repos/${owner}/${repo}/merges`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists milestones for a repository.
     *
     * @tags issues
     * @name IssuesListMilestones
     * @summary List milestones
     * @request GET:/repos/{owner}/{repo}/milestones
     */
    issuesListMilestones: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The state of the milestone. Either `open`, `closed`, or `all`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * What to sort results by. Either `due_on` or `completeness`.
         * @default "due_on"
         */
        sort?: "due_on" | "completeness";
        /**
         * The direction of the sort. Either `asc` or `desc`.
         * @default "asc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Milestone[], BasicError>({
        path: `/repos/${owner}/${repo}/milestones`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a milestone.
     *
     * @tags issues
     * @name IssuesCreateMilestone
     * @summary Create a milestone
     * @request POST:/repos/{owner}/{repo}/milestones
     */
    issuesCreateMilestone: (
      owner: string,
      repo: string,
      data: {
        /** The title of the milestone. */
        title: string;
        /**
         * The state of the milestone. Either `open` or `closed`.
         * @default "open"
         */
        state?: "open" | "closed";
        /** A description of the milestone. */
        description?: string;
        /**
         * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        due_on?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Milestone, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/milestones`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a milestone using the given milestone number.
     *
     * @tags issues
     * @name IssuesGetMilestone
     * @summary Get a milestone
     * @request GET:/repos/{owner}/{repo}/milestones/{milestone_number}
     */
    issuesGetMilestone: (owner: string, repo: string, milestoneNumber: number, params: RequestParams = {}) =>
      this.request<Milestone, BasicError>({
        path: `/repos/${owner}/${repo}/milestones/${milestoneNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesUpdateMilestone
     * @summary Update a milestone
     * @request PATCH:/repos/{owner}/{repo}/milestones/{milestone_number}
     */
    issuesUpdateMilestone: (
      owner: string,
      repo: string,
      milestoneNumber: number,
      data?: {
        /** The title of the milestone. */
        title?: string;
        /**
         * The state of the milestone. Either `open` or `closed`.
         * @default "open"
         */
        state?: "open" | "closed";
        /** A description of the milestone. */
        description?: string;
        /**
         * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        due_on?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Milestone, any>({
        path: `/repos/${owner}/${repo}/milestones/${milestoneNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a milestone using the given milestone number.
     *
     * @tags issues
     * @name IssuesDeleteMilestone
     * @summary Delete a milestone
     * @request DELETE:/repos/{owner}/{repo}/milestones/{milestone_number}
     */
    issuesDeleteMilestone: (owner: string, repo: string, milestoneNumber: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/milestones/${milestoneNumber}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists labels for issues in a milestone.
     *
     * @tags issues
     * @name IssuesListLabelsForMilestone
     * @summary List labels for issues in a milestone
     * @request GET:/repos/{owner}/{repo}/milestones/{milestone_number}/labels
     */
    issuesListLabelsForMilestone: (
      owner: string,
      repo: string,
      milestoneNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], any>({
        path: `/repos/${owner}/${repo}/milestones/${milestoneNumber}/labels`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all notifications for the current user in the specified repository.
     *
     * @tags activity
     * @name ActivityListRepoNotificationsForAuthenticatedUser
     * @summary List repository notifications for the authenticated user
     * @request GET:/repos/{owner}/{repo}/notifications
     */
    activityListRepoNotificationsForAuthenticatedUser: (
      owner: string,
      repo: string,
      query?: {
        /**
         * If `true`, show notifications marked as read.
         * @default false
         */
        all?: boolean;
        /**
         * If `true`, only shows notifications in which the user is directly participating or mentioned.
         * @default false
         */
        participating?: boolean;
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        before?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Thread[], any>({
        path: `/repos/${owner}/${repo}/notifications`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     *
     * @tags activity
     * @name ActivityMarkRepoNotificationsAsRead
     * @summary Mark repository notifications as read
     * @request PUT:/repos/{owner}/{repo}/notifications
     */
    activityMarkRepoNotificationsAsRead: (
      owner: string,
      repo: string,
      data?: {
        /**
         * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
         * @format date-time
         */
        last_read_at?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          message?: string;
          url?: string;
        },
        any
      >({
        path: `/repos/${owner}/${repo}/notifications`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a GitHub Pages site. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposGetPages
     * @summary Get a GitHub Pages site
     * @request GET:/repos/{owner}/{repo}/pages
     */
    reposGetPages: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Page, BasicError>({
        path: `/repos/${owner}/${repo}/pages`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposCreatePagesSite
     * @summary Create a GitHub Pages site
     * @request POST:/repos/{owner}/{repo}/pages
     */
    reposCreatePagesSite: (
      owner: string,
      repo: string,
      data: null &
        ({
          /** The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`. */
          build_type?: "legacy" | "workflow";
          /** The source branch and directory used to publish your Pages site. */
          source?: {
            /** The repository branch used to publish your site's source files. */
            branch: string;
            /**
             * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
             * @default "/"
             */
            path?: "/" | "/docs";
          };
        } | null),
      params: RequestParams = {},
    ) =>
      this.request<Page, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pages`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposUpdateInformationAboutPagesSite
     * @summary Update information about a GitHub Pages site
     * @request PUT:/repos/{owner}/{repo}/pages
     */
    reposUpdateInformationAboutPagesSite: (
      owner: string,
      repo: string,
      data: {
        /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site)." */
        cname?: string | null;
        /** Specify whether HTTPS should be enforced for the repository. */
        https_enforced?: boolean;
        /** The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch. */
        build_type?: "legacy" | "workflow";
        /** Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`. */
        source?:
          | "gh-pages"
          | "master"
          | "master /docs"
          | {
              /** The repository branch used to publish your site's source files. */
              branch: string;
              /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */
              path: "/" | "/docs";
            };
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pages`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposDeletePagesSite
     * @summary Delete a GitHub Pages site
     * @request DELETE:/repos/{owner}/{repo}/pages
     */
    reposDeletePagesSite: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pages`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists builts of a GitHub Pages site. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposListPagesBuilds
     * @summary List GitHub Pages builds
     * @request GET:/repos/{owner}/{repo}/pages/builds
     */
    reposListPagesBuilds: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PageBuild[], any>({
        path: `/repos/${owner}/${repo}/pages/builds`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures. Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     *
     * @tags repos
     * @name ReposRequestPagesBuild
     * @summary Request a GitHub Pages build
     * @request POST:/repos/{owner}/{repo}/pages/builds
     */
    reposRequestPagesBuild: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PageBuildStatus, any>({
        path: `/repos/${owner}/${repo}/pages/builds`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about the single most recent build of a GitHub Pages site. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposGetLatestPagesBuild
     * @summary Get latest Pages build
     * @request GET:/repos/{owner}/{repo}/pages/builds/latest
     */
    reposGetLatestPagesBuild: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PageBuild, any>({
        path: `/repos/${owner}/${repo}/pages/builds/latest`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a GitHub Pages build. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposGetPagesBuild
     * @summary Get GitHub Pages build
     * @request GET:/repos/{owner}/{repo}/pages/builds/{build_id}
     */
    reposGetPagesBuild: (owner: string, repo: string, buildId: number, params: RequestParams = {}) =>
      this.request<PageBuild, any>({
        path: `/repos/${owner}/${repo}/pages/builds/${buildId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Create a GitHub Pages deployment for a repository. The authenticated user must have write permission to the repository.
     *
     * @tags repos
     * @name ReposCreatePagesDeployment
     * @summary Create a GitHub Pages deployment
     * @request POST:/repos/{owner}/{repo}/pages/deployments
     */
    reposCreatePagesDeployment: (
      owner: string,
      repo: string,
      data: {
        /** The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required. */
        artifact_id?: number;
        /** The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required. */
        artifact_url?: string;
        /**
         * The target environment for this GitHub Pages deployment.
         * @default "github-pages"
         */
        environment?: string;
        /**
         * A unique string that represents the version of the build for this deployment.
         * @default "GITHUB_SHA"
         */
        pages_build_version: string;
        /** The OIDC token issued by GitHub Actions certifying the origin of the deployment. */
        oidc_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PageDeployment, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pages/deployments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the current status of a GitHub Pages deployment. The authenticated user must have read permission for the GitHub Pages site.
     *
     * @tags repos
     * @name ReposGetPagesDeployment
     * @summary Get the status of a GitHub Pages deployment
     * @request GET:/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}
     */
    reposGetPagesDeployment: (
      owner: string,
      repo: string,
      pagesDeploymentId: number | string,
      params: RequestParams = {},
    ) =>
      this.request<PagesDeploymentStatus, BasicError>({
        path: `/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Cancels a GitHub Pages deployment. The authenticated user must have write permissions for the GitHub Pages site.
     *
     * @tags repos
     * @name ReposCancelPagesDeployment
     * @summary Cancel a GitHub Pages deployment
     * @request POST:/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel
     */
    reposCancelPagesDeployment: (
      owner: string,
      repo: string,
      pagesDeploymentId: number | string,
      params: RequestParams = {},
    ) =>
      this.request<any, BasicError>({
        path: `/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}/cancel`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages. The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response. The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags repos
     * @name ReposGetPagesHealthCheck
     * @summary Get a DNS health check for GitHub Pages
     * @request GET:/repos/{owner}/{repo}/pages/health
     */
    reposGetPagesHealthCheck: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PagesHealthCheck, void | BasicError>({
        path: `/repos/${owner}/${repo}/pages/health`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
     *
     * @tags repos
     * @name ReposCheckPrivateVulnerabilityReporting
     * @summary Check if private vulnerability reporting is enabled for a repository
     * @request GET:/repos/{owner}/{repo}/private-vulnerability-reporting
     */
    reposCheckPrivateVulnerabilityReporting: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        {
          /** Whether or not private vulnerability reporting is enabled for the repository. */
          enabled: boolean;
        },
        BasicError
      >({
        path: `/repos/${owner}/${repo}/private-vulnerability-reporting`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
     *
     * @tags repos
     * @name ReposEnablePrivateVulnerabilityReporting
     * @summary Enable private vulnerability reporting for a repository
     * @request PUT:/repos/{owner}/{repo}/private-vulnerability-reporting
     */
    reposEnablePrivateVulnerabilityReporting: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<any, BasicError>({
        path: `/repos/${owner}/${repo}/private-vulnerability-reporting`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
     *
     * @tags repos
     * @name ReposDisablePrivateVulnerabilityReporting
     * @summary Disable private vulnerability reporting for a repository
     * @request DELETE:/repos/{owner}/{repo}/private-vulnerability-reporting
     */
    reposDisablePrivateVulnerabilityReporting: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<any, BasicError>({
        path: `/repos/${owner}/${repo}/private-vulnerability-reporting`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsListForRepo
     * @summary List repository projects
     * @request GET:/repos/{owner}/{repo}/projects
     * @deprecated
     */
    projectsListForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Indicates the state of the projects to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project[], BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/projects`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsCreateForRepo
     * @summary Create a repository project
     * @request POST:/repos/{owner}/{repo}/projects
     * @deprecated
     */
    projectsCreateForRepo: (
      owner: string,
      repo: string,
      data: {
        /** The name of the project. */
        name: string;
        /** The description of the project. */
        body?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/projects`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets all custom property values that are set for a repository. Users with read access to the repository can use this endpoint.
     *
     * @tags repos
     * @name ReposGetCustomPropertiesValues
     * @summary Get all custom property values for a repository
     * @request GET:/repos/{owner}/{repo}/properties/values
     */
    reposGetCustomPropertiesValues: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CustomPropertyValue[], BasicError>({
        path: `/repos/${owner}/${repo}/properties/values`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Create new or update existing custom property values for a repository. Using a value of `null` for a custom property will remove or 'unset' the property value from the repository. Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
     *
     * @tags repos
     * @name ReposCreateOrUpdateCustomPropertiesValues
     * @summary Create or update custom property values for a repository
     * @request PATCH:/repos/{owner}/{repo}/properties/values
     */
    reposCreateOrUpdateCustomPropertiesValues: (
      owner: string,
      repo: string,
      data: {
        /** A list of custom property names and associated values to apply to the repositories. */
        properties: CustomPropertyValue[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/properties/values`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists pull requests in a specified repository. Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsList
     * @summary List pull requests
     * @request GET:/repos/{owner}/{repo}/pulls
     */
    pullsList: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Either `open`, `closed`, or `all` to filter by state.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
        head?: string;
        /** Filter pulls by base branch name. Example: `gh-pages`. */
        base?: string;
        /**
         * What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
         * @default "created"
         */
        sort?: "created" | "updated" | "popularity" | "long-running";
        /** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestSimple[], ValidationError>({
        path: `/repos/${owner}/${repo}/pulls`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsCreate
     * @summary Create a pull request
     * @request POST:/repos/{owner}/{repo}/pulls
     */
    pullsCreate: (
      owner: string,
      repo: string,
      data: {
        /** The title of the new pull request. Required unless `issue` is specified. */
        title?: string;
        /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
        head: string;
        /**
         * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
         * @format repo.nwo
         * @example "octo-org/octo-repo"
         */
        head_repo?: string;
        /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
        base: string;
        /** The contents of the pull request. */
        body?: string;
        /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
        maintainer_can_modify?: boolean;
        /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
        draft?: boolean;
        /**
         * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
         * @format int64
         * @example 1
         */
        issue?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequest, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pulls`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsListReviewCommentsForRepo
     * @summary List review comments in a repository
     * @request GET:/repos/{owner}/{repo}/pulls/comments
     */
    pullsListReviewCommentsForRepo: (
      owner: string,
      repo: string,
      query?: {
        sort?: "created" | "updated" | "created_at";
        /** The direction to sort results. Ignored without `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment[], any>({
        path: `/repos/${owner}/${repo}/pulls/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides details for a specified review comment. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsGetReviewComment
     * @summary Get a review comment for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/comments/{comment_id}
     */
    pullsGetReviewComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<PullRequestReviewComment, BasicError>({
        path: `/repos/${owner}/${repo}/pulls/comments/${commentId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Edits the content of a specified review comment. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsUpdateReviewComment
     * @summary Update a review comment for a pull request
     * @request PATCH:/repos/{owner}/{repo}/pulls/comments/{comment_id}
     */
    pullsUpdateReviewComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The text of the reply to the review comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment, any>({
        path: `/repos/${owner}/${repo}/pulls/comments/${commentId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a review comment.
     *
     * @tags pulls
     * @name PullsDeleteReviewComment
     * @summary Delete a review comment for a pull request
     * @request DELETE:/repos/{owner}/{repo}/pulls/comments/{comment_id}
     */
    pullsDeleteReviewComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/pulls/comments/${commentId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
     *
     * @tags reactions
     * @name ReactionsListForPullRequestReviewComment
     * @summary List reactions for a pull request review comment
     * @request GET:/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     */
    reactionsListForPullRequestReviewComment: (
      owner: string,
      repo: string,
      commentId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], BasicError>({
        path: `/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
     *
     * @tags reactions
     * @name ReactionsCreateForPullRequestReviewComment
     * @summary Create reaction for a pull request review comment
     * @request POST:/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     */
    reactionsCreateForPullRequestReviewComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, ValidationError>({
        path: `/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.` Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
     *
     * @tags reactions
     * @name ReactionsDeleteForPullRequestComment
     * @summary Delete a pull request comment reaction
     * @request DELETE:/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
     */
    reactionsDeleteForPullRequestComment: (
      owner: string,
      repo: string,
      commentId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists details of a pull request by providing its number. When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)". The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit. The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request: *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit. *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch. *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to. Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`. - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
     *
     * @tags pulls
     * @name PullsGet
     * @summary Get a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}
     */
    pullsGet: (owner: string, repo: string, pullNumber: number, params: RequestParams = {}) =>
      this.request<
        PullRequest,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsUpdate
     * @summary Update a pull request
     * @request PATCH:/repos/{owner}/{repo}/pulls/{pull_number}
     */
    pullsUpdate: (
      owner: string,
      repo: string,
      pullNumber: number,
      data?: {
        /** The title of the pull request. */
        title?: string;
        /** The contents of the pull request. */
        body?: string;
        /** State of this Pull Request. Either `open` or `closed`. */
        state?: "open" | "closed";
        /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
        base?: string;
        /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
        maintainer_can_modify?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequest, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a codespace owned by the authenticated user for the specified pull request. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCreateWithPrForAuthenticatedUser
     * @summary Create a codespace from a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/codespaces
     */
    codespacesCreateWithPrForAuthenticatedUser: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
        location?: string;
        /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /** Machine type to use for this codespace */
        machine?: string;
        /** Path to devcontainer.json config to use for this codespace */
        devcontainer_path?: string;
        /** Whether to authorize requested permissions from devcontainer.json */
        multi_repo_permissions_opt_out?: boolean;
        /** Working directory for this codespace */
        working_directory?: string;
        /** Time in minutes before codespace stops from inactivity */
        idle_timeout_minutes?: number;
        /** Display name for this codespace */
        display_name?: string;
        /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
        retention_period_minutes?: number;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        Codespace,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/codespaces`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all review comments for a specified pull request. By default, review comments are in ascending order by ID. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsListReviewComments
     * @summary List review comments on a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/comments
     */
    pullsListReviewComments: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated";
        /** The direction to sort results. Ignored without `sort` parameter. */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment[], any>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)." If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request. The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsCreateReviewComment
     * @summary Create a review comment for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/comments
     */
    pullsCreateReviewComment: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** The text of the review comment. */
        body: string;
        /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
        commit_id: string;
        /** The relative path to the file that necessitates a comment. */
        path: string;
        /**
         * **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
         * @deprecated
         */
        position?: number;
        /** In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
        side?: "LEFT" | "RIGHT";
        /** **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
        line?: number;
        /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
        start_line?: number;
        /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
        start_side?: "LEFT" | "RIGHT" | "side";
        /**
         * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
         * @example 2
         */
        in_reply_to?: number;
        /** The level at which the comment is targeted. */
        subject_type?: "line" | "file";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/comments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsCreateReplyForReviewComment
     * @summary Create a reply for a review comment
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
     */
    pullsCreateReplyForReviewComment: (
      owner: string,
      repo: string,
      pullNumber: number,
      commentId: number,
      data: {
        /** The text of the review comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment, BasicError>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/comments/${commentId}/replies`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits) endpoint. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsListCommits
     * @summary List commits on a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/commits
     */
    pullsListCommits: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Commit[], any>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/commits`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the files in a specified pull request. > [!NOTE] > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsListFiles
     * @summary List pull requests files
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/files
     */
    pullsListFiles: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        DiffEntry[],
        | ValidationError
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/files`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
     *
     * @tags pulls
     * @name PullsCheckIfMerged
     * @summary Check if a pull request has been merged
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/merge
     */
    pullsCheckIfMerged: (owner: string, repo: string, pullNumber: number, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/merge`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Merges a pull request into the base branch. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
     *
     * @tags pulls
     * @name PullsMerge
     * @summary Merge a pull request
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/merge
     */
    pullsMerge: (
      owner: string,
      repo: string,
      pullNumber: number,
      data?: {
        /** Title for the automatic commit message. */
        commit_title?: string;
        /** Extra detail to append to automatic commit message. */
        commit_message?: string;
        /** SHA that pull request head must match to allow merge. */
        sha?: string;
        /** The merge method to use. */
        merge_method?: "merge" | "squash" | "rebase";
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        PullRequestMergeResult,
        | BasicError
        | {
            message?: string;
            documentation_url?: string;
          }
        | ValidationError
      >({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/merge`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
     *
     * @tags pulls
     * @name PullsListRequestedReviewers
     * @summary Get all requested reviewers for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     */
    pullsListRequestedReviewers: (owner: string, repo: string, pullNumber: number, params: RequestParams = {}) =>
      this.request<PullRequestReviewRequest, any>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Requests reviews for a pull request from a given set of users and/or teams. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
     *
     * @tags pulls
     * @name PullsRequestReviewers
     * @summary Request reviewers for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     */
    pullsRequestReviewers: (
      owner: string,
      repo: string,
      pullNumber: number,
      data?: {
        /** An array of user `login`s that will be requested. */
        reviewers?: string[];
        /** An array of team `slug`s that will be requested. */
        team_reviewers?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestSimple, BasicError | void>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes review requests from a pull request for a given set of users and/or teams.
     *
     * @tags pulls
     * @name PullsRemoveRequestedReviewers
     * @summary Remove requested reviewers from a pull request
     * @request DELETE:/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     */
    pullsRemoveRequestedReviewers: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** An array of user `login`s that will be removed. */
        reviewers: string[];
        /** An array of team `slug`s that will be removed. */
        team_reviewers?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestSimple, ValidationError>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all reviews for a specified pull request. The list of reviews returns in chronological order. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsListReviews
     * @summary List reviews for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/reviews
     */
    pullsListReviews: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview[], any>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a review on a specified pull request. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)." > [!NOTE] > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsCreateReview
     * @summary Create a review for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/reviews
     */
    pullsCreateReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      data?: {
        /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
        commit_id?: string;
        /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
        body?: string;
        /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready. */
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
        /** Use the following table to specify the location, destination, and contents of the draft review comment. */
        comments?: {
          /** The relative path to the file that necessitates a review comment. */
          path: string;
          /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. */
          position?: number;
          /** Text of the review comment. */
          body: string;
          /** @example 28 */
          line?: number;
          /** @example "RIGHT" */
          side?: string;
          /** @example 26 */
          start_line?: number;
          /** @example "LEFT" */
          start_side?: string;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieves a pull request review by its ID. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsGetReview
     * @summary Get a review for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     */
    pullsGetReview: (owner: string, repo: string, pullNumber: number, reviewId: number, params: RequestParams = {}) =>
      this.request<PullRequestReview, BasicError>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the contents of a specified review summary comment. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsUpdateReview
     * @summary Update a review for a pull request
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     */
    pullsUpdateReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      data: {
        /** The body text of the pull request review. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsDeletePendingReview
     * @summary Delete a pending review for a pull request
     * @request DELETE:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     */
    pullsDeletePendingReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`,
        method: "DELETE",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists comments for a specific pull request review. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsListCommentsForReview
     * @summary List comments for a pull request review
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
     */
    pullsListCommentsForReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReviewComment[], BasicError>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Dismisses a specified review on a pull request. > [!NOTE] > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsDismissReview
     * @summary Dismiss a review for a pull request
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
     */
    pullsDismissReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      data: {
        /** The message for the pull request review dismissal */
        message: string;
        /** @example ""DISMISS"" */
        event?: "DISMISS";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/dismissals`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)." This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags pulls
     * @name PullsSubmitReview
     * @summary Submit a review for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
     */
    pullsSubmitReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      data: {
        /** The body text of the pull request review */
        body?: string;
        /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/events`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
     *
     * @tags pulls
     * @name PullsUpdateBranch
     * @summary Update a pull request branch
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/update-branch
     */
    pullsUpdateBranch: (
      owner: string,
      repo: string,
      pullNumber: number,
      data?: {
        /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
        expected_head_sha?: string;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          message?: string;
          url?: string;
        },
        BasicError | ValidationError
      >({
        path: `/repos/${owner}/${repo}/pulls/${pullNumber}/update-branch`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the preferred README for a repository. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type. - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
     *
     * @tags repos
     * @name ReposGetReadme
     * @summary Get a repository README
     * @request GET:/repos/{owner}/{repo}/readme
     */
    reposGetReadme: (
      owner: string,
      repo: string,
      query?: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch. */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ContentFile, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/readme`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the README from a repository directory. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type. - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
     *
     * @tags repos
     * @name ReposGetReadmeInDirectory
     * @summary Get a repository README for a directory
     * @request GET:/repos/{owner}/{repo}/readme/{dir}
     */
    reposGetReadmeInDirectory: (
      owner: string,
      repo: string,
      dir: string,
      query?: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch. */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ContentFile, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/readme/${dir}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags). Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     *
     * @tags repos
     * @name ReposListReleases
     * @summary List releases
     * @request GET:/repos/{owner}/{repo}/releases
     */
    reposListReleases: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Release[], BasicError>({
        path: `/repos/${owner}/${repo}/releases`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can create a release. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
     *
     * @tags repos
     * @name ReposCreateRelease
     * @summary Create a release
     * @request POST:/repos/{owner}/{repo}/releases
     */
    reposCreateRelease: (
      owner: string,
      repo: string,
      data: {
        /** The name of the tag. */
        tag_name: string;
        /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch. */
        target_commitish?: string;
        /** The name of the release. */
        name?: string;
        /** Text describing the contents of the tag. */
        body?: string;
        /**
         * `true` to create a draft (unpublished) release, `false` to create a published one.
         * @default false
         */
        draft?: boolean;
        /**
         * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
         * @default false
         */
        prerelease?: boolean;
        /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)." */
        discussion_category_name?: string;
        /**
         * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
         * @default false
         */
        generate_release_notes?: boolean;
        /**
         * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
         * @default "true"
         */
        make_latest?: "true" | "false" | "legacy";
      },
      params: RequestParams = {},
    ) =>
      this.request<Release, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/releases`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description To download the asset's binary content: - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response. - Alternatively, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
     *
     * @tags repos
     * @name ReposGetReleaseAsset
     * @summary Get a release asset
     * @request GET:/repos/{owner}/{repo}/releases/assets/{asset_id}
     */
    reposGetReleaseAsset: (owner: string, repo: string, assetId: number, params: RequestParams = {}) =>
      this.request<ReleaseAsset, BasicError>({
        path: `/repos/${owner}/${repo}/releases/assets/${assetId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can edit a release asset.
     *
     * @tags repos
     * @name ReposUpdateReleaseAsset
     * @summary Update a release asset
     * @request PATCH:/repos/{owner}/{repo}/releases/assets/{asset_id}
     */
    reposUpdateReleaseAsset: (
      owner: string,
      repo: string,
      assetId: number,
      data?: {
        /** The file name of the asset. */
        name?: string;
        /** An alternate short description of the asset. Used in place of the filename. */
        label?: string;
        /** @example ""uploaded"" */
        state?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReleaseAsset, any>({
        path: `/repos/${owner}/${repo}/releases/assets/${assetId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteReleaseAsset
     * @summary Delete a release asset
     * @request DELETE:/repos/{owner}/{repo}/releases/assets/{asset_id}
     */
    reposDeleteReleaseAsset: (owner: string, repo: string, assetId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/releases/assets/${assetId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
     *
     * @tags repos
     * @name ReposGenerateReleaseNotes
     * @summary Generate release notes content for a release
     * @request POST:/repos/{owner}/{repo}/releases/generate-notes
     */
    reposGenerateReleaseNotes: (
      owner: string,
      repo: string,
      data: {
        /** The tag name for the release. This can be an existing tag or a new one. */
        tag_name: string;
        /** Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */
        target_commitish?: string;
        /** The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */
        previous_tag_name?: string;
        /** Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */
        configuration_file_path?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReleaseNotesContent, BasicError>({
        path: `/repos/${owner}/${repo}/releases/generate-notes`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description View the latest published full release for the repository. The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     *
     * @tags repos
     * @name ReposGetLatestRelease
     * @summary Get the latest release
     * @request GET:/repos/{owner}/{repo}/releases/latest
     */
    reposGetLatestRelease: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Release, any>({
        path: `/repos/${owner}/${repo}/releases/latest`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get a published release with the specified tag.
     *
     * @tags repos
     * @name ReposGetReleaseByTag
     * @summary Get a release by tag name
     * @request GET:/repos/{owner}/{repo}/releases/tags/{tag}
     */
    reposGetReleaseByTag: (owner: string, repo: string, tag: string, params: RequestParams = {}) =>
      this.request<Release, BasicError>({
        path: `/repos/${owner}/${repo}/releases/tags/${tag}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a public release with the specified release ID. > [!NOTE] > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
     *
     * @tags repos
     * @name ReposGetRelease
     * @summary Get a release
     * @request GET:/repos/{owner}/{repo}/releases/{release_id}
     */
    reposGetRelease: (owner: string, repo: string, releaseId: number, params: RequestParams = {}) =>
      this.request<Release, void>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can edit a release.
     *
     * @tags repos
     * @name ReposUpdateRelease
     * @summary Update a release
     * @request PATCH:/repos/{owner}/{repo}/releases/{release_id}
     */
    reposUpdateRelease: (
      owner: string,
      repo: string,
      releaseId: number,
      data?: {
        /** The name of the tag. */
        tag_name?: string;
        /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch. */
        target_commitish?: string;
        /** The name of the release. */
        name?: string;
        /** Text describing the contents of the tag. */
        body?: string;
        /** `true` makes the release a draft, and `false` publishes the release. */
        draft?: boolean;
        /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
        prerelease?: boolean;
        /**
         * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
         * @default true
         */
        make_latest?: "true" | "false" | "legacy";
        /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)." */
        discussion_category_name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Release, BasicError>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can delete a release.
     *
     * @tags repos
     * @name ReposDeleteRelease
     * @summary Delete a release
     * @request DELETE:/repos/{owner}/{repo}/releases/{release_id}
     */
    reposDeleteRelease: (owner: string, repo: string, releaseId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListReleaseAssets
     * @summary List release assets
     * @request GET:/repos/{owner}/{repo}/releases/{release_id}/assets
     */
    reposListReleaseAssets: (
      owner: string,
      repo: string,
      releaseId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReleaseAsset[], any>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}/assets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset. You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint. Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: `application/zip` GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset. When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted. **Notes:** *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)" endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api). *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     *
     * @tags repos
     * @name ReposUploadReleaseAsset
     * @summary Upload a release asset
     * @request POST:/repos/{owner}/{repo}/releases/{release_id}/assets
     */
    reposUploadReleaseAsset: (
      owner: string,
      repo: string,
      releaseId: number,
      query: {
        name: string;
        label?: string;
      },
      data?: File,
      params: RequestParams = {},
    ) =>
      this.request<ReleaseAsset, void>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}/assets`,
        method: "POST",
        query: query,
        body: data,
        format: "json",
        ...params,
      }),

    /**
     * @description List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
     *
     * @tags reactions
     * @name ReactionsListForRelease
     * @summary List reactions for a release
     * @request GET:/repos/{owner}/{repo}/releases/{release_id}/reactions
     */
    reactionsListForRelease: (
      owner: string,
      repo: string,
      releaseId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release. */
        content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], BasicError>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
     *
     * @tags reactions
     * @name ReactionsCreateForRelease
     * @summary Create reaction for a release
     * @request POST:/repos/{owner}/{repo}/releases/{release_id}/reactions
     */
    reactionsCreateForRelease: (
      owner: string,
      repo: string,
      releaseId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release. */
        content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, ValidationError>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`. Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
     *
     * @tags reactions
     * @name ReactionsDeleteForRelease
     * @summary Delete a release reaction
     * @request DELETE:/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}
     */
    reactionsDeleteForRelease: (
      owner: string,
      repo: string,
      releaseId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/releases/${releaseId}/reactions/${reactionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled" enforcement statuses are not returned.
     *
     * @tags repos
     * @name ReposGetBranchRules
     * @summary Get rules for a branch
     * @request GET:/repos/{owner}/{repo}/rules/branches/{branch}
     */
    reposGetBranchRules: (
      owner: string,
      repo: string,
      branch: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleDetailed[], any>({
        path: `/repos/${owner}/${repo}/rules/branches/${branch}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get all the rulesets for a repository.
     *
     * @tags repos
     * @name ReposGetRepoRulesets
     * @summary Get all repository rulesets
     * @request GET:/repos/{owner}/{repo}/rulesets
     */
    reposGetRepoRulesets: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Include rulesets configured at higher levels that apply to this repository
         * @default true
         */
        includes_parents?: boolean;
        /**
         * A comma-separated list of rule targets to filter by.
         * If provided, only rulesets that apply to the specified targets will be returned.
         * For example, `branch,tag,push`.
         * @example "branch,tag,push"
         */
        targets?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset[], BasicError>({
        path: `/repos/${owner}/${repo}/rulesets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a ruleset for a repository.
     *
     * @tags repos
     * @name ReposCreateRepoRuleset
     * @summary Create a repository ruleset
     * @request POST:/repos/{owner}/{repo}/rulesets
     */
    reposCreateRepoRuleset: (
      owner: string,
      repo: string,
      data: {
        /** The name of the ruleset. */
        name: string;
        /**
         * The target of the ruleset
         * @default "branch"
         */
        target?: "branch" | "tag" | "push";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /** Parameters for a repository ruleset ref name condition */
        conditions?: RepositoryRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists suites of rule evaluations at the repository level. For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
     *
     * @tags repos
     * @name ReposGetRepoRuleSuites
     * @summary List repository rule suites
     * @request GET:/repos/{owner}/{repo}/rulesets/rule-suites
     */
    reposGetRepoRuleSuites: (
      owner: string,
      repo: string,
      query?: {
        /** The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned. */
        ref?: string;
        /**
         * The time period to filter by.
         *
         * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
         * @default "day"
         */
        time_period?: "hour" | "day" | "week" | "month";
        /** The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. */
        actor_name?: string;
        /**
         * The rule suite results to filter on. When specified, only suites with this result will be returned.
         * @default "all"
         */
        rule_suite_result?: "pass" | "fail" | "bypass" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RuleSuites, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/rule-suites`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about a suite of rule evaluations from within a repository. For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
     *
     * @tags repos
     * @name ReposGetRepoRuleSuite
     * @summary Get a repository rule suite
     * @request GET:/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}
     */
    reposGetRepoRuleSuite: (owner: string, repo: string, ruleSuiteId: number, params: RequestParams = {}) =>
      this.request<RuleSuite, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/rule-suites/${ruleSuiteId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get a ruleset for a repository. **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user making the API request has write access to the ruleset.
     *
     * @tags repos
     * @name ReposGetRepoRuleset
     * @summary Get a repository ruleset
     * @request GET:/repos/{owner}/{repo}/rulesets/{ruleset_id}
     */
    reposGetRepoRuleset: (
      owner: string,
      repo: string,
      rulesetId: number,
      query?: {
        /**
         * Include rulesets configured at higher levels that apply to this repository
         * @default true
         */
        includes_parents?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/${rulesetId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Update a ruleset for a repository.
     *
     * @tags repos
     * @name ReposUpdateRepoRuleset
     * @summary Update a repository ruleset
     * @request PUT:/repos/{owner}/{repo}/rulesets/{ruleset_id}
     */
    reposUpdateRepoRuleset: (
      owner: string,
      repo: string,
      rulesetId: number,
      data?: {
        /** The name of the ruleset. */
        name?: string;
        /** The target of the ruleset */
        target?: "branch" | "tag" | "push";
        /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
        enforcement?: RepositoryRuleEnforcement;
        /** The actors that can bypass the rules in this ruleset */
        bypass_actors?: RepositoryRulesetBypassActor[];
        /** Parameters for a repository ruleset ref name condition */
        conditions?: RepositoryRulesetConditions;
        /** An array of rules within the ruleset. */
        rules?: RepositoryRule[];
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryRuleset, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/${rulesetId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a ruleset for a repository.
     *
     * @tags repos
     * @name ReposDeleteRepoRuleset
     * @summary Delete a repository ruleset
     * @request DELETE:/repos/{owner}/{repo}/rulesets/{ruleset_id}
     */
    reposDeleteRepoRuleset: (owner: string, repo: string, rulesetId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/${rulesetId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Get the history of a repository ruleset.
     *
     * @tags repos
     * @name ReposGetRepoRulesetHistory
     * @summary Get repository ruleset history
     * @request GET:/repos/{owner}/{repo}/rulesets/{ruleset_id}/history
     */
    reposGetRepoRulesetHistory: (
      owner: string,
      repo: string,
      rulesetId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RulesetVersion[], BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/${rulesetId}/history`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a version of a repository ruleset.
     *
     * @tags repos
     * @name ReposGetRepoRulesetVersion
     * @summary Get repository ruleset version
     * @request GET:/repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}
     */
    reposGetRepoRulesetVersion: (
      owner: string,
      repo: string,
      rulesetId: number,
      versionId: number,
      params: RequestParams = {},
    ) =>
      this.request<RulesetVersionWithState, BasicError>({
        path: `/repos/${owner}/${repo}/rulesets/${rulesetId}/history/${versionId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists secret scanning alerts for an eligible repository, from newest to oldest. The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags secret-scanning
     * @name SecretScanningListAlertsForRepo
     * @summary List secret scanning alerts for a repository
     * @request GET:/repos/{owner}/{repo}/secret-scanning/alerts
     */
    secretScanningListAlertsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
        /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
        secret_type?: string;
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        resolution?: string;
        /**
         * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
        after?: string;
        /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
        validity?: string;
        /**
         * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
         * @default false
         */
        is_publicly_leaked?: boolean;
        /**
         * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
         * @default false
         */
        is_multi_repo?: boolean;
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningAlert[],
        void | {
          code?: string;
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/repos/${owner}/${repo}/secret-scanning/alerts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single secret scanning alert detected in an eligible repository. The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags secret-scanning
     * @name SecretScanningGetAlert
     * @summary Get a secret scanning alert
     * @request GET:/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
     */
    secretScanningGetAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      query?: {
        /**
         * A boolean value representing whether or not to hide literal secrets in the results.
         * @default false
         */
        hide_secret?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningAlert,
        void | {
          code?: string;
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the status of a secret scanning alert in an eligible repository. The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags secret-scanning
     * @name SecretScanningUpdateAlert
     * @summary Update a secret scanning alert
     * @request PATCH:/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
     */
    secretScanningUpdateAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      data: {
        /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
        state: SecretScanningAlertState;
        /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
        resolution?: SecretScanningAlertResolution;
        /** An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
        resolution_comment?: SecretScanningAlertResolutionComment;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningAlert,
        void | {
          code?: string;
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all locations for a given secret scanning alert for an eligible repository. The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags secret-scanning
     * @name SecretScanningListLocationsForAlert
     * @summary List locations for a secret scanning alert
     * @request GET:/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations
     */
    secretScanningListLocationsForAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningLocation[],
        void | {
          code?: string;
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}/locations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a bypass for a previously push protected secret. The authenticated user must be the original author of the committed secret. OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags secret-scanning
     * @name SecretScanningCreatePushProtectionBypass
     * @summary Create a push protection bypass
     * @request POST:/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses
     */
    secretScanningCreatePushProtectionBypass: (
      owner: string,
      repo: string,
      data: {
        /** The reason for bypassing push protection. */
        reason: SecretScanningPushProtectionBypassReason;
        /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
        placeholder_id: SecretScanningPushProtectionBypassPlaceholderId;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningPushProtectionBypass,
        void | {
          code?: string;
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/repos/${owner}/${repo}/secret-scanning/push-protection-bypasses`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the latest default incremental and backfill scans by type for a repository. Scans from Copilot Secret Scanning are not included. OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     *
     * @tags secret-scanning
     * @name SecretScanningGetScanHistory
     * @summary Get secret scanning scan history for a repository
     * @request GET:/repos/{owner}/{repo}/secret-scanning/scan-history
     */
    secretScanningGetScanHistory: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        SecretScanningScanHistory,
        void | {
          code?: string;
          message?: string;
          documentation_url?: string;
        }
      >({
        path: `/repos/${owner}/${repo}/secret-scanning/scan-history`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists security advisories in a repository. The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory. OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesListRepositoryAdvisories
     * @summary List repository security advisories
     * @request GET:/repos/{owner}/{repo}/security-advisories
     */
    securityAdvisoriesListRepositoryAdvisories: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The property to sort the results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "published";
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @min 1
         * @max 100
         * @default 30
         */
        per_page?: number;
        /** Filter by state of the repository advisories. Only advisories of this state will be returned. */
        state?: "triage" | "draft" | "published" | "closed";
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryAdvisory[], BasicError>({
        path: `/repos/${owner}/${repo}/security-advisories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new repository security advisory. In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository. OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesCreateRepositoryAdvisory
     * @summary Create a repository security advisory
     * @request POST:/repos/{owner}/{repo}/security-advisories
     */
    securityAdvisoriesCreateRepositoryAdvisory: (
      owner: string,
      repo: string,
      data: RepositoryAdvisoryCreate,
      params: RequestParams = {},
    ) =>
      this.request<RepositoryAdvisory, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/security-advisories`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Report a security vulnerability to the maintainers of the repository. See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesCreatePrivateVulnerabilityReport
     * @summary Privately report a security vulnerability
     * @request POST:/repos/{owner}/{repo}/security-advisories/reports
     */
    securityAdvisoriesCreatePrivateVulnerabilityReport: (
      owner: string,
      repo: string,
      data: PrivateVulnerabilityReportCreate,
      params: RequestParams = {},
    ) =>
      this.request<RepositoryAdvisory, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/security-advisories/reports`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier. Anyone can access any published security advisory on a public repository. The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on the security advisory. OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesGetRepositoryAdvisory
     * @summary Get a repository security advisory
     * @request GET:/repos/{owner}/{repo}/security-advisories/{ghsa_id}
     */
    securityAdvisoriesGetRepositoryAdvisory: (
      owner: string,
      repo: string,
      ghsaId: string,
      params: RequestParams = {},
    ) =>
      this.request<RepositoryAdvisory, BasicError>({
        path: `/repos/${owner}/${repo}/security-advisories/${ghsaId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier. In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository, or a collaborator on the repository security advisory. OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesUpdateRepositoryAdvisory
     * @summary Update a repository security advisory
     * @request PATCH:/repos/{owner}/{repo}/security-advisories/{ghsa_id}
     */
    securityAdvisoriesUpdateRepositoryAdvisory: (
      owner: string,
      repo: string,
      ghsaId: string,
      data: RepositoryAdvisoryUpdate,
      params: RequestParams = {},
    ) =>
      this.request<RepositoryAdvisory, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/security-advisories/${ghsaId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)." You may request a CVE for public repositories, but cannot do so for private repositories. In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository. OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest
     * @summary Request a CVE for a repository security advisory
     * @request POST:/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve
     */
    securityAdvisoriesCreateRepositoryAdvisoryCveRequest: (
      owner: string,
      repo: string,
      ghsaId: string,
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/security-advisories/${ghsaId}/cve`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Create a temporary private fork to collaborate on fixing a security vulnerability in your repository. > [!NOTE] > Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
     *
     * @tags security-advisories
     * @name SecurityAdvisoriesCreateFork
     * @summary Create a temporary private fork
     * @request POST:/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks
     */
    securityAdvisoriesCreateFork: (owner: string, repo: string, ghsaId: string, params: RequestParams = {}) =>
      this.request<FullRepository, BasicError | ValidationError>({
        path: `/repos/${owner}/${repo}/security-advisories/${ghsaId}/forks`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people that have starred the repository. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
     *
     * @tags activity
     * @name ActivityListStargazersForRepo
     * @summary List stargazers
     * @request GET:/repos/{owner}/{repo}/stargazers
     */
    activityListStargazersForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[] | Stargazer[], ValidationError>({
        path: `/repos/${owner}/${repo}/stargazers`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository. > [!NOTE] > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
     *
     * @tags repos
     * @name ReposGetCodeFrequencyStats
     * @summary Get the weekly commit activity
     * @request GET:/repos/{owner}/{repo}/stats/code_frequency
     */
    reposGetCodeFrequencyStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodeFrequencyStat[], void>({
        path: `/repos/${owner}/${repo}/stats/code_frequency`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
     *
     * @tags repos
     * @name ReposGetCommitActivityStats
     * @summary Get the last year of commit activity
     * @request GET:/repos/{owner}/{repo}/stats/commit_activity
     */
    reposGetCommitActivityStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CommitActivity[], any>({
        path: `/repos/${owner}/${repo}/stats/commit_activity`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information: *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time). *   `a` - Number of additions *   `d` - Number of deletions *   `c` - Number of commits > [!NOTE] > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
     *
     * @tags repos
     * @name ReposGetContributorsStats
     * @summary Get all contributor commit activity
     * @request GET:/repos/{owner}/{repo}/stats/contributors
     */
    reposGetContributorsStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ContributorActivity[], any>({
        path: `/repos/${owner}/${repo}/stats/contributors`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`. The array order is oldest week (index 0) to most recent week. The most recent week is seven days ago at UTC midnight to today at UTC midnight.
     *
     * @tags repos
     * @name ReposGetParticipationStats
     * @summary Get the weekly commit count
     * @request GET:/repos/{owner}/{repo}/stats/participation
     */
    reposGetParticipationStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ParticipationStats, BasicError>({
        path: `/repos/${owner}/${repo}/stats/participation`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Each array contains the day number, hour number, and number of commits: *   `0-6`: Sunday - Saturday *   `0-23`: Hour of day *   Number of commits For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     *
     * @tags repos
     * @name ReposGetPunchCardStats
     * @summary Get the hourly commit count for each day
     * @request GET:/repos/{owner}/{repo}/stats/punch_card
     */
    reposGetPunchCardStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodeFrequencyStat[], any>({
        path: `/repos/${owner}/${repo}/stats/punch_card`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access in a repository can create commit statuses for a given SHA. Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     *
     * @tags repos
     * @name ReposCreateCommitStatus
     * @summary Create a commit status
     * @request POST:/repos/{owner}/{repo}/statuses/{sha}
     */
    reposCreateCommitStatus: (
      owner: string,
      repo: string,
      sha: string,
      data: {
        /** The state of the status. */
        state: "error" | "failure" | "pending" | "success";
        /**
         * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
         * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
         * `http://ci.example.com/user/repo/build/sha`
         */
        target_url?: string | null;
        /** A short description of the status. */
        description?: string | null;
        /**
         * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
         * @default "default"
         */
        context?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Status, any>({
        path: `/repos/${owner}/${repo}/statuses/${sha}`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people watching the specified repository.
     *
     * @tags activity
     * @name ActivityListWatchersForRepo
     * @summary List watchers
     * @request GET:/repos/{owner}/{repo}/subscribers
     */
    activityListWatchersForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/repos/${owner}/${repo}/subscribers`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about whether the authenticated user is subscribed to the repository.
     *
     * @tags activity
     * @name ActivityGetRepoSubscription
     * @summary Get a repository subscription
     * @request GET:/repos/{owner}/{repo}/subscription
     */
    activityGetRepoSubscription: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<RepositorySubscription, BasicError | void>({
        path: `/repos/${owner}/${repo}/subscription`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
     *
     * @tags activity
     * @name ActivitySetRepoSubscription
     * @summary Set a repository subscription
     * @request PUT:/repos/{owner}/{repo}/subscription
     */
    activitySetRepoSubscription: (
      owner: string,
      repo: string,
      data?: {
        /** Determines if notifications should be received from this repository. */
        subscribed?: boolean;
        /** Determines if all notifications should be blocked from this repository. */
        ignored?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositorySubscription, any>({
        path: `/repos/${owner}/${repo}/subscription`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
     *
     * @tags activity
     * @name ActivityDeleteRepoSubscription
     * @summary Delete a repository subscription
     * @request DELETE:/repos/{owner}/{repo}/subscription
     */
    activityDeleteRepoSubscription: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/subscription`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListTags
     * @summary List repository tags
     * @request GET:/repos/{owner}/{repo}/tags
     */
    reposListTags: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Tag[], any>({
        path: `/repos/${owner}/${repo}/tags`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead. This returns the tag protection states of a repository. This information is only available to repository administrators.
     *
     * @tags repos
     * @name ReposListTagProtection
     * @summary Closing down - List tag protection states for a repository
     * @request GET:/repos/{owner}/{repo}/tags/protection
     * @deprecated
     */
    reposListTagProtection: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<TagProtection[], BasicError>({
        path: `/repos/${owner}/${repo}/tags/protection`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead. This creates a tag protection state for a repository. This endpoint is only available to repository administrators.
     *
     * @tags repos
     * @name ReposCreateTagProtection
     * @summary Closing down - Create a tag protection state for a repository
     * @request POST:/repos/{owner}/{repo}/tags/protection
     * @deprecated
     */
    reposCreateTagProtection: (
      owner: string,
      repo: string,
      data: {
        /** An optional glob pattern to match against when enforcing tag protection. */
        pattern: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TagProtection, BasicError>({
        path: `/repos/${owner}/${repo}/tags/protection`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead. This deletes a tag protection state for a repository. This endpoint is only available to repository administrators.
     *
     * @tags repos
     * @name ReposDeleteTagProtection
     * @summary Closing down - Delete a tag protection state for a repository
     * @request DELETE:/repos/{owner}/{repo}/tags/protection/{tag_protection_id}
     * @deprecated
     */
    reposDeleteTagProtection: (owner: string, repo: string, tagProtectionId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/repos/${owner}/${repo}/tags/protection/${tagProtectionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request. > [!NOTE] > For private repositories, these links are temporary and expire after five minutes.
     *
     * @tags repos
     * @name ReposDownloadTarballArchive
     * @summary Download a repository archive (tar)
     * @request GET:/repos/{owner}/{repo}/tarball/{ref}
     */
    reposDownloadTarballArchive: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: `/repos/${owner}/${repo}/tarball/${ref}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Lists the teams that have access to the specified repository and that are also visible to the authenticated user. For a public repository, a team is listed only if that team added the public repository explicitly. OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
     *
     * @tags repos
     * @name ReposListTeams
     * @summary List repository teams
     * @request GET:/repos/{owner}/{repo}/teams
     */
    reposListTeams: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: `/repos/${owner}/${repo}/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetAllTopics
     * @summary Get all repository topics
     * @request GET:/repos/{owner}/{repo}/topics
     */
    reposGetAllTopics: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Topic, BasicError>({
        path: `/repos/${owner}/${repo}/topics`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposReplaceAllTopics
     * @summary Replace all repository topics
     * @request PUT:/repos/{owner}/{repo}/topics
     */
    reposReplaceAllTopics: (
      owner: string,
      repo: string,
      data: {
        /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase. */
        names: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Topic, BasicError | ValidationErrorSimple>({
        path: `/repos/${owner}/${repo}/topics`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
     *
     * @tags repos
     * @name ReposGetClones
     * @summary Get repository clones
     * @request GET:/repos/{owner}/{repo}/traffic/clones
     */
    reposGetClones: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The time frame to display results for.
         * @default "day"
         */
        per?: "day" | "week";
      },
      params: RequestParams = {},
    ) =>
      this.request<CloneTraffic, BasicError>({
        path: `/repos/${owner}/${repo}/traffic/clones`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the top 10 popular contents over the last 14 days.
     *
     * @tags repos
     * @name ReposGetTopPaths
     * @summary Get top referral paths
     * @request GET:/repos/{owner}/{repo}/traffic/popular/paths
     */
    reposGetTopPaths: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ContentTraffic[], BasicError>({
        path: `/repos/${owner}/${repo}/traffic/popular/paths`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the top 10 referrers over the last 14 days.
     *
     * @tags repos
     * @name ReposGetTopReferrers
     * @summary Get top referral sources
     * @request GET:/repos/{owner}/{repo}/traffic/popular/referrers
     */
    reposGetTopReferrers: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ReferrerTraffic[], BasicError>({
        path: `/repos/${owner}/${repo}/traffic/popular/referrers`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
     *
     * @tags repos
     * @name ReposGetViews
     * @summary Get page views
     * @request GET:/repos/{owner}/{repo}/traffic/views
     */
    reposGetViews: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The time frame to display results for.
         * @default "day"
         */
        per?: "day" | "week";
      },
      params: RequestParams = {},
    ) =>
      this.request<ViewTraffic, BasicError>({
        path: `/repos/${owner}/${repo}/traffic/views`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
     *
     * @tags repos
     * @name ReposTransfer
     * @summary Transfer a repository
     * @request POST:/repos/{owner}/{repo}/transfer
     */
    reposTransfer: (
      owner: string,
      repo: string,
      data: {
        /** The username or organization name the repository will be transferred to. */
        new_owner: string;
        /** The new name to be given to the repository. */
        new_name?: string;
        /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
        team_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository, any>({
        path: `/repos/${owner}/${repo}/transfer`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
     *
     * @tags repos
     * @name ReposCheckVulnerabilityAlerts
     * @summary Check if vulnerability alerts are enabled for a repository
     * @request GET:/repos/{owner}/{repo}/vulnerability-alerts
     */
    reposCheckVulnerabilityAlerts: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/repos/${owner}/${repo}/vulnerability-alerts`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
     *
     * @tags repos
     * @name ReposEnableVulnerabilityAlerts
     * @summary Enable vulnerability alerts
     * @request PUT:/repos/{owner}/{repo}/vulnerability-alerts
     */
    reposEnableVulnerabilityAlerts: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/vulnerability-alerts`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
     *
     * @tags repos
     * @name ReposDisableVulnerabilityAlerts
     * @summary Disable vulnerability alerts
     * @request DELETE:/repos/{owner}/{repo}/vulnerability-alerts
     */
    reposDisableVulnerabilityAlerts: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/repos/${owner}/${repo}/vulnerability-alerts`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request. > [!NOTE] > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
     *
     * @tags repos
     * @name ReposDownloadZipballArchive
     * @summary Download a repository archive (zip)
     * @request GET:/repos/{owner}/{repo}/zipball/{ref}
     */
    reposDownloadZipballArchive: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: `/repos/${owner}/${repo}/zipball/${ref}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`. OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
     *
     * @tags repos
     * @name ReposCreateUsingTemplate
     * @summary Create a repository using a template
     * @request POST:/repos/{template_owner}/{template_repo}/generate
     */
    reposCreateUsingTemplate: (
      templateOwner: string,
      templateRepo: string,
      data: {
        /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
        owner?: string;
        /** The name of the new repository. */
        name: string;
        /** A short description of the new repository. */
        description?: string;
        /**
         * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
         * @default false
         */
        include_all_branches?: boolean;
        /**
         * Either `true` to create a new private repository or `false` to create a new public one.
         * @default false
         */
        private?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<FullRepository, any>({
        path: `/repos/${templateOwner}/${templateRepo}/generate`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  repositories = {
    /**
     * @description Lists all public repositories in the order that they were created. Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
     *
     * @tags repos
     * @name ReposListPublic
     * @summary List public repositories
     * @request GET:/repositories
     */
    reposListPublic: (
      query?: {
        /** A repository ID. Only return repositories with an ID greater than this ID. */
        since?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], ValidationError>({
        path: `/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  search = {
    /**
     * @description Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this: `q=addClass+in:file+language:js+repo:jquery/jquery` This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository. Considerations for code search: Due to the complexity of searching code, there are a few restrictions on how searches are performed: *   Only the _default branch_ is considered. In most cases, this will be the `master` branch. *   Only files smaller than 384 KB are searchable. *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is. This endpoint requires you to authenticate and limits you to 10 requests per minute.
     *
     * @tags search
     * @name SearchCode
     * @summary Search code
     * @request GET:/search/code
     */
    searchCode: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers. */
        q: string;
        /**
         * **This field is closing down.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
         * @deprecated
         */
        sort?: "indexed";
        /**
         * **This field is closing down.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @deprecated
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: CodeSearchResultItem[];
        },
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/search/code`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this: `q=repo:octocat/Spoon-Knife+css`
     *
     * @tags search
     * @name SearchCommits
     * @summary Search commits
     * @request GET:/search/commits
     */
    searchCommits: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "author-date" | "committer-date";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: CommitSearchResultItem[];
        },
        any
      >({
        path: `/search/commits`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Notice:** Search for issues and pull requests will be overridden by advanced search on September 4, 2025. > You can read more about this change on [the GitHub blog](https://github.blog/changelog/2025-03-06-github-issues-projects-api-support-for-issues-advanced-search-and-more/).
     *
     * @tags search
     * @name SearchIssuesAndPullRequests
     * @summary Search issues and pull requests
     * @request GET:/search/issues
     * @deprecated
     */
    searchIssuesAndPullRequests: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?:
          | "comments"
          | "reactions"
          | "reactions-+1"
          | "reactions--1"
          | "reactions-smile"
          | "reactions-thinking_face"
          | "reactions-heart"
          | "reactions-tada"
          | "interactions"
          | "created"
          | "updated";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Set to `true` to use advanced search.
         * Example: `http://api.github.com/search/issues?q={query}&advanced_search=true`
         */
        advanced_search?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: IssueSearchResultItem[];
        },
        | BasicError
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/search/issues`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this: `q=bug+defect+enhancement&repository_id=64778136` The labels that best match the query appear first in the search results.
     *
     * @tags search
     * @name SearchLabels
     * @summary Search labels
     * @request GET:/search/labels
     */
    searchLabels: (
      query: {
        /** The id of the repository. */
        repository_id: number;
        /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). */
        q: string;
        /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "created" | "updated";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: LabelSearchResultItem[];
        },
        BasicError | ValidationError
      >({
        path: `/search/labels`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this: `q=tetris+language:assembly&sort=stars&order=desc` This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
     *
     * @tags search
     * @name SearchRepos
     * @summary Search repositories
     * @request GET:/search/repositories
     */
    searchRepos: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: RepoSearchResultItem[];
        },
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/search/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers. When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this: `q=ruby+is:featured` This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     *
     * @tags search
     * @name SearchTopics
     * @summary Search topics
     * @request GET:/search/topics
     */
    searchTopics: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). */
        q: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: TopicSearchResultItem[];
        },
        any
      >({
        path: `/search/topics`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For example, if you're looking for a list of popular users, you might try this query: `q=tom+repos:%3E42+followers:%3E1000` This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers. This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
     *
     * @tags search
     * @name SearchUsers
     * @summary Search users
     * @request GET:/search/users
     */
    searchUsers: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results) */
        sort?: "followers" | "repositories" | "joined";
        /**
         * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          incomplete_results: boolean;
          items: UserSearchResultItem[];
        },
        | ValidationError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/search/users`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  teams = {
    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
     *
     * @tags teams
     * @name TeamsGetLegacy
     * @summary Get a team (Legacy)
     * @request GET:/teams/{team_id}
     * @deprecated
     */
    teamsGetLegacy: (teamId: number, params: RequestParams = {}) =>
      this.request<TeamFull, BasicError>({
        path: `/teams/${teamId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint. To edit a team, the authenticated user must either be an organization owner or a team maintainer. > [!NOTE] > With nested teams, the `privacy` for parent teams cannot be `secret`.
     *
     * @tags teams
     * @name TeamsUpdateLegacy
     * @summary Update a team (Legacy)
     * @request PATCH:/teams/{team_id}
     * @deprecated
     */
    teamsUpdateLegacy: (
      teamId: number,
      data: {
        /** The name of the team. */
        name: string;
        /** The description of the team. */
        description?: string;
        /**
         * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";
        /**
         * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         */
        notification_setting?: "notifications_enabled" | "notifications_disabled";
        /**
         * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull, BasicError | ValidationError>({
        path: `/teams/${teamId}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint. To delete a team, the authenticated user must be an organization owner or team maintainer. If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     *
     * @tags teams
     * @name TeamsDeleteLegacy
     * @summary Delete a team (Legacy)
     * @request DELETE:/teams/{team_id}
     * @deprecated
     */
    teamsDeleteLegacy: (teamId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/teams/${teamId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint. List all discussions on a team's page. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsListDiscussionsLegacy
     * @summary List discussions (Legacy)
     * @request GET:/teams/{team_id}/discussions
     * @deprecated
     */
    teamsListDiscussionsLegacy: (
      teamId: number,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion[], any>({
        path: `/teams/${teamId}/discussions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint. Creates a new discussion post on a team's page. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsCreateDiscussionLegacy
     * @summary Create a discussion (Legacy)
     * @request POST:/teams/{team_id}/discussions
     * @deprecated
     */
    teamsCreateDiscussionLegacy: (
      teamId: number,
      data: {
        /** The discussion post's title. */
        title: string;
        /** The discussion post's body text. */
        body: string;
        /**
         * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
         * @default false
         */
        private?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: `/teams/${teamId}/discussions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint. Get a specific discussion on a team's page. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsGetDiscussionLegacy
     * @summary Get a discussion (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}
     * @deprecated
     */
    teamsGetDiscussionLegacy: (teamId: number, discussionNumber: number, params: RequestParams = {}) =>
      this.request<TeamDiscussion, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint. Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsUpdateDiscussionLegacy
     * @summary Update a discussion (Legacy)
     * @request PATCH:/teams/{team_id}/discussions/{discussion_number}
     * @deprecated
     */
    teamsUpdateDiscussionLegacy: (
      teamId: number,
      discussionNumber: number,
      data?: {
        /** The discussion post's title. */
        title?: string;
        /** The discussion post's body text. */
        body?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint. Delete a discussion from a team's page. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsDeleteDiscussionLegacy
     * @summary Delete a discussion (Legacy)
     * @request DELETE:/teams/{team_id}/discussions/{discussion_number}
     * @deprecated
     */
    teamsDeleteDiscussionLegacy: (teamId: number, discussionNumber: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint. List all comments on a team discussion. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsListDiscussionCommentsLegacy
     * @summary List discussion comments (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/comments
     * @deprecated
     */
    teamsListDiscussionCommentsLegacy: (
      teamId: number,
      discussionNumber: number,
      query?: {
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment[], any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint. Creates a new comment on a team discussion. This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)." OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsCreateDiscussionCommentLegacy
     * @summary Create a discussion comment (Legacy)
     * @request POST:/teams/{team_id}/discussions/{discussion_number}/comments
     * @deprecated
     */
    teamsCreateDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint. Get a specific comment on a team discussion. OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsGetDiscussionCommentLegacy
     * @summary Get a discussion comment (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     * @deprecated
     */
    teamsGetDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint. Edits the body text of a discussion comment. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsUpdateDiscussionCommentLegacy
     * @summary Update a discussion comment (Legacy)
     * @request PATCH:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     * @deprecated
     */
    teamsUpdateDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint. Deletes a comment on a team discussion. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags teams
     * @name TeamsDeleteDiscussionCommentLegacy
     * @summary Delete a discussion comment (Legacy)
     * @request DELETE:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     * @deprecated
     */
    teamsDeleteDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint. List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionCommentLegacy
     * @summary List reactions for a team discussion comment (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
     * @deprecated
     */
    reactionsListForTeamDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)" endpoint. Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionCommentLegacy
     * @summary Create reaction for a team discussion comment (Legacy)
     * @request POST:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
     * @deprecated
     */
    reactionsCreateForTeamDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint. List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionLegacy
     * @summary List reactions for a team discussion (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/reactions
     * @deprecated
     */
    reactionsListForTeamDiscussionLegacy: (
      teamId: number,
      discussionNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/reactions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint. Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). A response with an HTTP `200` status means that you already added the reaction type to this team discussion. OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionLegacy
     * @summary Create reaction for a team discussion (Legacy)
     * @request POST:/teams/{team_id}/discussions/{discussion_number}/reactions
     * @deprecated
     */
    reactionsCreateForTeamDiscussionLegacy: (
      teamId: number,
      discussionNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: `/teams/${teamId}/discussions/${discussionNumber}/reactions`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint. The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     *
     * @tags teams
     * @name TeamsListPendingInvitationsLegacy
     * @summary List pending team invitations (Legacy)
     * @request GET:/teams/{team_id}/invitations
     * @deprecated
     */
    teamsListPendingInvitationsLegacy: (
      teamId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], any>({
        path: `/teams/${teamId}/invitations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint. Team members will include the members of child teams.
     *
     * @tags teams
     * @name TeamsListMembersLegacy
     * @summary List team members (Legacy)
     * @request GET:/teams/{team_id}/members
     * @deprecated
     */
    teamsListMembersLegacy: (
      teamId: number,
      query?: {
        /**
         * Filters members returned by their role in the team.
         * @default "all"
         */
        role?: "member" | "maintainer" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: `/teams/${teamId}/members`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The "Get team member" endpoint (described below) is closing down. We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships. To list members in a team, the team must be visible to the authenticated user.
     *
     * @tags teams
     * @name TeamsGetMemberLegacy
     * @summary Get team member (Legacy)
     * @request GET:/teams/{team_id}/members/{username}
     * @deprecated
     */
    teamsGetMemberLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/teams/${teamId}/members/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description The "Add team member" endpoint (described below) is closing down. We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization. > [!NOTE] > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     *
     * @tags teams
     * @name TeamsAddMemberLegacy
     * @summary Add team member (Legacy)
     * @request PUT:/teams/{team_id}/members/{username}
     * @deprecated
     */
    teamsAddMemberLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError | void>({
        path: `/teams/${teamId}/members/${username}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description The "Remove team member" endpoint (described below) is closing down. We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team. > [!NOTE] > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * @tags teams
     * @name TeamsRemoveMemberLegacy
     * @summary Remove team member (Legacy)
     * @request DELETE:/teams/{team_id}/members/{username}
     * @deprecated
     */
    teamsRemoveMemberLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/teams/${teamId}/members/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint. Team members will include the members of child teams. To get a user's membership with a team, the team must be visible to the authenticated user. **Note:** The response contains the `state` of the membership and the member's `role`. The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
     *
     * @tags teams
     * @name TeamsGetMembershipForUserLegacy
     * @summary Get team membership for a user (Legacy)
     * @request GET:/teams/{team_id}/memberships/{username}
     * @deprecated
     */
    teamsGetMembershipForUserLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<TeamMembership, BasicError>({
        path: `/teams/${teamId}/memberships/${username}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer. > [!NOTE] > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner. If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     *
     * @tags teams
     * @name TeamsAddOrUpdateMembershipForUserLegacy
     * @summary Add or update team membership for a user (Legacy)
     * @request PUT:/teams/{team_id}/memberships/{username}
     * @deprecated
     */
    teamsAddOrUpdateMembershipForUserLegacy: (
      teamId: number,
      username: string,
      data?: {
        /**
         * The role that this user should have in the team.
         * @default "member"
         */
        role?: "member" | "maintainer";
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamMembership, void | BasicError>({
        path: `/teams/${teamId}/memberships/${username}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team. > [!NOTE] > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * @tags teams
     * @name TeamsRemoveMembershipForUserLegacy
     * @summary Remove team membership for a user (Legacy)
     * @request DELETE:/teams/{team_id}/memberships/{username}
     * @deprecated
     */
    teamsRemoveMembershipForUserLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/teams/${teamId}/memberships/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsListProjectsLegacy
     * @summary List team projects (Legacy)
     * @request GET:/teams/{team_id}/projects
     * @deprecated
     */
    teamsListProjectsLegacy: (
      teamId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamProject[], BasicError>({
        path: `/teams/${teamId}/projects`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsCheckPermissionsForProjectLegacy
     * @summary Check team permissions for a project (Legacy)
     * @request GET:/teams/{team_id}/projects/{project_id}
     * @deprecated
     */
    teamsCheckPermissionsForProjectLegacy: (teamId: number, projectId: number, params: RequestParams = {}) =>
      this.request<TeamProject, void>({
        path: `/teams/${teamId}/projects/${projectId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsAddOrUpdateProjectPermissionsLegacy
     * @summary Add or update team project permissions (Legacy)
     * @request PUT:/teams/{team_id}/projects/{project_id}
     * @deprecated
     */
    teamsAddOrUpdateProjectPermissionsLegacy: (
      teamId: number,
      projectId: number,
      data?: {
        /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." */
        permission?: "read" | "write" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        void,
        | {
            message?: string;
            documentation_url?: string;
          }
        | BasicError
        | ValidationError
      >({
        path: `/teams/${teamId}/projects/${projectId}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags teams
     * @name TeamsRemoveProjectLegacy
     * @summary Remove a project from a team (Legacy)
     * @request DELETE:/teams/{team_id}/projects/{project_id}
     * @deprecated
     */
    teamsRemoveProjectLegacy: (teamId: number, projectId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/teams/${teamId}/projects/${projectId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
     *
     * @tags teams
     * @name TeamsListReposLegacy
     * @summary List team repositories (Legacy)
     * @request GET:/teams/{team_id}/repos
     * @deprecated
     */
    teamsListReposLegacy: (
      teamId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/teams/${teamId}/repos`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint. > [!NOTE] > Repositories inherited through a parent team will also be checked. You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
     *
     * @tags teams
     * @name TeamsCheckPermissionsForRepoLegacy
     * @summary Check team permissions for a repository (Legacy)
     * @request GET:/teams/{team_id}/repos/{owner}/{repo}
     * @deprecated
     */
    teamsCheckPermissionsForRepoLegacy: (teamId: number, owner: string, repo: string, params: RequestParams = {}) =>
      this.request<TeamRepository, void>({
        path: `/teams/${teamId}/repos/${owner}/${repo}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint. To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     *
     * @tags teams
     * @name TeamsAddOrUpdateRepoPermissionsLegacy
     * @summary Add or update team repository permissions (Legacy)
     * @request PUT:/teams/{team_id}/repos/{owner}/{repo}
     * @deprecated
     */
    teamsAddOrUpdateRepoPermissionsLegacy: (
      teamId: number,
      owner: string,
      repo: string,
      data?: {
        /** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
        permission?: "pull" | "push" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/teams/${teamId}/repos/${owner}/${repo}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint. If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     *
     * @tags teams
     * @name TeamsRemoveRepoLegacy
     * @summary Remove a repository from a team (Legacy)
     * @request DELETE:/teams/{team_id}/repos/{owner}/{repo}
     * @deprecated
     */
    teamsRemoveRepoLegacy: (teamId: number, owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/teams/${teamId}/repos/${owner}/${repo}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
     *
     * @tags teams
     * @name TeamsListChildLegacy
     * @summary List child teams (Legacy)
     * @request GET:/teams/{team_id}/teams
     * @deprecated
     */
    teamsListChildLegacy: (
      teamId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError | ValidationError>({
        path: `/teams/${teamId}/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  user = {
    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
     *
     * @tags users
     * @name UsersGetAuthenticated
     * @summary Get the authenticated user
     * @request GET:/user
     */
    usersGetAuthenticated: (params: RequestParams = {}) =>
      this.request<
        | ({
            user_view_type: "public";
          } & PublicUser)
        | ({
            user_view_type: "private";
          } & PrivateUser),
        BasicError
      >({
        path: `/user`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     *
     * @tags users
     * @name UsersUpdateAuthenticated
     * @summary Update the authenticated user
     * @request PATCH:/user
     */
    usersUpdateAuthenticated: (
      data?: {
        /**
         * The new name of the user.
         * @example "Omar Jahandar"
         */
        name?: string;
        /**
         * The publicly visible email address of the user.
         * @example "omar@example.com"
         */
        email?: string;
        /**
         * The new blog URL of the user.
         * @example "blog.example.com"
         */
        blog?: string;
        /**
         * The new Twitter username of the user.
         * @example "therealomarj"
         */
        twitter_username?: string | null;
        /**
         * The new company of the user.
         * @example "Acme corporation"
         */
        company?: string;
        /**
         * The new location of the user.
         * @example "Berlin, Germany"
         */
        location?: string;
        /** The new hiring availability of the user. */
        hireable?: boolean;
        /** The new short biography of the user. */
        bio?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PrivateUser, BasicError | ValidationError>({
        path: `/user`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List the users you've blocked on your personal account.
     *
     * @tags users
     * @name UsersListBlockedByAuthenticatedUser
     * @summary List users blocked by the authenticated user
     * @request GET:/user/blocks
     */
    usersListBlockedByAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: `/user/blocks`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
     *
     * @tags users
     * @name UsersCheckBlocked
     * @summary Check if a user is blocked by the authenticated user
     * @request GET:/user/blocks/{username}
     */
    usersCheckBlocked: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/blocks/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
     *
     * @tags users
     * @name UsersBlock
     * @summary Block a user
     * @request PUT:/user/blocks/{username}
     */
    usersBlock: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/user/blocks/${username}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Unblocks the given user and returns a 204.
     *
     * @tags users
     * @name UsersUnblock
     * @summary Unblock a user
     * @request DELETE:/user/blocks/{username}
     */
    usersUnblock: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/blocks/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the authenticated user's codespaces. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListForAuthenticatedUser
     * @summary List codespaces for the authenticated user
     * @request GET:/user/codespaces
     */
    codespacesListForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /** ID of the Repository to filter on */
        repository_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          codespaces: Codespace[];
        },
        BasicError
      >({
        path: `/user/codespaces`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new codespace, owned by the authenticated user. This endpoint requires either a `repository_id` OR a `pull_request` but not both. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCreateForAuthenticatedUser
     * @summary Create a codespace for the authenticated user
     * @request POST:/user/codespaces
     */
    codespacesCreateForAuthenticatedUser: (
      data:
        | {
            /** Repository id for this codespace */
            repository_id: number;
            /** Git ref (typically a branch name) for this codespace */
            ref?: string;
            /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
            location?: string;
            /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
            /** IP for location auto-detection when proxying a request */
            client_ip?: string;
            /** Machine type to use for this codespace */
            machine?: string;
            /** Path to devcontainer.json config to use for this codespace */
            devcontainer_path?: string;
            /** Whether to authorize requested permissions from devcontainer.json */
            multi_repo_permissions_opt_out?: boolean;
            /** Working directory for this codespace */
            working_directory?: string;
            /** Time in minutes before codespace stops from inactivity */
            idle_timeout_minutes?: number;
            /** Display name for this codespace */
            display_name?: string;
            /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
            retention_period_minutes?: number;
          }
        | {
            /** Pull request number for this codespace */
            pull_request: {
              /** Pull request number */
              pull_request_number: number;
              /** Repository id for this codespace */
              repository_id: number;
            };
            /** The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. */
            location?: string;
            /** The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down. */
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
            /** Machine type to use for this codespace */
            machine?: string;
            /** Path to devcontainer.json config to use for this codespace */
            devcontainer_path?: string;
            /** Working directory for this codespace */
            working_directory?: string;
            /** Time in minutes before codespace stops from inactivity */
            idle_timeout_minutes?: number;
          },
      params: RequestParams = {},
    ) =>
      this.request<
        Codespace,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/user/codespaces`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all development environment secrets available for a user's codespaces without revealing their encrypted values. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListSecretsForAuthenticatedUser
     * @summary List secrets for the authenticated user
     * @request GET:/user/codespaces/secrets
     */
    codespacesListSecretsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          secrets: CodespacesSecret[];
        },
        any
      >({
        path: `/user/codespaces/secrets`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetPublicKeyForAuthenticatedUser
     * @summary Get public key for the authenticated user
     * @request GET:/user/codespaces/secrets/public-key
     */
    codespacesGetPublicKeyForAuthenticatedUser: (params: RequestParams = {}) =>
      this.request<CodespacesUserPublicKey, any>({
        path: `/user/codespaces/secrets/public-key`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a development environment secret available to a user's codespaces without revealing its encrypted value. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetSecretForAuthenticatedUser
     * @summary Get a secret for the authenticated user
     * @request GET:/user/codespaces/secrets/{secret_name}
     */
    codespacesGetSecretForAuthenticatedUser: (secretName: string, params: RequestParams = {}) =>
      this.request<CodespacesSecret, any>({
        path: `/user/codespaces/secrets/${secretName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)." The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCreateOrUpdateSecretForAuthenticatedUser
     * @summary Create or update a secret for the authenticated user
     * @request PUT:/user/codespaces/secrets/{secret_name}
     */
    codespacesCreateOrUpdateSecretForAuthenticatedUser: (
      secretName: string,
      data: {
        /**
         * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
         * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
         */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id: string;
        /** An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints. */
        selected_repository_ids?: (number | string)[];
      },
      params: RequestParams = {},
    ) =>
      this.request<EmptyObject, BasicError | ValidationError>({
        path: `/user/codespaces/secrets/${secretName}`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesDeleteSecretForAuthenticatedUser
     * @summary Delete a secret for the authenticated user
     * @request DELETE:/user/codespaces/secrets/{secret_name}
     */
    codespacesDeleteSecretForAuthenticatedUser: (secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/user/codespaces/secrets/${secretName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the repositories that have been granted the ability to use a user's development environment secret. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesListRepositoriesForSecretForAuthenticatedUser
     * @summary List selected repositories for a user secret
     * @request GET:/user/codespaces/secrets/{secret_name}/repositories
     */
    codespacesListRepositoriesForSecretForAuthenticatedUser: (secretName: string, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          repositories: MinimalRepository[];
        },
        BasicError
      >({
        path: `/user/codespaces/secrets/${secretName}/repositories`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Select the repositories that will use a user's development environment secret. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesSetRepositoriesForSecretForAuthenticatedUser
     * @summary Set selected repositories for a user secret
     * @request PUT:/user/codespaces/secrets/{secret_name}/repositories
     */
    codespacesSetRepositoriesForSecretForAuthenticatedUser: (
      secretName: string,
      data: {
        /** An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/codespaces/secrets/${secretName}/repositories`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to the selected repositories for a user's development environment secret. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesAddRepositoryForSecretForAuthenticatedUser
     * @summary Add a selected repository to a user secret
     * @request PUT:/user/codespaces/secrets/{secret_name}/repositories/{repository_id}
     */
    codespacesAddRepositoryForSecretForAuthenticatedUser: (
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from the selected repositories for a user's development environment secret. The authenticated user must have Codespaces access to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesRemoveRepositoryForSecretForAuthenticatedUser
     * @summary Remove a selected repository from a user secret
     * @request DELETE:/user/codespaces/secrets/{secret_name}/repositories/{repository_id}
     */
    codespacesRemoveRepositoryForSecretForAuthenticatedUser: (
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets information about a user's codespace. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetForAuthenticatedUser
     * @summary Get a codespace for the authenticated user
     * @request GET:/user/codespaces/{codespace_name}
     */
    codespacesGetForAuthenticatedUser: (codespaceName: string, params: RequestParams = {}) =>
      this.request<Codespace, BasicError>({
        path: `/user/codespaces/${codespaceName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint. If you specify a new machine type it will be applied the next time your codespace is started. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesUpdateForAuthenticatedUser
     * @summary Update a codespace for the authenticated user
     * @request PATCH:/user/codespaces/{codespace_name}
     */
    codespacesUpdateForAuthenticatedUser: (
      codespaceName: string,
      data?: {
        /** A valid machine to transition this codespace to. */
        machine?: string;
        /** Display name for this codespace */
        display_name?: string;
        /** Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in. */
        recent_folders?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Codespace, BasicError>({
        path: `/user/codespaces/${codespaceName}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a user's codespace. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesDeleteForAuthenticatedUser
     * @summary Delete a codespace for the authenticated user
     * @request DELETE:/user/codespaces/{codespace_name}
     */
    codespacesDeleteForAuthenticatedUser: (codespaceName: string, params: RequestParams = {}) =>
      this.request<object, BasicError>({
        path: `/user/codespaces/${codespaceName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored. If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesExportForAuthenticatedUser
     * @summary Export a codespace for the authenticated user
     * @request POST:/user/codespaces/{codespace_name}/exports
     */
    codespacesExportForAuthenticatedUser: (codespaceName: string, params: RequestParams = {}) =>
      this.request<CodespaceExportDetails, BasicError | ValidationError>({
        path: `/user/codespaces/${codespaceName}/exports`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets information about an export of a codespace. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesGetExportDetailsForAuthenticatedUser
     * @summary Get details about a codespace export
     * @request GET:/user/codespaces/{codespace_name}/exports/{export_id}
     */
    codespacesGetExportDetailsForAuthenticatedUser: (
      codespaceName: string,
      exportId: string,
      params: RequestParams = {},
    ) =>
      this.request<CodespaceExportDetails, BasicError>({
        path: `/user/codespaces/${codespaceName}/exports/${exportId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description List the machine types a codespace can transition to use. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesCodespaceMachinesForAuthenticatedUser
     * @summary List machine types for a codespace
     * @request GET:/user/codespaces/{codespace_name}/machines
     */
    codespacesCodespaceMachinesForAuthenticatedUser: (codespaceName: string, params: RequestParams = {}) =>
      this.request<
        {
          total_count: number;
          machines: CodespaceMachine[];
        },
        BasicError
      >({
        path: `/user/codespaces/${codespaceName}/machines`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Publishes an unpublished codespace, creating a new repository and assigning it to the codespace. The codespace's token is granted write permissions to the repository, allowing the user to push their changes. This will fail for a codespace that is already published, meaning it has an associated repository. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesPublishForAuthenticatedUser
     * @summary Create a repository from an unpublished codespace
     * @request POST:/user/codespaces/{codespace_name}/publish
     */
    codespacesPublishForAuthenticatedUser: (
      codespaceName: string,
      data: {
        /** A name for the new repository. */
        name?: string;
        /**
         * Whether the new repository should be private.
         * @default false
         */
        private?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodespaceWithFullRepository, BasicError | ValidationError>({
        path: `/user/codespaces/${codespaceName}/publish`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Starts a user's codespace. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesStartForAuthenticatedUser
     * @summary Start a codespace for the authenticated user
     * @request POST:/user/codespaces/{codespace_name}/start
     */
    codespacesStartForAuthenticatedUser: (codespaceName: string, params: RequestParams = {}) =>
      this.request<Codespace, BasicError>({
        path: `/user/codespaces/${codespaceName}/start`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Stops a user's codespace. OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     *
     * @tags codespaces
     * @name CodespacesStopForAuthenticatedUser
     * @summary Stop a codespace for the authenticated user
     * @request POST:/user/codespaces/{codespace_name}/stop
     */
    codespacesStopForAuthenticatedUser: (codespaceName: string, params: RequestParams = {}) =>
      this.request<Codespace, BasicError>({
        path: `/user/codespaces/${codespaceName}/stop`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
     *
     * @tags packages
     * @name PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser
     * @summary Get list of conflicting packages during Docker migration for authenticated-user
     * @request GET:/user/docker/conflicts
     */
    packagesListDockerMigrationConflictingPackagesForAuthenticatedUser: (params: RequestParams = {}) =>
      this.request<Package[], any>({
        path: `/user/docker/conflicts`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the visibility for your primary email addresses.
     *
     * @tags users
     * @name UsersSetPrimaryEmailVisibilityForAuthenticatedUser
     * @summary Set primary email visibility for the authenticated user
     * @request PATCH:/user/email/visibility
     */
    usersSetPrimaryEmailVisibilityForAuthenticatedUser: (
      data: {
        /** Denotes whether an email is publicly visible. */
        visibility: "public" | "private";
      },
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError | ValidationError>({
        path: `/user/email/visibility`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all of your email addresses, and specifies which one is visible to the public. OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
     *
     * @tags users
     * @name UsersListEmailsForAuthenticatedUser
     * @summary List email addresses for the authenticated user
     * @request GET:/user/emails
     */
    usersListEmailsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError>({
        path: `/user/emails`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags users
     * @name UsersAddEmailForAuthenticatedUser
     * @summary Add an email address for the authenticated user
     * @request POST:/user/emails
     */
    usersAddEmailForAuthenticatedUser: (
      data?:
        | {
            /**
             * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
             * @minItems 1
             * @example []
             */
            emails: string[];
          }
        | string[]
        | string,
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError | ValidationError>({
        path: `/user/emails`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags users
     * @name UsersDeleteEmailForAuthenticatedUser
     * @summary Delete an email address for the authenticated user
     * @request DELETE:/user/emails
     */
    usersDeleteEmailForAuthenticatedUser: (
      data:
        | {
            /**
             * Email addresses associated with the GitHub user account.
             * @minItems 1
             */
            emails: string[];
          }
        | string[]
        | string,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/user/emails`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the people following the authenticated user.
     *
     * @tags users
     * @name UsersListFollowersForAuthenticatedUser
     * @summary List followers of the authenticated user
     * @request GET:/user/followers
     */
    usersListFollowersForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: `/user/followers`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people who the authenticated user follows.
     *
     * @tags users
     * @name UsersListFollowedByAuthenticatedUser
     * @summary List the people the authenticated user follows
     * @request GET:/user/following
     */
    usersListFollowedByAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: `/user/following`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersCheckPersonIsFollowedByAuthenticated
     * @summary Check if a person is followed by the authenticated user
     * @request GET:/user/following/{username}
     */
    usersCheckPersonIsFollowedByAuthenticated: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/following/${username}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)." OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
     *
     * @tags users
     * @name UsersFollow
     * @summary Follow a user
     * @request PUT:/user/following/{username}
     */
    usersFollow: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/user/following/${username}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
     *
     * @tags users
     * @name UsersUnfollow
     * @summary Unfollow a user
     * @request DELETE:/user/following/{username}
     */
    usersUnfollow: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/following/${username}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the current user's GPG keys. OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersListGpgKeysForAuthenticatedUser
     * @summary List GPG keys for the authenticated user
     * @request GET:/user/gpg_keys
     */
    usersListGpgKeysForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GpgKey[], BasicError>({
        path: `/user/gpg_keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds a GPG key to the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersCreateGpgKeyForAuthenticatedUser
     * @summary Create a GPG key for the authenticated user
     * @request POST:/user/gpg_keys
     */
    usersCreateGpgKeyForAuthenticatedUser: (
      data: {
        /** A descriptive name for the new key. */
        name?: string;
        /** A GPG key in ASCII-armored format. */
        armored_public_key: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GpgKey, BasicError | ValidationError>({
        path: `/user/gpg_keys`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description View extended details for a single GPG key. OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersGetGpgKeyForAuthenticatedUser
     * @summary Get a GPG key for the authenticated user
     * @request GET:/user/gpg_keys/{gpg_key_id}
     */
    usersGetGpgKeyForAuthenticatedUser: (gpgKeyId: number, params: RequestParams = {}) =>
      this.request<GpgKey, BasicError>({
        path: `/user/gpg_keys/${gpgKeyId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Removes a GPG key from the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersDeleteGpgKeyForAuthenticatedUser
     * @summary Delete a GPG key for the authenticated user
     * @request DELETE:/user/gpg_keys/{gpg_key_id}
     */
    usersDeleteGpgKeyForAuthenticatedUser: (gpgKeyId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: `/user/gpg_keys/${gpgKeyId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access. The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership. You can find the permissions for the installation under the `permissions` key.
     *
     * @tags apps
     * @name AppsListInstallationsForAuthenticatedUser
     * @summary List app installations accessible to the user access token
     * @request GET:/user/installations
     */
    appsListInstallationsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          installations: Installation[];
        },
        BasicError
      >({
        path: `/user/installations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation. The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership. The access the user has to each repository is included in the hash under the `permissions` key.
     *
     * @tags apps
     * @name AppsListInstallationReposForAuthenticatedUser
     * @summary List repositories accessible to the user access token
     * @request GET:/user/installations/{installation_id}/repositories
     */
    appsListInstallationReposForAuthenticatedUser: (
      installationId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          repository_selection?: string;
          repositories: Repository[];
        },
        BasicError
      >({
        path: `/user/installations/${installationId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Add a single repository to an installation. The authenticated user must have admin access to the repository. This endpoint only works for PATs (classic) with the `repo` scope.
     *
     * @tags apps
     * @name AppsAddRepoToInstallationForAuthenticatedUser
     * @summary Add a repository to an app installation
     * @request PUT:/user/installations/{installation_id}/repositories/{repository_id}
     */
    appsAddRepoToInstallationForAuthenticatedUser: (
      installationId: number,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/installations/${installationId}/repositories/${repositoryId}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. This endpoint only works for PATs (classic) with the `repo` scope.
     *
     * @tags apps
     * @name AppsRemoveRepoFromInstallationForAuthenticatedUser
     * @summary Remove a repository from an app installation
     * @request DELETE:/user/installations/{installation_id}/repositories/{repository_id}
     */
    appsRemoveRepoFromInstallationForAuthenticatedUser: (
      installationId: number,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | void>({
        path: `/user/installations/${installationId}/repositories/${repositoryId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
     *
     * @tags interactions
     * @name InteractionsGetRestrictionsForAuthenticatedUser
     * @summary Get interaction restrictions for your public repositories
     * @request GET:/user/interaction-limits
     */
    interactionsGetRestrictionsForAuthenticatedUser: (params: RequestParams = {}) =>
      this.request<InteractionLimitResponse | object, any>({
        path: `/user/interaction-limits`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
     *
     * @tags interactions
     * @name InteractionsSetRestrictionsForAuthenticatedUser
     * @summary Set interaction restrictions for your public repositories
     * @request PUT:/user/interaction-limits
     */
    interactionsSetRestrictionsForAuthenticatedUser: (data: InteractionLimit, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, ValidationError>({
        path: `/user/interaction-limits`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes any interaction restrictions from your public repositories.
     *
     * @tags interactions
     * @name InteractionsRemoveRestrictionsForAuthenticatedUser
     * @summary Remove interaction restrictions from your public repositories
     * @request DELETE:/user/interaction-limits
     */
    interactionsRemoveRestrictionsForAuthenticatedUser: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: `/user/interaction-limits`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List issues across owned and member repositories assigned to the authenticated user. > [!NOTE] > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type. - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`. - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`. - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
     *
     * @tags issues
     * @name IssuesListForAuthenticatedUser
     * @summary List user account issues assigned to the authenticated user
     * @request GET:/user/issues
     */
    issuesListForAuthenticatedUser: (
      query?: {
        /**
         * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        /**
         * Indicates the state of the issues to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        labels?: string;
        /**
         * What to sort results by.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError>({
        path: `/user/issues`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the public SSH keys for the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersListPublicSshKeysForAuthenticatedUser
     * @summary List public SSH keys for the authenticated user
     * @request GET:/user/keys
     */
    usersListPublicSshKeysForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Key[], BasicError>({
        path: `/user/keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds a public SSH key to the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersCreatePublicSshKeyForAuthenticatedUser
     * @summary Create a public SSH key for the authenticated user
     * @request POST:/user/keys
     */
    usersCreatePublicSshKeyForAuthenticatedUser: (
      data: {
        /**
         * A descriptive name for the new key.
         * @example "Personal MacBook Air"
         */
        title?: string;
        /**
         * The public SSH key to add to your GitHub account.
         * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
         */
        key: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Key, BasicError | ValidationError>({
        path: `/user/keys`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description View extended details for a single public SSH key. OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersGetPublicSshKeyForAuthenticatedUser
     * @summary Get a public SSH key for the authenticated user
     * @request GET:/user/keys/{key_id}
     */
    usersGetPublicSshKeyForAuthenticatedUser: (keyId: number, params: RequestParams = {}) =>
      this.request<Key, BasicError>({
        path: `/user/keys/${keyId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Removes a public SSH key from the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersDeletePublicSshKeyForAuthenticatedUser
     * @summary Delete a public SSH key for the authenticated user
     * @request DELETE:/user/keys/{key_id}
     */
    usersDeletePublicSshKeyForAuthenticatedUser: (keyId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/keys/${keyId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the active subscriptions for the authenticated user.
     *
     * @tags apps
     * @name AppsListSubscriptionsForAuthenticatedUser
     * @summary List subscriptions for the authenticated user
     * @request GET:/user/marketplace_purchases
     */
    appsListSubscriptionsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<UserMarketplacePurchase[], BasicError>({
        path: `/user/marketplace_purchases`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the active subscriptions for the authenticated user.
     *
     * @tags apps
     * @name AppsListSubscriptionsForAuthenticatedUserStubbed
     * @summary List subscriptions for the authenticated user (stubbed)
     * @request GET:/user/marketplace_purchases/stubbed
     */
    appsListSubscriptionsForAuthenticatedUserStubbed: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<UserMarketplacePurchase[], BasicError>({
        path: `/user/marketplace_purchases/stubbed`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all of the authenticated user's organization memberships.
     *
     * @tags orgs
     * @name OrgsListMembershipsForAuthenticatedUser
     * @summary List organization memberships for the authenticated user
     * @request GET:/user/memberships/orgs
     */
    orgsListMembershipsForAuthenticatedUser: (
      query?: {
        /** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */
        state?: "active" | "pending";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgMembership[], BasicError | ValidationError>({
        path: `/user/memberships/orgs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
     *
     * @tags orgs
     * @name OrgsGetMembershipForAuthenticatedUser
     * @summary Get an organization membership for the authenticated user
     * @request GET:/user/memberships/orgs/{org}
     */
    orgsGetMembershipForAuthenticatedUser: (org: string, params: RequestParams = {}) =>
      this.request<OrgMembership, BasicError>({
        path: `/user/memberships/orgs/${org}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
     *
     * @tags orgs
     * @name OrgsUpdateMembershipForAuthenticatedUser
     * @summary Update an organization membership for the authenticated user
     * @request PATCH:/user/memberships/orgs/{org}
     */
    orgsUpdateMembershipForAuthenticatedUser: (
      org: string,
      data: {
        /** The state that the membership should be in. Only `"active"` will be accepted. */
        state: "active";
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgMembership, BasicError | ValidationError>({
        path: `/user/memberships/orgs/${org}`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all migrations a user has started.
     *
     * @tags migrations
     * @name MigrationsListForAuthenticatedUser
     * @summary List user migrations
     * @request GET:/user/migrations
     */
    migrationsListForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration[], BasicError>({
        path: `/user/migrations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Initiates the generation of a user migration archive.
     *
     * @tags migrations
     * @name MigrationsStartForAuthenticatedUser
     * @summary Start a user migration
     * @request POST:/user/migrations
     */
    migrationsStartForAuthenticatedUser: (
      data: {
        /**
         * Lock the repositories being migrated at the start of the migration
         * @example true
         */
        lock_repositories?: boolean;
        /**
         * Indicates whether metadata should be excluded and only git source should be included for the migration.
         * @example true
         */
        exclude_metadata?: boolean;
        /**
         * Indicates whether the repository git data should be excluded from the migration.
         * @example true
         */
        exclude_git_data?: boolean;
        /**
         * Do not include attachments in the migration
         * @example true
         */
        exclude_attachments?: boolean;
        /**
         * Do not include releases in the migration
         * @example true
         */
        exclude_releases?: boolean;
        /**
         * Indicates whether projects owned by the organization or users should be excluded.
         * @example true
         */
        exclude_owner_projects?: boolean;
        /**
         * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
         * @default false
         * @example true
         */
        org_metadata_only?: boolean;
        /**
         * Exclude attributes from the API response to improve performance
         * @example ["repositories"]
         */
        exclude?: "repositories"[];
        repositories: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError | ValidationError>({
        path: `/user/migrations`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values: *   `pending` - the migration hasn't started yet. *   `exporting` - the migration is in progress. *   `exported` - the migration finished successfully. *   `failed` - the migration failed. Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
     *
     * @tags migrations
     * @name MigrationsGetStatusForAuthenticatedUser
     * @summary Get a user migration status
     * @request GET:/user/migrations/{migration_id}
     */
    migrationsGetStatusForAuthenticatedUser: (
      migrationId: number,
      query?: {
        exclude?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError>({
        path: `/user/migrations/${migrationId}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects: *   attachments *   bases *   commit\_comments *   issue\_comments *   issue\_events *   issues *   milestones *   organizations *   projects *   protected\_branches *   pull\_request\_reviews *   pull\_requests *   releases *   repositories *   review\_comments *   schema *   users The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     *
     * @tags migrations
     * @name MigrationsGetArchiveForAuthenticatedUser
     * @summary Download a user migration archive
     * @request GET:/user/migrations/{migration_id}/archive
     */
    migrationsGetArchiveForAuthenticatedUser: (migrationId: number, params: RequestParams = {}) =>
      this.request<any, void | BasicError>({
        path: `/user/migrations/${migrationId}/archive`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     *
     * @tags migrations
     * @name MigrationsDeleteArchiveForAuthenticatedUser
     * @summary Delete a user migration archive
     * @request DELETE:/user/migrations/{migration_id}/archive
     */
    migrationsDeleteArchiveForAuthenticatedUser: (migrationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/migrations/${migrationId}/archive`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
     *
     * @tags migrations
     * @name MigrationsUnlockRepoForAuthenticatedUser
     * @summary Unlock a user repository
     * @request DELETE:/user/migrations/{migration_id}/repos/{repo_name}/lock
     */
    migrationsUnlockRepoForAuthenticatedUser: (migrationId: number, repoName: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/migrations/${migrationId}/repos/${repoName}/lock`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all the repositories for this user migration.
     *
     * @tags migrations
     * @name MigrationsListReposForAuthenticatedUser
     * @summary List repositories for a user migration
     * @request GET:/user/migrations/{migration_id}/repositories
     */
    migrationsListReposForAuthenticatedUser: (
      migrationId: number,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/user/migrations/${migrationId}/repositories`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List organizations for the authenticated user. For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response. > [!NOTE] > Requests using a fine-grained access token will receive a `200 Success` response with an empty list.
     *
     * @tags orgs
     * @name OrgsListForAuthenticatedUser
     * @summary List organizations for the authenticated user
     * @request GET:/user/orgs
     */
    orgsListForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationSimple[], BasicError>({
        path: `/user/orgs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists packages owned by the authenticated user within the user's namespace. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesListPackagesForAuthenticatedUser
     * @summary List packages for the authenticated user's namespace
     * @request GET:/user/packages
     */
    packagesListPackagesForAuthenticatedUser: (
      query: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /**
         * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
         *
         * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
         * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
         */
        visibility?: "public" | "private" | "internal";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Package[], any>({
        path: `/user/packages`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific package for a package owned by the authenticated user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetPackageForAuthenticatedUser
     * @summary Get a package for the authenticated user
     * @request GET:/user/packages/{package_type}/{package_name}
     */
    packagesGetPackageForAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      params: RequestParams = {},
    ) =>
      this.request<Package, any>({
        path: `/user/packages/${packageType}/${packageName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance. OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesDeletePackageForAuthenticatedUser
     * @summary Delete a package for the authenticated user
     * @request DELETE:/user/packages/{package_type}/{package_name}
     */
    packagesDeletePackageForAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/packages/${packageType}/${packageName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Restores a package owned by the authenticated user. You can restore a deleted package under the following conditions: - The package was deleted within the last 30 days. - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first. OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesRestorePackageForAuthenticatedUser
     * @summary Restore a package for the authenticated user
     * @request POST:/user/packages/{package_type}/{package_name}/restore
     */
    packagesRestorePackageForAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      query?: {
        /** package token */
        token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/packages/${packageType}/${packageName}/restore`,
        method: "POST",
        query: query,
        ...params,
      }),

    /**
     * @description Lists package versions for a package owned by the authenticated user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser
     * @summary List package versions for a package owned by the authenticated user
     * @request GET:/user/packages/{package_type}/{package_name}/versions
     */
    packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      query?: {
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The state of the package, either active or deleted.
         * @default "active"
         */
        state?: "active" | "deleted";
      },
      params: RequestParams = {},
    ) =>
      this.request<PackageVersion[], BasicError>({
        path: `/user/packages/${packageType}/${packageName}/versions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific package version for a package owned by the authenticated user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetPackageVersionForAuthenticatedUser
     * @summary Get a package version for the authenticated user
     * @request GET:/user/packages/{package_type}/{package_name}/versions/{package_version_id}
     */
    packagesGetPackageVersionForAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<PackageVersion, any>({
        path: `/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance. The authenticated user must have admin permissions in the organization to use this endpoint. OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesDeletePackageVersionForAuthenticatedUser
     * @summary Delete a package version for the authenticated user
     * @request DELETE:/user/packages/{package_type}/{package_name}/versions/{package_version_id}
     */
    packagesDeletePackageVersionForAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Restores a package version owned by the authenticated user. You can restore a deleted package version under the following conditions: - The package was deleted within the last 30 days. - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first. OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesRestorePackageVersionForAuthenticatedUser
     * @summary Restore a package version for the authenticated user
     * @request POST:/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
     */
    packagesRestorePackageVersionForAuthenticatedUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/user/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`,
        method: "POST",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsCreateForAuthenticatedUser
     * @summary Create a user project
     * @request POST:/user/projects
     * @deprecated
     */
    projectsCreateForAuthenticatedUser: (
      data: {
        /**
         * Name of the project
         * @example "Week One Sprint"
         */
        name: string;
        /**
         * Body of the project
         * @example "This project represents the sprint of the first week in January"
         */
        body?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project, BasicError | ValidationErrorSimple>({
        path: `/user/projects`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user) endpoint. OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
     *
     * @tags users
     * @name UsersListPublicEmailsForAuthenticatedUser
     * @summary List public email addresses for the authenticated user
     * @request GET:/user/public_emails
     */
    usersListPublicEmailsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError>({
        path: `/user/public_emails`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access. The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * @tags repos
     * @name ReposListForAuthenticatedUser
     * @summary List repositories for the authenticated user
     * @request GET:/user/repos
     */
    reposListForAuthenticatedUser: (
      query?: {
        /**
         * Limit results to repositories with the specified visibility.
         * @default "all"
         */
        visibility?: "all" | "public" | "private";
        /**
         * Comma-separated list of values. Can include:
         *  * `owner`: Repositories that are owned by the authenticated user.
         *  * `collaborator`: Repositories that the user has been added to as a collaborator.
         *  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
         * @default "owner,collaborator,organization_member"
         */
        affiliation?: string;
        /**
         * Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
         * @default "all"
         */
        type?: "all" | "owner" | "public" | "private" | "member";
        /**
         * The property to sort the results by.
         * @default "full_name"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        before?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository[], BasicError | ValidationError>({
        path: `/user/repos`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new repository for the authenticated user. OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
     *
     * @tags repos
     * @name ReposCreateForAuthenticatedUser
     * @summary Create a repository for the authenticated user
     * @request POST:/user/repos
     */
    reposCreateForAuthenticatedUser: (
      data: {
        /**
         * The name of the repository.
         * @example "Team Environment"
         */
        name: string;
        /** A short description of the repository. */
        description?: string;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Whether the repository is private.
         * @default false
         */
        private?: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         * @example true
         */
        has_issues?: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         * @example true
         */
        has_projects?: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         * @example true
         */
        has_wiki?: boolean;
        /**
         * Whether discussions are enabled.
         * @default false
         * @example true
         */
        has_discussions?: boolean;
        /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
        team_id?: number;
        /**
         * Whether the repository is initialized with a minimal README.
         * @default false
         */
        auto_init?: boolean;
        /**
         * The desired language or platform to apply to the .gitignore.
         * @example "Haskell"
         */
        gitignore_template?: string;
        /**
         * The license keyword of the open source license for this repository.
         * @example "mit"
         */
        license_template?: string;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         * @example true
         */
        allow_squash_merge?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         * @example true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         * @example true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow Auto-merge to be used on pull requests.
         * @default false
         * @example false
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         * @example false
         */
        delete_branch_on_merge?: boolean;
        /**
         * Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        /**
         * Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
        /**
         * Whether downloads are enabled.
         * @default true
         * @example true
         */
        has_downloads?: boolean;
        /**
         * Whether this repository acts as a template that can be used to generate new repositories.
         * @default false
         * @example true
         */
        is_template?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<FullRepository, BasicError | ValidationError>({
        path: `/user/repos`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     *
     * @tags repos
     * @name ReposListInvitationsForAuthenticatedUser
     * @summary List repository invitations for the authenticated user
     * @request GET:/user/repository_invitations
     */
    reposListInvitationsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation[], BasicError>({
        path: `/user/repository_invitations`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposAcceptInvitationForAuthenticatedUser
     * @summary Accept a repository invitation
     * @request PATCH:/user/repository_invitations/{invitation_id}
     */
    reposAcceptInvitationForAuthenticatedUser: (invitationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/repository_invitations/${invitationId}`,
        method: "PATCH",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeclineInvitationForAuthenticatedUser
     * @summary Decline a repository invitation
     * @request DELETE:/user/repository_invitations/{invitation_id}
     */
    reposDeclineInvitationForAuthenticatedUser: (invitationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/repository_invitations/${invitationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all of your social accounts.
     *
     * @tags users
     * @name UsersListSocialAccountsForAuthenticatedUser
     * @summary List social accounts for the authenticated user
     * @request GET:/user/social_accounts
     */
    usersListSocialAccountsForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SocialAccount[], BasicError>({
        path: `/user/social_accounts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Add one or more social accounts to the authenticated user's profile. OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags users
     * @name UsersAddSocialAccountForAuthenticatedUser
     * @summary Add social accounts for the authenticated user
     * @request POST:/user/social_accounts
     */
    usersAddSocialAccountForAuthenticatedUser: (
      data: {
        /**
         * Full URLs for the social media profiles to add.
         * @example []
         */
        account_urls: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SocialAccount[], BasicError | ValidationError>({
        path: `/user/social_accounts`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes one or more social accounts from the authenticated user's profile. OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags users
     * @name UsersDeleteSocialAccountForAuthenticatedUser
     * @summary Delete social accounts for the authenticated user
     * @request DELETE:/user/social_accounts
     */
    usersDeleteSocialAccountForAuthenticatedUser: (
      data: {
        /**
         * Full URLs for the social media profiles to delete.
         * @example []
         */
        account_urls: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: `/user/social_accounts`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the SSH signing keys for the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersListSshSigningKeysForAuthenticatedUser
     * @summary List SSH signing keys for the authenticated user
     * @request GET:/user/ssh_signing_keys
     */
    usersListSshSigningKeysForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SshSigningKey[], BasicError>({
        path: `/user/ssh_signing_keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates an SSH signing key for the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersCreateSshSigningKeyForAuthenticatedUser
     * @summary Create a SSH signing key for the authenticated user
     * @request POST:/user/ssh_signing_keys
     */
    usersCreateSshSigningKeyForAuthenticatedUser: (
      data: {
        /**
         * A descriptive name for the new key.
         * @example "Personal MacBook Air"
         */
        title?: string;
        /**
         * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
         * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com
         */
        key: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<SshSigningKey, BasicError | ValidationError>({
        path: `/user/ssh_signing_keys`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets extended details for an SSH signing key. OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersGetSshSigningKeyForAuthenticatedUser
     * @summary Get an SSH signing key for the authenticated user
     * @request GET:/user/ssh_signing_keys/{ssh_signing_key_id}
     */
    usersGetSshSigningKeyForAuthenticatedUser: (sshSigningKeyId: number, params: RequestParams = {}) =>
      this.request<SshSigningKey, BasicError>({
        path: `/user/ssh_signing_keys/${sshSigningKeyId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an SSH signing key from the authenticated user's GitHub account. OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
     *
     * @tags users
     * @name UsersDeleteSshSigningKeyForAuthenticatedUser
     * @summary Delete an SSH signing key for the authenticated user
     * @request DELETE:/user/ssh_signing_keys/{ssh_signing_key_id}
     */
    usersDeleteSshSigningKeyForAuthenticatedUser: (sshSigningKeyId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/ssh_signing_keys/${sshSigningKeyId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists repositories the authenticated user has starred. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
     *
     * @tags activity
     * @name ActivityListReposStarredByAuthenticatedUser
     * @summary List repositories starred by the authenticated user
     * @request GET:/user/starred
     */
    activityListReposStarredByAuthenticatedUser: (
      query?: {
        /**
         * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository[], BasicError>({
        path: `/user/starred`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Whether the authenticated user has starred the repository.
     *
     * @tags activity
     * @name ActivityCheckRepoIsStarredByAuthenticatedUser
     * @summary Check if a repository is starred by the authenticated user
     * @request GET:/user/starred/{owner}/{repo}
     */
    activityCheckRepoIsStarredByAuthenticatedUser: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/starred/${owner}/${repo}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     *
     * @tags activity
     * @name ActivityStarRepoForAuthenticatedUser
     * @summary Star a repository for the authenticated user
     * @request PUT:/user/starred/{owner}/{repo}
     */
    activityStarRepoForAuthenticatedUser: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/starred/${owner}/${repo}`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Unstar a repository that the authenticated user has previously starred.
     *
     * @tags activity
     * @name ActivityUnstarRepoForAuthenticatedUser
     * @summary Unstar a repository for the authenticated user
     * @request DELETE:/user/starred/{owner}/{repo}
     */
    activityUnstarRepoForAuthenticatedUser: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/user/starred/${owner}/${repo}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists repositories the authenticated user is watching.
     *
     * @tags activity
     * @name ActivityListWatchedReposForAuthenticatedUser
     * @summary List repositories watched by the authenticated user
     * @request GET:/user/subscriptions
     */
    activityListWatchedReposForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: `/user/subscriptions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all of the teams across all of the organizations to which the authenticated user belongs. OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint. When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
     *
     * @tags teams
     * @name TeamsListForAuthenticatedUser
     * @summary List teams for the authenticated user
     * @request GET:/user/teams
     */
    teamsListForAuthenticatedUser: (
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull[], BasicError>({
        path: `/user/teams`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time. If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status. The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication). The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
     *
     * @tags users
     * @name UsersGetById
     * @summary Get a user using their ID
     * @request GET:/user/{account_id}
     */
    usersGetById: (accountId: number, params: RequestParams = {}) =>
      this.request<
        | ({
            user_view_type: "public";
          } & PublicUser)
        | ({
            user_view_type: "private";
          } & PrivateUser),
        BasicError
      >({
        path: `/user/${accountId}`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  users = {
    /**
     * @description Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts. Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
     *
     * @tags users
     * @name UsersList
     * @summary List users
     * @request GET:/users
     */
    usersList: (
      query?: {
        /** A user ID. Only return users with an ID greater than this ID. */
        since?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/users`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides publicly available information about someone with a GitHub account. If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status. The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication). The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
     *
     * @tags users
     * @name UsersGetByUsername
     * @summary Get a user
     * @request GET:/users/{username}
     */
    usersGetByUsername: (username: string, params: RequestParams = {}) =>
      this.request<
        | ({
            user_view_type: "public";
          } & PublicUser)
        | ({
            user_view_type: "private";
          } & PrivateUser),
        BasicError
      >({
        path: `/users/${username}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description List a collection of artifact attestations associated with any entry in a list of subject digests owned by a user. The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required. **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
     *
     * @tags users
     * @name UsersListAttestationsBulk
     * @summary List attestations by bulk subject digests
     * @request POST:/users/{username}/attestations/bulk-list
     */
    usersListAttestationsBulk: (
      username: string,
      data: {
        /**
         * List of subject digests to fetch attestations for.
         * @maxItems 1024
         * @minItems 1
         */
        subject_digests: string[];
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      },
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** Mapping of subject digest to bundles. */
          attestations_subject_digests?: Record<
            string,
            | {
                /** The bundle of the attestation. */
                bundle?: {
                  mediaType?: string;
                  verificationMaterial?: Record<string, any>;
                  dsseEnvelope?: Record<string, any>;
                };
                repository_id?: number;
                bundle_url?: string;
              }[]
            | null
          >;
          /** Information about the current page. */
          page_info?: {
            /** Indicates whether there is a next page. */
            has_next?: boolean;
            /** Indicates whether there is a previous page. */
            has_previous?: boolean;
            /** The cursor to the next page. */
            next?: string;
            /** The cursor to the previous page. */
            previous?: string;
          };
        },
        any
      >({
        path: `/users/${username}/attestations/bulk-list`,
        method: "POST",
        query: query,
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete artifact attestations in bulk by either subject digests or unique ID.
     *
     * @tags users
     * @name UsersDeleteAttestationsBulk
     * @summary Delete attestations in bulk
     * @request POST:/users/{username}/attestations/delete-request
     */
    usersDeleteAttestationsBulk: (
      username: string,
      data:
        | {
            /**
             * List of subject digests associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            subject_digests: string[];
          }
        | {
            /**
             * List of unique IDs associated with the artifact attestations to delete.
             * @maxItems 1024
             * @minItems 1
             */
            attestation_ids: number[];
          },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/users/${username}/attestations/delete-request`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Delete an artifact attestation by subject digest.
     *
     * @tags users
     * @name UsersDeleteAttestationsBySubjectDigest
     * @summary Delete attestations by subject digest
     * @request DELETE:/users/{username}/attestations/digest/{subject_digest}
     */
    usersDeleteAttestationsBySubjectDigest: (username: string, subjectDigest: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/users/${username}/attestations/digest/${subjectDigest}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Delete an artifact attestation by unique ID that is associated with a repository owned by a user.
     *
     * @tags users
     * @name UsersDeleteAttestationsById
     * @summary Delete attestations by ID
     * @request DELETE:/users/{username}/attestations/{attestation_id}
     */
    usersDeleteAttestationsById: (username: string, attestationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: `/users/${username}/attestations/${attestationId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user. The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required. **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
     *
     * @tags users
     * @name UsersListAttestations
     * @summary List attestations
     * @request GET:/users/{username}/attestations/{subject_digest}
     */
    usersListAttestations: (
      username: string,
      subjectDigest: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        before?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
        after?: string;
        /**
         * Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          attestations?: {
            /**
             * The attestation's Sigstore Bundle.
             * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
             */
            bundle?: {
              mediaType?: string;
              verificationMaterial?: Record<string, any>;
              dsseEnvelope?: Record<string, any>;
            };
            repository_id?: number;
            bundle_url?: string;
          }[];
        },
        BasicError
      >({
        path: `/users/${username}/attestations/${subjectDigest}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
     *
     * @tags packages
     * @name PackagesListDockerMigrationConflictingPackagesForUser
     * @summary Get list of conflicting packages during Docker migration for user
     * @request GET:/users/{username}/docker/conflicts
     */
    packagesListDockerMigrationConflictingPackagesForUser: (username: string, params: RequestParams = {}) =>
      this.request<Package[], BasicError>({
        path: `/users/${username}/docker/conflicts`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: "Events" user permissions (read). > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListEventsForAuthenticatedUser
     * @summary List events for the authenticated user
     * @request GET:/users/{username}/events
     */
    activityListEventsForAuthenticatedUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/users/${username}/events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This is the user's organization dashboard. You must be authenticated as the user to view this. > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListOrgEventsForAuthenticatedUser
     * @summary List organization events for the authenticated user
     * @request GET:/users/{username}/events/orgs/{org}
     */
    activityListOrgEventsForAuthenticatedUser: (
      username: string,
      org: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/users/${username}/events/orgs/${org}`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListPublicEventsForUser
     * @summary List public events for a user
     * @request GET:/users/{username}/events/public
     */
    activityListPublicEventsForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/users/${username}/events/public`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people following the specified user.
     *
     * @tags users
     * @name UsersListFollowersForUser
     * @summary List followers of a user
     * @request GET:/users/{username}/followers
     */
    usersListFollowersForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/users/${username}/followers`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people who the specified user follows.
     *
     * @tags users
     * @name UsersListFollowingForUser
     * @summary List the people a user follows
     * @request GET:/users/{username}/following
     */
    usersListFollowingForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: `/users/${username}/following`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersCheckFollowingForUser
     * @summary Check if a user follows another user
     * @request GET:/users/{username}/following/{target_user}
     */
    usersCheckFollowingForUser: (username: string, targetUser: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: `/users/${username}/following/${targetUser}`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Lists public gists for the specified user:
     *
     * @tags gists
     * @name GistsListForUser
     * @summary List gists for a user
     * @request GET:/users/{username}/gists
     */
    gistsListForUser: (
      username: string,
      query?: {
        /**
         * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         * @format date-time
         */
        since?: string;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], ValidationError>({
        path: `/users/${username}/gists`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the GPG keys for a user. This information is accessible by anyone.
     *
     * @tags users
     * @name UsersListGpgKeysForUser
     * @summary List GPG keys for a user
     * @request GET:/users/{username}/gpg_keys
     */
    usersListGpgKeysForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GpgKey[], any>({
        path: `/users/${username}/gpg_keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations. The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository). OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     *
     * @tags users
     * @name UsersGetContextForUser
     * @summary Get contextual information for a user
     * @request GET:/users/{username}/hovercard
     */
    usersGetContextForUser: (
      username: string,
      query?: {
        /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
        subject_type?: "organization" | "repository" | "issue" | "pull_request";
        /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
        subject_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Hovercard, BasicError | ValidationError>({
        path: `/users/${username}/hovercard`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find the user’s installation information. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetUserInstallation
     * @summary Get a user installation for the authenticated app
     * @request GET:/users/{username}/installation
     */
    appsGetUserInstallation: (username: string, params: RequestParams = {}) =>
      this.request<Installation, any>({
        path: `/users/${username}/installation`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     *
     * @tags users
     * @name UsersListPublicKeysForUser
     * @summary List public keys for a user
     * @request GET:/users/{username}/keys
     */
    usersListPublicKeysForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<KeySimple[], any>({
        path: `/users/${username}/keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user. This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
     *
     * @tags orgs
     * @name OrgsListForUser
     * @summary List organizations for a user
     * @request GET:/users/{username}/orgs
     */
    orgsListForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationSimple[], any>({
        path: `/users/${username}/orgs`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all packages in a user's namespace for which the requesting user has access. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesListPackagesForUser
     * @summary List packages for a user
     * @request GET:/users/{username}/packages
     */
    packagesListPackagesForUser: (
      username: string,
      query: {
        /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        /**
         * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
         *
         * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
         * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
         */
        visibility?: "public" | "private" | "internal";
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Package[], BasicError>({
        path: `/users/${username}/packages`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific package metadata for a public package owned by a user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetPackageForUser
     * @summary Get a package for a user
     * @request GET:/users/{username}/packages/{package_type}/{package_name}
     */
    packagesGetPackageForUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      username: string,
      params: RequestParams = {},
    ) =>
      this.request<Package, any>({
        path: `/users/${username}/packages/${packageType}/${packageName}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesDeletePackageForUser
     * @summary Delete a package for a user
     * @request DELETE:/users/{username}/packages/{package_type}/{package_name}
     */
    packagesDeletePackageForUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      username: string,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/users/${username}/packages/${packageType}/${packageName}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Restores an entire package for a user. You can restore a deleted package under the following conditions: - The package was deleted within the last 30 days. - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesRestorePackageForUser
     * @summary Restore a package for a user
     * @request POST:/users/{username}/packages/{package_type}/{package_name}/restore
     */
    packagesRestorePackageForUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      username: string,
      query?: {
        /** package token */
        token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/users/${username}/packages/${packageType}/${packageName}/restore`,
        method: "POST",
        query: query,
        ...params,
      }),

    /**
     * @description Lists package versions for a public package owned by a specified user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetAllPackageVersionsForPackageOwnedByUser
     * @summary List package versions for a package owned by a user
     * @request GET:/users/{username}/packages/{package_type}/{package_name}/versions
     */
    packagesGetAllPackageVersionsForPackageOwnedByUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      username: string,
      params: RequestParams = {},
    ) =>
      this.request<PackageVersion[], BasicError>({
        path: `/users/${username}/packages/${packageType}/${packageName}/versions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific package version for a public package owned by a specified user. OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesGetPackageVersionForUser
     * @summary Get a package version for a user
     * @request GET:/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
     */
    packagesGetPackageVersionForUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      packageVersionId: number,
      username: string,
      params: RequestParams = {},
    ) =>
      this.request<PackageVersion, any>({
        path: `/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesDeletePackageVersionForUser
     * @summary Delete package version for a user
     * @request DELETE:/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
     */
    packagesDeletePackageVersionForUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      username: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Restores a specific package version for a user. You can restore a deleted package under the following conditions: - The package was deleted within the last 30 days. - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
     *
     * @tags packages
     * @name PackagesRestorePackageVersionForUser
     * @summary Restore package version for a user
     * @request POST:/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
     */
    packagesRestorePackageVersionForUser: (
      packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
      packageName: string,
      username: string,
      packageVersionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError>({
        path: `/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`,
        method: "POST",
        ...params,
      }),

    /**
     * @description > [!WARNING] > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience. > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
     *
     * @tags projects
     * @name ProjectsListForUser
     * @summary List user projects
     * @request GET:/users/{username}/projects
     * @deprecated
     */
    projectsListForUser: (
      username: string,
      query?: {
        /**
         * Indicates the state of the projects to return.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project[], ValidationError>({
        path: `/users/${username}/projects`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description These are events that you've received by watching repositories and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListReceivedEventsForUser
     * @summary List events received by the authenticated user
     * @request GET:/users/{username}/received_events
     */
    activityListReceivedEventsForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/users/${username}/received_events`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description > [!NOTE] > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
     *
     * @tags activity
     * @name ActivityListReceivedPublicEventsForUser
     * @summary List public events received by a user
     * @request GET:/users/{username}/received_events/public
     */
    activityListReceivedPublicEventsForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: `/users/${username}/received_events/public`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists public repositories for the specified user.
     *
     * @tags repos
     * @name ReposListForUser
     * @summary List repositories for a user
     * @request GET:/users/{username}/repos
     */
    reposListForUser: (
      username: string,
      query?: {
        /**
         * Limit results to repositories of the specified type.
         * @default "owner"
         */
        type?: "all" | "owner" | "member";
        /**
         * The property to sort the results by.
         * @default "full_name"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: `/users/${username}/repos`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the summary of the free and paid GitHub Actions minutes used. Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags billing
     * @name BillingGetGithubActionsBillingUser
     * @summary Get GitHub Actions billing for a user
     * @request GET:/users/{username}/settings/billing/actions
     */
    billingGetGithubActionsBillingUser: (username: string, params: RequestParams = {}) =>
      this.request<ActionsBillingUsage, any>({
        path: `/users/${username}/settings/billing/actions`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the free and paid storage used for GitHub Packages in gigabytes. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags billing
     * @name BillingGetGithubPackagesBillingUser
     * @summary Get GitHub Packages billing for a user
     * @request GET:/users/{username}/settings/billing/packages
     */
    billingGetGithubPackagesBillingUser: (username: string, params: RequestParams = {}) =>
      this.request<PackagesBillingUsage, any>({
        path: `/users/${username}/settings/billing/packages`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
     *
     * @tags billing
     * @name BillingGetSharedStorageBillingUser
     * @summary Get shared storage billing for a user
     * @request GET:/users/{username}/settings/billing/shared-storage
     */
    billingGetSharedStorageBillingUser: (username: string, params: RequestParams = {}) =>
      this.request<CombinedBillingUsage, any>({
        path: `/users/${username}/settings/billing/shared-storage`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a report of the total usage for a user. **Note:** This endpoint is only available to users with access to the enhanced billing platform.
     *
     * @tags billing
     * @name BillingGetGithubBillingUsageReportUser
     * @summary Get billing usage report for a user
     * @request GET:/users/{username}/settings/billing/usage
     */
    billingGetGithubBillingUsageReportUser: (
      username: string,
      query?: {
        /** If specified, only return results for a single year. The value of `year` is an integer with four digits representing a year. For example, `2025`. Default value is the current year. */
        year?: number;
        /** If specified, only return results for a single month. The value of `month` is an integer between `1` and `12`. If no year is specified the default `year` is used. */
        month?: number;
        /** If specified, only return results for a single day. The value of `day` is an integer between `1` and `31`. If no `year` or `month` is specified, the default `year` and `month` are used. */
        day?: number;
        /** If specified, only return results for a single hour. The value of `hour` is an integer between `0` and `23`. If no `year`, `month`, or `day` is specified, the default `year`, `month`, and `day` are used. */
        hour?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        BillingUsageReportUser,
        | BasicError
        | {
            code?: string;
            message?: string;
            documentation_url?: string;
          }
      >({
        path: `/users/${username}/settings/billing/usage`,
        method: "GET",
        query: query,
        ...params,
      }),

    /**
     * @description Lists social media accounts for a user. This endpoint is accessible by anyone.
     *
     * @tags users
     * @name UsersListSocialAccountsForUser
     * @summary List social accounts for a user
     * @request GET:/users/{username}/social_accounts
     */
    usersListSocialAccountsForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SocialAccount[], any>({
        path: `/users/${username}/social_accounts`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the SSH signing keys for a user. This operation is accessible by anyone.
     *
     * @tags users
     * @name UsersListSshSigningKeysForUser
     * @summary List SSH signing keys for a user
     * @request GET:/users/{username}/ssh_signing_keys
     */
    usersListSshSigningKeysForUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SshSigningKey[], any>({
        path: `/users/${username}/ssh_signing_keys`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories a user has starred. This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
     *
     * @tags activity
     * @name ActivityListReposStarredByUser
     * @summary List repositories starred by a user
     * @request GET:/users/{username}/starred
     */
    activityListReposStarredByUser: (
      username: string,
      query?: {
        /**
         * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
         * @default "created"
         */
        sort?: "created" | "updated";
        /**
         * The direction to sort the results by.
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<StarredRepository[] | Repository[], any>({
        path: `/users/${username}/starred`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories a user is watching.
     *
     * @tags activity
     * @name ActivityListReposWatchedByUser
     * @summary List repositories watched by a user
     * @request GET:/users/{username}/subscriptions
     */
    activityListReposWatchedByUser: (
      username: string,
      query?: {
        /**
         * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 30
         */
        per_page?: number;
        /**
         * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
         * @default 1
         */
        page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: `/users/${username}/subscriptions`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  versions = {
    /**
     * @description Get all supported GitHub API versions.
     *
     * @tags meta
     * @name MetaGetAllVersions
     * @summary Get all API versions
     * @request GET:/versions
     */
    metaGetAllVersions: (params: RequestParams = {}) =>
      this.request<string[], BasicError>({
        path: `/versions`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  zen = {
    /**
     * @description Get a random sentence from the Zen of GitHub
     *
     * @tags meta
     * @name MetaGetZen
     * @summary Get the Zen of GitHub
     * @request GET:/zen
     */
    metaGetZen: (params: RequestParams = {}) =>
      this.request<WebhookConfigUrl, any>({
        path: `/zen`,
        method: "GET",
        ...params,
      }),
  };
}
